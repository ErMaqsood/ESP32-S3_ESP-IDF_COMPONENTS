<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="sensirion__gas__index__algorithm_8c" kind="file" language="C++">
    <compoundname>sensirion_gas_index_algorithm.c</compoundname>
    <includes refid="sensirion__gas__index__algorithm_8h" local="yes">sensirion_gas_index_algorithm.h</includes>
    <includes local="no">math.h</includes>
    <incdepgraph>
      <node id="1">
        <label>components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.c</label>
        <link refid="sensirion__gas__index__algorithm_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>sensirion_gas_index_algorithm.h</label>
        <link refid="sensirion__gas__index__algorithm_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>math.h</label>
      </node>
      <node id="3">
        <label>stdint.h</label>
      </node>
    </incdepgraph>
    <sectiondef kind="func">
      <memberdef kind="function" id="sensirion__gas__index__algorithm_8c_1a397d7d403a9d2c5bcd2e14449c1e5d72" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void GasIndexAlgorithm__init_instances</definition>
        <argsstring>(GasIndexAlgorithmParams *params)</argsstring>
        <name>GasIndexAlgorithm__init_instances</name>
        <param>
          <type><ref refid="struct_gas_index_algorithm_params" kindref="compound">GasIndexAlgorithmParams</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.c" line="118" column="13" bodyfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.c" bodystart="118" bodyend="136" declfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.c" declline="37" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="sensirion__gas__index__algorithm_8c_1ac56b6c5cdc2106ee6c8272c14a26b5de" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void GasIndexAlgorithm__mean_variance_estimator__set_parameters</definition>
        <argsstring>(GasIndexAlgorithmParams *params)</argsstring>
        <name>GasIndexAlgorithm__mean_variance_estimator__set_parameters</name>
        <param>
          <type><ref refid="struct_gas_index_algorithm_params" kindref="compound">GasIndexAlgorithmParams</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.c" line="237" column="13" bodyfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.c" bodystart="237" bodyend="277" declfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.c" declline="38" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="sensirion__gas__index__algorithm_8c_1ad584f7a63655e56b81c3ea59885600e9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void GasIndexAlgorithm__mean_variance_estimator__set_states</definition>
        <argsstring>(GasIndexAlgorithmParams *params, float mean, float std, float uptime_gamma)</argsstring>
        <name>GasIndexAlgorithm__mean_variance_estimator__set_states</name>
        <param>
          <type><ref refid="struct_gas_index_algorithm_params" kindref="compound">GasIndexAlgorithmParams</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type>float</type>
          <declname>mean</declname>
        </param>
        <param>
          <type>float</type>
          <declname>std</declname>
        </param>
        <param>
          <type>float</type>
          <declname>uptime_gamma</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.c" line="279" column="13" bodyfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.c" bodystart="279" bodyend="287" declfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.c" declline="40" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="sensirion__gas__index__algorithm_8c_1afbdd0db9b25736cdd195820969e446ca" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>static float GasIndexAlgorithm__mean_variance_estimator__get_std</definition>
        <argsstring>(const GasIndexAlgorithmParams *params)</argsstring>
        <name>GasIndexAlgorithm__mean_variance_estimator__get_std</name>
        <param>
          <type>const <ref refid="struct_gas_index_algorithm_params" kindref="compound">GasIndexAlgorithmParams</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.c" line="289" column="14" bodyfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.c" bodystart="289" bodyend="293" declfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.c" declline="42" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="sensirion__gas__index__algorithm_8c_1a41fe8e07a7250730971b53dff4d38a95" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>static float GasIndexAlgorithm__mean_variance_estimator__get_mean</definition>
        <argsstring>(const GasIndexAlgorithmParams *params)</argsstring>
        <name>GasIndexAlgorithm__mean_variance_estimator__get_mean</name>
        <param>
          <type>const <ref refid="struct_gas_index_algorithm_params" kindref="compound">GasIndexAlgorithmParams</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.c" line="295" column="14" bodyfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.c" bodystart="295" bodyend="300" declfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.c" declline="44" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="sensirion__gas__index__algorithm_8c_1aaf0434f7b05de37874463cfc9e81a781" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool GasIndexAlgorithm__mean_variance_estimator__is_initialized</definition>
        <argsstring>(GasIndexAlgorithmParams *params)</argsstring>
        <name>GasIndexAlgorithm__mean_variance_estimator__is_initialized</name>
        <param>
          <type><ref refid="struct_gas_index_algorithm_params" kindref="compound">GasIndexAlgorithmParams</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.c" line="302" column="13" bodyfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.c" bodystart="302" bodyend="306" declfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.c" declline="46" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="sensirion__gas__index__algorithm_8c_1ab0f1954c23d7423ee1ed620c1c8579a4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void GasIndexAlgorithm__mean_variance_estimator___calculate_gamma</definition>
        <argsstring>(GasIndexAlgorithmParams *params)</argsstring>
        <name>GasIndexAlgorithm__mean_variance_estimator___calculate_gamma</name>
        <param>
          <type><ref refid="struct_gas_index_algorithm_params" kindref="compound">GasIndexAlgorithmParams</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.c" line="308" column="13" bodyfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.c" bodystart="308" bodyend="395" declfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.c" declline="48" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="sensirion__gas__index__algorithm_8c_1a9e24e62ad292cc74370e79554ad73e16" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void GasIndexAlgorithm__mean_variance_estimator__process</definition>
        <argsstring>(GasIndexAlgorithmParams *params, float sraw)</argsstring>
        <name>GasIndexAlgorithm__mean_variance_estimator__process</name>
        <param>
          <type><ref refid="struct_gas_index_algorithm_params" kindref="compound">GasIndexAlgorithmParams</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type>float</type>
          <declname>sraw</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.c" line="397" column="13" bodyfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.c" bodystart="397" bodyend="447" declfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.c" declline="50" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="sensirion__gas__index__algorithm_8c_1a658383ce805c41e9d0bddc9db416c1ee" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters</definition>
        <argsstring>(GasIndexAlgorithmParams *params, float X0, float K)</argsstring>
        <name>GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters</name>
        <param>
          <type><ref refid="struct_gas_index_algorithm_params" kindref="compound">GasIndexAlgorithmParams</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type>float</type>
          <declname>X0</declname>
        </param>
        <param>
          <type>float</type>
          <declname>K</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.c" line="450" column="1" bodyfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.c" bodystart="450" bodyend="455" declfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.c" declline="53" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="sensirion__gas__index__algorithm_8c_1aa9a8c2939c0c233b98c77cf4a1620bfc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>static float GasIndexAlgorithm__mean_variance_estimator___sigmoid__process</definition>
        <argsstring>(GasIndexAlgorithmParams *params, float sample)</argsstring>
        <name>GasIndexAlgorithm__mean_variance_estimator___sigmoid__process</name>
        <param>
          <type><ref refid="struct_gas_index_algorithm_params" kindref="compound">GasIndexAlgorithmParams</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type>float</type>
          <declname>sample</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.c" line="457" column="14" bodyfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.c" bodystart="457" bodyend="471" declfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.c" declline="55" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="sensirion__gas__index__algorithm_8c_1a3efc6d8c1f35895872a468c598fadfca" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void GasIndexAlgorithm__mox_model__set_parameters</definition>
        <argsstring>(GasIndexAlgorithmParams *params, float SRAW_STD, float SRAW_MEAN)</argsstring>
        <name>GasIndexAlgorithm__mox_model__set_parameters</name>
        <param>
          <type><ref refid="struct_gas_index_algorithm_params" kindref="compound">GasIndexAlgorithmParams</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type>float</type>
          <declname>SRAW_STD</declname>
        </param>
        <param>
          <type>float</type>
          <declname>SRAW_MEAN</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.c" line="474" column="1" bodyfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.c" bodystart="474" bodyend="479" declfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.c" declline="58" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="sensirion__gas__index__algorithm_8c_1ae29d2ef760b59544a7664a803c5bf03d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>static float GasIndexAlgorithm__mox_model__process</definition>
        <argsstring>(GasIndexAlgorithmParams *params, float sraw)</argsstring>
        <name>GasIndexAlgorithm__mox_model__process</name>
        <param>
          <type><ref refid="struct_gas_index_algorithm_params" kindref="compound">GasIndexAlgorithmParams</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type>float</type>
          <declname>sraw</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.c" line="482" column="1" bodyfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.c" bodystart="482" bodyend="495" declfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.c" declline="61" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="sensirion__gas__index__algorithm_8c_1a0a35ce6c230cc16e3104d692158b8d01" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void GasIndexAlgorithm__sigmoid_scaled__set_parameters</definition>
        <argsstring>(GasIndexAlgorithmParams *params, float X0, float K, float offset_default)</argsstring>
        <name>GasIndexAlgorithm__sigmoid_scaled__set_parameters</name>
        <param>
          <type><ref refid="struct_gas_index_algorithm_params" kindref="compound">GasIndexAlgorithmParams</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type>float</type>
          <declname>X0</declname>
        </param>
        <param>
          <type>float</type>
          <declname>K</declname>
        </param>
        <param>
          <type>float</type>
          <declname>offset_default</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.c" line="497" column="13" bodyfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.c" bodystart="497" bodyend="503" declfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.c" declline="63" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="sensirion__gas__index__algorithm_8c_1a0cece5c7d12eaf13e4b474eef42607fb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>static float GasIndexAlgorithm__sigmoid_scaled__process</definition>
        <argsstring>(GasIndexAlgorithmParams *params, float sample)</argsstring>
        <name>GasIndexAlgorithm__sigmoid_scaled__process</name>
        <param>
          <type><ref refid="struct_gas_index_algorithm_params" kindref="compound">GasIndexAlgorithmParams</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type>float</type>
          <declname>sample</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.c" line="506" column="1" bodyfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.c" bodystart="506" bodyend="534" declfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.c" declline="66" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="sensirion__gas__index__algorithm_8c_1a508ff5455a99b73c6fc474e35cf32412" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void GasIndexAlgorithm__adaptive_lowpass__set_parameters</definition>
        <argsstring>(GasIndexAlgorithmParams *params)</argsstring>
        <name>GasIndexAlgorithm__adaptive_lowpass__set_parameters</name>
        <param>
          <type><ref refid="struct_gas_index_algorithm_params" kindref="compound">GasIndexAlgorithmParams</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.c" line="536" column="13" bodyfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.c" bodystart="536" bodyend="546" declfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.c" declline="68" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="sensirion__gas__index__algorithm_8c_1ae816153d872a093c094423b2d7e1b79d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>static float GasIndexAlgorithm__adaptive_lowpass__process</definition>
        <argsstring>(GasIndexAlgorithmParams *params, float sample)</argsstring>
        <name>GasIndexAlgorithm__adaptive_lowpass__process</name>
        <param>
          <type><ref refid="struct_gas_index_algorithm_params" kindref="compound">GasIndexAlgorithmParams</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type>float</type>
          <declname>sample</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.c" line="549" column="1" bodyfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.c" bodystart="549" bodyend="584" declfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.c" declline="71" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="sensirion__gas__index__algorithm_8c_1aa5031aa985c972e4428bc9c8a73f0f49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void GasIndexAlgorithm_init_with_sampling_interval</definition>
        <argsstring>(GasIndexAlgorithmParams *params, int32_t algorithm_type, float sampling_interval)</argsstring>
        <name>GasIndexAlgorithm_init_with_sampling_interval</name>
        <param>
          <type><ref refid="struct_gas_index_algorithm_params" kindref="compound">GasIndexAlgorithmParams</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>algorithm_type</declname>
        </param>
        <param>
          <type>float</type>
          <declname>sampling_interval</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialize the gas index algorithm parameters for the specified algorithm type and reset its internal states. Call this once at the beginning. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <ref refid="struct_gas_index_algorithm_params" kindref="compound">GasIndexAlgorithmParams</ref> struct </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>algorithm_type</parametername>
</parameternamelist>
<parameterdescription>
<para>0 (GasIndexAlgorithm_ALGORITHM_TYPE_VOC) for VOC or 1 (GasIndexAlgorithm_ALGORITHM_TYPE_NOX) for NOx </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sampling_interval</parametername>
</parameternamelist>
<parameterdescription>
<para>The sampling interval in seconds the algorithm is called. Tested for 1s and 10s. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.c" line="74" column="6" bodyfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.c" bodystart="74" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="sensirion__gas__index__algorithm_8c_1a39e8ff626b9de149244ea53418b97f47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void GasIndexAlgorithm_init</definition>
        <argsstring>(GasIndexAlgorithmParams *params, int32_t algorithm_type)</argsstring>
        <name>GasIndexAlgorithm_init</name>
        <param>
          <type><ref refid="struct_gas_index_algorithm_params" kindref="compound">GasIndexAlgorithmParams</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>algorithm_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialize the gas index algorithm parameters for the specified algorithm type and reset its internal states. Call this once at the beginning. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <ref refid="struct_gas_index_algorithm_params" kindref="compound">GasIndexAlgorithmParams</ref> struct </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>algorithm_type</parametername>
</parameternamelist>
<parameterdescription>
<para>0 (GasIndexAlgorithm_ALGORITHM_TYPE_VOC) for VOC or 1 (GasIndexAlgorithm_ALGORITHM_TYPE_NOX) for NOx </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.c" line="105" column="6" bodyfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.c" bodystart="105" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="sensirion__gas__index__algorithm_8c_1a384a6c2521ab3ffea737ca6aca9ba95a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void GasIndexAlgorithm_reset</definition>
        <argsstring>(GasIndexAlgorithmParams *params)</argsstring>
        <name>GasIndexAlgorithm_reset</name>
        <param>
          <type><ref refid="struct_gas_index_algorithm_params" kindref="compound">GasIndexAlgorithmParams</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reset the internal states of the gas index algorithm. Previously set tuning parameters are preserved. Call this when resuming operation after a measurement interruption. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <ref refid="struct_gas_index_algorithm_params" kindref="compound">GasIndexAlgorithmParams</ref> struct </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.c" line="111" column="6" bodyfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.c" bodystart="111" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="sensirion__gas__index__algorithm_8c_1a52bb483ecbb1f70efe8d353219e5ae22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void GasIndexAlgorithm_get_sampling_interval</definition>
        <argsstring>(const GasIndexAlgorithmParams *params, float *sampling_interval)</argsstring>
        <name>GasIndexAlgorithm_get_sampling_interval</name>
        <param>
          <type>const <ref refid="struct_gas_index_algorithm_params" kindref="compound">GasIndexAlgorithmParams</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>sampling_interval</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the sampling interval parameter used by the algorithm. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.c" line="138" column="6" bodyfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.c" bodystart="138" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="sensirion__gas__index__algorithm_8c_1ae0454dee5140c70072c0bd59f168f4bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void GasIndexAlgorithm_get_states</definition>
        <argsstring>(const GasIndexAlgorithmParams *params, float *state0, float *state1)</argsstring>
        <name>GasIndexAlgorithm_get_states</name>
        <param>
          <type>const <ref refid="struct_gas_index_algorithm_params" kindref="compound">GasIndexAlgorithmParams</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>state0</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>state1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get current algorithm states. Retrieved values can be used in GasIndexAlgorithm_set_states() to resume operation after a short interruption, skipping initial learning phase. NOTE: This feature can only be used for VOC algorithm type and after at least 3 hours of continuous operation. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <ref refid="struct_gas_index_algorithm_params" kindref="compound">GasIndexAlgorithmParams</ref> struct </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>state0</parametername>
</parameternamelist>
<parameterdescription>
<para>State0 to be stored </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>state1</parametername>
</parameternamelist>
<parameterdescription>
<para>State1 to be stored </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.c" line="143" column="6" bodyfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.c" bodystart="143" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="sensirion__gas__index__algorithm_8c_1a96468fc0a7cd6e1a12025a62dffdd0fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void GasIndexAlgorithm_set_states</definition>
        <argsstring>(GasIndexAlgorithmParams *params, float state0, float state1)</argsstring>
        <name>GasIndexAlgorithm_set_states</name>
        <param>
          <type><ref refid="struct_gas_index_algorithm_params" kindref="compound">GasIndexAlgorithmParams</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type>float</type>
          <declname>state0</declname>
        </param>
        <param>
          <type>float</type>
          <declname>state1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set previously retrieved algorithm states to resume operation after a short interruption, skipping initial learning phase. This feature should not be used after interruptions of more than 10 minutes. Call this once after GasIndexAlgorithm_init() or GasIndexAlgorithm_reset() and the optional GasIndexAlgorithm_set_tuning_parameters(), if desired. Otherwise, the algorithm will start with initial learning phase. NOTE: This feature can only be used for VOC algorithm type. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <ref refid="struct_gas_index_algorithm_params" kindref="compound">GasIndexAlgorithmParams</ref> struct </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>state0</parametername>
</parameternamelist>
<parameterdescription>
<para>State0 to be restored </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>state1</parametername>
</parameternamelist>
<parameterdescription>
<para>State1 to be restored </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.c" line="151" column="6" bodyfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.c" bodystart="151" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="sensirion__gas__index__algorithm_8c_1a4bef9d1a53546711018b907cea278dac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void GasIndexAlgorithm_set_tuning_parameters</definition>
        <argsstring>(GasIndexAlgorithmParams *params, int32_t index_offset, int32_t learning_time_offset_hours, int32_t learning_time_gain_hours, int32_t gating_max_duration_minutes, int32_t std_initial, int32_t gain_factor)</argsstring>
        <name>GasIndexAlgorithm_set_tuning_parameters</name>
        <param>
          <type><ref refid="struct_gas_index_algorithm_params" kindref="compound">GasIndexAlgorithmParams</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>index_offset</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>learning_time_offset_hours</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>learning_time_gain_hours</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>gating_max_duration_minutes</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>std_initial</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>gain_factor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set parameters to customize the gas index algorithm. Call this once after GasIndexAlgorithm_init() and before optional GasIndexAlgorithm_set_states(), if desired. Otherwise, the default values will be used.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <ref refid="struct_gas_index_algorithm_params" kindref="compound">GasIndexAlgorithmParams</ref> struct </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index_offset</parametername>
</parameternamelist>
<parameterdescription>
<para>Gas index representing typical (average) conditions. Range 1..250, default 100 for VOC and 1 for NOx </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>learning_time_offset_hours</parametername>
</parameternamelist>
<parameterdescription>
<para>Time constant of long-term estimator for offset. Past events will be forgotten after about twice the learning time. Range 1..1000 [hours], default 12 [hours] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>learning_time_gain_hours</parametername>
</parameternamelist>
<parameterdescription>
<para>Time constant of long-term estimator for gain. Past events will be forgotten after about twice the learning time. Range 1..1000 [hours], default 12 [hours] NOTE: This value is not relevant for NOx algorithm type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gating_max_duration_minutes</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum duration of gating (freeze of estimator during high gas index signal). 0 (no gating) or range 1..3000 [minutes], default 180 [minutes] for VOC and 720 [minutes] for NOx </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>std_initial</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial estimate for standard deviation. Lower value boosts events during initial learning period, but may result in larger device-to-device variations. Range 10..5000, default 50 NOTE: This value is not relevant for NOx algorithm type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gain_factor</parametername>
</parameternamelist>
<parameterdescription>
<para>Factor used to scale applied gain value when calculating gas index. Range 1..1000, default 230 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.c" line="162" column="6" bodyfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.c" bodystart="162" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="sensirion__gas__index__algorithm_8c_1a409f98c042ef6e200fb8c735e521664c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void GasIndexAlgorithm_get_tuning_parameters</definition>
        <argsstring>(const GasIndexAlgorithmParams *params, int32_t *index_offset, int32_t *learning_time_offset_hours, int32_t *learning_time_gain_hours, int32_t *gating_max_duration_minutes, int32_t *std_initial, int32_t *gain_factor)</argsstring>
        <name>GasIndexAlgorithm_get_tuning_parameters</name>
        <param>
          <type>const <ref refid="struct_gas_index_algorithm_params" kindref="compound">GasIndexAlgorithmParams</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>index_offset</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>learning_time_offset_hours</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>learning_time_gain_hours</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>gating_max_duration_minutes</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>std_initial</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>gain_factor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get current parameters to customize the gas index algorithm. Refer to GasIndexAlgorithm_set_tuning_parameters() for description of the parameters. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.c" line="178" column="6" bodyfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.c" bodystart="178" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="sensirion__gas__index__algorithm_8c_1a4be92e48685ba183966d2612ce33528c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void GasIndexAlgorithm_process</definition>
        <argsstring>(GasIndexAlgorithmParams *params, int32_t sraw, int32_t *gas_index)</argsstring>
        <name>GasIndexAlgorithm_process</name>
        <param>
          <type><ref refid="struct_gas_index_algorithm_params" kindref="compound">GasIndexAlgorithmParams</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>sraw</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>gas_index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate the gas index value from the raw sensor value.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <ref refid="struct_gas_index_algorithm_params" kindref="compound">GasIndexAlgorithmParams</ref> struct </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sraw</parametername>
</parameternamelist>
<parameterdescription>
<para>Raw value from the SGP4x sensor </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gas_index</parametername>
</parameternamelist>
<parameterdescription>
<para>Calculated gas index value from the raw sensor value. Zero during initial blackout period and 1..500 afterwards </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.c" line="194" column="6" bodyfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.c" bodystart="194" bodyend="235"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2022,<sp/>Sensirion<sp/>AG</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright<sp/>notice,<sp/>this</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/><sp/><sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright<sp/>notice,</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/><sp/><sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the<sp/>documentation</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>*<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Sensirion<sp/>AG<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/><sp/><sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/><sp/><sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>HOLDER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>https://github.com/Sensirion/gas-index-algorithm/blob/master/README.md</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;sensirion_gas_index_algorithm.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GasIndexAlgorithm__init_instances(<ref refid="struct_gas_index_algorithm_params" kindref="compound">GasIndexAlgorithmParams</ref>*<sp/>params);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GasIndexAlgorithm__mean_variance_estimator__set_parameters(</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_gas_index_algorithm_params" kindref="compound">GasIndexAlgorithmParams</ref>*<sp/>params);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GasIndexAlgorithm__mean_variance_estimator__set_states(</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_gas_index_algorithm_params" kindref="compound">GasIndexAlgorithmParams</ref>*<sp/>params,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>mean,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>std,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>uptime_gamma);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>GasIndexAlgorithm__mean_variance_estimator__get_std(</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_gas_index_algorithm_params" kindref="compound">GasIndexAlgorithmParams</ref>*<sp/>params);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>GasIndexAlgorithm__mean_variance_estimator__get_mean(</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_gas_index_algorithm_params" kindref="compound">GasIndexAlgorithmParams</ref>*<sp/>params);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>GasIndexAlgorithm__mean_variance_estimator__is_initialized(</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_gas_index_algorithm_params" kindref="compound">GasIndexAlgorithmParams</ref>*<sp/>params);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_gas_index_algorithm_params" kindref="compound">GasIndexAlgorithmParams</ref>*<sp/>params);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GasIndexAlgorithm__mean_variance_estimator__process(</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_gas_index_algorithm_params" kindref="compound">GasIndexAlgorithmParams</ref>*<sp/>params,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>sraw);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal">GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_gas_index_algorithm_params" kindref="compound">GasIndexAlgorithmParams</ref>*<sp/>params,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>X0,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>K);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_gas_index_algorithm_params" kindref="compound">GasIndexAlgorithmParams</ref>*<sp/>params,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>sample);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal">GasIndexAlgorithm__mox_model__set_parameters(<ref refid="struct_gas_index_algorithm_params" kindref="compound">GasIndexAlgorithmParams</ref>*<sp/>params,</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>SRAW_STD,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>SRAW_MEAN);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal">GasIndexAlgorithm__mox_model__process(<ref refid="struct_gas_index_algorithm_params" kindref="compound">GasIndexAlgorithmParams</ref>*<sp/>params,</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>sraw);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GasIndexAlgorithm__sigmoid_scaled__set_parameters(</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_gas_index_algorithm_params" kindref="compound">GasIndexAlgorithmParams</ref>*<sp/>params,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>X0,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>K,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>offset_default);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal">GasIndexAlgorithm__sigmoid_scaled__process(<ref refid="struct_gas_index_algorithm_params" kindref="compound">GasIndexAlgorithmParams</ref>*<sp/>params,</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>sample);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GasIndexAlgorithm__adaptive_lowpass__set_parameters(</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_gas_index_algorithm_params" kindref="compound">GasIndexAlgorithmParams</ref>*<sp/>params);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal">GasIndexAlgorithm__adaptive_lowpass__process(<ref refid="struct_gas_index_algorithm_params" kindref="compound">GasIndexAlgorithmParams</ref>*<sp/>params,</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>sample);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GasIndexAlgorithm_init_with_sampling_interval(</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_gas_index_algorithm_params" kindref="compound">GasIndexAlgorithmParams</ref>*<sp/>params,<sp/>int32_t<sp/>algorithm_type,</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>sampling_interval)<sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>params-&gt;mAlgorithm_Type<sp/>=<sp/>algorithm_type;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>params-&gt;mSamplingInterval<sp/>=<sp/>sampling_interval;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((algorithm_type<sp/>==<sp/>GasIndexAlgorithm_ALGORITHM_TYPE_NOX))<sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params-&gt;mIndex_Offset<sp/>=<sp/>GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params-&gt;mSraw_Minimum<sp/>=<sp/>GasIndexAlgorithm_NOX_SRAW_MINIMUM;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params-&gt;mGating_Max_Duration_Minutes<sp/>=</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GasIndexAlgorithm_GATING_NOX_MAX_DURATION_MINUTES;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params-&gt;mInit_Duration_Mean<sp/>=<sp/>GasIndexAlgorithm_INIT_DURATION_MEAN_NOX;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params-&gt;mInit_Duration_Variance<sp/>=</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GasIndexAlgorithm_INIT_DURATION_VARIANCE_NOX;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params-&gt;mGating_Threshold<sp/>=<sp/>GasIndexAlgorithm_GATING_THRESHOLD_NOX;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params-&gt;mIndex_Offset<sp/>=<sp/>GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params-&gt;mSraw_Minimum<sp/>=<sp/>GasIndexAlgorithm_VOC_SRAW_MINIMUM;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params-&gt;mGating_Max_Duration_Minutes<sp/>=</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GasIndexAlgorithm_GATING_VOC_MAX_DURATION_MINUTES;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params-&gt;mInit_Duration_Mean<sp/>=<sp/>GasIndexAlgorithm_INIT_DURATION_MEAN_VOC;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params-&gt;mInit_Duration_Variance<sp/>=</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GasIndexAlgorithm_INIT_DURATION_VARIANCE_VOC;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params-&gt;mGating_Threshold<sp/>=<sp/>GasIndexAlgorithm_GATING_THRESHOLD_VOC;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>params-&gt;mIndex_Gain<sp/>=<sp/>GasIndexAlgorithm_INDEX_GAIN;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>params-&gt;mTau_Mean_Hours<sp/>=<sp/>GasIndexAlgorithm_TAU_MEAN_HOURS;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>params-&gt;mTau_Variance_Hours<sp/>=<sp/>GasIndexAlgorithm_TAU_VARIANCE_HOURS;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>params-&gt;mSraw_Std_Initial<sp/>=<sp/>GasIndexAlgorithm_SRAW_STD_INITIAL;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>GasIndexAlgorithm_reset(params);</highlight></codeline>
<codeline lineno="103"><highlight class="normal">}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GasIndexAlgorithm_init(<ref refid="struct_gas_index_algorithm_params" kindref="compound">GasIndexAlgorithmParams</ref>*<sp/>params,</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32_t<sp/>algorithm_type)<sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>GasIndexAlgorithm_init_with_sampling_interval(</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params,<sp/>algorithm_type,<sp/>GasIndexAlgorithm_DEFAULT_SAMPLING_INTERVAL);</highlight></codeline>
<codeline lineno="109"><highlight class="normal">}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GasIndexAlgorithm_reset(<ref refid="struct_gas_index_algorithm_params" kindref="compound">GasIndexAlgorithmParams</ref>*<sp/>params)<sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>params-&gt;mUptime<sp/>=<sp/>0.f;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>params-&gt;mSraw<sp/>=<sp/>0.f;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>params-&gt;mGas_Index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>GasIndexAlgorithm__init_instances(params);</highlight></codeline>
<codeline lineno="116"><highlight class="normal">}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GasIndexAlgorithm__init_instances(<ref refid="struct_gas_index_algorithm_params" kindref="compound">GasIndexAlgorithmParams</ref>*<sp/>params)<sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>GasIndexAlgorithm__mean_variance_estimator__set_parameters(params);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>GasIndexAlgorithm__mox_model__set_parameters(</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params,<sp/>GasIndexAlgorithm__mean_variance_estimator__get_std(params),</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GasIndexAlgorithm__mean_variance_estimator__get_mean(params));</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((params-&gt;mAlgorithm_Type<sp/>==<sp/>GasIndexAlgorithm_ALGORITHM_TYPE_NOX))<sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GasIndexAlgorithm__sigmoid_scaled__set_parameters(</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params,<sp/>GasIndexAlgorithm_SIGMOID_X0_NOX,</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GasIndexAlgorithm_SIGMOID_K_NOX,</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GasIndexAlgorithm__sigmoid_scaled__set_parameters(</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params,<sp/>GasIndexAlgorithm_SIGMOID_X0_VOC,</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GasIndexAlgorithm_SIGMOID_K_VOC,</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>GasIndexAlgorithm__adaptive_lowpass__set_parameters(params);</highlight></codeline>
<codeline lineno="136"><highlight class="normal">}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GasIndexAlgorithm_get_sampling_interval(</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_gas_index_algorithm_params" kindref="compound">GasIndexAlgorithmParams</ref>*<sp/>params,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>sampling_interval)<sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>*sampling_interval<sp/>=<sp/>params-&gt;mSamplingInterval;</highlight></codeline>
<codeline lineno="141"><highlight class="normal">}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GasIndexAlgorithm_get_states(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_gas_index_algorithm_params" kindref="compound">GasIndexAlgorithmParams</ref>*<sp/>params,</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>state0,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>state1)<sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>*state0<sp/>=<sp/>GasIndexAlgorithm__mean_variance_estimator__get_mean(params);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>*state1<sp/>=<sp/>GasIndexAlgorithm__mean_variance_estimator__get_std(params);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="149"><highlight class="normal">}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GasIndexAlgorithm_set_states(<ref refid="struct_gas_index_algorithm_params" kindref="compound">GasIndexAlgorithmParams</ref>*<sp/>params,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>state0,</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>state1)<sp/>{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>GasIndexAlgorithm__mean_variance_estimator__set_states(</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params,<sp/>state0,<sp/>state1,<sp/>GasIndexAlgorithm_PERSISTENCE_UPTIME_GAMMA);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>GasIndexAlgorithm__mox_model__set_parameters(</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params,<sp/>GasIndexAlgorithm__mean_variance_estimator__get_std(params),</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GasIndexAlgorithm__mean_variance_estimator__get_mean(params));</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>params-&gt;mSraw<sp/>=<sp/>state0;</highlight></codeline>
<codeline lineno="160"><highlight class="normal">}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GasIndexAlgorithm_set_tuning_parameters(</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_gas_index_algorithm_params" kindref="compound">GasIndexAlgorithmParams</ref>*<sp/>params,<sp/>int32_t<sp/>index_offset,</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>learning_time_offset_hours,<sp/>int32_t<sp/>learning_time_gain_hours,</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>gating_max_duration_minutes,<sp/>int32_t<sp/>std_initial,</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>gain_factor)<sp/>{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>params-&gt;mIndex_Offset<sp/>=<sp/>((float)(index_offset));</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>params-&gt;mTau_Mean_Hours<sp/>=<sp/>((float)(learning_time_offset_hours));</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>params-&gt;mTau_Variance_Hours<sp/>=<sp/>((float)(learning_time_gain_hours));</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>params-&gt;mGating_Max_Duration_Minutes<sp/>=</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((float)(gating_max_duration_minutes));</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>params-&gt;mSraw_Std_Initial<sp/>=<sp/>((float)(std_initial));</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>params-&gt;mIndex_Gain<sp/>=<sp/>((float)(gain_factor));</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>GasIndexAlgorithm__init_instances(params);</highlight></codeline>
<codeline lineno="176"><highlight class="normal">}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GasIndexAlgorithm_get_tuning_parameters(</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_gas_index_algorithm_params" kindref="compound">GasIndexAlgorithmParams</ref>*<sp/>params,<sp/>int32_t*<sp/>index_offset,</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t*<sp/>learning_time_offset_hours,<sp/>int32_t*<sp/>learning_time_gain_hours,</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t*<sp/>gating_max_duration_minutes,<sp/>int32_t*<sp/>std_initial,</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t*<sp/>gain_factor)<sp/>{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>*index_offset<sp/>=<sp/>((int32_t)(params-&gt;mIndex_Offset));</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>*learning_time_offset_hours<sp/>=<sp/>((int32_t)(params-&gt;mTau_Mean_Hours));</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>*learning_time_gain_hours<sp/>=<sp/>((int32_t)(params-&gt;mTau_Variance_Hours));</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>*gating_max_duration_minutes<sp/>=</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((int32_t)(params-&gt;mGating_Max_Duration_Minutes));</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>*std_initial<sp/>=<sp/>((int32_t)(params-&gt;mSraw_Std_Initial));</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>*gain_factor<sp/>=<sp/>((int32_t)(params-&gt;mIndex_Gain));</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="192"><highlight class="normal">}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GasIndexAlgorithm_process(<ref refid="struct_gas_index_algorithm_params" kindref="compound">GasIndexAlgorithmParams</ref>*<sp/>params,<sp/>int32_t<sp/>sraw,</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32_t*<sp/>gas_index)<sp/>{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((params-&gt;mUptime<sp/>&lt;=<sp/>GasIndexAlgorithm_INITIAL_BLACKOUT))<sp/>{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params-&gt;mUptime<sp/>=<sp/>(params-&gt;mUptime<sp/>+<sp/>params-&gt;mSamplingInterval);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(((sraw<sp/>&gt;<sp/>0)<sp/>&amp;&amp;<sp/>(sraw<sp/>&lt;<sp/>65000)))<sp/>{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((sraw<sp/>&lt;<sp/>(params-&gt;mSraw_Minimum<sp/>+<sp/>1)))<sp/>{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sraw<sp/>=<sp/>(params-&gt;mSraw_Minimum<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((sraw<sp/>&gt;<sp/>(params-&gt;mSraw_Minimum<sp/>+<sp/>32767)))<sp/>{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sraw<sp/>=<sp/>(params-&gt;mSraw_Minimum<sp/>+<sp/>32767);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params-&gt;mSraw<sp/>=<sp/>((float)((sraw<sp/>-<sp/>params-&gt;mSraw_Minimum)));</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(((params-&gt;mAlgorithm_Type<sp/>==</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GasIndexAlgorithm_ALGORITHM_TYPE_VOC)<sp/>||</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GasIndexAlgorithm__mean_variance_estimator__is_initialized(</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params)))<sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params-&gt;mGas_Index<sp/>=</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GasIndexAlgorithm__mox_model__process(params,<sp/>params-&gt;mSraw);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params-&gt;mGas_Index<sp/>=<sp/>GasIndexAlgorithm__sigmoid_scaled__process(</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params,<sp/>params-&gt;mGas_Index);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params-&gt;mGas_Index<sp/>=<sp/>params-&gt;mIndex_Offset;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params-&gt;mGas_Index<sp/>=<sp/>GasIndexAlgorithm__adaptive_lowpass__process(</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params,<sp/>params-&gt;mGas_Index);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((params-&gt;mGas_Index<sp/>&lt;<sp/>0.5f))<sp/>{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params-&gt;mGas_Index<sp/>=<sp/>0.5f;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((params-&gt;mSraw<sp/>&gt;<sp/>0.f))<sp/>{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GasIndexAlgorithm__mean_variance_estimator__process(params,</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params-&gt;mSraw);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GasIndexAlgorithm__mox_model__set_parameters(</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params,</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GasIndexAlgorithm__mean_variance_estimator__get_std(params),</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GasIndexAlgorithm__mean_variance_estimator__get_mean(params));</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>*gas_index<sp/>=<sp/>((int32_t)((params-&gt;mGas_Index<sp/>+<sp/>0.5f)));</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="235"><highlight class="normal">}</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GasIndexAlgorithm__mean_variance_estimator__set_parameters(</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_gas_index_algorithm_params" kindref="compound">GasIndexAlgorithmParams</ref>*<sp/>params)<sp/>{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>params-&gt;m_Mean_Variance_Estimator___Initialized<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>params-&gt;m_Mean_Variance_Estimator___Mean<sp/>=<sp/>0.f;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>params-&gt;m_Mean_Variance_Estimator___Sraw_Offset<sp/>=<sp/>0.f;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>params-&gt;m_Mean_Variance_Estimator___Std<sp/>=<sp/>params-&gt;mSraw_Std_Initial;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>params-&gt;m_Mean_Variance_Estimator___Gamma_Mean<sp/>=</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING<sp/>*</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING)<sp/>*</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(params-&gt;mSamplingInterval<sp/>/<sp/>3600.f))<sp/>/</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(params-&gt;mTau_Mean_Hours<sp/>+<sp/>(params-&gt;mSamplingInterval<sp/>/<sp/>3600.f)));</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>params-&gt;m_Mean_Variance_Estimator___Gamma_Variance<sp/>=</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING<sp/>*</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(params-&gt;mSamplingInterval<sp/>/<sp/>3600.f))<sp/>/</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(params-&gt;mTau_Variance_Hours<sp/>+<sp/>(params-&gt;mSamplingInterval<sp/>/<sp/>3600.f)));</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((params-&gt;mAlgorithm_Type<sp/>==<sp/>GasIndexAlgorithm_ALGORITHM_TYPE_NOX))<sp/>{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params-&gt;m_Mean_Variance_Estimator___Gamma_Initial_Mean<sp/>=</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING<sp/>*</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING)<sp/>*</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params-&gt;mSamplingInterval)<sp/>/</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX<sp/>+</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params-&gt;mSamplingInterval));</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params-&gt;m_Mean_Variance_Estimator___Gamma_Initial_Mean<sp/>=</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING<sp/>*</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING)<sp/>*</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params-&gt;mSamplingInterval)<sp/>/</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC<sp/>+</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params-&gt;mSamplingInterval));</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>params-&gt;m_Mean_Variance_Estimator___Gamma_Initial_Variance<sp/>=</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING<sp/>*</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params-&gt;mSamplingInterval)<sp/>/</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(GasIndexAlgorithm_TAU_INITIAL_VARIANCE<sp/>+<sp/>params-&gt;mSamplingInterval));</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>params-&gt;m_Mean_Variance_Estimator__Gamma_Mean<sp/>=<sp/>0.f;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>params-&gt;m_Mean_Variance_Estimator__Gamma_Variance<sp/>=<sp/>0.f;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>params-&gt;m_Mean_Variance_Estimator___Uptime_Gamma<sp/>=<sp/>0.f;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>params-&gt;m_Mean_Variance_Estimator___Uptime_Gating<sp/>=<sp/>0.f;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>params-&gt;m_Mean_Variance_Estimator___Gating_Duration_Minutes<sp/>=<sp/>0.f;</highlight></codeline>
<codeline lineno="277"><highlight class="normal">}</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GasIndexAlgorithm__mean_variance_estimator__set_states(</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_gas_index_algorithm_params" kindref="compound">GasIndexAlgorithmParams</ref>*<sp/>params,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>mean,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>std,</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>uptime_gamma)<sp/>{</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>params-&gt;m_Mean_Variance_Estimator___Mean<sp/>=<sp/>mean;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>params-&gt;m_Mean_Variance_Estimator___Std<sp/>=<sp/>std;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>params-&gt;m_Mean_Variance_Estimator___Uptime_Gamma<sp/>=<sp/>uptime_gamma;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>params-&gt;m_Mean_Variance_Estimator___Initialized<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="287"><highlight class="normal">}</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>GasIndexAlgorithm__mean_variance_estimator__get_std(</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_gas_index_algorithm_params" kindref="compound">GasIndexAlgorithmParams</ref>*<sp/>params)<sp/>{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>params-&gt;m_Mean_Variance_Estimator___Std;</highlight></codeline>
<codeline lineno="293"><highlight class="normal">}</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>GasIndexAlgorithm__mean_variance_estimator__get_mean(</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_gas_index_algorithm_params" kindref="compound">GasIndexAlgorithmParams</ref>*<sp/>params)<sp/>{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(params-&gt;m_Mean_Variance_Estimator___Mean<sp/>+</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params-&gt;m_Mean_Variance_Estimator___Sraw_Offset);</highlight></codeline>
<codeline lineno="300"><highlight class="normal">}</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>GasIndexAlgorithm__mean_variance_estimator__is_initialized(</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_gas_index_algorithm_params" kindref="compound">GasIndexAlgorithmParams</ref>*<sp/>params)<sp/>{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>params-&gt;m_Mean_Variance_Estimator___Initialized;</highlight></codeline>
<codeline lineno="306"><highlight class="normal">}</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_gas_index_algorithm_params" kindref="compound">GasIndexAlgorithmParams</ref>*<sp/>params)<sp/>{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>uptime_limit;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>sigmoid_gamma_mean;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>gamma_mean;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>gating_threshold_mean;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>sigmoid_gating_mean;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>sigmoid_gamma_variance;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>gamma_variance;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>gating_threshold_variance;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>sigmoid_gating_variance;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>uptime_limit<sp/>=<sp/>(GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX<sp/>-</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params-&gt;mSamplingInterval);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((params-&gt;m_Mean_Variance_Estimator___Uptime_Gamma<sp/>&lt;<sp/>uptime_limit))<sp/>{</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params-&gt;m_Mean_Variance_Estimator___Uptime_Gamma<sp/>=</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(params-&gt;m_Mean_Variance_Estimator___Uptime_Gamma<sp/>+</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params-&gt;mSamplingInterval);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((params-&gt;m_Mean_Variance_Estimator___Uptime_Gating<sp/>&lt;<sp/>uptime_limit))<sp/>{</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params-&gt;m_Mean_Variance_Estimator___Uptime_Gating<sp/>=</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(params-&gt;m_Mean_Variance_Estimator___Uptime_Gating<sp/>+</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params-&gt;mSamplingInterval);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/>GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params,<sp/>params-&gt;mInit_Duration_Mean,</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GasIndexAlgorithm_INIT_TRANSITION_MEAN);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>sigmoid_gamma_mean<sp/>=</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params,<sp/>params-&gt;m_Mean_Variance_Estimator___Uptime_Gamma);</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>gamma_mean<sp/>=<sp/>(params-&gt;m_Mean_Variance_Estimator___Gamma_Mean<sp/>+</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((params-&gt;m_Mean_Variance_Estimator___Gamma_Initial_Mean<sp/>-</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params-&gt;m_Mean_Variance_Estimator___Gamma_Mean)<sp/>*</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sigmoid_gamma_mean));</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/>gating_threshold_mean<sp/>=</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(params-&gt;mGating_Threshold<sp/>+</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL<sp/>-</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params-&gt;mGating_Threshold)<sp/>*</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params,<sp/>params-&gt;m_Mean_Variance_Estimator___Uptime_Gating)));</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params,<sp/>gating_threshold_mean,</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>sigmoid_gating_mean<sp/>=</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params,<sp/>params-&gt;mGas_Index);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>params-&gt;m_Mean_Variance_Estimator__Gamma_Mean<sp/>=</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(sigmoid_gating_mean<sp/>*<sp/>gamma_mean);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params,<sp/>params-&gt;mInit_Duration_Variance,</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GasIndexAlgorithm_INIT_TRANSITION_VARIANCE);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>sigmoid_gamma_variance<sp/>=</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params,<sp/>params-&gt;m_Mean_Variance_Estimator___Uptime_Gamma);</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/>gamma_variance<sp/>=</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(params-&gt;m_Mean_Variance_Estimator___Gamma_Variance<sp/>+</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((params-&gt;m_Mean_Variance_Estimator___Gamma_Initial_Variance<sp/>-</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params-&gt;m_Mean_Variance_Estimator___Gamma_Variance)<sp/>*</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(sigmoid_gamma_variance<sp/>-<sp/>sigmoid_gamma_mean)));</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/>gating_threshold_variance<sp/>=</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(params-&gt;mGating_Threshold<sp/>+</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL<sp/>-</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params-&gt;mGating_Threshold)<sp/>*</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params,<sp/>params-&gt;m_Mean_Variance_Estimator___Uptime_Gating)));</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/>GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params,<sp/>gating_threshold_variance,</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/>sigmoid_gating_variance<sp/>=</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params,<sp/>params-&gt;mGas_Index);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/>params-&gt;m_Mean_Variance_Estimator__Gamma_Variance<sp/>=</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(sigmoid_gating_variance<sp/>*<sp/>gamma_variance);</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/>params-&gt;m_Mean_Variance_Estimator___Gating_Duration_Minutes<sp/>=</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(params-&gt;m_Mean_Variance_Estimator___Gating_Duration_Minutes<sp/>+</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((params-&gt;mSamplingInterval<sp/>/<sp/>60.f)<sp/>*</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((1.f<sp/>-<sp/>sigmoid_gating_mean)<sp/>*</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1.f<sp/>+<sp/>GasIndexAlgorithm_GATING_MAX_RATIO))<sp/>-</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GasIndexAlgorithm_GATING_MAX_RATIO)));</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((params-&gt;m_Mean_Variance_Estimator___Gating_Duration_Minutes<sp/>&lt;<sp/>0.f))<sp/>{</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params-&gt;m_Mean_Variance_Estimator___Gating_Duration_Minutes<sp/>=<sp/>0.f;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((params-&gt;m_Mean_Variance_Estimator___Gating_Duration_Minutes<sp/>&gt;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params-&gt;mGating_Max_Duration_Minutes))<sp/>{</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params-&gt;m_Mean_Variance_Estimator___Uptime_Gating<sp/>=<sp/>0.f;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="395"><highlight class="normal">}</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GasIndexAlgorithm__mean_variance_estimator__process(</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_gas_index_algorithm_params" kindref="compound">GasIndexAlgorithmParams</ref>*<sp/>params,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>sraw)<sp/>{</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>delta_sgp;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>additional_scaling;</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((params-&gt;m_Mean_Variance_Estimator___Initialized<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params-&gt;m_Mean_Variance_Estimator___Initialized<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params-&gt;m_Mean_Variance_Estimator___Sraw_Offset<sp/>=<sp/>sraw;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params-&gt;m_Mean_Variance_Estimator___Mean<sp/>=<sp/>0.f;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(((params-&gt;m_Mean_Variance_Estimator___Mean<sp/>&gt;=<sp/>100.f)<sp/>||</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(params-&gt;m_Mean_Variance_Estimator___Mean<sp/>&lt;=<sp/>-100.f)))<sp/>{</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params-&gt;m_Mean_Variance_Estimator___Sraw_Offset<sp/>=</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(params-&gt;m_Mean_Variance_Estimator___Sraw_Offset<sp/>+</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params-&gt;m_Mean_Variance_Estimator___Mean);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params-&gt;m_Mean_Variance_Estimator___Mean<sp/>=<sp/>0.f;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sraw<sp/>=<sp/>(sraw<sp/>-<sp/>params-&gt;m_Mean_Variance_Estimator___Sraw_Offset);</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(params);</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>delta_sgp<sp/>=<sp/>((sraw<sp/>-<sp/>params-&gt;m_Mean_Variance_Estimator___Mean)<sp/>/</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING);</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((delta_sgp<sp/>&lt;<sp/>0.f))<sp/>{</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>(params-&gt;m_Mean_Variance_Estimator___Std<sp/>-<sp/>delta_sgp);</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>(params-&gt;m_Mean_Variance_Estimator___Std<sp/>+<sp/>delta_sgp);</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>additional_scaling<sp/>=<sp/>1.f;</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((c<sp/>&gt;<sp/>1440.f))<sp/>{</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>additional_scaling<sp/>=<sp/>((c<sp/>/<sp/>1440.f)<sp/>*<sp/>(c<sp/>/<sp/>1440.f));</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params-&gt;m_Mean_Variance_Estimator___Std<sp/>=</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(sqrtf((additional_scaling<sp/>*</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING<sp/>-</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params-&gt;m_Mean_Variance_Estimator__Gamma_Variance)))<sp/>*</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sqrtf(</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((params-&gt;m_Mean_Variance_Estimator___Std<sp/>*</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(params-&gt;m_Mean_Variance_Estimator___Std<sp/>/</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING<sp/>*</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>additional_scaling)))<sp/>+</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((params-&gt;m_Mean_Variance_Estimator__Gamma_Variance<sp/>*</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>delta_sgp)<sp/>/</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>additional_scaling)<sp/>*</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>delta_sgp))));</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params-&gt;m_Mean_Variance_Estimator___Mean<sp/>=</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(params-&gt;m_Mean_Variance_Estimator___Mean<sp/>+</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((params-&gt;m_Mean_Variance_Estimator__Gamma_Mean<sp/>*<sp/>delta_sgp)<sp/>/</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING));</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="447"><highlight class="normal">}</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal">GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_gas_index_algorithm_params" kindref="compound">GasIndexAlgorithmParams</ref>*<sp/>params,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>X0,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>K)<sp/>{</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/>params-&gt;m_Mean_Variance_Estimator___Sigmoid__K<sp/>=<sp/>K;</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/>params-&gt;m_Mean_Variance_Estimator___Sigmoid__X0<sp/>=<sp/>X0;</highlight></codeline>
<codeline lineno="455"><highlight class="normal">}</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_gas_index_algorithm_params" kindref="compound">GasIndexAlgorithmParams</ref>*<sp/>params,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>sample)<sp/>{</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>(params-&gt;m_Mean_Variance_Estimator___Sigmoid__K<sp/>*</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(sample<sp/>-<sp/>params-&gt;m_Mean_Variance_Estimator___Sigmoid__X0));</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((x<sp/>&lt;<sp/>-50.f))<sp/>{</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1.f;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((x<sp/>&gt;<sp/>50.f))<sp/>{</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0.f;</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(1.f<sp/>/<sp/>(1.f<sp/>+<sp/>expf(x)));</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="471"><highlight class="normal">}</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal">GasIndexAlgorithm__mox_model__set_parameters(<ref refid="struct_gas_index_algorithm_params" kindref="compound">GasIndexAlgorithmParams</ref>*<sp/>params,</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>SRAW_STD,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>SRAW_MEAN)<sp/>{</highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/>params-&gt;m_Mox_Model__Sraw_Std<sp/>=<sp/>SRAW_STD;</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/>params-&gt;m_Mox_Model__Sraw_Mean<sp/>=<sp/>SRAW_MEAN;</highlight></codeline>
<codeline lineno="479"><highlight class="normal">}</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal">GasIndexAlgorithm__mox_model__process(<ref refid="struct_gas_index_algorithm_params" kindref="compound">GasIndexAlgorithmParams</ref>*<sp/>params,</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>sraw)<sp/>{</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((params-&gt;mAlgorithm_Type<sp/>==<sp/>GasIndexAlgorithm_ALGORITHM_TYPE_NOX))<sp/>{</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(((sraw<sp/>-<sp/>params-&gt;m_Mox_Model__Sraw_Mean)<sp/>/</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GasIndexAlgorithm_SRAW_STD_NOX)<sp/>*</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params-&gt;mIndex_Gain);</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(((sraw<sp/>-<sp/>params-&gt;m_Mox_Model__Sraw_Mean)<sp/>/</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(-1.f<sp/>*<sp/>(params-&gt;m_Mox_Model__Sraw_Std<sp/>+</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GasIndexAlgorithm_SRAW_STD_BONUS_VOC)))<sp/>*</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params-&gt;mIndex_Gain);</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="495"><highlight class="normal">}</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GasIndexAlgorithm__sigmoid_scaled__set_parameters(</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_gas_index_algorithm_params" kindref="compound">GasIndexAlgorithmParams</ref>*<sp/>params,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>X0,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>K,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>offset_default)<sp/>{</highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/>params-&gt;m_Sigmoid_Scaled__K<sp/>=<sp/>K;</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/>params-&gt;m_Sigmoid_Scaled__X0<sp/>=<sp/>X0;</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/>params-&gt;m_Sigmoid_Scaled__Offset_Default<sp/>=<sp/>offset_default;</highlight></codeline>
<codeline lineno="503"><highlight class="normal">}</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal">GasIndexAlgorithm__sigmoid_scaled__process(<ref refid="struct_gas_index_algorithm_params" kindref="compound">GasIndexAlgorithmParams</ref>*<sp/>params,</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>sample)<sp/>{</highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>shift;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>(params-&gt;m_Sigmoid_Scaled__K<sp/>*<sp/>(sample<sp/>-<sp/>params-&gt;m_Sigmoid_Scaled__X0));</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((x<sp/>&lt;<sp/>-50.f))<sp/>{</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>GasIndexAlgorithm_SIGMOID_L;</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((x<sp/>&gt;<sp/>50.f))<sp/>{</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0.f;</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((sample<sp/>&gt;=<sp/>0.f))<sp/>{</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((params-&gt;m_Sigmoid_Scaled__Offset_Default<sp/>==<sp/>1.f))<sp/>{</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shift<sp/>=<sp/>((500.f<sp/>/<sp/>499.f)<sp/>*<sp/>(1.f<sp/>-<sp/>params-&gt;mIndex_Offset));</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shift<sp/>=<sp/>((GasIndexAlgorithm_SIGMOID_L<sp/>-</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(5.f<sp/>*<sp/>params-&gt;mIndex_Offset))<sp/>/</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>4.f);</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(((GasIndexAlgorithm_SIGMOID_L<sp/>+<sp/>shift)<sp/>/<sp/>(1.f<sp/>+<sp/>expf(x)))<sp/>-</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shift);</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((params-&gt;mIndex_Offset<sp/>/</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params-&gt;m_Sigmoid_Scaled__Offset_Default)<sp/>*</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(GasIndexAlgorithm_SIGMOID_L<sp/>/<sp/>(1.f<sp/>+<sp/>expf(x))));</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="534"><highlight class="normal">}</highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GasIndexAlgorithm__adaptive_lowpass__set_parameters(</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_gas_index_algorithm_params" kindref="compound">GasIndexAlgorithmParams</ref>*<sp/>params)<sp/>{</highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/>params-&gt;m_Adaptive_Lowpass__A1<sp/>=</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(params-&gt;mSamplingInterval<sp/>/</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(GasIndexAlgorithm_LP_TAU_FAST<sp/>+<sp/>params-&gt;mSamplingInterval));</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/>params-&gt;m_Adaptive_Lowpass__A2<sp/>=</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(params-&gt;mSamplingInterval<sp/>/</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(GasIndexAlgorithm_LP_TAU_SLOW<sp/>+<sp/>params-&gt;mSamplingInterval));</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/>params-&gt;m_Adaptive_Lowpass___Initialized<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="546"><highlight class="normal">}</highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal">GasIndexAlgorithm__adaptive_lowpass__process(<ref refid="struct_gas_index_algorithm_params" kindref="compound">GasIndexAlgorithmParams</ref>*<sp/>params,</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>sample)<sp/>{</highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>abs_delta;</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>F1;</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>tau_a;</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>a3;</highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((params-&gt;m_Adaptive_Lowpass___Initialized<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params-&gt;m_Adaptive_Lowpass___X1<sp/>=<sp/>sample;</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params-&gt;m_Adaptive_Lowpass___X2<sp/>=<sp/>sample;</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params-&gt;m_Adaptive_Lowpass___X3<sp/>=<sp/>sample;</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params-&gt;m_Adaptive_Lowpass___Initialized<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/>params-&gt;m_Adaptive_Lowpass___X1<sp/>=</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((1.f<sp/>-<sp/>params-&gt;m_Adaptive_Lowpass__A1)<sp/>*</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params-&gt;m_Adaptive_Lowpass___X1)<sp/>+</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(params-&gt;m_Adaptive_Lowpass__A1<sp/>*<sp/>sample));</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/>params-&gt;m_Adaptive_Lowpass___X2<sp/>=</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((1.f<sp/>-<sp/>params-&gt;m_Adaptive_Lowpass__A2)<sp/>*</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>params-&gt;m_Adaptive_Lowpass___X2)<sp/>+</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(params-&gt;m_Adaptive_Lowpass__A2<sp/>*<sp/>sample));</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/>abs_delta<sp/>=</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(params-&gt;m_Adaptive_Lowpass___X1<sp/>-<sp/>params-&gt;m_Adaptive_Lowpass___X2);</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((abs_delta<sp/>&lt;<sp/>0.f))<sp/>{</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>abs_delta<sp/>=<sp/>(-1.f<sp/>*<sp/>abs_delta);</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/>F1<sp/>=<sp/>expf((GasIndexAlgorithm_LP_ALPHA<sp/>*<sp/>abs_delta));</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/>tau_a<sp/>=<sp/>(((GasIndexAlgorithm_LP_TAU_SLOW<sp/>-<sp/>GasIndexAlgorithm_LP_TAU_FAST)<sp/>*</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>F1)<sp/>+</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GasIndexAlgorithm_LP_TAU_FAST);</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/>a3<sp/>=<sp/>(params-&gt;mSamplingInterval<sp/>/<sp/>(params-&gt;mSamplingInterval<sp/>+<sp/>tau_a));</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/>params-&gt;m_Adaptive_Lowpass___X3<sp/>=</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(((1.f<sp/>-<sp/>a3)<sp/>*<sp/>params-&gt;m_Adaptive_Lowpass___X3)<sp/>+<sp/>(a3<sp/>*<sp/>sample));</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>params-&gt;m_Adaptive_Lowpass___X3;</highlight></codeline>
<codeline lineno="584"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.c"/>
  </compounddef>
</doxygen>
