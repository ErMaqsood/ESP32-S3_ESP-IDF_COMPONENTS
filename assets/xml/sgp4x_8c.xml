<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="sgp4x_8c" kind="file" language="C++">
    <compoundname>sgp4x.c</compoundname>
    <includes refid="sgp4x_8h" local="yes">include/sgp4x.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">math.h</includes>
    <includes local="no">esp_log.h</includes>
    <includes local="no">esp_check.h</includes>
    <includes local="no">esp_timer.h</includes>
    <includes local="no">freertos/FreeRTOS.h</includes>
    <includes local="no">freertos/task.h</includes>
    <incdepgraph>
      <node id="2">
        <label>include/sgp4x.h</label>
        <link refid="sgp4x_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>sgp4x_version.h</label>
        <link refid="sgp4x__version_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>components/peripherals/i2c/esp_sgp4x/sgp4x.c</label>
        <link refid="sgp4x_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>type_utils.h</label>
        <link refid="type__utils_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>type_utils_version.h</label>
        <link refid="type__utils__version_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>driver/i2c_master.h</label>
      </node>
      <node id="15">
        <label>esp_check.h</label>
      </node>
      <node id="5">
        <label>esp_err.h</label>
      </node>
      <node id="14">
        <label>esp_log.h</label>
      </node>
      <node id="8">
        <label>esp_mac.h</label>
      </node>
      <node id="16">
        <label>esp_timer.h</label>
      </node>
      <node id="17">
        <label>freertos/FreeRTOS.h</label>
      </node>
      <node id="18">
        <label>freertos/task.h</label>
      </node>
      <node id="13">
        <label>math.h</label>
      </node>
      <node id="4">
        <label>stdbool.h</label>
      </node>
      <node id="3">
        <label>stdint.h</label>
      </node>
      <node id="12">
        <label>stdio.h</label>
      </node>
      <node id="11">
        <label>string.h</label>
      </node>
    </incdepgraph>
    <sectiondef kind="define">
      <memberdef kind="define" id="sgp4x_8c_1aeb90f1b78249ed18ba648a80ff425a7e" prot="public" static="no">
        <name>SGP4X_CRC8_G_POLYNOM</name>
        <initializer>UINT8_C(0x31)</initializer>
        <briefdescription>
<para>sgp4x I2C CRC8 polynomial </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_sgp4x/sgp4x.c" line="48" column="9" bodyfile="components/peripherals/i2c/esp_sgp4x/sgp4x.c" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sgp4x_8c_1a4e2ea64fd9fd0cd0d2e6c8203bea1c7a" prot="public" static="no">
        <name>SGP4X_CMD_RESET</name>
        <initializer>UINT16_C(0x0006)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_sgp4x/sgp4x.c" line="50" column="9" bodyfile="components/peripherals/i2c/esp_sgp4x/sgp4x.c" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sgp4x_8c_1a6a0235a5480efbe0a7cb5a838277e5ec" prot="public" static="no">
        <name>SGP4X_CMD_RESET_</name>
        <initializer>UINT8_C(0x06)</initializer>
        <briefdescription>
<para>sgp4x I2C soft-reset command - for some reason this is an 1-byte command </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_sgp4x/sgp4x.c" line="51" column="9" bodyfile="components/peripherals/i2c/esp_sgp4x/sgp4x.c" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sgp4x_8c_1a18dc072f9640fb68a76cedd0b4f0c28f" prot="public" static="no">
        <name>SGP4X_CMD_SERIAL_NUMBER</name>
        <initializer>UINT16_C(0x3682)</initializer>
        <briefdescription>
<para>sgp4x I2C serial number request command </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_sgp4x/sgp4x.c" line="52" column="9" bodyfile="components/peripherals/i2c/esp_sgp4x/sgp4x.c" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sgp4x_8c_1aafcb455fae4531a0f4fb064d297ce376" prot="public" static="no">
        <name>SGP4X_CMD_EXEC_CONDITIONING</name>
        <initializer>UINT16_C(0x2612)</initializer>
        <briefdescription>
<para>sgp4x I2C </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_sgp4x/sgp4x.c" line="53" column="9" bodyfile="components/peripherals/i2c/esp_sgp4x/sgp4x.c" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sgp4x_8c_1ae334971aa1dde59e09802d080c33c18d" prot="public" static="no">
        <name>SGP4X_CMD_MEAS_RAW_SIGNALS</name>
        <initializer>UINT16_C(0x2619)</initializer>
        <briefdescription>
<para>sgp4x I2C </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_sgp4x/sgp4x.c" line="54" column="9" bodyfile="components/peripherals/i2c/esp_sgp4x/sgp4x.c" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sgp4x_8c_1a6a8d982a8c99deec6f2fc73126612466" prot="public" static="no">
        <name>SGP4X_CMD_EXEC_SELF_TEST</name>
        <initializer>UINT16_C(0x280e)</initializer>
        <briefdescription>
<para>sgp4x I2C </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_sgp4x/sgp4x.c" line="55" column="9" bodyfile="components/peripherals/i2c/esp_sgp4x/sgp4x.c" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sgp4x_8c_1a6d2e2a4f53c2ad0d687f3efc1d0826ab" prot="public" static="no">
        <name>SGP4X_CMD_TURN_HEATER_OFF</name>
        <initializer>UINT16_C(0x3615)</initializer>
        <briefdescription>
<para>sgp4x I2C </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_sgp4x/sgp4x.c" line="56" column="9" bodyfile="components/peripherals/i2c/esp_sgp4x/sgp4x.c" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sgp4x_8c_1ae98302fbf5d96a3eefc1c579b4e54548" prot="public" static="no">
        <name>SGP4X_HUMIDITY_COMP_DEFAULT</name>
        <initializer>(float)(50.0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_sgp4x/sgp4x.c" line="58" column="9" bodyfile="components/peripherals/i2c/esp_sgp4x/sgp4x.c" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sgp4x_8c_1add16e2860663d0a4e6f9a7e9afea0648" prot="public" static="no">
        <name>SGP4X_TEMPERATURE_COMP_DEFAULT</name>
        <initializer>(float)(25.0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_sgp4x/sgp4x.c" line="59" column="9" bodyfile="components/peripherals/i2c/esp_sgp4x/sgp4x.c" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sgp4x_8c_1ab9fe81afb93e4442e81f4159aae65cf2" prot="public" static="no">
        <name>SGP4X_TEMPERATURE_MAX</name>
        <initializer>(float)(130.0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_sgp4x/sgp4x.c" line="61" column="9" bodyfile="components/peripherals/i2c/esp_sgp4x/sgp4x.c" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sgp4x_8c_1a26dcd2520e8c4b6dd9e5b0142b9c8b6a" prot="public" static="no">
        <name>SGP4X_TEMPERATURE_MIN</name>
        <initializer>(float)(-45.0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_sgp4x/sgp4x.c" line="62" column="9" bodyfile="components/peripherals/i2c/esp_sgp4x/sgp4x.c" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sgp4x_8c_1a054b0d37a7c3a6f636b673571203df49" prot="public" static="no">
        <name>SGP4X_HUMIDITY_MAX</name>
        <initializer>(float)(100.0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_sgp4x/sgp4x.c" line="63" column="9" bodyfile="components/peripherals/i2c/esp_sgp4x/sgp4x.c" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sgp4x_8c_1acafab2ec13f2fd526ababc8531d74acc" prot="public" static="no">
        <name>SGP4X_HUMIDITY_MIN</name>
        <initializer>(float)(0.0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_sgp4x/sgp4x.c" line="64" column="9" bodyfile="components/peripherals/i2c/esp_sgp4x/sgp4x.c" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sgp4x_8c_1ae2f1001caef83315b2751d0fe0def8aa" prot="public" static="no">
        <name>SGP4X_CONDITIONING_TIMEOUT_MS</name>
        <initializer>UINT16_C(1000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>conditioning timeout 1-sec, 10-sec in total and maximum </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_sgp4x/sgp4x.c" line="66" column="9" bodyfile="components/peripherals/i2c/esp_sgp4x/sgp4x.c" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sgp4x_8c_1aaf5f4ff95ced48f1387a96316c6c1158" prot="public" static="no">
        <name>SGP4X_POWERUP_DELAY_MS</name>
        <initializer>UINT16_C(10)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_sgp4x/sgp4x.c" line="67" column="9" bodyfile="components/peripherals/i2c/esp_sgp4x/sgp4x.c" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sgp4x_8c_1add529d5290434285094487f46697ac6a" prot="public" static="no">
        <name>SGP4X_APPSTART_DELAY_MS</name>
        <initializer>UINT16_C(10)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>delay after initialization before application start-up </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_sgp4x/sgp4x.c" line="68" column="9" bodyfile="components/peripherals/i2c/esp_sgp4x/sgp4x.c" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sgp4x_8c_1a8854136b0d6a520e0e3ed20c7fe8a8a2" prot="public" static="no">
        <name>SGP4X_CMD_DELAY_MS</name>
        <initializer>UINT16_C(5)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>delay before attempting I2C transactions after a command is issued </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_sgp4x/sgp4x.c" line="69" column="9" bodyfile="components/peripherals/i2c/esp_sgp4x/sgp4x.c" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sgp4x_8c_1a1f74cc86c30e1b52a77532df92174bb0" prot="public" static="no">
        <name>SGP4X_RETRY_DELAY_MS</name>
        <initializer>UINT16_C(2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_sgp4x/sgp4x.c" line="70" column="9" bodyfile="components/peripherals/i2c/esp_sgp4x/sgp4x.c" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sgp4x_8c_1ac2bb3db0b37c9f45103fd513ca5158fe" prot="public" static="no">
        <name>ESP_ARG_CHECK</name>
        <param><defname>VAL</defname></param>
        <initializer>do { if (!(VAL)) return ESP_ERR_INVALID_ARG; } while (0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_sgp4x/sgp4x.c" line="76" column="9" bodyfile="components/peripherals/i2c/esp_sgp4x/sgp4x.c" bodystart="76" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="var">
      <memberdef kind="variable" id="sgp4x_8c_1a5a85b9c772bbeb480b209a3e6ea92b4c" prot="public" static="yes" mutable="no">
        <type>const char *</type>
        <definition>const char* TAG</definition>
        <argsstring></argsstring>
        <name>TAG</name>
        <initializer>= &quot;sgp4x&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_sgp4x/sgp4x.c" line="81" column="19" bodyfile="components/peripherals/i2c/esp_sgp4x/sgp4x.c" bodystart="81" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="sgp4x_8c_1a1b35449501bfe30e088112d56484f665" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>static esp_err_t sgp4x_i2c_read</definition>
        <argsstring>(sgp4x_handle_t handle, uint8_t *buffer, const uint8_t size)</argsstring>
        <name>sgp4x_i2c_read</name>
        <param>
          <type><ref refid="group__drivers_1gac40d2deb3fe0027ff3588c50d583b0cd" kindref="member">sgp4x_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>SGP4X I2C read transaction. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>SGP4X device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to store results from read transaction. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of buffer to store results from read transaction. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_sgp4x/sgp4x.c" line="96" column="25" bodyfile="components/peripherals/i2c/esp_sgp4x/sgp4x.c" bodystart="96" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="sgp4x_8c_1a974e55b57148e5c1672b1f0b0ee3111b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>static esp_err_t sgp4x_i2c_write</definition>
        <argsstring>(sgp4x_handle_t handle, const uint8_t *buffer, const uint8_t size)</argsstring>
        <name>sgp4x_i2c_write</name>
        <param>
          <type><ref refid="group__drivers_1gac40d2deb3fe0027ff3588c50d583b0cd" kindref="member">sgp4x_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>SGP4X I2C write transaction. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>SGP4X device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to write for write transaction. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of buffer to write for write transaction. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_sgp4x/sgp4x.c" line="114" column="25" bodyfile="components/peripherals/i2c/esp_sgp4x/sgp4x.c" bodystart="114" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="sgp4x_8c_1aa5d0a17762885e54d7ed33c7d4392109" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>static esp_err_t sgp4x_i2c_write_command</definition>
        <argsstring>(sgp4x_handle_t handle, const uint16_t reg_addr)</argsstring>
        <name>sgp4x_i2c_write_command</name>
        <param>
          <type><ref refid="group__drivers_1gac40d2deb3fe0027ff3588c50d583b0cd" kindref="member">sgp4x_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const uint16_t</type>
          <declname>reg_addr</declname>
        </param>
        <briefdescription>
<para>SGP4X I2C write command to register address transaction. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>SGP4X device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reg_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>SGP4X command register address to write to. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_sgp4x/sgp4x.c" line="131" column="25" bodyfile="components/peripherals/i2c/esp_sgp4x/sgp4x.c" bodystart="131" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="sgp4x_8c_1a8dcccdeadb16c3137c64d03f5ed99339" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint8_t</type>
        <definition>static uint8_t sgp4x_calculate_crc8</definition>
        <argsstring>(const uint8_t data[2])</argsstring>
        <name>sgp4x_calculate_crc8</name>
        <param>
          <type>const uint8_t</type>
          <declname>data</declname>
          <array>[2]</array>
        </param>
        <briefdescription>
<para>Calculates SGP4X crc8 value for 2-byte data packet. See datasheet for details. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">data[2]</parametername>
</parameternamelist>
<parameterdescription>
<para>2-byte data packet to perform crc8 check against. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>uint8_t Calculated crc8 value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_sgp4x/sgp4x.c" line="150" column="23" bodyfile="components/peripherals/i2c/esp_sgp4x/sgp4x.c" bodystart="150" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="sgp4x_8c_1ae2d6cddd2c01fc3046410acf3641ca79" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint16_t</type>
        <definition>static uint16_t sgp4x_leo_to_beo</definition>
        <argsstring>(const uint16_t leo)</argsstring>
        <name>sgp4x_leo_to_beo</name>
        <param>
          <type>const uint16_t</type>
          <declname>leo</declname>
        </param>
        <briefdescription>
<para>Converts <computeroutput>uint16_t</computeroutput> variable from little endian order to big endian order. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">leo</parametername>
</parameternamelist>
<parameterdescription>
<para>Variable in little endian order. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>uint16_t Converted variable in big endian order </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_sgp4x/sgp4x.c" line="167" column="24" bodyfile="components/peripherals/i2c/esp_sgp4x/sgp4x.c" bodystart="167" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="sgp4x_8c_1a646ee808cea0f691cf4de6d2acd08df6" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint16_t</type>
        <definition>static uint16_t sgp4x_get_command_duration_ms</definition>
        <argsstring>(const uint16_t command)</argsstring>
        <name>sgp4x_get_command_duration_ms</name>
        <param>
          <type>const uint16_t</type>
          <declname>command</declname>
        </param>
        <briefdescription>
<para>Gets the command execution duration in milli-seconds. This delay is used after the I2C write transaction to give the SGP4X time to process the command and return the results. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">command</parametername>
</parameternamelist>
<parameterdescription>
<para>Command to determine duration against. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>uint16_t Command execution duration in milli-seconds. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_sgp4x/sgp4x.c" line="178" column="24" bodyfile="components/peripherals/i2c/esp_sgp4x/sgp4x.c" bodystart="178" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="sgp4x_8c_1a469c39d5ac289851d4151656f03a3194" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="unionbytes__to__uint16__t" kindref="compound">bytes_to_uint16_t</ref></type>
        <definition>static bytes_to_uint16_t sgp4x_temperature_to_ticks</definition>
        <argsstring>(const float temperature)</argsstring>
        <name>sgp4x_temperature_to_ticks</name>
        <param>
          <type>const float</type>
          <declname>temperature</declname>
        </param>
        <briefdescription>
<para>Converts temperature to compensation ticks. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">temperature</parametername>
</parameternamelist>
<parameterdescription>
<para>Temperature in degrees Celsius. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="unionbytes__to__uint16__t" kindref="compound">bytes_to_uint16_t</ref> Temperature compensation ticks </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_sgp4x/sgp4x.c" line="203" column="33" bodyfile="components/peripherals/i2c/esp_sgp4x/sgp4x.c" bodystart="203" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="sgp4x_8c_1ab829ba32ffedec7f159f1dc98c4e984b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="unionbytes__to__uint16__t" kindref="compound">bytes_to_uint16_t</ref></type>
        <definition>static bytes_to_uint16_t sgp4x_humidity_to_ticks</definition>
        <argsstring>(const float humidity)</argsstring>
        <name>sgp4x_humidity_to_ticks</name>
        <param>
          <type>const float</type>
          <declname>humidity</declname>
        </param>
        <briefdescription>
<para>Converts humidity to compensation ticks. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">humidity</parametername>
</parameternamelist>
<parameterdescription>
<para>Humidity in precentage. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="unionbytes__to__uint16__t" kindref="compound">bytes_to_uint16_t</ref> Humidity compensation ticks. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_sgp4x/sgp4x.c" line="214" column="33" bodyfile="components/peripherals/i2c/esp_sgp4x/sgp4x.c" bodystart="214" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="sgp4x_8c_1aac70c040da490a1aeb71bda1a66a0582" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>static esp_err_t sgp4x_get_serial_number_register</definition>
        <argsstring>(sgp4x_handle_t handle, uint64_t *const reg)</argsstring>
        <name>sgp4x_get_serial_number_register</name>
        <param>
          <type><ref refid="group__drivers_1gac40d2deb3fe0027ff3588c50d583b0cd" kindref="member">sgp4x_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>uint64_t *const</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Reads serial number register from SGP4X. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>SGP4X device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_sgp4x/sgp4x.c" line="225" column="25" bodyfile="components/peripherals/i2c/esp_sgp4x/sgp4x.c" bodystart="225" bodyend="265"/>
      </memberdef>
      <member refid="group__drivers_1ga0bec60b8c1ab24e8061a1d6dadeed8fc" kind="function"><name>sgp4x_init</name></member>
      <member refid="group__drivers_1ga52efe21453b1d3606b14e49aefef9ae1" kind="function"><name>sgp4x_execute_compensated_conditioning</name></member>
      <member refid="group__drivers_1ga12f002286cb3e1a07ee467160febf165" kind="function"><name>sgp4x_execute_conditioning</name></member>
      <member refid="group__drivers_1gaadd5bf985665147c4d997b26120dd9aa" kind="function"><name>sgp4x_measure_compensated_signals</name></member>
      <member refid="group__drivers_1ga4efe02574e8280c6d1f75e5d67c1c282" kind="function"><name>sgp4x_measure_signals</name></member>
      <member refid="group__drivers_1ga74a5a683b3490a8aaf03b03539929fae" kind="function"><name>sgp4x_execute_self_test</name></member>
      <member refid="group__drivers_1ga1a819671d1ed391a0666e7c8b3b0721e" kind="function"><name>sgp4x_turn_heater_off</name></member>
      <member refid="group__drivers_1ga1dd9539587a9de55514ab1dbeeb5d705" kind="function"><name>sgp4x_reset</name></member>
      <member refid="group__drivers_1ga05534062bf7f57eac9d0992fb788c4d7" kind="function"><name>sgp4x_remove</name></member>
      <member refid="group__drivers_1gad0cd93f1a86d46ac471b1266854ad781" kind="function"><name>sgp4x_delete</name></member>
      <member refid="group__drivers_1gaff4d0425f787cda12108abe40e286d37" kind="function"><name>sgp4x_get_fw_version</name></member>
      <member refid="group__drivers_1ga2bf0031a0518fb0d4d8f1db8bf200dbb" kind="function"><name>sgp4x_get_fw_version_number</name></member>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>ESP-IDF driver for SGP4X sensor</para>
<para>Ported from esp-open-rtos</para>
<para>Copyright (c) 2024 Eric Gionet (<ulink url="mailto:gionet.c.eric@gmail.com">gionet.c.eric@gmail.com</ulink>)</para>
<para>MIT Licensed as described in the file LICENSE </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>The<sp/>MIT<sp/>License<sp/>(MIT)</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2024<sp/>Eric<sp/>Gionet<sp/>(gionet.c.eric@gmail.com)</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>Permission<sp/>is<sp/>hereby<sp/>granted,<sp/>free<sp/>of<sp/>charge,<sp/>to<sp/>any<sp/>person<sp/>obtaining<sp/>a<sp/>copy</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>of<sp/>this<sp/>software<sp/>and<sp/>associated<sp/>documentation<sp/>files<sp/>(the<sp/>&quot;Software&quot;),<sp/>to<sp/>deal</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>in<sp/>the<sp/>Software<sp/>without<sp/>restriction,<sp/>including<sp/>without<sp/>limitation<sp/>the<sp/>rights</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>to<sp/>use,<sp/>copy,<sp/>modify,<sp/>merge,<sp/>publish,<sp/>distribute,<sp/>sublicense,<sp/>and/or<sp/>sell</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>copies<sp/>of<sp/>the<sp/>Software,<sp/>and<sp/>to<sp/>permit<sp/>persons<sp/>to<sp/>whom<sp/>the<sp/>Software<sp/>is</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>furnished<sp/>to<sp/>do<sp/>so,<sp/>subject<sp/>to<sp/>the<sp/>following<sp/>conditions:</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>The<sp/>above<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>shall<sp/>be<sp/>included<sp/>in<sp/>all</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>copies<sp/>or<sp/>substantial<sp/>portions<sp/>of<sp/>the<sp/>Software.</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;,<sp/>WITHOUT<sp/>WARRANTY<sp/>OF<sp/>ANY<sp/>KIND,<sp/>EXPRESS<sp/>OR</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>IMPLIED,<sp/>INCLUDING<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO<sp/>THE<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY,</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND<sp/>NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>AUTHORS<sp/>OR<sp/>COPYRIGHT<sp/>HOLDERS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>CLAIM,<sp/>DAMAGES<sp/>OR<sp/>OTHER</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>AN<sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/>FROM,</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>OUT<sp/>OF<sp/>OR<sp/>IN<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER<sp/>DEALINGS<sp/>IN<sp/>THE</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>SOFTWARE.</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="sgp4x_8h" kindref="compound">include/sgp4x.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;esp_log.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;esp_check.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;esp_timer.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;freertos/FreeRTOS.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;freertos/task.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/>*<sp/>SGP4X<sp/>definitions</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SGP4X_CRC8_G_POLYNOM<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UINT8_C(0x31)<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SGP4X_CMD_RESET<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UINT16_C(0x0006)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SGP4X_CMD_RESET_<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UINT8_C(0x06)<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SGP4X_CMD_SERIAL_NUMBER<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UINT16_C(0x3682)<sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SGP4X_CMD_EXEC_CONDITIONING<sp/><sp/><sp/><sp/><sp/>UINT16_C(0x2612)<sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SGP4X_CMD_MEAS_RAW_SIGNALS<sp/><sp/><sp/><sp/><sp/><sp/>UINT16_C(0x2619)<sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SGP4X_CMD_EXEC_SELF_TEST<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UINT16_C(0x280e)<sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SGP4X_CMD_TURN_HEATER_OFF<sp/><sp/><sp/><sp/><sp/><sp/><sp/>UINT16_C(0x3615)<sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SGP4X_HUMIDITY_COMP_DEFAULT<sp/><sp/><sp/><sp/><sp/>(float)(50.0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SGP4X_TEMPERATURE_COMP_DEFAULT<sp/><sp/>(float)(25.0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SGP4X_TEMPERATURE_MAX<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(float)(130.0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SGP4X_TEMPERATURE_MIN<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(float)(-45.0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SGP4X_HUMIDITY_MAX<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(float)(100.0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SGP4X_HUMIDITY_MIN<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(float)(0.0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SGP4X_CONDITIONING_TIMEOUT_MS<sp/><sp/><sp/>UINT16_C(1000)<sp/></highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SGP4X_POWERUP_DELAY_MS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UINT16_C(10)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SGP4X_APPSTART_DELAY_MS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UINT16_C(10)<sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor"><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SGP4X_CMD_DELAY_MS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UINT16_C(5)<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SGP4X_RETRY_DELAY_MS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UINT16_C(2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/>*<sp/>macro<sp/>definitions</highlight></codeline>
<codeline lineno="75"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ESP_ARG_CHECK(VAL)<sp/>do<sp/>{<sp/>if<sp/>(!(VAL))<sp/>return<sp/>ESP_ERR_INVALID_ARG;<sp/>}<sp/>while<sp/>(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="79"><highlight class="comment">*<sp/>static<sp/>constant<sp/>declarations</highlight></codeline>
<codeline lineno="80"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*TAG<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;sgp4x&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="84"><highlight class="comment">*<sp/>functions<sp/>and<sp/>subroutines</highlight></codeline>
<codeline lineno="85"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>esp_err_t<sp/>sgp4x_i2c_read(<ref refid="group__drivers_1gac40d2deb3fe0027ff3588c50d583b0cd" kindref="member">sgp4x_handle_t</ref><sp/>handle,<sp/>uint8_t<sp/>*buffer,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>validate<sp/>arguments<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_ARG_CHECK(<sp/>handle<sp/>);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>attempt<sp/>i2c<sp/>read<sp/>transaction<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_RETURN_ON_ERROR(<sp/>i2c_master_receive(handle-&gt;<ref refid="structsgp4x__context__t_1aebc33e9d9d97bc57c51d01fa39056a22" kindref="member">i2c_handle</ref>,<sp/>buffer,<sp/>size,<sp/><ref refid="group__drivers_1ga0382382bb6f45ac5247eb66f95de7d58" kindref="member">I2C_SGP4X_XFR_TIMEOUT_MS</ref>),<sp/>TAG,<sp/></highlight><highlight class="stringliteral">&quot;i2c_master_receive,<sp/>i2c<sp/>read<sp/>failed&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ESP_OK;</highlight></codeline>
<codeline lineno="104"><highlight class="normal">}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>esp_err_t<sp/>sgp4x_i2c_write(<ref refid="group__drivers_1gac40d2deb3fe0027ff3588c50d583b0cd" kindref="member">sgp4x_handle_t</ref><sp/>handle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>*buffer,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>validate<sp/>arguments<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_ARG_CHECK(<sp/>handle<sp/>);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>attempt<sp/>i2c<sp/>write<sp/>transaction<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_RETURN_ON_ERROR(<sp/>i2c_master_transmit(handle-&gt;<ref refid="structsgp4x__context__t_1aebc33e9d9d97bc57c51d01fa39056a22" kindref="member">i2c_handle</ref>,<sp/>buffer,<sp/>size,<sp/><ref refid="group__drivers_1ga0382382bb6f45ac5247eb66f95de7d58" kindref="member">I2C_SGP4X_XFR_TIMEOUT_MS</ref>),<sp/>TAG,<sp/></highlight><highlight class="stringliteral">&quot;i2c_master_transmit,<sp/>i2c<sp/>write<sp/>failed&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ESP_OK;</highlight></codeline>
<codeline lineno="122"><highlight class="normal">}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>esp_err_t<sp/>sgp4x_i2c_write_command(<ref refid="group__drivers_1gac40d2deb3fe0027ff3588c50d583b0cd" kindref="member">sgp4x_handle_t</ref><sp/>handle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>reg_addr)<sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="unionbytes__to__uint16__t" kindref="compound">bytes_to_uint16_t</ref><sp/><sp/><sp/>cmd<sp/>=<sp/>{<sp/>.value<sp/>=<sp/>reg_addr<sp/>};</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>bit16_uint8_buffer_t<sp/>tx<sp/>=<sp/>{<sp/>cmd.bytes[1],<sp/>cmd.bytes[0]<sp/>};</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>validate<sp/>arguments<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_ARG_CHECK(<sp/>handle<sp/>);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>attempt<sp/>i2c<sp/>write<sp/>transaction<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_RETURN_ON_ERROR(<sp/>i2c_master_transmit(handle-&gt;<ref refid="structsgp4x__context__t_1aebc33e9d9d97bc57c51d01fa39056a22" kindref="member">i2c_handle</ref>,<sp/>tx,<sp/>BIT16_UINT8_BUFFER_SIZE,<sp/><ref refid="group__drivers_1ga0382382bb6f45ac5247eb66f95de7d58" kindref="member">I2C_SGP4X_XFR_TIMEOUT_MS</ref>),<sp/>TAG,<sp/></highlight><highlight class="stringliteral">&quot;i2c_master_transmit,<sp/>i2c<sp/>write<sp/>failed&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ESP_OK;</highlight></codeline>
<codeline lineno="142"><highlight class="normal">}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint8_t<sp/>sgp4x_calculate_crc8(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>data[2])<sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>crc<sp/>=<sp/>0xff;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>2;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>crc<sp/>^=<sp/>data[i];</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>8;<sp/>i++)</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>crc<sp/>=<sp/>crc<sp/>&amp;<sp/>0x80<sp/>?<sp/>(crc<sp/>&lt;&lt;<sp/>1)<sp/>^<sp/><ref refid="sgp4x_8c_1aeb90f1b78249ed18ba648a80ff425a7e" kindref="member">SGP4X_CRC8_G_POLYNOM</ref><sp/>:<sp/>crc<sp/>&lt;&lt;<sp/>1;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>crc;</highlight></codeline>
<codeline lineno="158"><highlight class="normal">}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint16_t<sp/>sgp4x_leo_to_beo(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>leo)<sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(leo<sp/>&lt;&lt;<sp/>8)<sp/>|<sp/>(leo<sp/>&gt;&gt;<sp/>8);</highlight></codeline>
<codeline lineno="169"><highlight class="normal">}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint16_t<sp/>sgp4x_get_command_duration_ms(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>command)<sp/>{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(command)<sp/>{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="sgp4x_8c_1aafcb455fae4531a0f4fb064d297ce376" kindref="member">SGP4X_CMD_EXEC_CONDITIONING</ref>:</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>50;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="sgp4x_8c_1ae334971aa1dde59e09802d080c33c18d" kindref="member">SGP4X_CMD_MEAS_RAW_SIGNALS</ref>:</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>50;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="sgp4x_8c_1a6a8d982a8c99deec6f2fc73126612466" kindref="member">SGP4X_CMD_EXEC_SELF_TEST</ref>:</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>320;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="sgp4x_8c_1a6d2e2a4f53c2ad0d687f3efc1d0826ab" kindref="member">SGP4X_CMD_TURN_HEATER_OFF</ref>:</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="sgp4x_8c_1a18dc072f9640fb68a76cedd0b4f0c28f" kindref="member">SGP4X_CMD_SERIAL_NUMBER</ref>:</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>SGP4X_CMD_RESET:</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>5;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>50;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="195"><highlight class="normal">}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="unionbytes__to__uint16__t" kindref="compound">bytes_to_uint16_t</ref><sp/>sgp4x_temperature_to_ticks(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>temperature)<sp/>{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="unionbytes__to__uint16__t" kindref="compound">bytes_to_uint16_t</ref><sp/>ticks<sp/>=<sp/>{.value<sp/>=<sp/>(uint16_t)(temperature<sp/>+<sp/>45)<sp/>*<sp/>65535<sp/>/<sp/>175};</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ticks;</highlight></codeline>
<codeline lineno="206"><highlight class="normal">}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="unionbytes__to__uint16__t" kindref="compound">bytes_to_uint16_t</ref><sp/>sgp4x_humidity_to_ticks(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>humidity)<sp/>{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="unionbytes__to__uint16__t" kindref="compound">bytes_to_uint16_t</ref><sp/>ticks<sp/>=<sp/>{.value<sp/>=<sp/>(uint16_t)llround(humidity<sp/>*<sp/>65535<sp/>/<sp/>100)};</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ticks;</highlight></codeline>
<codeline lineno="217"><highlight class="normal">}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>esp_err_t<sp/>sgp4x_get_serial_number_register(<ref refid="group__drivers_1gac40d2deb3fe0027ff3588c50d583b0cd" kindref="member">sgp4x_handle_t</ref><sp/>handle,<sp/>uint64_t<sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>reg)<sp/>{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>validate<sp/>arguments<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_ARG_CHECK(<sp/>handle<sp/>);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>attempt<sp/>i2c<sp/>write<sp/>transaction<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_RETURN_ON_ERROR(<sp/>sgp4x_i2c_write_command(handle,<sp/><ref refid="sgp4x_8c_1a18dc072f9640fb68a76cedd0b4f0c28f" kindref="member">SGP4X_CMD_SERIAL_NUMBER</ref>),<sp/>TAG,<sp/></highlight><highlight class="stringliteral">&quot;unable<sp/>to<sp/>write<sp/>to<sp/>i2c<sp/>device<sp/>handle,<sp/>read<sp/>serial<sp/>number<sp/>failed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>delay<sp/>before<sp/>next<sp/>i2c<sp/>transaction<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(sgp4x_get_command_duration_ms(<ref refid="sgp4x_8c_1a18dc072f9640fb68a76cedd0b4f0c28f" kindref="member">SGP4X_CMD_SERIAL_NUMBER</ref>)));</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>attempt<sp/>i2c<sp/>read<sp/>transaction<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>bit72_uint8_buffer_t<sp/>rx_buffer<sp/>=<sp/>{<sp/>0<sp/>};</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_RETURN_ON_ERROR(<sp/>sgp4x_i2c_read(handle,<sp/>rx_buffer,<sp/>BIT72_UINT8_BUFFER_SIZE),<sp/>TAG,<sp/></highlight><highlight class="stringliteral">&quot;unable<sp/>to<sp/>read<sp/>to<sp/>i2c<sp/>device<sp/>handle,<sp/>read<sp/>serial<sp/>number<sp/>failed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>set<sp/>2-byte<sp/>serial<sp/>number<sp/>parts<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="unionbytes__to__uint16__t" kindref="compound">bytes_to_uint16_t</ref><sp/>sn_1<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.bytes[0]<sp/>=<sp/>rx_buffer[0],</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.bytes[1]<sp/>=<sp/>rx_buffer[1]</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="unionbytes__to__uint16__t" kindref="compound">bytes_to_uint16_t</ref><sp/>sn_2<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.bytes[0]<sp/>=<sp/>rx_buffer[3],</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.bytes[1]<sp/>=<sp/>rx_buffer[4]</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="unionbytes__to__uint16__t" kindref="compound">bytes_to_uint16_t</ref><sp/>sn_3<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.bytes[0]<sp/>=<sp/>rx_buffer[6],</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.bytes[1]<sp/>=<sp/>rx_buffer[7]</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>validate<sp/>crc<sp/>for<sp/>each<sp/>serial<sp/>number<sp/>part<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_RETURN_ON_FALSE(<sp/>(sgp4x_calculate_crc8(sn_1.bytes)<sp/>==<sp/>rx_buffer[2]),<sp/>ESP_ERR_INVALID_CRC,<sp/>TAG,<sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>crc8<sp/>with<sp/>serial<sp/>number<sp/>part<sp/>1,<sp/>read<sp/>serial<sp/>number<sp/>failed&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_RETURN_ON_FALSE(<sp/>(sgp4x_calculate_crc8(sn_2.bytes)<sp/>==<sp/>rx_buffer[5]),<sp/>ESP_ERR_INVALID_CRC,<sp/>TAG,<sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>crc8<sp/>with<sp/>serial<sp/>number<sp/>part<sp/>2,<sp/>read<sp/>serial<sp/>number<sp/>failed&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_RETURN_ON_FALSE(<sp/>(sgp4x_calculate_crc8(sn_3.bytes)<sp/>==<sp/>rx_buffer[8]),<sp/>ESP_ERR_INVALID_CRC,<sp/>TAG,<sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>crc8<sp/>with<sp/>serial<sp/>number<sp/>part<sp/>3,<sp/>read<sp/>serial<sp/>number<sp/>failed&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>set<sp/>output<sp/>parameter<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>*reg<sp/>=<sp/>(((uint64_t)sn_1.value)<sp/>&lt;&lt;<sp/>32)<sp/>|<sp/>(((uint64_t)sn_2.value)<sp/>&lt;&lt;<sp/>16)<sp/>|<sp/>((uint64_t)sn_3.value);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>delay<sp/>before<sp/>next<sp/>i2c<sp/>transaction<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(<ref refid="sgp4x_8c_1a8854136b0d6a520e0e3ed20c7fe8a8a2" kindref="member">SGP4X_CMD_DELAY_MS</ref>));</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ESP_OK;</highlight></codeline>
<codeline lineno="265"><highlight class="normal">}</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal">esp_err_t<sp/><ref refid="group__drivers_1ga0bec60b8c1ab24e8061a1d6dadeed8fc" kindref="member">sgp4x_init</ref>(i2c_master_bus_handle_t<sp/>master_handle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structsgp4x__config__t" kindref="compound">sgp4x_config_t</ref><sp/>*sgp4x_config,<sp/><ref refid="group__drivers_1gac40d2deb3fe0027ff3588c50d583b0cd" kindref="member">sgp4x_handle_t</ref><sp/>*sgp4x_handle)<sp/>{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>validate<sp/>arguments<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_ARG_CHECK(<sp/>master_handle<sp/>&amp;&amp;<sp/>sgp4x_config<sp/>);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>power-up<sp/>delay<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(SGP4X_POWERUP_DELAY_MS));</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>validate<sp/>device<sp/>exists<sp/>on<sp/>the<sp/>master<sp/>bus<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>esp_err_t<sp/>ret<sp/>=<sp/>i2c_master_probe(master_handle,<sp/>sgp4x_config-&gt;<ref refid="structsgp4x__config__t_1a4fc512d568c2b72f6907c218205cf6c9" kindref="member">i2c_address</ref>,<sp/><ref refid="group__drivers_1ga0382382bb6f45ac5247eb66f95de7d58" kindref="member">I2C_SGP4X_XFR_TIMEOUT_MS</ref>);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_GOTO_ON_ERROR(ret,<sp/>err,<sp/>TAG,<sp/></highlight><highlight class="stringliteral">&quot;device<sp/>does<sp/>not<sp/>exist<sp/>at<sp/>address<sp/>0x%02x,<sp/>sgp4x<sp/>device<sp/>handle<sp/>initialization<sp/>failed&quot;</highlight><highlight class="normal">,<sp/>sgp4x_config-&gt;<ref refid="structsgp4x__config__t_1a4fc512d568c2b72f6907c218205cf6c9" kindref="member">i2c_address</ref>);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>validate<sp/>memory<sp/>availability<sp/>for<sp/>handle<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__drivers_1gac40d2deb3fe0027ff3588c50d583b0cd" kindref="member">sgp4x_handle_t</ref><sp/>out_handle;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>out_handle<sp/>=<sp/>(<ref refid="group__drivers_1gac40d2deb3fe0027ff3588c50d583b0cd" kindref="member">sgp4x_handle_t</ref>)calloc(1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*out_handle));</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_GOTO_ON_FALSE(out_handle,<sp/>ESP_ERR_NO_MEM,<sp/>err,<sp/>TAG,<sp/></highlight><highlight class="stringliteral">&quot;no<sp/>memory<sp/>for<sp/>device,<sp/>sgp4x<sp/>device<sp/>handle<sp/>initialization<sp/>failed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>copy<sp/>configuration<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>out_handle-&gt;<ref refid="structsgp4x__context__t_1ac615d923e5444b324962a3e5eeaf8c89" kindref="member">dev_config</ref><sp/>=<sp/>*sgp4x_config;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>set<sp/>device<sp/>configuration<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>i2c_device_config_t<sp/>i2c_dev_conf<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.dev_addr_length<sp/><sp/><sp/><sp/>=<sp/>I2C_ADDR_BIT_LEN_7,</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.device_address<sp/><sp/><sp/><sp/><sp/>=<sp/>out_handle-&gt;<ref refid="structsgp4x__context__t_1ac615d923e5444b324962a3e5eeaf8c89" kindref="member">dev_config</ref>.<ref refid="structsgp4x__config__t_1a4fc512d568c2b72f6907c218205cf6c9" kindref="member">i2c_address</ref>,</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.scl_speed_hz<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>out_handle-&gt;<ref refid="structsgp4x__context__t_1ac615d923e5444b324962a3e5eeaf8c89" kindref="member">dev_config</ref>.<ref refid="structsgp4x__config__t_1a770b3ab4bba557baec88287d86832a34" kindref="member">i2c_clock_speed</ref></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>validate<sp/>device<sp/>handle<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(out_handle-&gt;<ref refid="structsgp4x__context__t_1aebc33e9d9d97bc57c51d01fa39056a22" kindref="member">i2c_handle</ref><sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_GOTO_ON_ERROR(i2c_master_bus_add_device(master_handle,<sp/>&amp;i2c_dev_conf,<sp/>&amp;out_handle-&gt;<ref refid="structsgp4x__context__t_1aebc33e9d9d97bc57c51d01fa39056a22" kindref="member">i2c_handle</ref>),<sp/>err_handle,<sp/>TAG,<sp/></highlight><highlight class="stringliteral">&quot;unable<sp/>to<sp/>add<sp/>device<sp/>to<sp/>master<sp/>bus,<sp/>sgp4x<sp/>device<sp/>handle<sp/>initialization<sp/>failed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>copy<sp/>configuration<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>delay<sp/>before<sp/>next<sp/>i2c<sp/>transaction<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(100));</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>attempt<sp/>to<sp/>reset<sp/>the<sp/>device<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//ESP_GOTO_ON_ERROR(i2c_sgp4x_reset(out_handle),<sp/>err_handle,<sp/>TAG,<sp/>&quot;unable<sp/>to<sp/>soft-reset<sp/>device,<sp/>sgp4x<sp/>device<sp/>handle<sp/>initialization<sp/>failed&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>attempt<sp/>to<sp/>read<sp/>device<sp/>serial<sp/>number<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_GOTO_ON_ERROR(sgp4x_get_serial_number_register(out_handle,<sp/>&amp;out_handle-&gt;<ref refid="structsgp4x__context__t_1a53f19d09e000917418746a4da0e2435a" kindref="member">serial_number</ref>),<sp/>err_handle,<sp/>TAG,<sp/></highlight><highlight class="stringliteral">&quot;unable<sp/>to<sp/>read<sp/>device<sp/>serial<sp/>number,<sp/>sgp4x<sp/>device<sp/>handle<sp/>initialization<sp/>failed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>set<sp/>device<sp/>handle<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>*sgp4x_handle<sp/>=<sp/>out_handle;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>application<sp/>start<sp/>delay<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(<ref refid="sgp4x_8c_1add529d5290434285094487f46697ac6a" kindref="member">SGP4X_APPSTART_DELAY_MS</ref>));</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ESP_OK;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>err_handle:</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(out_handle<sp/>&amp;&amp;<sp/>out_handle-&gt;<ref refid="structsgp4x__context__t_1aebc33e9d9d97bc57c51d01fa39056a22" kindref="member">i2c_handle</ref>)<sp/>{</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i2c_master_bus_rm_device(out_handle-&gt;<ref refid="structsgp4x__context__t_1aebc33e9d9d97bc57c51d01fa39056a22" kindref="member">i2c_handle</ref>);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(out_handle);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>err:</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="324"><highlight class="normal">}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal">esp_err_t<sp/><ref refid="group__drivers_1ga52efe21453b1d3606b14e49aefef9ae1" kindref="member">sgp4x_execute_compensated_conditioning</ref>(<ref refid="group__drivers_1gac40d2deb3fe0027ff3588c50d583b0cd" kindref="member">sgp4x_handle_t</ref><sp/>handle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>temperature,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>humidity,<sp/>uint16_t<sp/>*sraw_voc)<sp/>{</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rx_retry_max<sp/><sp/><sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="unionbytes__to__uint16__t" kindref="compound">bytes_to_uint16_t</ref><sp/><sp/><sp/><sp/><sp/>command<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>{<sp/>.value<sp/>=<sp/><ref refid="sgp4x_8c_1aafcb455fae4531a0f4fb064d297ce376" kindref="member">SGP4X_CMD_EXEC_CONDITIONING</ref><sp/>};</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>esp_err_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>ESP_OK;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rx_retry_count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionbytes__to__uint16__t" kindref="compound">bytes_to_uint16_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>crc8_buffer<sp/><sp/><sp/><sp/>=<sp/>{<sp/>.value<sp/>=<sp/>0<sp/>};</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>bit64_uint8_buffer_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tx_buffer<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>{<sp/>0<sp/>};</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/>bit24_uint8_buffer_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rx_buffer<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>{<sp/>0<sp/>};</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>validate<sp/>arguments<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_ARG_CHECK(<sp/>handle<sp/>);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>validate<sp/>range<sp/>of<sp/>temperature<sp/>compensation<sp/>parameter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(temperature<sp/>&gt;<sp/>SGP4X_TEMPERATURE_MAX<sp/>||<sp/>temperature<sp/>&lt;<sp/>SGP4X_TEMPERATURE_MIN)<sp/>{</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_RETURN_ON_FALSE(<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>ESP_ERR_INVALID_ARG,<sp/>TAG,<sp/></highlight><highlight class="stringliteral">&quot;temperature<sp/>is<sp/>out<sp/>of<sp/>range,<sp/>execute<sp/>compensated<sp/>conditioning<sp/>failed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>validate<sp/>range<sp/>of<sp/>humidity<sp/>compensation<sp/>parameter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(humidity<sp/>&gt;<sp/>SGP4X_HUMIDITY_MAX<sp/>||<sp/>humidity<sp/>&lt;<sp/>SGP4X_HUMIDITY_MIN)<sp/>{</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_RETURN_ON_FALSE(<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>ESP_ERR_INVALID_ARG,<sp/>TAG,<sp/></highlight><highlight class="stringliteral">&quot;humidity<sp/>is<sp/>out<sp/>of<sp/>range,<sp/>execute<sp/>compensated<sp/>conditioning<sp/>failed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>convert<sp/>compensation<sp/>parameters<sp/>to<sp/>ticks<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="unionbytes__to__uint16__t" kindref="compound">bytes_to_uint16_t</ref><sp/>temperature_ticks<sp/>=<sp/>sgp4x_temperature_to_ticks(temperature);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="unionbytes__to__uint16__t" kindref="compound">bytes_to_uint16_t</ref><sp/>humidity_ticks<sp/><sp/><sp/><sp/>=<sp/>sgp4x_humidity_to_ticks(humidity);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>calculate<sp/>crc8<sp/>for<sp/>compensation<sp/>parameter<sp/>ticks<sp/>-<sp/>big-endian<sp/>order<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>crc8_buffer.bytes[0]<sp/>=<sp/>temperature_ticks.bytes[1];</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/>crc8_buffer.bytes[1]<sp/>=<sp/>temperature_ticks.bytes[0];</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>temperature_ticks_crc8<sp/>=<sp/>sgp4x_calculate_crc8(crc8_buffer.bytes);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/>crc8_buffer.bytes[0]<sp/>=<sp/>humidity_ticks.bytes[1];</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>crc8_buffer.bytes[1]<sp/>=<sp/>humidity_ticks.bytes[0];</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>humidity_ticks_crc8<sp/>=<sp/>sgp4x_calculate_crc8(crc8_buffer.bytes);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>construct<sp/>tx<sp/>packet<sp/>-<sp/>big-endian<sp/>order<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/>tx_buffer[0]<sp/>=<sp/>command.bytes[1];</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/>tx_buffer[1]<sp/>=<sp/>command.bytes[0];</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/>tx_buffer[2]<sp/>=<sp/>humidity_ticks.bytes[1];</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/>tx_buffer[3]<sp/>=<sp/>humidity_ticks.bytes[0];</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/>tx_buffer[4]<sp/>=<sp/>humidity_ticks_crc8;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/>tx_buffer[5]<sp/>=<sp/>temperature_ticks.bytes[1];</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/>tx_buffer[6]<sp/>=<sp/>temperature_ticks.bytes[0];</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/>tx_buffer[7]<sp/>=<sp/>temperature_ticks_crc8;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>attempt<sp/>i2c<sp/>write<sp/>transaction<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_RETURN_ON_ERROR(<sp/>sgp4x_i2c_write(handle,<sp/>tx_buffer,<sp/>BIT64_UINT8_BUFFER_SIZE),<sp/>TAG,<sp/></highlight><highlight class="stringliteral">&quot;unable<sp/>to<sp/>write<sp/>to<sp/>i2c<sp/>device<sp/>handle,<sp/>execute<sp/>compensated<sp/>conditioning<sp/>failed&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>delay<sp/>before<sp/>next<sp/>i2c<sp/>transaction<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(sgp4x_get_command_duration_ms(<ref refid="sgp4x_8c_1aafcb455fae4531a0f4fb064d297ce376" kindref="member">SGP4X_CMD_EXEC_CONDITIONING</ref>)));</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>retry<sp/>needed<sp/>-<sp/>unexpected<sp/>nack<sp/>indicates<sp/>that<sp/>the<sp/>sensor<sp/>is<sp/>still<sp/>busy<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>attempt<sp/>i2c<sp/>read<sp/>transaction<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>sgp4x_i2c_read(handle,<sp/>rx_buffer,<sp/>BIT24_UINT8_BUFFER_SIZE);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>delay<sp/>before<sp/>next<sp/>retry<sp/>attempt<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(SGP4X_RETRY_DELAY_MS));</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(ret<sp/>!=<sp/>ESP_OK<sp/>&amp;&amp;<sp/>++rx_retry_count<sp/>&lt;=<sp/>rx_retry_max);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>attempt<sp/>i2c<sp/>read<sp/>transaction<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_RETURN_ON_ERROR(<sp/>ret,<sp/>TAG,<sp/></highlight><highlight class="stringliteral">&quot;unable<sp/>to<sp/>read<sp/>to<sp/>i2c<sp/>device<sp/>handle,<sp/>execute<sp/>compensated<sp/>conditioning<sp/>failed&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>validate<sp/>crc<sp/>from<sp/>rx<sp/>result<sp/>-<sp/>little-endian<sp/>order<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_RETURN_ON_FALSE(<sp/>(sgp4x_calculate_crc8(rx_buffer)<sp/>==<sp/>rx_buffer[2]),<sp/>ESP_ERR_INVALID_CRC,<sp/>TAG,<sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>crc8,<sp/>execute<sp/>compensated<sp/>conditioning<sp/>failed&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>set<sp/>output<sp/>parameter<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>*sraw_voc<sp/>=<sp/>(uint16_t)rx_buffer[0]<sp/>&lt;&lt;<sp/>8<sp/>|<sp/>(uint16_t)rx_buffer[1];</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ESP_OK;</highlight></codeline>
<codeline lineno="395"><highlight class="normal">}</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal">esp_err_t<sp/><ref refid="group__drivers_1ga12f002286cb3e1a07ee467160febf165" kindref="member">sgp4x_execute_conditioning</ref>(<ref refid="group__drivers_1gac40d2deb3fe0027ff3588c50d583b0cd" kindref="member">sgp4x_handle_t</ref><sp/>handle,<sp/>uint16_t<sp/>*sraw_voc)<sp/>{</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>validate<sp/>arguments<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_ARG_CHECK(<sp/>handle<sp/>);</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>attempt<sp/>to<sp/>execute<sp/>compensated<sp/>conditioning<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_RETURN_ON_ERROR(<sp/><ref refid="group__drivers_1ga52efe21453b1d3606b14e49aefef9ae1" kindref="member">sgp4x_execute_compensated_conditioning</ref>(handle,<sp/>SGP4X_TEMPERATURE_COMP_DEFAULT,<sp/>SGP4X_HUMIDITY_COMP_DEFAULT,<sp/>sraw_voc),<sp/>TAG,<sp/></highlight><highlight class="stringliteral">&quot;unable<sp/>to<sp/>write<sp/>to<sp/>i2c<sp/>device<sp/>handle,<sp/>execute<sp/>conditioning<sp/>failed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ESP_OK;</highlight></codeline>
<codeline lineno="405"><highlight class="normal">}</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal">esp_err_t<sp/><ref refid="group__drivers_1gaadd5bf985665147c4d997b26120dd9aa" kindref="member">sgp4x_measure_compensated_signals</ref>(<ref refid="group__drivers_1gac40d2deb3fe0027ff3588c50d583b0cd" kindref="member">sgp4x_handle_t</ref><sp/>handle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>temperature,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>humidity,<sp/>uint16_t<sp/>*sraw_voc,<sp/>uint16_t<sp/>*sraw_nox)<sp/>{</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rx_retry_max<sp/><sp/><sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="unionbytes__to__uint16__t" kindref="compound">bytes_to_uint16_t</ref><sp/><sp/><sp/><sp/><sp/>command<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>{<sp/>.value<sp/>=<sp/><ref refid="sgp4x_8c_1ae334971aa1dde59e09802d080c33c18d" kindref="member">SGP4X_CMD_MEAS_RAW_SIGNALS</ref><sp/>};</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>esp_err_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>ESP_OK;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rx_retry_count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionbytes__to__uint16__t" kindref="compound">bytes_to_uint16_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>crc8_buffer<sp/><sp/><sp/><sp/>=<sp/>{<sp/>.value<sp/>=<sp/>0<sp/>};</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/>bit64_uint8_buffer_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tx_buffer<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>{<sp/>0<sp/>};</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/>bit48_uint8_buffer_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rx_buffer<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>{<sp/>0<sp/>};</highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>validate<sp/>arguments<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_ARG_CHECK(<sp/>handle<sp/>);</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>validate<sp/>range<sp/>of<sp/>temperature<sp/>compensation<sp/>parameter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(temperature<sp/>&gt;<sp/>SGP4X_TEMPERATURE_MAX<sp/>||<sp/>temperature<sp/>&lt;<sp/>SGP4X_TEMPERATURE_MIN)<sp/>{</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_RETURN_ON_FALSE(<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>ESP_ERR_INVALID_ARG,<sp/>TAG,<sp/></highlight><highlight class="stringliteral">&quot;temperature<sp/>is<sp/>out<sp/>of<sp/>range,<sp/>measure<sp/>compensated<sp/>raw<sp/>signals<sp/>failed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>validate<sp/>range<sp/>of<sp/>humidity<sp/>compensation<sp/>parameter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(humidity<sp/>&gt;<sp/>SGP4X_HUMIDITY_MAX<sp/>||<sp/>humidity<sp/>&lt;<sp/>SGP4X_HUMIDITY_MIN)<sp/>{</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_RETURN_ON_FALSE(<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>ESP_ERR_INVALID_ARG,<sp/>TAG,<sp/></highlight><highlight class="stringliteral">&quot;humidity<sp/>is<sp/>out<sp/>of<sp/>range,<sp/>measure<sp/>compensated<sp/>raw<sp/>signals<sp/>failed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>convert<sp/>compensation<sp/>parameters<sp/>to<sp/>ticks<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="unionbytes__to__uint16__t" kindref="compound">bytes_to_uint16_t</ref><sp/>temperature_ticks<sp/>=<sp/>sgp4x_temperature_to_ticks(temperature);</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="unionbytes__to__uint16__t" kindref="compound">bytes_to_uint16_t</ref><sp/>humidity_ticks<sp/><sp/><sp/><sp/>=<sp/>sgp4x_humidity_to_ticks(humidity);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>calculate<sp/>crc8<sp/>for<sp/>compensation<sp/>parameter<sp/>ticks<sp/>-<sp/>big-endian<sp/>order<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/>crc8_buffer.bytes[0]<sp/>=<sp/>temperature_ticks.bytes[1];</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/>crc8_buffer.bytes[1]<sp/>=<sp/>temperature_ticks.bytes[0];</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>temperature_ticks_crc8<sp/>=<sp/>sgp4x_calculate_crc8(crc8_buffer.bytes);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/>crc8_buffer.bytes[0]<sp/>=<sp/>humidity_ticks.bytes[1];</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/>crc8_buffer.bytes[1]<sp/>=<sp/>humidity_ticks.bytes[0];</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>humidity_ticks_crc8<sp/>=<sp/>sgp4x_calculate_crc8(crc8_buffer.bytes);</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>construct<sp/>tx<sp/>packet<sp/>-<sp/>big-endian<sp/>order<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/>tx_buffer[0]<sp/>=<sp/>command.bytes[1];</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/>tx_buffer[1]<sp/>=<sp/>command.bytes[0];</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/>tx_buffer[2]<sp/>=<sp/>humidity_ticks.bytes[1];</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/>tx_buffer[3]<sp/>=<sp/>humidity_ticks.bytes[0];</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/>tx_buffer[4]<sp/>=<sp/>humidity_ticks_crc8;</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/>tx_buffer[5]<sp/>=<sp/>temperature_ticks.bytes[1];</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/>tx_buffer[6]<sp/>=<sp/>temperature_ticks.bytes[0];</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/>tx_buffer[7]<sp/>=<sp/>temperature_ticks_crc8;</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>attempt<sp/>i2c<sp/>write<sp/>transaction<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_RETURN_ON_ERROR(<sp/>sgp4x_i2c_write(handle,<sp/>tx_buffer,<sp/>BIT64_UINT8_BUFFER_SIZE),<sp/>TAG,<sp/></highlight><highlight class="stringliteral">&quot;unable<sp/>to<sp/>write<sp/>to<sp/>i2c<sp/>device<sp/>handle,<sp/>measure<sp/>compensated<sp/>raw<sp/>signals<sp/>failed&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>delay<sp/>before<sp/>next<sp/>i2c<sp/>transaction<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(sgp4x_get_command_duration_ms(<ref refid="sgp4x_8c_1ae334971aa1dde59e09802d080c33c18d" kindref="member">SGP4X_CMD_MEAS_RAW_SIGNALS</ref>)));</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>retry<sp/>needed<sp/>-<sp/>unexpected<sp/>nack<sp/>indicates<sp/>that<sp/>the<sp/>sensor<sp/>is<sp/>still<sp/>busy<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>attempt<sp/>i2c<sp/>read<sp/>transaction<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>sgp4x_i2c_read(handle,<sp/>rx_buffer,<sp/>BIT48_UINT8_BUFFER_SIZE);</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>delay<sp/>before<sp/>next<sp/>retry<sp/>attempt<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(SGP4X_RETRY_DELAY_MS));</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(ret<sp/>!=<sp/>ESP_OK<sp/>&amp;&amp;<sp/>++rx_retry_count<sp/>&lt;=<sp/>rx_retry_max);</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>attempt<sp/>i2c<sp/>read<sp/>transaction<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_RETURN_ON_ERROR(<sp/>ret,<sp/>TAG,<sp/></highlight><highlight class="stringliteral">&quot;unable<sp/>to<sp/>read<sp/>to<sp/>i2c<sp/>device<sp/>handle,<sp/>measure<sp/>compensated<sp/>raw<sp/>signals<sp/>failed&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>validate<sp/>crc<sp/>from<sp/>rx<sp/>result<sp/>-<sp/>little-endian<sp/>order<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/>crc8_buffer.bytes[0]<sp/>=<sp/>rx_buffer[0];</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/>crc8_buffer.bytes[1]<sp/>=<sp/>rx_buffer[1];</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_RETURN_ON_FALSE(<sp/>(sgp4x_calculate_crc8(crc8_buffer.bytes)<sp/>==<sp/>rx_buffer[2]),<sp/>ESP_ERR_INVALID_CRC,<sp/>TAG,<sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>crc8<sp/>for<sp/>sraw_voc,<sp/>measure<sp/>compensated<sp/>raw<sp/>signals<sp/>failed&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/>crc8_buffer.bytes[0]<sp/>=<sp/>rx_buffer[3];</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/>crc8_buffer.bytes[1]<sp/>=<sp/>rx_buffer[4];</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_RETURN_ON_FALSE(<sp/>(sgp4x_calculate_crc8(crc8_buffer.bytes)<sp/>==<sp/>rx_buffer[5]),<sp/>ESP_ERR_INVALID_CRC,<sp/>TAG,<sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>crc8<sp/>for<sp/>sraw_nox,<sp/>measure<sp/>compensated<sp/>raw<sp/>signals<sp/>failed&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>set<sp/>output<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/>*sraw_voc<sp/>=<sp/>(uint16_t)rx_buffer[0]<sp/>&lt;&lt;<sp/>8<sp/>|<sp/>(uint16_t)rx_buffer[1];</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/>*sraw_nox<sp/>=<sp/>(uint16_t)rx_buffer[3]<sp/>&lt;&lt;<sp/>8<sp/>|<sp/>(uint16_t)rx_buffer[4];</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ESP_OK;</highlight></codeline>
<codeline lineno="482"><highlight class="normal">}</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal">esp_err_t<sp/><ref refid="group__drivers_1ga4efe02574e8280c6d1f75e5d67c1c282" kindref="member">sgp4x_measure_signals</ref>(<ref refid="group__drivers_1gac40d2deb3fe0027ff3588c50d583b0cd" kindref="member">sgp4x_handle_t</ref><sp/>handle,<sp/>uint16_t<sp/>*sraw_voc,<sp/>uint16_t<sp/>*sraw_nox)<sp/>{</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>validate<sp/>arguments<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_ARG_CHECK(<sp/>handle<sp/>);</highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>attempt<sp/>to<sp/>execute<sp/>compensated<sp/>raw<sp/>signals<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_RETURN_ON_ERROR(<ref refid="group__drivers_1gaadd5bf985665147c4d997b26120dd9aa" kindref="member">sgp4x_measure_compensated_signals</ref>(handle,<sp/>25.0f,<sp/>50.0f,<sp/>sraw_voc,<sp/>sraw_nox),<sp/>TAG,<sp/></highlight><highlight class="stringliteral">&quot;unable<sp/>to<sp/>write<sp/>to<sp/>i2c<sp/>device<sp/>handle,<sp/>measure<sp/>raw<sp/>signals<sp/>failed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ESP_OK;</highlight></codeline>
<codeline lineno="492"><highlight class="normal">}</highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal">esp_err_t<sp/><ref refid="group__drivers_1ga74a5a683b3490a8aaf03b03539929fae" kindref="member">sgp4x_execute_self_test</ref>(<ref refid="group__drivers_1gac40d2deb3fe0027ff3588c50d583b0cd" kindref="member">sgp4x_handle_t</ref><sp/>handle,<sp/>sgp4x_self_test_result_t<sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>result)<sp/>{</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>rx_retry_max<sp/><sp/><sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/>esp_err_t<sp/><sp/><sp/><sp/><sp/>ret<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>ESP_OK;</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>rx_retry_count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/>bit24_uint8_buffer_t<sp/>rx_buffer<sp/>=<sp/>{<sp/>0<sp/>};</highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>validate<sp/>arguments<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_ARG_CHECK(<sp/>handle<sp/>);</highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>attempt<sp/>i2c<sp/>write<sp/>transaction<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_RETURN_ON_ERROR(<sp/>sgp4x_i2c_write_command(handle,<sp/><ref refid="sgp4x_8c_1a6a8d982a8c99deec6f2fc73126612466" kindref="member">SGP4X_CMD_EXEC_SELF_TEST</ref>),<sp/>TAG,<sp/></highlight><highlight class="stringliteral">&quot;unable<sp/>to<sp/>write<sp/>to<sp/>i2c<sp/>device<sp/>handle,<sp/>execute<sp/>self-test<sp/>failed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>delay<sp/>before<sp/>next<sp/>i2c<sp/>transaction<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(sgp4x_get_command_duration_ms(<ref refid="sgp4x_8c_1a6a8d982a8c99deec6f2fc73126612466" kindref="member">SGP4X_CMD_EXEC_SELF_TEST</ref>)));</highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>retry<sp/>needed<sp/>-<sp/>unexpected<sp/>nack<sp/>indicates<sp/>that<sp/>the<sp/>sensor<sp/>is<sp/>still<sp/>busy<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>attempt<sp/>i2c<sp/>read<sp/>transaction<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>sgp4x_i2c_read(handle,<sp/>rx_buffer,<sp/>BIT24_UINT8_BUFFER_SIZE);</highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>delay<sp/>before<sp/>next<sp/>retry<sp/>attempt<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(SGP4X_RETRY_DELAY_MS));</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(ret<sp/>!=<sp/>ESP_OK<sp/>&amp;&amp;<sp/>++rx_retry_count<sp/>&lt;=<sp/>rx_retry_max);</highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>attempt<sp/>i2c<sp/>read<sp/>transaction<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_RETURN_ON_ERROR(<sp/>ret,<sp/>TAG,<sp/></highlight><highlight class="stringliteral">&quot;unable<sp/>to<sp/>read<sp/>to<sp/>i2c<sp/>device<sp/>handle,<sp/>execute<sp/>self-test<sp/>failed&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>validate<sp/>crc<sp/>from<sp/>result<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_RETURN_ON_FALSE(<sp/>(sgp4x_calculate_crc8(rx_buffer)<sp/>==<sp/>rx_buffer[2]),<sp/>ESP_ERR_INVALID_CRC,<sp/>TAG,<sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>crc8,<sp/>execute<sp/>self-test<sp/>failed&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>set<sp/>results<sp/>-<sp/>lsb<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/>result-&gt;integrity<sp/>=<sp/>rx_buffer[0];</highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>delay<sp/>before<sp/>next<sp/>i2c<sp/>transaction<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(<ref refid="sgp4x_8c_1a8854136b0d6a520e0e3ed20c7fe8a8a2" kindref="member">SGP4X_CMD_DELAY_MS</ref>));</highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ESP_OK;</highlight></codeline>
<codeline lineno="531"><highlight class="normal">}</highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal">esp_err_t<sp/><ref refid="group__drivers_1ga1a819671d1ed391a0666e7c8b3b0721e" kindref="member">sgp4x_turn_heater_off</ref>(<ref refid="group__drivers_1gac40d2deb3fe0027ff3588c50d583b0cd" kindref="member">sgp4x_handle_t</ref><sp/>handle)<sp/>{</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>validate<sp/>arguments<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_ARG_CHECK(<sp/>handle<sp/>);</highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>attempt<sp/>i2c<sp/>write<sp/>transaction<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_RETURN_ON_ERROR(<sp/>sgp4x_i2c_write_command(handle,<sp/><ref refid="sgp4x_8c_1a6d2e2a4f53c2ad0d687f3efc1d0826ab" kindref="member">SGP4X_CMD_TURN_HEATER_OFF</ref>),<sp/>TAG,<sp/></highlight><highlight class="stringliteral">&quot;unable<sp/>to<sp/>write<sp/>to<sp/>i2c<sp/>device<sp/>handle,<sp/>turn<sp/>off<sp/>heater<sp/>failed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>delay<sp/>before<sp/>next<sp/>i2c<sp/>transaction<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(sgp4x_get_command_duration_ms(<ref refid="sgp4x_8c_1a6d2e2a4f53c2ad0d687f3efc1d0826ab" kindref="member">SGP4X_CMD_TURN_HEATER_OFF</ref>)));</highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ESP_OK;</highlight></codeline>
<codeline lineno="544"><highlight class="normal">}</highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal">esp_err_t<sp/><ref refid="group__drivers_1ga1dd9539587a9de55514ab1dbeeb5d705" kindref="member">sgp4x_reset</ref>(<ref refid="group__drivers_1gac40d2deb3fe0027ff3588c50d583b0cd" kindref="member">sgp4x_handle_t</ref><sp/>handle)<sp/>{</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>validate<sp/>arguments<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_ARG_CHECK(<sp/>handle<sp/>);</highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>attempt<sp/>i2c<sp/>write<sp/>transaction<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_RETURN_ON_ERROR(<sp/>sgp4x_i2c_write_command(handle,<sp/>SGP4X_CMD_RESET),<sp/>TAG,<sp/></highlight><highlight class="stringliteral">&quot;unable<sp/>to<sp/>write<sp/>to<sp/>i2c<sp/>device<sp/>handle,<sp/>soft-reset<sp/>failed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>delay<sp/>before<sp/>next<sp/>i2c<sp/>transaction<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(sgp4x_get_command_duration_ms(SGP4X_CMD_RESET)));</highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ESP_OK;</highlight></codeline>
<codeline lineno="557"><highlight class="normal">}</highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal">esp_err_t<sp/><ref refid="group__drivers_1ga05534062bf7f57eac9d0992fb788c4d7" kindref="member">sgp4x_remove</ref>(<ref refid="group__drivers_1gac40d2deb3fe0027ff3588c50d583b0cd" kindref="member">sgp4x_handle_t</ref><sp/>handle)<sp/>{</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>validate<sp/>arguments<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_ARG_CHECK(<sp/>handle<sp/>);</highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i2c_master_bus_rm_device(handle-&gt;<ref refid="structsgp4x__context__t_1aebc33e9d9d97bc57c51d01fa39056a22" kindref="member">i2c_handle</ref>);</highlight></codeline>
<codeline lineno="564"><highlight class="normal">}</highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal">esp_err_t<sp/><ref refid="group__drivers_1gad0cd93f1a86d46ac471b1266854ad781" kindref="member">sgp4x_delete</ref>(<ref refid="group__drivers_1gac40d2deb3fe0027ff3588c50d583b0cd" kindref="member">sgp4x_handle_t</ref><sp/>handle)<sp/>{</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>validate<sp/>arguments<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_ARG_CHECK(<sp/>handle<sp/>);</highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>remove<sp/>device<sp/>from<sp/>master<sp/>bus<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_RETURN_ON_ERROR(<sp/><ref refid="group__drivers_1ga05534062bf7f57eac9d0992fb788c4d7" kindref="member">sgp4x_remove</ref>(handle),<sp/>TAG,<sp/></highlight><highlight class="stringliteral">&quot;unable<sp/>to<sp/>remove<sp/>device<sp/>from<sp/>i2c<sp/>master<sp/>bus,<sp/>delete<sp/>handle<sp/>failed&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>validate<sp/>handle<sp/>instance<sp/>and<sp/>free<sp/>handles<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(handle-&gt;<ref refid="structsgp4x__context__t_1aebc33e9d9d97bc57c51d01fa39056a22" kindref="member">i2c_handle</ref>)<sp/>{</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(handle-&gt;<ref refid="structsgp4x__context__t_1aebc33e9d9d97bc57c51d01fa39056a22" kindref="member">i2c_handle</ref>);</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(handle);</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ESP_OK;</highlight></codeline>
<codeline lineno="580"><highlight class="normal">}</highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="group__drivers_1gaff4d0425f787cda12108abe40e286d37" kindref="member">sgp4x_get_fw_version</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SGP4X_FW_VERSION_STR;</highlight></codeline>
<codeline lineno="584"><highlight class="normal">}</highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal">int32_t<sp/><ref refid="group__drivers_1ga2bf0031a0518fb0d4d8f1db8bf200dbb" kindref="member">sgp4x_get_fw_version_number</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>SGP4X_FW_VERSION_INT32;</highlight></codeline>
<codeline lineno="588"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="components/peripherals/i2c/esp_sgp4x/sgp4x.c"/>
  </compounddef>
</doxygen>
