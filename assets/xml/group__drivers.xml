<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="group__drivers" kind="group">
    <compoundname>drivers</compoundname>
    <title>guva-s12sd uv sensor</title>
    <innerclass refid="structs12sd__config__s" prot="public">s12sd_config_s</innerclass>
    <innerclass refid="structs12sd__context__t" prot="public">s12sd_context_t</innerclass>
    <innerclass refid="structahtxx__config__s" prot="public">ahtxx_config_s</innerclass>
    <innerclass refid="structahtxx__context__t" prot="public">ahtxx_context_t</innerclass>
    <innerclass refid="structak8975__magnetic__axes__data__s" prot="public">ak8975_magnetic_axes_data_s</innerclass>
    <innerclass refid="structak8975__axes__data__s" prot="public">ak8975_axes_data_s</innerclass>
    <innerclass refid="structak8975__config__s" prot="public">ak8975_config_s</innerclass>
    <innerclass refid="structak8975__context__t" prot="public">ak8975_context_t</innerclass>
    <innerclass refid="structas3935__config__s" prot="public">as3935_config_s</innerclass>
    <innerclass refid="structas3935__context__t" prot="public">as3935_context_t</innerclass>
    <innerclass refid="structas3935__monitor__base__s" prot="public">as3935_monitor_base_s</innerclass>
    <innerclass refid="structas3935__monitor__context__s" prot="public">as3935_monitor_context_s</innerclass>
    <innerclass refid="structas7341__channels__basic__counts__data__s" prot="public">as7341_channels_basic_counts_data_s</innerclass>
    <innerclass refid="structas7341__channels__spectral__data__s" prot="public">as7341_channels_spectral_data_s</innerclass>
    <innerclass refid="structas7341__config__s" prot="public">as7341_config_s</innerclass>
    <innerclass refid="structas7341__context__t" prot="public">as7341_context_t</innerclass>
    <innerclass refid="structbh1750__config__s" prot="public">bh1750_config_s</innerclass>
    <innerclass refid="structbh1750__context__t" prot="public">bh1750_context_t</innerclass>
    <innerclass refid="structbme680__cal__factors__s" prot="public">bme680_cal_factors_s</innerclass>
    <innerclass refid="structbme680__data__s" prot="public">bme680_data_s</innerclass>
    <innerclass refid="structbme680__adc__data__s" prot="public">bme680_adc_data_s</innerclass>
    <innerclass refid="structbme680__config__s" prot="public">bme680_config_s</innerclass>
    <innerclass refid="structbme680__context__t" prot="public">bme680_context_t</innerclass>
    <innerclass refid="structbmp280__cal__factors__s" prot="public">bmp280_cal_factors_s</innerclass>
    <innerclass refid="structbmp280__config__s" prot="public">bmp280_config_s</innerclass>
    <innerclass refid="structbmp280__context__t" prot="public">bmp280_context_t</innerclass>
    <innerclass refid="structbmp390__cal__factors__s" prot="public">bmp390_cal_factors_s</innerclass>
    <innerclass refid="structbmp390__conv__cal__factors__s" prot="public">bmp390_conv_cal_factors_s</innerclass>
    <innerclass refid="structbmp390__config__s" prot="public">bmp390_config_s</innerclass>
    <innerclass refid="structbmp390__context__t" prot="public">bmp390_context_t</innerclass>
    <innerclass refid="structccs811__thresholds__register__s" prot="public">ccs811_thresholds_register_s</innerclass>
    <innerclass refid="structccs811__environmental__data__register__s" prot="public">ccs811_environmental_data_register_s</innerclass>
    <innerclass refid="structccs811__error__row__s" prot="public">ccs811_error_row_s</innerclass>
    <innerclass refid="structccs811__measure__mode__row__s" prot="public">ccs811_measure_mode_row_s</innerclass>
    <innerclass refid="structccs811__config__t" prot="public">ccs811_config_t</innerclass>
    <innerclass refid="structccs811__context__t" prot="public">ccs811_context_t</innerclass>
    <innerclass refid="unionens160__app__version__u" prot="public">ens160_app_version_u</innerclass>
    <innerclass refid="structens160__air__quality__data__s" prot="public">ens160_air_quality_data_s</innerclass>
    <innerclass refid="structens160__air__quality__raw__data__s" prot="public">ens160_air_quality_raw_data_s</innerclass>
    <innerclass refid="structens160__aqi__uba__row__s" prot="public">ens160_aqi_uba_row_s</innerclass>
    <innerclass refid="structens160__config__s" prot="public">ens160_config_s</innerclass>
    <innerclass refid="structens160__context__t" prot="public">ens160_context_t</innerclass>
    <innerclass refid="structhdc1080__config__s" prot="public">hdc1080_config_s</innerclass>
    <innerclass refid="structhdc1080__context__t" prot="public">hdc1080_context_t</innerclass>
    <innerclass refid="structhmc5883l__axes__data__s" prot="public">hmc5883l_axes_data_s</innerclass>
    <innerclass refid="structhmc5883l__magnetic__axes__data__s" prot="public">hmc5883l_magnetic_axes_data_s</innerclass>
    <innerclass refid="structhmc5883l__offset__axes__data__s" prot="public">hmc5883l_offset_axes_data_s</innerclass>
    <innerclass refid="structhmc5883l__gain__error__axes__data__s" prot="public">hmc5883l_gain_error_axes_data_s</innerclass>
    <innerclass refid="structhmc5883l__config__s" prot="public">hmc5883l_config_s</innerclass>
    <innerclass refid="structhmc5883l__context__t" prot="public">hmc5883l_context_t</innerclass>
    <innerclass refid="structina226__config__s" prot="public">ina226_config_s</innerclass>
    <innerclass refid="structina226__context__t" prot="public">ina226_context_t</innerclass>
    <innerclass refid="structltr390uv__config__s" prot="public">ltr390uv_config_s</innerclass>
    <innerclass refid="structltr390uv__context__t" prot="public">ltr390uv_context_t</innerclass>
    <innerclass refid="structmax30105__config__s" prot="public">max30105_config_s</innerclass>
    <innerclass refid="structmax30105__context__t" prot="public">max30105_context_t</innerclass>
    <innerclass refid="structmlx90614__config__s" prot="public">mlx90614_config_s</innerclass>
    <innerclass refid="structmlx90614__context__t" prot="public">mlx90614_context_t</innerclass>
    <innerclass refid="structmmc56x3__magnetic__axes__data__s" prot="public">mmc56x3_magnetic_axes_data_s</innerclass>
    <innerclass refid="structmmc56x3__selftest__axes__data__s" prot="public">mmc56x3_selftest_axes_data_s</innerclass>
    <innerclass refid="structmmc56x3__config__s" prot="public">mmc56x3_config_s</innerclass>
    <innerclass refid="structmmc56x3__context__t" prot="public">mmc56x3_context_t</innerclass>
    <innerclass refid="structmpu6050__data__axes__s" prot="public">mpu6050_data_axes_s</innerclass>
    <innerclass refid="structmpu6050__gyro__data__axes__s" prot="public">mpu6050_gyro_data_axes_s</innerclass>
    <innerclass refid="structmpu6050__accel__data__axes__s" prot="public">mpu6050_accel_data_axes_s</innerclass>
    <innerclass refid="structmpu6050__attitude__s" prot="public">mpu6050_attitude_s</innerclass>
    <innerclass refid="structmpu6050__config__s" prot="public">mpu6050_config_s</innerclass>
    <innerclass refid="structmpu6050__context__t" prot="public">mpu6050_context_t</innerclass>
    <innerclass refid="structsgp4x__config__t" prot="public">sgp4x_config_t</innerclass>
    <innerclass refid="structsgp4x__context__t" prot="public">sgp4x_context_t</innerclass>
    <innerclass refid="unioni2c__sht4x__data______t" prot="public">i2c_sht4x_data___t</innerclass>
    <innerclass refid="structsht4x__config__s" prot="public">sht4x_config_s</innerclass>
    <innerclass refid="structsht4x__context__t" prot="public">sht4x_context_t</innerclass>
    <innerclass refid="structssd1306__page__s" prot="public">ssd1306_page_s</innerclass>
    <innerclass refid="structssd1306__panel__s" prot="public">ssd1306_panel_s</innerclass>
    <innerclass refid="structssd1306__bdf__font__s" prot="public">ssd1306_bdf_font_s</innerclass>
    <innerclass refid="structssd1306__config__s" prot="public">ssd1306_config_s</innerclass>
    <innerclass refid="structssd1306__context__t" prot="public">ssd1306_context_t</innerclass>
    <innerclass refid="structtbi2cxxx__config__s" prot="public">tbi2cxxx_config_s</innerclass>
    <innerclass refid="structtbi2cxxx__context__t" prot="public">tbi2cxxx_context_t</innerclass>
    <innerclass refid="structtlv493d__raw__data__s" prot="public">tlv493d_raw_data_s</innerclass>
    <innerclass refid="structtlv493d__data__s" prot="public">tlv493d_data_s</innerclass>
    <innerclass refid="structtlv493d__config__s" prot="public">tlv493d_config_s</innerclass>
    <innerclass refid="structtlv493d__context__t" prot="public">tlv493d_context_t</innerclass>
    <innerclass refid="structveml6040__config__s" prot="public">veml6040_config_s</innerclass>
    <innerclass refid="structveml6040__context__t" prot="public">veml6040_context_t</innerclass>
    <innerclass refid="structveml7700__config__s" prot="public">veml7700_config_s</innerclass>
    <innerclass refid="structveml7700__context__t" prot="public">veml7700_context_t</innerclass>
    <innerclass refid="structds18b20__config__s" prot="public">ds18b20_config_s</innerclass>
    <innerclass refid="structds18b20__context__t" prot="public">ds18b20_context_t</innerclass>
    <innerclass refid="structspi__max31865__config__t" prot="public">spi_max31865_config_t</innerclass>
    <innerclass refid="structspi__max31865__t" prot="public">spi_max31865_t</innerclass>
    <innerclass refid="structdatatable__event__tag" prot="public">datatable_event_tag</innerclass>
    <innerclass refid="structdatatable__id__column__data__type__tag" prot="public">datatable_id_column_data_type_tag</innerclass>
    <innerclass refid="structdatatable__ts__column__data__type__tag" prot="public">datatable_ts_column_data_type_tag</innerclass>
    <innerclass refid="structdatatable__vector__column__data__type__tag" prot="public">datatable_vector_column_data_type_tag</innerclass>
    <innerclass refid="structdatatable__bool__column__data__type__tag" prot="public">datatable_bool_column_data_type_tag</innerclass>
    <innerclass refid="structdatatable__float__column__data__type__tag" prot="public">datatable_float_column_data_type_tag</innerclass>
    <innerclass refid="structdatatable__fp16__column__data__type__tag" prot="public">datatable_fp16_column_data_type_tag</innerclass>
    <innerclass refid="structdatatable__int16__column__data__type__tag" prot="public">datatable_int16_column_data_type_tag</innerclass>
    <innerclass refid="structdatatable__column__name__tag" prot="public">datatable_column_name_tag</innerclass>
    <innerclass refid="structdatatable__column__tag" prot="public">datatable_column_tag</innerclass>
    <innerclass refid="structdatatable__process__tag" prot="public">datatable_process_tag</innerclass>
    <innerclass refid="uniondatatable__buffer__tag" prot="public">datatable_buffer_tag</innerclass>
    <innerclass refid="uniondatatable__row__data__column__tag" prot="public">datatable_row_data_column_tag</innerclass>
    <innerclass refid="structdatatable__row__tag" prot="public">datatable_row_tag</innerclass>
    <innerclass refid="structdatatable__config__tag" prot="public">datatable_config_tag</innerclass>
    <innerclass refid="structdatatable__t" prot="public">datatable_t</innerclass>
    <sectiondef kind="enum">
      <memberdef kind="enum" id="group__drivers_1gabab94be3831f8f2b9625a28dc64f09cb" prot="public" static="no" strong="no">
        <type></type>
        <name>ahtxx_sensor_types_e</name>
        <enumvalue id="group__drivers_1ggabab94be3831f8f2b9625a28dc64f09cbacc0abbe906a335f17a4b6f44c6ed7721" prot="public">
          <name>AHTXX_AHT10</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggabab94be3831f8f2b9625a28dc64f09cba6f9eecf60894579c1de0958e870fb203" prot="public">
          <name>AHTXX_AHT20</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggabab94be3831f8f2b9625a28dc64f09cbacc9aa4ba67a63606432baf1e9b94916d" prot="public">
          <name>AHTXX_AHT21</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggabab94be3831f8f2b9625a28dc64f09cbab2b43b5701afc5b69cc68dcab89a7dfe" prot="public">
          <name>AHTXX_AHT25</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggabab94be3831f8f2b9625a28dc64f09cba314ef5c94ad5389c032764f6371511d7" prot="public">
          <name>AHTXX_AHT30</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>AHTXX sensor types enumerator definition. </para>
        </briefdescription>
        <detaileddescription>
<para>public enumerator, union, and structure definitions </para>
<para><simplesect kind="note"><para>AHTXX types vary slightly with respect to setup and initialization according to available documentation. The AHT10 and AHT20 are setup through the initialization command. The AHT21, AHT25 and AHT30 are setup by resetting 0x1b, 0x1c, and 0x1e initializing registers. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ahtxx/include/ahtxx.h" line="119" column="1" bodyfile="components/peripherals/i2c/esp_ahtxx/include/ahtxx.h" bodystart="119" bodyend="125"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1gaa4cd7940a46bd75fcf1bcf0ddc1254dc" prot="public" static="no" strong="no">
        <type></type>
        <name>ak8975_operating_modes_e</name>
        <enumvalue id="group__drivers_1ggaa4cd7940a46bd75fcf1bcf0ddc1254dcab2cea80c8918e054d4d1f352fb322ed1" prot="public">
          <name>AK8975_OPMODE_POWER_DOWN</name>
          <initializer>= (0b0000)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>power-down mode </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggaa4cd7940a46bd75fcf1bcf0ddc1254dcaa0222614031659a26ca2d501626afdbe" prot="public">
          <name>AK8975_OPMODE_SINGLE_MEAS</name>
          <initializer>= (0b0001)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>single measurement mode </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggaa4cd7940a46bd75fcf1bcf0ddc1254dca64bdb034c5ddd0a9cb61c831503d04de" prot="public">
          <name>AK8975_OPMODE_SELF_TEST</name>
          <initializer>= (0b1000)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>self-test mode </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggaa4cd7940a46bd75fcf1bcf0ddc1254dcac8468040236abeafcfa7e2afe35dd051" prot="public">
          <name>AK8975_OPMODE_FUSE_ROM</name>
          <initializer>= (0b1111)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>fuse rom access mode </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>AK8975 operating modes enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ak8975/include/ak8975.h" line="79" column="1" bodyfile="components/peripherals/i2c/esp_ak8975/include/ak8975.h" bodystart="79" bodyend="84"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1ga63df1d57941dc4eeebbb6abce2893ec4" prot="public" static="no" strong="no">
        <type></type>
        <name>as3935_analog_frontends_e</name>
        <enumvalue id="group__drivers_1gga63df1d57941dc4eeebbb6abce2893ec4a6817274db5cb5e58226ceffb19a41e9d" prot="public">
          <name>AS3935_AFE_INDOOR</name>
          <initializer>= (0b10010)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga63df1d57941dc4eeebbb6abce2893ec4a4de0293d12d66fe07f7b412ffe7461e8" prot="public">
          <name>AS3935_AFE_OUTDOOR</name>
          <initializer>= (0b01110)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>AS3935 enumerator and structure declarations. </para>
        </briefdescription>
        <detaileddescription>
<para>AS3935 analog frontends (AFE) REG0x00[5:1] enumerator. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="133" column="1" bodyfile="components/peripherals/i2c/esp_as3935/include/as3935.h" bodystart="133" bodyend="136"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1ga76873b27bfda85122afe3056932a41b5" prot="public" static="no" strong="no">
        <type></type>
        <name>as3935_power_states_e</name>
        <enumvalue id="group__drivers_1gga76873b27bfda85122afe3056932a41b5a461040c9ec350d887f92290d6298cb13" prot="public">
          <name>AS3935_POWER_OFF</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga76873b27bfda85122afe3056932a41b5a191c790afb4ee25a5ea5dbc0a6078725" prot="public">
          <name>AS3935_POWER_ON</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>AS3935 power states REG0x00[0] enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="141" column="1" bodyfile="components/peripherals/i2c/esp_as3935/include/as3935.h" bodystart="141" bodyend="144"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1ga07e6782fe9746241d6091a5e671ddf06" prot="public" static="no" strong="no">
        <type></type>
        <name>as3935_clear_statistics_states_e</name>
        <enumvalue id="group__drivers_1gga07e6782fe9746241d6091a5e671ddf06ae0ddbae81b61275a7fdbb304db1db46d" prot="public">
          <name>AS3935_CLEAR_STATS_DISABLED</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga07e6782fe9746241d6091a5e671ddf06a34247c3673ff83d8c1208a4183ec6d45" prot="public">
          <name>AS3935_CLEAR_STATS_ENABLED</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>AS3935 clear statistics states REG0x02[6] enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="149" column="1" bodyfile="components/peripherals/i2c/esp_as3935/include/as3935.h" bodystart="149" bodyend="152"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1ga28767b92e44b11a5884ebf3061d9a753" prot="public" static="no" strong="no">
        <type></type>
        <name>as3935_disturber_detection_states_e</name>
        <enumvalue id="group__drivers_1gga28767b92e44b11a5884ebf3061d9a753ab3d7b3dee3c0d410067db6b427ff37e4" prot="public">
          <name>AS3935_DISTURBER_DETECTION_ENABLED</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga28767b92e44b11a5884ebf3061d9a753a034e26ee8565e7f02064fddf923e4551" prot="public">
          <name>AS3935_DISTURBER_DETECTION_DISABLED</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>AS3935 disturber detection states REG0x03[5] enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="157" column="1" bodyfile="components/peripherals/i2c/esp_as3935/include/as3935.h" bodystart="157" bodyend="160"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1gae8d5e63bd855f08926d2cf8dd575d4fb" prot="public" static="no" strong="no">
        <type></type>
        <name>as3935_co_irq_pin_states_e</name>
        <enumvalue id="group__drivers_1ggae8d5e63bd855f08926d2cf8dd575d4fbad409280d44735626c33930ccd2e97206" prot="public">
          <name>AS3935_CO_IRQ_PIN_ENABLED</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggae8d5e63bd855f08926d2cf8dd575d4fba1d90d547a6bc2a74ba6be25610523c49" prot="public">
          <name>AS3935_CO_IRQ_PIN_DISABLED</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>AS3935 CO IRQ pin states REG0x08[5]|[6]|[7] enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="165" column="1" bodyfile="components/peripherals/i2c/esp_as3935/include/as3935.h" bodystart="165" bodyend="168"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1ga0175dff15d1cdeaeb6356e51e164e1ef" prot="public" static="no" strong="no">
        <type></type>
        <name>as3935_watchdog_thresholds_e</name>
        <enumvalue id="group__drivers_1gga0175dff15d1cdeaeb6356e51e164e1efaba4c2ef0f0c2dd5a9a90e9bf232076ef" prot="public">
          <name>AS3935_WD_THRESHOLD_0</name>
          <initializer>= (0b0000)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga0175dff15d1cdeaeb6356e51e164e1efa63cea7c8d4c4c67344cd9b5c409ace3b" prot="public">
          <name>AS3935_WD_THRESHOLD_1</name>
          <initializer>= (0b0001)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga0175dff15d1cdeaeb6356e51e164e1efac6ee5e8c2a41f1163950b1a26339fdda" prot="public">
          <name>AS3935_WD_THRESHOLD_2</name>
          <initializer>= (0b0010)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga0175dff15d1cdeaeb6356e51e164e1efaf52ed62a6e86f793a561ba6d01988125" prot="public">
          <name>AS3935_WD_THRESHOLD_3</name>
          <initializer>= (0b0011)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga0175dff15d1cdeaeb6356e51e164e1efafe2b859081f85954452313f428e4b01e" prot="public">
          <name>AS3935_WD_THRESHOLD_4</name>
          <initializer>= (0b0100)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga0175dff15d1cdeaeb6356e51e164e1efa0da7062ac5047cf2fd1c475d4c17b578" prot="public">
          <name>AS3935_WD_THRESHOLD_5</name>
          <initializer>= (0b0101)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga0175dff15d1cdeaeb6356e51e164e1efa636f6dabfe85c329879b3a30cb53ed91" prot="public">
          <name>AS3935_WD_THRESHOLD_6</name>
          <initializer>= (0b0110)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga0175dff15d1cdeaeb6356e51e164e1efa37a11f95b62e885630e6e36af33d3d24" prot="public">
          <name>AS3935_WD_THRESHOLD_7</name>
          <initializer>= (0b0111)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga0175dff15d1cdeaeb6356e51e164e1efa56ce07341f1b9918af2ad74293723e8f" prot="public">
          <name>AS3935_WD_THRESHOLD_8</name>
          <initializer>= (0b1000)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga0175dff15d1cdeaeb6356e51e164e1efa438c91766e97769856fe726c8fea549a" prot="public">
          <name>AS3935_WD_THRESHOLD_9</name>
          <initializer>= (0b1001)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga0175dff15d1cdeaeb6356e51e164e1efadfa68ad44258be28794bd34a56ba98eb" prot="public">
          <name>AS3935_WD_THRESHOLD_10</name>
          <initializer>= (0b1010)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>AS3935 watchdog thresholds REG0x01[3:0] enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="173" column="1" bodyfile="components/peripherals/i2c/esp_as3935/include/as3935.h" bodystart="173" bodyend="185"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1ga29aaeb2c04fa0769eb47710872276ae7" prot="public" static="no" strong="no">
        <type></type>
        <name>as3935_noise_levels_e</name>
        <enumvalue id="group__drivers_1gga29aaeb2c04fa0769eb47710872276ae7a2d326ef33ade827a889002e55494e7da" prot="public">
          <name>AS3935_NOISE_LEVEL_390_28</name>
          <initializer>= (0b000)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>390 uVrms outdoor and 28 uVrms indoor </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga29aaeb2c04fa0769eb47710872276ae7ad7542daef4788ed27aaf67cb5528d81c" prot="public">
          <name>AS3935_NOISE_LEVEL_630_45</name>
          <initializer>= (0b001)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>630 uVrms outdoor and 45 uVrms indoor </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga29aaeb2c04fa0769eb47710872276ae7a9b00f0cab8e039c2ba638a28cf7b14ca" prot="public">
          <name>AS3935_NOISE_LEVEL_860_62</name>
          <initializer>= (0b010)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>860 uVrms outdoor and 63 uVrms indoor (default) </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga29aaeb2c04fa0769eb47710872276ae7a09554a46d99b152317a8245e0fea7172" prot="public">
          <name>AS3935_NOISE_LEVEL_1100_78</name>
          <initializer>= (0b011)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>1100 uVrms outdoor and 78 uVrms indoor </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga29aaeb2c04fa0769eb47710872276ae7a6cd36f882e57c0b6b1bc5ce6e5b4f3d4" prot="public">
          <name>AS3935_NOISE_LEVEL_1140_95</name>
          <initializer>= (0b100)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>1140 uVrms outdoor and 95 uVrms indoor </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga29aaeb2c04fa0769eb47710872276ae7ab11f049353bd646c69eef062a9fc2e18" prot="public">
          <name>AS3935_NOISE_LEVEL_1570_112</name>
          <initializer>= (0b101)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>1570 uVrms outdoor and 112 uVrms indoor </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga29aaeb2c04fa0769eb47710872276ae7a41f3908078e72609d0ef3170e01bb8ae" prot="public">
          <name>AS3935_NOISE_LEVEL_1800_130</name>
          <initializer>= (0b110)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>1800 uVrms outdoor and 130 uVrms indoor </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga29aaeb2c04fa0769eb47710872276ae7a6bd5da924b8796894ee9101c79bae1c7" prot="public">
          <name>AS3935_NOISE_LEVEL_2000_146</name>
          <initializer>= (0b111)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>2000 uVrms outdoor and 146 uVrms indoor </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>AS3935 noise floor generator and evaluation REG0x01[6:4] enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="190" column="1" bodyfile="components/peripherals/i2c/esp_as3935/include/as3935.h" bodystart="190" bodyend="199"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1gaf534bc5e125fdfbf1d17f73d9880b2f5" prot="public" static="no" strong="no">
        <type></type>
        <name>as3935_interrupt_states_e</name>
        <enumvalue id="group__drivers_1ggaf534bc5e125fdfbf1d17f73d9880b2f5a1ccbb566b6e1899730fd0617b6b27c94" prot="public">
          <name>AS3935_INT_NOISE</name>
          <initializer>= (0b0001)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>noise level too high </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggaf534bc5e125fdfbf1d17f73d9880b2f5a4cd264ad51e6e5cc0a3bab5cb76d3e39" prot="public">
          <name>AS3935_INT_DISTURBER</name>
          <initializer>= (0b0100)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>disturber detected </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggaf534bc5e125fdfbf1d17f73d9880b2f5a6ec157f9e96f39eee8033d3dd08a393b" prot="public">
          <name>AS3935_INT_LIGHTNING</name>
          <initializer>= (0b1000)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>lightning detected </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggaf534bc5e125fdfbf1d17f73d9880b2f5a6075415d11590c339af65745e506458e" prot="public">
          <name>AS3935_INT_NONE</name>
          <initializer>= (0b0000)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>no interrupt </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>AS3935 interrupt states REG0x03[3:0] enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="204" column="1" bodyfile="components/peripherals/i2c/esp_as3935/include/as3935.h" bodystart="204" bodyend="209"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1gac774273f7f01a9abefcce06b3dd47545" prot="public" static="no" strong="no">
        <type></type>
        <name>as3935_minimum_lightnings_e</name>
        <enumvalue id="group__drivers_1ggac774273f7f01a9abefcce06b3dd47545a86ccec10a990ab89fca9cbaa51a0a7a0" prot="public">
          <name>AS3935_MIN_LIGHTNING_1</name>
          <initializer>= (0b00)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggac774273f7f01a9abefcce06b3dd47545a178367d6b6e7289d44ff5446f02a02c5" prot="public">
          <name>AS3935_MIN_LIGHTNING_5</name>
          <initializer>= (0b01)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggac774273f7f01a9abefcce06b3dd47545a0a8504b678388704b37b44da2359c4ea" prot="public">
          <name>AS3935_MIN_LIGHTNING_9</name>
          <initializer>= (0b10)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggac774273f7f01a9abefcce06b3dd47545a285519be945d80ae560dfbe3f48286b8" prot="public">
          <name>AS3935_MIN_LIGHTNING_16</name>
          <initializer>= (0b11)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>AS3935 minimum number of lightning detections REG0x02[5:4] enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="214" column="1" bodyfile="components/peripherals/i2c/esp_as3935/include/as3935.h" bodystart="214" bodyend="219"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1gac4304bb8b282c117513c857c129366da" prot="public" static="no" strong="no">
        <type></type>
        <name>as3935_frequency_division_ratios_e</name>
        <enumvalue id="group__drivers_1ggac4304bb8b282c117513c857c129366daa90efc4af4df2a3fa3a3b4a70bed673f1" prot="public">
          <name>AS3935_FREQ_DIV_RATIO_16</name>
          <initializer>= (0b00)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggac4304bb8b282c117513c857c129366daa04312aaff845efb83ba36fbc43e381e4" prot="public">
          <name>AS3935_FREQ_DIV_RATIO_32</name>
          <initializer>= (0b01)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggac4304bb8b282c117513c857c129366daac3bc6c0cdca49ab274a715ec5d95ba2a" prot="public">
          <name>AS3935_FREQ_DIV_RATIO_64</name>
          <initializer>= (0b10)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggac4304bb8b282c117513c857c129366daa243ede751917bfb1cdec2f4bbe3d9759" prot="public">
          <name>AS3935_FREQ_DIV_RATIO_128</name>
          <initializer>= (0b11)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>AS3935 frequency division ratio for antenna tunning REG0x03[7:3] LCO_FDIV enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="224" column="1" bodyfile="components/peripherals/i2c/esp_as3935/include/as3935.h" bodystart="224" bodyend="229"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1ga5eb1c46f1bc22a554c2f5d0f5915ea33" prot="public" static="no" strong="no">
        <type></type>
        <name>as3935_lightning_distances_e</name>
        <enumvalue id="group__drivers_1gga5eb1c46f1bc22a554c2f5d0f5915ea33a6db49accbbad62718d6a4a855aa2ad95" prot="public">
          <name>AS3935_L_DISTANCE_OVERHEAD</name>
          <initializer>= (0b000001)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga5eb1c46f1bc22a554c2f5d0f5915ea33ab3e4e0ed55ed4c6463cde283e30d82ad" prot="public">
          <name>AS3935_L_DISTANCE_5KM</name>
          <initializer>= (0b000101)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga5eb1c46f1bc22a554c2f5d0f5915ea33aac8d6050723529cb1c455a32badb314c" prot="public">
          <name>AS3935_L_DISTANCE_6KM</name>
          <initializer>= (0b000110)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga5eb1c46f1bc22a554c2f5d0f5915ea33ad9051b4ed361052b9dd327232a9f7b8c" prot="public">
          <name>AS3935_L_DISTANCE_8KM</name>
          <initializer>= (0b001000)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga5eb1c46f1bc22a554c2f5d0f5915ea33a024fdac78a02c18143747e8ca5a9533d" prot="public">
          <name>AS3935_L_DISTANCE_10KM</name>
          <initializer>= (0b001010)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga5eb1c46f1bc22a554c2f5d0f5915ea33a2057edb7f74a560148f6fc61c90bcf34" prot="public">
          <name>AS3935_L_DISTANCE_12KM</name>
          <initializer>= (0b001100)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga5eb1c46f1bc22a554c2f5d0f5915ea33a829bc02befaa847b5c622cfee86a0638" prot="public">
          <name>AS3935_L_DISTANCE_14KM</name>
          <initializer>= (0b001110)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga5eb1c46f1bc22a554c2f5d0f5915ea33a4d36fe921d8ef8a277d96e52659a6392" prot="public">
          <name>AS3935_L_DISTANCE_17KM</name>
          <initializer>= (0b010001)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga5eb1c46f1bc22a554c2f5d0f5915ea33ac4f876d33a978a9d3eeee728a5e8a2ad" prot="public">
          <name>AS3935_L_DISTANCE_20KM</name>
          <initializer>= (0b010100)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga5eb1c46f1bc22a554c2f5d0f5915ea33ae75fe3cb6e285db650f3fe4f88561647" prot="public">
          <name>AS3935_L_DISTANCE_24KM</name>
          <initializer>= (0b011000)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga5eb1c46f1bc22a554c2f5d0f5915ea33a5fddb35d2dac74ffbca4526171745bef" prot="public">
          <name>AS3935_L_DISTANCE_27KM</name>
          <initializer>= (0b011011)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga5eb1c46f1bc22a554c2f5d0f5915ea33a02cc82a0b685a1bbb54c8592b9cf6afe" prot="public">
          <name>AS3935_L_DISTANCE_31KM</name>
          <initializer>= (0b011111)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga5eb1c46f1bc22a554c2f5d0f5915ea33a38d29d95a022ca7f62205fb772c34ca6" prot="public">
          <name>AS3935_L_DISTANCE_34KM</name>
          <initializer>= (0b100010)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga5eb1c46f1bc22a554c2f5d0f5915ea33ad04900e8a49d29ce00a6c3907f90263e" prot="public">
          <name>AS3935_L_DISTANCE_37KM</name>
          <initializer>= (0b100101)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga5eb1c46f1bc22a554c2f5d0f5915ea33a6fec770a10a16543ff8538773ace5027" prot="public">
          <name>AS3935_L_DISTANCE_40KM</name>
          <initializer>= (0b101000)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga5eb1c46f1bc22a554c2f5d0f5915ea33aaf68b47813008866bba66ac1f5605555" prot="public">
          <name>AS3935_L_DISTANCE_OO_RANGE</name>
          <initializer>= (0b111111)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>AS3935 lightning estimated distances REG0x07[5:0] enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="234" column="1" bodyfile="components/peripherals/i2c/esp_as3935/include/as3935.h" bodystart="234" bodyend="251"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1ga31f8d48a516b0216dce18138d4afbf98" prot="public" static="no" strong="no">
        <type></type>
        <name>as3935_rco_calibration_results_e</name>
        <enumvalue id="group__drivers_1gga31f8d48a516b0216dce18138d4afbf98ad9e88ad583b1eb2f8726e20914035637" prot="public">
          <name>AS3935_RCO_CALIBRATION_SUCCESSFUL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga31f8d48a516b0216dce18138d4afbf98a22438df91714042ab46532030aae5580" prot="public">
          <name>AS3935_RCO_CALIBRATION_UNSUCCESSFUL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga31f8d48a516b0216dce18138d4afbf98ad87c434c40930fc17109c1ca89ac70cd" prot="public">
          <name>AS3935_RCO_CALIBRATION_INCOMPLETE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>AS3935 oscillator calibration status results enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="256" column="1" bodyfile="components/peripherals/i2c/esp_as3935/include/as3935.h" bodystart="256" bodyend="260"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1gaf8cadca485dfb3ffa6a6fdcb5cda1d65" prot="public" static="no" strong="no">
        <type></type>
        <name>as3935_oscillator_modes_e</name>
        <enumvalue id="group__drivers_1ggaf8cadca485dfb3ffa6a6fdcb5cda1d65a6493ee49715fff9395a893f2e366eca2" prot="public">
          <name>AS3935_OSCILLATOR_ANTENNA_LC</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggaf8cadca485dfb3ffa6a6fdcb5cda1d65af1b2aec2b9b3d9f6ad984d1e2b3c3e16" prot="public">
          <name>AS3935_OSCILLATOR_TIMER_RC</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggaf8cadca485dfb3ffa6a6fdcb5cda1d65a54f2da66d37ed449435f7e7662aa5ba4" prot="public">
          <name>AS3935_OSCILLATOR_SYSTEM_RC</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>AS3935 tuning mode oscillators enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="265" column="1" bodyfile="components/peripherals/i2c/esp_as3935/include/as3935.h" bodystart="265" bodyend="269"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1ga3380dc47e384e45764c545b3b7f4bf78" prot="public" static="no" strong="no">
        <type></type>
        <name>as7341_als_modes_e</name>
        <enumvalue id="group__drivers_1gga3380dc47e384e45764c545b3b7f4bf78ac2eb1e6f1813bc43b3c4a575efbeb1ad" prot="public">
          <name>AS7341_ALS_SPM_MODE</name>
          <initializer>= (0)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>as7341 spectral measurement, normal mode </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga3380dc47e384e45764c545b3b7f4bf78ac1349a5ef8b19f2725af0c6284172256" prot="public">
          <name>AS7341_ALS_SYNS_MODE</name>
          <initializer>= (1)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>as7341 SYNS mode </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga3380dc47e384e45764c545b3b7f4bf78ae741ee522801cad7e65789612b796e0a" prot="public">
          <name>AS7341_ALS_RESERVED_MODE</name>
          <initializer>= (2)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>as7341 reserved, do not use </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga3380dc47e384e45764c545b3b7f4bf78a77396906bdb867bd4ef3219cfa395b51" prot="public">
          <name>AS7341_ALS_SYND_MODE</name>
          <initializer>= (3)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>as7341 SYND mode, use spectra data registers 0x60 to 0x6F in this mode </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>AS7341 ambient light sensing mode enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as7341/include/as7341.h" line="79" column="1" bodyfile="components/peripherals/i2c/esp_as7341/include/as7341.h" bodystart="79" bodyend="84"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1ga7e619cf208ff5b9325d4853a03114f96" prot="public" static="no" strong="no">
        <type></type>
        <name>as7341_led_drive_strengths_e</name>
        <enumvalue id="group__drivers_1gga7e619cf208ff5b9325d4853a03114f96abdf47825e25485f0868b03b36fb4f675" prot="public">
          <name>AS7341_LED_DRIVE_STRENGTH_4MA</name>
          <initializer>= (0b0000000)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>as7341 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga7e619cf208ff5b9325d4853a03114f96acdd84990385ebefaa626894a20d43b4f" prot="public">
          <name>AS7341_LED_DRIVE_STRENGTH_6MA</name>
          <initializer>= (0b0000001)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>as7341 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga7e619cf208ff5b9325d4853a03114f96acfceb5351c8b58bf9909b3782defe9c3" prot="public">
          <name>AS7341_LED_DRIVE_STRENGTH_8MA</name>
          <initializer>= (0b0000010)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>as7341 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga7e619cf208ff5b9325d4853a03114f96ae906dc4f397f1c412a9185046e85d58e" prot="public">
          <name>AS7341_LED_DRIVE_STRENGTH_10MA</name>
          <initializer>= (0b0000011)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>as7341 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga7e619cf208ff5b9325d4853a03114f96ae1b93c613b39472f187aa07c2f340b83" prot="public">
          <name>AS7341_LED_DRIVE_STRENGTH_12MA</name>
          <initializer>= (0b0000100)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>as7341 (default) </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga7e619cf208ff5b9325d4853a03114f96abbd2a565625cab7be1da10b3b837fb8e" prot="public">
          <name>AS7341_LED_DRIVE_STRENGTH_256MA</name>
          <initializer>= (0b1111110)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>as7341 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga7e619cf208ff5b9325d4853a03114f96a1548eb46f6e4edea8fbefb5394873501" prot="public">
          <name>AS7341_LED_DRIVE_STRENGTH_258MA</name>
          <initializer>= (0b1111111)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>as7341 </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>AS7341 led driving strengths enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as7341/include/as7341.h" line="89" column="1" bodyfile="components/peripherals/i2c/esp_as7341/include/as7341.h" bodystart="89" bodyend="98"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1ga8528eb7af062b58f8c7da844bdb7aa8b" prot="public" static="no" strong="no">
        <type></type>
        <name>as7341_spectral_gains_e</name>
        <enumvalue id="group__drivers_1gga8528eb7af062b58f8c7da844bdb7aa8ba5bdea83616bdc4f10d195ec6e2c0b986" prot="public">
          <name>AS7341_SPECTRAL_GAIN_0_5X</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga8528eb7af062b58f8c7da844bdb7aa8ba92c4aa90dae8c611a3fd89fa32a11254" prot="public">
          <name>AS7341_SPECTRAL_GAIN_1X</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga8528eb7af062b58f8c7da844bdb7aa8bad28514fd7e2124be12ee213e86557b6a" prot="public">
          <name>AS7341_SPECTRAL_GAIN_2X</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga8528eb7af062b58f8c7da844bdb7aa8ba3de6a4bde7b46139fb156542955eea83" prot="public">
          <name>AS7341_SPECTRAL_GAIN_4X</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga8528eb7af062b58f8c7da844bdb7aa8bae081da5520ef088607544b3468beaf80" prot="public">
          <name>AS7341_SPECTRAL_GAIN_8X</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga8528eb7af062b58f8c7da844bdb7aa8ba7c72d90ec83f50c10381a7dd33397396" prot="public">
          <name>AS7341_SPECTRAL_GAIN_16X</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga8528eb7af062b58f8c7da844bdb7aa8baec2d9103737c996fd9570819305b2e51" prot="public">
          <name>AS7341_SPECTRAL_GAIN_32X</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga8528eb7af062b58f8c7da844bdb7aa8ba0536d4310386b0230283f1040502ddac" prot="public">
          <name>AS7341_SPECTRAL_GAIN_64X</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga8528eb7af062b58f8c7da844bdb7aa8ba139738a4f479144b619d28cb45790997" prot="public">
          <name>AS7341_SPECTRAL_GAIN_128X</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga8528eb7af062b58f8c7da844bdb7aa8ba657f1df7f02dcb2b811c655bfba44ae9" prot="public">
          <name>AS7341_SPECTRAL_GAIN_256X</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga8528eb7af062b58f8c7da844bdb7aa8ba156e0793934c029aa2307f6a610329e9" prot="public">
          <name>AS7341_SPECTRAL_GAIN_512X</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>AS7341 allowable gain multipliers enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as7341/include/as7341.h" line="103" column="1" bodyfile="components/peripherals/i2c/esp_as7341/include/as7341.h" bodystart="103" bodyend="115"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1ga69412adda5c99f4a8502dc9ca1f29376" prot="public" static="no" strong="no">
        <type></type>
        <name>as7341_flicker_detection_gains_e</name>
        <enumvalue id="group__drivers_1gga69412adda5c99f4a8502dc9ca1f29376a68daa9b6a3f5618b9775d1f17e48a974" prot="public">
          <name>AS7341_FLICKER_DETECTION_GAIN_0_5X</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga69412adda5c99f4a8502dc9ca1f29376a2d8251fd2912cc9a6263f4cf43642755" prot="public">
          <name>AS7341_FLICKER_DETECTION_GAIN_1X</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga69412adda5c99f4a8502dc9ca1f29376ae33dc442eac03b8409a62838d3198fb2" prot="public">
          <name>AS7341_FLICKER_DETECTION_GAIN_2X</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga69412adda5c99f4a8502dc9ca1f29376a45b0461531a8ec14be01a7725bf4a6b0" prot="public">
          <name>AS7341_FLICKER_DETECTION_GAIN_4X</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga69412adda5c99f4a8502dc9ca1f29376a2b6d2db51514a58afac15f9aa4b93320" prot="public">
          <name>AS7341_FLICKER_DETECTION_GAIN_8X</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga69412adda5c99f4a8502dc9ca1f29376a4166af571fc03071157933647f26ca4f" prot="public">
          <name>AS7341_FLICKER_DETECTION_GAIN_16X</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga69412adda5c99f4a8502dc9ca1f29376acc6c3b75f9f0d0b1eec070463bfe329d" prot="public">
          <name>AS7341_FLICKER_DETECTION_GAIN_32X</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga69412adda5c99f4a8502dc9ca1f29376aef440997b36efb80a56a04eaa5f4d5fa" prot="public">
          <name>AS7341_FLICKER_DETECTION_GAIN_64X</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga69412adda5c99f4a8502dc9ca1f29376ab22ee62cd62dc1c2b8dadbaace39bbbb" prot="public">
          <name>AS7341_FLICKER_DETECTION_GAIN_128X</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga69412adda5c99f4a8502dc9ca1f29376a48ab2ec02d57e62dfd58e74234f6b6ee" prot="public">
          <name>AS7341_FLICKER_DETECTION_GAIN_256X</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga69412adda5c99f4a8502dc9ca1f29376a4bd593b09e5ce454bec8476f31ef36ad" prot="public">
          <name>AS7341_FLICKER_DETECTION_GAIN_512X</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>AS7341 allowable flicker detection gain multipliers enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as7341/include/as7341.h" line="120" column="1" bodyfile="components/peripherals/i2c/esp_as7341/include/as7341.h" bodystart="120" bodyend="132"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1ga7a2c8b2911ff3c7db880944f2cfe0c37" prot="public" static="no" strong="no">
        <type></type>
        <name>as7341_flicker_detection_states_e</name>
        <enumvalue id="group__drivers_1gga7a2c8b2911ff3c7db880944f2cfe0c37ac9dc1ffb1c7cce6bdc967ab38bcf3fa7" prot="public">
          <name>AS7341_FLICKER_DETECTION_INVALID</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>flicker detection is invalid </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga7a2c8b2911ff3c7db880944f2cfe0c37abf4afc7aec706e16693843db9bc75710" prot="public">
          <name>AS7341_FLICKER_DETECTION_UNKNOWN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>flicker detection valid but unknown </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga7a2c8b2911ff3c7db880944f2cfe0c37a651a8836908bc9c7cd127f9828ef77e9" prot="public">
          <name>AS7341_FLICKER_DETECTION_SATURATED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>flicker detection is saturated </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga7a2c8b2911ff3c7db880944f2cfe0c37acafaf6cde212dc990377125130aed843" prot="public">
          <name>AS7341_FLICKER_DETECTION_100HZ</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>flicker detection at 100 hz </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga7a2c8b2911ff3c7db880944f2cfe0c37a6f917238f019fa6f87f6e8c3f38b90b3" prot="public">
          <name>AS7341_FLICKER_DETECTION_120HZ</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>flicker detection at 120 hz </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>AS7341 flicker detection states enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as7341/include/as7341.h" line="137" column="1" bodyfile="components/peripherals/i2c/esp_as7341/include/as7341.h" bodystart="137" bodyend="143"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1ga7f032ade17db7652f5be652c96877a72" prot="public" static="no" strong="no">
        <type></type>
        <name>as7341_smux_commands_e</name>
        <enumvalue id="group__drivers_1gga7f032ade17db7652f5be652c96877a72aa854e1bae51e3ca87fa9f28ba94526a1" prot="public">
          <name>AS7341_SMUX_CMD_ROM_RESET</name>
          <initializer>= 0</initializer>
          <briefdescription>
<para>ROM code initialization of SMUX. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga7f032ade17db7652f5be652c96877a72afd01c377503e37832f3ac5752d3a0369" prot="public">
          <name>AS7341_SMUX_CMD_READ</name>
          <briefdescription>
<para>Read SMUX configuration to RAM from SMUX chain. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga7f032ade17db7652f5be652c96877a72ac22283e8974a4b2e45ce9410439845a1" prot="public">
          <name>AS7341_SMUX_CMD_WRITE</name>
          <briefdescription>
<para>Write SMUX configuration from RAM to SMUX chain. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>AS7341 available SMUX commands enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as7341/include/as7341.h" line="148" column="1" bodyfile="components/peripherals/i2c/esp_as7341/include/as7341.h" bodystart="148" bodyend="152"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1ga66416e4a883bd9a0719917edaeaae8a7" prot="public" static="no" strong="no">
        <type></type>
        <name>bh1750_measurement_modes_e</name>
        <enumvalue id="group__drivers_1gga66416e4a883bd9a0719917edaeaae8a7a7f7bb6d23176ee157f6543f55a77e359" prot="public">
          <name>BH1750_MODE_OM_HI_RESOLUTION</name>
          <initializer>= (0b00100000)</initializer>
          <briefdescription>
<para>one time measurement high resolution (1 lx) mode, goes into power down mode after measurement </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga66416e4a883bd9a0719917edaeaae8a7a410482d12c5fdbdfc0921e3c8b24021a" prot="public">
          <name>BH1750_MODE_OM_HI2_RESOLUTION</name>
          <initializer>= (0b00100001)</initializer>
          <briefdescription>
<para>one time measurement high resolution (0.5 lx) mode 2, goes into power down mode after measurement </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga66416e4a883bd9a0719917edaeaae8a7acdc33ad63cd65a7573c5802fdc547684" prot="public">
          <name>BH1750_MODE_OM_LO_RESOLUTION</name>
          <initializer>= (0b00100011)</initializer>
          <briefdescription>
<para>one time measurement low resolution (4 lx) mode, goes into power down mode after measurement </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga66416e4a883bd9a0719917edaeaae8a7a088345f3ccd93ad8a00d1963a7cc7d3c" prot="public">
          <name>BH1750_MODE_CM_HI_RESOLUTION</name>
          <initializer>= (0b00010000)</initializer>
          <briefdescription>
<para>continuous measurement high resolution (1 lx) mode </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga66416e4a883bd9a0719917edaeaae8a7a1e5b71915290ad20b74a50e4215b30ce" prot="public">
          <name>BH1750_MODE_CM_HI2_RESOLUTION</name>
          <initializer>= (0b00010001)</initializer>
          <briefdescription>
<para>continuous measurement high resolution (0.5 lx) mode 2 </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga66416e4a883bd9a0719917edaeaae8a7ac05789a192dcd720760050d89124cb21" prot="public">
          <name>BH1750_MODE_CM_LO_RESOLUTION</name>
          <initializer>= (0b00010011)</initializer>
          <briefdescription>
<para>continuous measurement low resolution (4 lx) mode </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>BH1750 measurement modes enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bh1750/include/bh1750.h" line="79" column="1" bodyfile="components/peripherals/i2c/esp_bh1750/include/bh1750.h" bodystart="79" bodyend="86"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1gae4d73e09adf36a810fdf5b28b78b5a36" prot="public" static="no" strong="no">
        <type></type>
        <name>bme680_heater_setpoints_e</name>
        <enumvalue id="group__drivers_1ggae4d73e09adf36a810fdf5b28b78b5a36a03c8c736e2bf33ecb7816ca78c308bcc" prot="public">
          <name>BME680_HEATER_SETPOINT_0</name>
          <initializer>= (0b0000)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggae4d73e09adf36a810fdf5b28b78b5a36a81df2134a83a67953598cfe423ebbd46" prot="public">
          <name>BME680_HEATER_SETPOINT_1</name>
          <initializer>= (0b0001)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggae4d73e09adf36a810fdf5b28b78b5a36ae26e940faed87fa392f08d46e81d71b5" prot="public">
          <name>BME680_HEATER_SETPOINT_2</name>
          <initializer>= (0b0010)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggae4d73e09adf36a810fdf5b28b78b5a36afd9225f5e866521cfcef15393960d610" prot="public">
          <name>BME680_HEATER_SETPOINT_3</name>
          <initializer>= (0b0011)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggae4d73e09adf36a810fdf5b28b78b5a36a7221787cb9cdcf3ea3af6aca96cf7f13" prot="public">
          <name>BME680_HEATER_SETPOINT_4</name>
          <initializer>= (0b0100)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggae4d73e09adf36a810fdf5b28b78b5a36ac682e323f2cb1841c35415286c1468b7" prot="public">
          <name>BME680_HEATER_SETPOINT_5</name>
          <initializer>= (0b0101)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggae4d73e09adf36a810fdf5b28b78b5a36a9191dec65831ff665a7ad27bd92ab4a7" prot="public">
          <name>BME680_HEATER_SETPOINT_6</name>
          <initializer>= (0b0110)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggae4d73e09adf36a810fdf5b28b78b5a36a971faf820384ff2afc30dfa05947f911" prot="public">
          <name>BME680_HEATER_SETPOINT_7</name>
          <initializer>= (0b0111)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggae4d73e09adf36a810fdf5b28b78b5a36abf76d6f55484a75b9cb0a082265b64d3" prot="public">
          <name>BME680_HEATER_SETPOINT_8</name>
          <initializer>= (0b1000)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggae4d73e09adf36a810fdf5b28b78b5a36af440455e62524c49c8494a18ec435673" prot="public">
          <name>BME680_HEATER_SETPOINT_9</name>
          <initializer>= (0b1001)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>BME680 heater set-points enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bme680/include/bme680.h" line="94" column="1" bodyfile="components/peripherals/i2c/esp_bme680/include/bme680.h" bodystart="94" bodyend="105"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1gadc9774869967ccfbe0d894a20a2a7745" prot="public" static="no" strong="no">
        <type></type>
        <name>bme680_gas_wait_multipliers_e</name>
        <enumvalue id="group__drivers_1ggadc9774869967ccfbe0d894a20a2a7745a09b705bc57fb14efe4fdad7c1710e354" prot="public">
          <name>BME680_GAS_WAIT_MULT_1</name>
          <initializer>= (0b00)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggadc9774869967ccfbe0d894a20a2a7745a2b7340833a2e42b16d505621c4702ca5" prot="public">
          <name>BME680_GAS_WAIT_MULT_4</name>
          <initializer>= (0b01)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggadc9774869967ccfbe0d894a20a2a7745ad2a555686301f172a5465c4a911d6dab" prot="public">
          <name>BME680_GAS_WAIT_MULT_16</name>
          <initializer>= (0b10)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggadc9774869967ccfbe0d894a20a2a7745a192d287272a55ea254afc0df33534812" prot="public">
          <name>BME680_GAS_WAIT_MULT_64</name>
          <initializer>= (0b11)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>BME680 gas wait multipliers enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bme680/include/bme680.h" line="110" column="1" bodyfile="components/peripherals/i2c/esp_bme680/include/bme680.h" bodystart="110" bodyend="115"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1ga07839710ced515edc57e1265a9f942d0" prot="public" static="no" strong="no">
        <type></type>
        <name>bme680_iir_filters_e</name>
        <enumvalue id="group__drivers_1gga07839710ced515edc57e1265a9f942d0a6ab0bdb4580bf9b0daad063e9c83caa5" prot="public">
          <name>BME680_IIR_FILTER_OFF</name>
          <initializer>= (0b000)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga07839710ced515edc57e1265a9f942d0a789c7e9ceee47980dc8e9901caa4e4aa" prot="public">
          <name>BME680_IIR_FILTER_1</name>
          <initializer>= (0b001)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga07839710ced515edc57e1265a9f942d0a1ebdac950a93fa929653259353ef3fdb" prot="public">
          <name>BME680_IIR_FILTER_3</name>
          <initializer>= (0b010)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga07839710ced515edc57e1265a9f942d0a95cc2d9c34a1c3ed2de636a71f5e4e4c" prot="public">
          <name>BME680_IIR_FILTER_7</name>
          <initializer>= (0b011)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga07839710ced515edc57e1265a9f942d0ac263c65c3968b794175f1a6c625bd6ed" prot="public">
          <name>BME680_IIR_FILTER_15</name>
          <initializer>= (0b100)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga07839710ced515edc57e1265a9f942d0abab4f6fccd083203db0096f084efed6e" prot="public">
          <name>BME680_IIR_FILTER_31</name>
          <initializer>= (0b101)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga07839710ced515edc57e1265a9f942d0a44c86d2255c850eb5c7d2342a559d74e" prot="public">
          <name>BME680_IIR_FILTER_63</name>
          <initializer>= (0b110)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga07839710ced515edc57e1265a9f942d0a03c7a64846ab111a1da397d4f949dd33" prot="public">
          <name>BME680_IIR_FILTER_127</name>
          <initializer>= (0b111)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>BME680 IIR filters coefficient enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bme680/include/bme680.h" line="120" column="1" bodyfile="components/peripherals/i2c/esp_bme680/include/bme680.h" bodystart="120" bodyend="129"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1ga036c0d22ef7602a37e6acc30754c44d6" prot="public" static="no" strong="no">
        <type></type>
        <name>bme680_power_modes_e</name>
        <enumvalue id="group__drivers_1gga036c0d22ef7602a37e6acc30754c44d6a6b69b7e506c1ffb45148d3fe8f077ab3" prot="public">
          <name>BME680_POWER_MODE_SLEEP</name>
          <initializer>= (0b00)</initializer>
          <briefdescription>
<para>sleep mode, default after power-up </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga036c0d22ef7602a37e6acc30754c44d6a5c62dd38dc60b06037d60c9037582874" prot="public">
          <name>BME680_POWER_MODE_FORCED</name>
          <initializer>= (0b01)</initializer>
          <briefdescription>
<para>measurement is initiated by user </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga036c0d22ef7602a37e6acc30754c44d6aec4ae7ef1889a0be7d0e6fd06d32b9de" prot="public">
          <name>BME680_POWER_MODE_PARALLEL</name>
          <initializer>= (0b10)</initializer>
          <briefdescription>
<para>parallel mode, gas and TPH measurements are done in parallel </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga036c0d22ef7602a37e6acc30754c44d6ac967972c848d852ac3fa8d84b4e18f1d" prot="public">
          <name>BME680_POWER_MODE_SEQUENTIAL</name>
          <initializer>= (0b11)</initializer>
          <briefdescription>
<para>sequential mode, gas and TPH measurements are done in sequence </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>BME680 power modes enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bme680/include/bme680.h" line="134" column="1" bodyfile="components/peripherals/i2c/esp_bme680/include/bme680.h" bodystart="134" bodyend="139"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1ga94e531ba21486e2c6f40f16e3021a97a" prot="public" static="no" strong="no">
        <type></type>
        <name>bme680_pressure_oversampling_e</name>
        <enumvalue id="group__drivers_1gga94e531ba21486e2c6f40f16e3021a97aac54a44dc0d22775a71ca05f86e70ca88" prot="public">
          <name>BME680_PRESSURE_OVERSAMPLING_SKIPPED</name>
          <initializer>= (0b000)</initializer>
          <briefdescription>
<para>skipped, no measurement, output set to 0x80000 </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga94e531ba21486e2c6f40f16e3021a97aa1a4382cea626cc63ea901d45add1b408" prot="public">
          <name>BME680_PRESSURE_OVERSAMPLING_1X</name>
          <initializer>= (0b001)</initializer>
          <briefdescription>
<para>ultra low power </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga94e531ba21486e2c6f40f16e3021a97aa58f7f00961d4297da4d477c33a93a81d" prot="public">
          <name>BME680_PRESSURE_OVERSAMPLING_2X</name>
          <initializer>= (0b010)</initializer>
          <briefdescription>
<para>low power </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga94e531ba21486e2c6f40f16e3021a97aadead53800b79df0e0201a31807639b38" prot="public">
          <name>BME680_PRESSURE_OVERSAMPLING_4X</name>
          <initializer>= (0b011)</initializer>
          <briefdescription>
<para>standard </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga94e531ba21486e2c6f40f16e3021a97aa3fb7cab771665aeb98b6684a47902f99" prot="public">
          <name>BME680_PRESSURE_OVERSAMPLING_8X</name>
          <initializer>= (0b100)</initializer>
          <briefdescription>
<para>high resolution </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga94e531ba21486e2c6f40f16e3021a97aa76b01b1da7edcc7afcdd5e9f0db7874c" prot="public">
          <name>BME680_PRESSURE_OVERSAMPLING_16X</name>
          <initializer>= (0b101)</initializer>
          <briefdescription>
<para>ultra high resolution </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>BME680 pressure oversampling enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bme680/include/bme680.h" line="144" column="1" bodyfile="components/peripherals/i2c/esp_bme680/include/bme680.h" bodystart="144" bodyend="151"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1ga759038547cb6202de03caba5a7c882a7" prot="public" static="no" strong="no">
        <type></type>
        <name>bme680_temperature_oversampling_e</name>
        <enumvalue id="group__drivers_1gga759038547cb6202de03caba5a7c882a7a6f28a8b91d2c2ad346a455885a2eeae6" prot="public">
          <name>BME680_TEMPERATURE_OVERSAMPLING_SKIPPED</name>
          <initializer>= (0b000)</initializer>
          <briefdescription>
<para>skipped, no measurement, output set to 0x80000 </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga759038547cb6202de03caba5a7c882a7a9db54aa27b3bee04e3f2df6a0233b2d2" prot="public">
          <name>BME680_TEMPERATURE_OVERSAMPLING_1X</name>
          <initializer>= (0b001)</initializer>
          <briefdescription>
<para>ultra low power </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga759038547cb6202de03caba5a7c882a7acec878b493e26e412ad07d0a71f054b5" prot="public">
          <name>BME680_TEMPERATURE_OVERSAMPLING_2X</name>
          <initializer>= (0b010)</initializer>
          <briefdescription>
<para>low power </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga759038547cb6202de03caba5a7c882a7ac9891d9fbad80d05bee5a2da831872a0" prot="public">
          <name>BME680_TEMPERATURE_OVERSAMPLING_4X</name>
          <initializer>= (0b011)</initializer>
          <briefdescription>
<para>standard </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga759038547cb6202de03caba5a7c882a7ac1ea641bf1243022aa2c7750b766363a" prot="public">
          <name>BME680_TEMPERATURE_OVERSAMPLING_8X</name>
          <initializer>= (0b100)</initializer>
          <briefdescription>
<para>high resolution </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga759038547cb6202de03caba5a7c882a7ae0bbbabd9ac3b588b93cf5d0e07f2909" prot="public">
          <name>BME680_TEMPERATURE_OVERSAMPLING_16X</name>
          <initializer>= (0b101)</initializer>
          <briefdescription>
<para>ultra high resolution </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>BME680 temperature oversampling enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bme680/include/bme680.h" line="156" column="1" bodyfile="components/peripherals/i2c/esp_bme680/include/bme680.h" bodystart="156" bodyend="163"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1ga3fff6756c917ec8461faffdfb8bb2ef4" prot="public" static="no" strong="no">
        <type></type>
        <name>bme680_humidity_oversampling_e</name>
        <enumvalue id="group__drivers_1gga3fff6756c917ec8461faffdfb8bb2ef4aff8cf04d2d511c862dc2283cb2d40808" prot="public">
          <name>BME680_HUMIDITY_OVERSAMPLING_SKIPPED</name>
          <initializer>= (0b000)</initializer>
          <briefdescription>
<para>skipped, no measurement, output set to 0x80000 </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga3fff6756c917ec8461faffdfb8bb2ef4aeaf4a961a9514c45260f91f3f6c3be0a" prot="public">
          <name>BME680_HUMIDITY_OVERSAMPLING_1X</name>
          <initializer>= (0b001)</initializer>
          <briefdescription>
<para>ultra low power </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga3fff6756c917ec8461faffdfb8bb2ef4ac222619e62fafebad55802c08d22ec90" prot="public">
          <name>BME680_HUMIDITY_OVERSAMPLING_2X</name>
          <initializer>= (0b010)</initializer>
          <briefdescription>
<para>low power </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga3fff6756c917ec8461faffdfb8bb2ef4a4af4ee525dba2162ed18450858af2f33" prot="public">
          <name>BME680_HUMIDITY_OVERSAMPLING_4X</name>
          <initializer>= (0b011)</initializer>
          <briefdescription>
<para>standard </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga3fff6756c917ec8461faffdfb8bb2ef4a9ee54de303e17d3bb73c53a754e35433" prot="public">
          <name>BME680_HUMIDITY_OVERSAMPLING_8X</name>
          <initializer>= (0b100)</initializer>
          <briefdescription>
<para>high resolution </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga3fff6756c917ec8461faffdfb8bb2ef4ab11434b263d85dc3f5a56700a7e26c01" prot="public">
          <name>BME680_HUMIDITY_OVERSAMPLING_16X</name>
          <initializer>= (0b101)</initializer>
          <briefdescription>
<para>ultra high resolution </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>BME680 humidity oversampling enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bme680/include/bme680.h" line="168" column="1" bodyfile="components/peripherals/i2c/esp_bme680/include/bme680.h" bodystart="168" bodyend="175"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1ga43c86457744677ce2fe05bf08c31ce5d" prot="public" static="no" strong="no">
        <type></type>
        <name>bmp280_iir_filters_e</name>
        <enumvalue id="group__drivers_1gga43c86457744677ce2fe05bf08c31ce5dab831d4186800584959a649c9dc2c2291" prot="public">
          <name>BMP280_IIR_FILTER_OFF</name>
          <initializer>= (0b000)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga43c86457744677ce2fe05bf08c31ce5da918c84192e86f04ac3b7ed77ed5276cc" prot="public">
          <name>BMP280_IIR_FILTER_2</name>
          <initializer>= (0b001)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga43c86457744677ce2fe05bf08c31ce5da58a5f73f40f7d73a62d8ce88a4d132c3" prot="public">
          <name>BMP280_IIR_FILTER_4</name>
          <initializer>= (0b010)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga43c86457744677ce2fe05bf08c31ce5dad0df24f7a880e96f00ecadc24298f4ea" prot="public">
          <name>BMP280_IIR_FILTER_8</name>
          <initializer>= (0b011)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga43c86457744677ce2fe05bf08c31ce5da26a410513428616db367fc03d3a2dcf2" prot="public">
          <name>BMP280_IIR_FILTER_16</name>
          <initializer>= (0b100)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>BMP280 IIR filters coefficient enumerator definition. </para>
        </briefdescription>
        <detaileddescription>
<para>public enumerator, union, and structure definitions </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp280/include/bmp280.h" line="88" column="1" bodyfile="components/peripherals/i2c/esp_bmp280/include/bmp280.h" bodystart="88" bodyend="94"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1gad9ece41b3c809c1942a598a8776f6e12" prot="public" static="no" strong="no">
        <type></type>
        <name>bmp280_standby_times_e</name>
        <enumvalue id="group__drivers_1ggad9ece41b3c809c1942a598a8776f6e12a16ac5a13b9c1674379b5b9588ef4617d" prot="public">
          <name>BMP280_STANDBY_TIME_0_5MS</name>
          <initializer>= (0b000)</initializer>
          <briefdescription>
<para>stand by time 0.5ms </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggad9ece41b3c809c1942a598a8776f6e12a55a7231e0d2439283fdd72923454d19b" prot="public">
          <name>BMP280_STANDBY_TIME_62_5MS</name>
          <initializer>= (0b001)</initializer>
          <briefdescription>
<para>stand by time 62.5ms </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggad9ece41b3c809c1942a598a8776f6e12afaa775feed35c6363c59fe18ea15c9d6" prot="public">
          <name>BMP280_STANDBY_TIME_125MS</name>
          <initializer>= (0b010)</initializer>
          <briefdescription>
<para>stand by time 125ms </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggad9ece41b3c809c1942a598a8776f6e12ae383c92942e0ff076a11a0ff339a2951" prot="public">
          <name>BMP280_STANDBY_TIME_250MS</name>
          <initializer>= (0b011)</initializer>
          <briefdescription>
<para>stand by time 250ms </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggad9ece41b3c809c1942a598a8776f6e12a0b73ea5a06d0680b77880ef99b063e0b" prot="public">
          <name>BMP280_STANDBY_TIME_500MS</name>
          <initializer>= (0b100)</initializer>
          <briefdescription>
<para>stand by time 500ms </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggad9ece41b3c809c1942a598a8776f6e12ad2d4272c1caaa676f0e74027df84344f" prot="public">
          <name>BMP280_STANDBY_TIME_1000MS</name>
          <initializer>= (0b101)</initializer>
          <briefdescription>
<para>stand by time 1s </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggad9ece41b3c809c1942a598a8776f6e12ae0efb5e334fdcb511900168b448345c0" prot="public">
          <name>BMP280_STANDBY_TIME_2000MS</name>
          <initializer>= (0b110)</initializer>
          <briefdescription>
<para>stand by time 2s BMP280, 10ms BME280 </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggad9ece41b3c809c1942a598a8776f6e12a896cf4ff00c390e5cc5c48d067aff79f" prot="public">
          <name>BMP280_STANDBY_TIME_4000MS</name>
          <initializer>= (0b111)</initializer>
          <briefdescription>
<para>stand by time 4s BMP280, 20ms BME280 </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>BMP280 stand-by times enumerator definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp280/include/bmp280.h" line="99" column="1" bodyfile="components/peripherals/i2c/esp_bmp280/include/bmp280.h" bodystart="99" bodyend="108"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1gaa4f8d7bff4d2100e147454563eb16712" prot="public" static="no" strong="no">
        <type></type>
        <name>bmp280_power_modes_e</name>
        <enumvalue id="group__drivers_1ggaa4f8d7bff4d2100e147454563eb16712a0b80523bc1870d9646beec02645266b6" prot="public">
          <name>BMP280_POWER_MODE_SLEEP</name>
          <initializer>= (0b00)</initializer>
          <briefdescription>
<para>sleep mode, default after power-up </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggaa4f8d7bff4d2100e147454563eb16712a0a5eaa62779bf8c3021ec9b387eb4683" prot="public">
          <name>BMP280_POWER_MODE_FORCED</name>
          <initializer>= (0b01)</initializer>
          <briefdescription>
<para>measurement is initiated by user </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggaa4f8d7bff4d2100e147454563eb16712adecf4b4ef1718a47831b2fb1ad887b50" prot="public">
          <name>BMP280_POWER_MODE_FORCED1</name>
          <initializer>= (0b10)</initializer>
          <briefdescription>
<para>measurement is initiated by user </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggaa4f8d7bff4d2100e147454563eb16712aa3b65aa6ea4fbbe841c075e580c6c91c" prot="public">
          <name>BMP280_POWER_MODE_NORMAL</name>
          <initializer>= (0b11)</initializer>
          <briefdescription>
<para>continuously cycles between active measurement and inactive (standby-time) periods </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>BMP280 power modes enumerator definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp280/include/bmp280.h" line="113" column="1" bodyfile="components/peripherals/i2c/esp_bmp280/include/bmp280.h" bodystart="113" bodyend="118"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1ga4cb3c585b3e9d393ee0b44b8ec0b8dbc" prot="public" static="no" strong="no">
        <type></type>
        <name>bmp280_pressure_oversampling_e</name>
        <enumvalue id="group__drivers_1gga4cb3c585b3e9d393ee0b44b8ec0b8dbca21ec85d301fed2cf591da189b5a4d7d8" prot="public">
          <name>BMP280_PRESSURE_OVERSAMPLING_SKIPPED</name>
          <initializer>= (0b000)</initializer>
          <briefdescription>
<para>skipped, no measurement, output set to 0x80000 </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga4cb3c585b3e9d393ee0b44b8ec0b8dbcaef3c492f37e800c99ac5e3437f801487" prot="public">
          <name>BMP280_PRESSURE_OVERSAMPLING_1X</name>
          <initializer>= (0b001)</initializer>
          <briefdescription>
<para>ultra low power </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga4cb3c585b3e9d393ee0b44b8ec0b8dbca98685fcb7e2a7cc8d6ae829ee0f63527" prot="public">
          <name>BMP280_PRESSURE_OVERSAMPLING_2X</name>
          <initializer>= (0b010)</initializer>
          <briefdescription>
<para>low power </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga4cb3c585b3e9d393ee0b44b8ec0b8dbca6439ab95093d6b22fd6c8b537839d4bc" prot="public">
          <name>BMP280_PRESSURE_OVERSAMPLING_4X</name>
          <initializer>= (0b011)</initializer>
          <briefdescription>
<para>standard </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga4cb3c585b3e9d393ee0b44b8ec0b8dbcacaa42658a36e7c69db177f293182c1bf" prot="public">
          <name>BMP280_PRESSURE_OVERSAMPLING_8X</name>
          <initializer>= (0b100)</initializer>
          <briefdescription>
<para>high resolution </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga4cb3c585b3e9d393ee0b44b8ec0b8dbca045959d703bb7473fab0fc940f667a88" prot="public">
          <name>BMP280_PRESSURE_OVERSAMPLING_16X</name>
          <initializer>= (0b101)</initializer>
          <briefdescription>
<para>ultra high resolution </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>BMP280 pressure oversampling enumerator definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp280/include/bmp280.h" line="123" column="1" bodyfile="components/peripherals/i2c/esp_bmp280/include/bmp280.h" bodystart="123" bodyend="130"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1gaf7580026dc3ad627fe0fc505fd1d24cd" prot="public" static="no" strong="no">
        <type></type>
        <name>bmp280_temperature_oversampling_e</name>
        <enumvalue id="group__drivers_1ggaf7580026dc3ad627fe0fc505fd1d24cdacb8f23f526fc880c97afff9e4b93cfda" prot="public">
          <name>BMP280_TEMPERATURE_OVERSAMPLING_SKIPPED</name>
          <initializer>= (0b000)</initializer>
          <briefdescription>
<para>skipped, no measurement, output set to 0x80000 </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggaf7580026dc3ad627fe0fc505fd1d24cda4efcc2ff5dbce510faae2c95d6fb41f4" prot="public">
          <name>BMP280_TEMPERATURE_OVERSAMPLING_1X</name>
          <initializer>= (0b001)</initializer>
          <briefdescription>
<para>ultra low power </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggaf7580026dc3ad627fe0fc505fd1d24cda828ec22274f1657192dc39495bca7d66" prot="public">
          <name>BMP280_TEMPERATURE_OVERSAMPLING_2X</name>
          <initializer>= (0b010)</initializer>
          <briefdescription>
<para>low power </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggaf7580026dc3ad627fe0fc505fd1d24cda103c5373a9615ebac3f9b8b8a1889015" prot="public">
          <name>BMP280_TEMPERATURE_OVERSAMPLING_4X</name>
          <initializer>= (0b011)</initializer>
          <briefdescription>
<para>standard </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggaf7580026dc3ad627fe0fc505fd1d24cda749bdc2ee25bfe8c61295f0473175c3b" prot="public">
          <name>BMP280_TEMPERATURE_OVERSAMPLING_8X</name>
          <initializer>= (0b100)</initializer>
          <briefdescription>
<para>high resolution </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggaf7580026dc3ad627fe0fc505fd1d24cda77cd8646d18928db489319cd48370b15" prot="public">
          <name>BMP280_TEMPERATURE_OVERSAMPLING_16X</name>
          <initializer>= (0b101)</initializer>
          <briefdescription>
<para>ultra high resolution </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggaf7580026dc3ad627fe0fc505fd1d24cdaf1fe0c9ca3beac7c3e9e953a0370f8ac" prot="public">
          <name>BMP280_TEMPERATURE_OVERSAMPLING_16X1</name>
          <initializer>= (0b110)</initializer>
          <briefdescription>
<para>ultra high resolution </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggaf7580026dc3ad627fe0fc505fd1d24cda97c354a87daa130229295a8dec8d4d0d" prot="public">
          <name>BMP280_TEMPERATURE_OVERSAMPLING_16X2</name>
          <initializer>= (0b111)</initializer>
          <briefdescription>
<para>ultra high resolution </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>BMP280 temperature oversampling enumerator definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp280/include/bmp280.h" line="135" column="1" bodyfile="components/peripherals/i2c/esp_bmp280/include/bmp280.h" bodystart="135" bodyend="144"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1ga4a45b4eebb3310bfc79c1a8fb6c2720b" prot="public" static="no" strong="no">
        <type></type>
        <name>bmp390_iir_filters_e</name>
        <enumvalue id="group__drivers_1gga4a45b4eebb3310bfc79c1a8fb6c2720ba1f74ae7afec3c3cc1052bfb0ffdc5c08" prot="public">
          <name>BMP390_IIR_FILTER_OFF</name>
          <initializer>= (0b000)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga4a45b4eebb3310bfc79c1a8fb6c2720ba2dd006385edfbcd58ae587a0750d7db2" prot="public">
          <name>BMP390_IIR_FILTER_1</name>
          <initializer>= (0b001)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga4a45b4eebb3310bfc79c1a8fb6c2720bad924a2812b8e09a8efb643458f86fa43" prot="public">
          <name>BMP390_IIR_FILTER_3</name>
          <initializer>= (0b010)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga4a45b4eebb3310bfc79c1a8fb6c2720ba18959dff7f10d937583ca1d16e16ac77" prot="public">
          <name>BMP390_IIR_FILTER_7</name>
          <initializer>= (0b011)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga4a45b4eebb3310bfc79c1a8fb6c2720babc964c457ed8d0c51aaedca46010150c" prot="public">
          <name>BMP390_IIR_FILTER_15</name>
          <initializer>= (0b100)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga4a45b4eebb3310bfc79c1a8fb6c2720ba06c29a8ba73b9af514b08454ea3031d7" prot="public">
          <name>BMP390_IIR_FILTER_31</name>
          <initializer>= (0b101)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga4a45b4eebb3310bfc79c1a8fb6c2720baaeaa6c2e58c4edd1d27708f539dcc4ef" prot="public">
          <name>BMP390_IIR_FILTER_63</name>
          <initializer>= (0b110)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga4a45b4eebb3310bfc79c1a8fb6c2720baefa519e7e4e5e502e8cfa6763ebdc3ef" prot="public">
          <name>BMP390_IIR_FILTER_127</name>
          <initializer>= (0b111)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>BMP390 IIR filters coefficient enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp390/include/bmp390.h" line="81" column="1" bodyfile="components/peripherals/i2c/esp_bmp390/include/bmp390.h" bodystart="81" bodyend="90"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1ga1ee0ad95b878f162342e3a2b31c21b5d" prot="public" static="no" strong="no">
        <type></type>
        <name>bmp390_output_data_rates_e</name>
        <enumvalue id="group__drivers_1gga1ee0ad95b878f162342e3a2b31c21b5dadb98ed5d8db477c9d90a9d63db5fe05e" prot="public">
          <name>BMP390_ODR_5MS</name>
          <initializer>= (0x00)</initializer>
          <briefdescription>
<para>sampling period 5ms </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga1ee0ad95b878f162342e3a2b31c21b5da16a816a4390cd6d0e405adc13b7afaba" prot="public">
          <name>BMP390_ODR_10MS</name>
          <initializer>= (0x01)</initializer>
          <briefdescription>
<para>sampling period 10ms </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga1ee0ad95b878f162342e3a2b31c21b5da726bf74dff4e3f59f3fe5c3bd44e7e1f" prot="public">
          <name>BMP390_ODR_20MS</name>
          <initializer>= (0x02)</initializer>
          <briefdescription>
<para>sampling period 20ms </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga1ee0ad95b878f162342e3a2b31c21b5dac43d28d1e725d3efd5d0d3ee011f81bb" prot="public">
          <name>BMP390_ODR_40MS</name>
          <initializer>= (0x03)</initializer>
          <briefdescription>
<para>sampling period 40ms </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga1ee0ad95b878f162342e3a2b31c21b5da6ef8eada61368004cbee634fb5ddaa33" prot="public">
          <name>BMP390_ODR_80MS</name>
          <initializer>= (0x04)</initializer>
          <briefdescription>
<para>sampling period 80ms </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga1ee0ad95b878f162342e3a2b31c21b5daf9217e3cd3416fb0bef9eb2d5041d395" prot="public">
          <name>BMP390_ODR_160MS</name>
          <initializer>= (0x05)</initializer>
          <briefdescription>
<para>sampling period 160ms </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga1ee0ad95b878f162342e3a2b31c21b5da5d216a62462f939c0ff00c78e42a2ba1" prot="public">
          <name>BMP390_ODR_320MS</name>
          <initializer>= (0x06)</initializer>
          <briefdescription>
<para>sampling period 320ms </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga1ee0ad95b878f162342e3a2b31c21b5da7be0994656efebf10a4d31e205e85c33" prot="public">
          <name>BMP390_ODR_640MS</name>
          <initializer>= (0x07)</initializer>
          <briefdescription>
<para>sampling period 640ms </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>BMP390 output data rates enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp390/include/bmp390.h" line="95" column="1" bodyfile="components/peripherals/i2c/esp_bmp390/include/bmp390.h" bodystart="95" bodyend="105"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1ga42a6b3878c63588fdf5601a0a0385d61" prot="public" static="no" strong="no">
        <type></type>
        <name>bmp390_power_modes_e</name>
        <enumvalue id="group__drivers_1gga42a6b3878c63588fdf5601a0a0385d61a9152c104e70c83b1139d701c17a22343" prot="public">
          <name>BMP390_POWER_MODE_SLEEP</name>
          <initializer>= (0b00)</initializer>
          <briefdescription>
<para>sleep mode, default after power-up </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga42a6b3878c63588fdf5601a0a0385d61a685e536b4876bd46a77a133f511f70f5" prot="public">
          <name>BMP390_POWER_MODE_FORCED</name>
          <initializer>= (0b01)</initializer>
          <briefdescription>
<para>measurement is initiated by user </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga42a6b3878c63588fdf5601a0a0385d61a8c4f56b41c34f5c8a7eefc14d53de410" prot="public">
          <name>BMP390_POWER_MODE_FORCED1</name>
          <initializer>= (0b10)</initializer>
          <briefdescription>
<para>measurement is initiated by user </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga42a6b3878c63588fdf5601a0a0385d61a3132ecbd8db48edbb0e88c2b88ad809f" prot="public">
          <name>BMP390_POWER_MODE_NORMAL</name>
          <initializer>= (0b11)</initializer>
          <briefdescription>
<para>continuously cycles between active measurement and inactive (standby-time) periods </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>BMP390 power modes enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp390/include/bmp390.h" line="110" column="1" bodyfile="components/peripherals/i2c/esp_bmp390/include/bmp390.h" bodystart="110" bodyend="115"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1ga7d8fbea6422f39b254b222705433918b" prot="public" static="no" strong="no">
        <type></type>
        <name>bmp390_pressure_oversampling_e</name>
        <enumvalue id="group__drivers_1gga7d8fbea6422f39b254b222705433918ba3dde955b06fd2d53fd161e2bfc41a9b8" prot="public">
          <name>BMP390_PRESSURE_OVERSAMPLING_SKIPPED</name>
          <initializer>= (0b000)</initializer>
          <briefdescription>
<para>skipped, no measurement, output set to 0x80000 </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga7d8fbea6422f39b254b222705433918ba9591c537bc27038dd4dbb397f2ffdb6b" prot="public">
          <name>BMP390_PRESSURE_OVERSAMPLING_2X</name>
          <initializer>= (0b001)</initializer>
          <briefdescription>
<para>ultra low power </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga7d8fbea6422f39b254b222705433918ba278b2b1bc866adb78c882ddd714f87cb" prot="public">
          <name>BMP390_PRESSURE_OVERSAMPLING_4X</name>
          <initializer>= (0b010)</initializer>
          <briefdescription>
<para>low power </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga7d8fbea6422f39b254b222705433918ba7afebb12b8293fd36d0bcb0946de2a45" prot="public">
          <name>BMP390_PRESSURE_OVERSAMPLING_8X</name>
          <initializer>= (0b011)</initializer>
          <briefdescription>
<para>standard </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga7d8fbea6422f39b254b222705433918ba6067bd8853bc512b93da669a060629ec" prot="public">
          <name>BMP390_PRESSURE_OVERSAMPLING_16X</name>
          <initializer>= (0b100)</initializer>
          <briefdescription>
<para>high resolution </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga7d8fbea6422f39b254b222705433918bad21b424cea734759841b36cb9992225d" prot="public">
          <name>BMP390_PRESSURE_OVERSAMPLING_32X</name>
          <initializer>= (0b101)</initializer>
          <briefdescription>
<para>ultra high resolution </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>BMP390 pressure oversampling enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp390/include/bmp390.h" line="120" column="1" bodyfile="components/peripherals/i2c/esp_bmp390/include/bmp390.h" bodystart="120" bodyend="127"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1ga7f2043cbe079464e80e1b2ae2c788ee5" prot="public" static="no" strong="no">
        <type></type>
        <name>bmp390_temperature_oversampling_e</name>
        <enumvalue id="group__drivers_1gga7f2043cbe079464e80e1b2ae2c788ee5ad1bf7caaa4a9045613eb7af17dccf811" prot="public">
          <name>BMP390_TEMPERATURE_OVERSAMPLING_SKIPPED</name>
          <initializer>= (0b000)</initializer>
          <briefdescription>
<para>skipped, no measurement, output set to 0x80000 </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga7f2043cbe079464e80e1b2ae2c788ee5a6c766e89f62a3e94f67ec7cc4b0dbadf" prot="public">
          <name>BMP390_TEMPERATURE_OVERSAMPLING_2X</name>
          <initializer>= (0b001)</initializer>
          <briefdescription>
<para>ultra low power </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga7f2043cbe079464e80e1b2ae2c788ee5ae9de360e13689ed37802849b19bc3015" prot="public">
          <name>BMP390_TEMPERATURE_OVERSAMPLING_4X</name>
          <initializer>= (0b010)</initializer>
          <briefdescription>
<para>low power </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga7f2043cbe079464e80e1b2ae2c788ee5a6ca4ddfe613042fcc49f6a2115231367" prot="public">
          <name>BMP390_TEMPERATURE_OVERSAMPLING_8X</name>
          <initializer>= (0b011)</initializer>
          <briefdescription>
<para>standard </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga7f2043cbe079464e80e1b2ae2c788ee5a6412aac3d24a15420b016c0d9c860dd3" prot="public">
          <name>BMP390_TEMPERATURE_OVERSAMPLING_16X</name>
          <initializer>= (0b100)</initializer>
          <briefdescription>
<para>high resolution </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga7f2043cbe079464e80e1b2ae2c788ee5a788419e31701fc3e1ef87f860c7e7acd" prot="public">
          <name>BMP390_TEMPERATURE_OVERSAMPLING_32X</name>
          <initializer>= (0b101)</initializer>
          <briefdescription>
<para>ultra high resolution </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>BMP390 temperature oversampling enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp390/include/bmp390.h" line="132" column="1" bodyfile="components/peripherals/i2c/esp_bmp390/include/bmp390.h" bodystart="132" bodyend="139"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1gad77e9dec744afbae856a9e21ee269514" prot="public" static="no" strong="no">
        <type></type>
        <name>ccs811_drive_modes_e</name>
        <enumvalue id="group__drivers_1ggad77e9dec744afbae856a9e21ee269514a927a472dd6d96402a8527b31d3b284d8" prot="public">
          <name>CCS811_DRIVE_MODE_IDLE</name>
          <initializer>= (0b000)</initializer>
          <briefdescription>
<para>idle (measurements are disabled in this mode) </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggad77e9dec744afbae856a9e21ee269514a1576068aa364e7161710aa725246b0ca" prot="public">
          <name>CCS811_DRIVE_MODE_CONSTANT_POWER_IAQ</name>
          <initializer>= (0b001)</initializer>
          <briefdescription>
<para>constant power mode, IAQ measurement every second </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggad77e9dec744afbae856a9e21ee269514a5da13e811ece358296d6c30bed60a035" prot="public">
          <name>CCS811_DRIVE_MODE_PULSE_HEATING_IAQ</name>
          <initializer>= (0b010)</initializer>
          <briefdescription>
<para>pulse heating mode IAQ measurement every 10 seconds </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggad77e9dec744afbae856a9e21ee269514a7995182e6e67ebf4bb4aca62232e0cde" prot="public">
          <name>CCS811_DRIVE_MODE_LP_PULSE_HEATING_IAQ</name>
          <initializer>= (0b011)</initializer>
          <briefdescription>
<para>low power pulse heating mode IAQ measurement every 60 seconds </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggad77e9dec744afbae856a9e21ee269514a7bf4c5a5370085433832ccf4cf4572a1" prot="public">
          <name>CCS811_DRIVE_MODE_CONSTANT_POWER</name>
          <initializer>= (0b100)</initializer>
          <briefdescription>
<para>constant power mode, sensor measurement every 250ms </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>CCS811 drive modes enumerator. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ccs811/include/ccs811.h" line="86" column="1" bodyfile="components/peripherals/i2c/esp_ccs811/include/ccs811.h" bodystart="86" bodyend="92"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1gaedfefa4560269ccc8dd9556b61d9c577" prot="public" static="no" strong="no">
        <type></type>
        <name>ccs811_firmware_modes_e</name>
        <enumvalue id="group__drivers_1ggaedfefa4560269ccc8dd9556b61d9c577af104393905e284d07718a641f4b0160f" prot="public">
          <name>CCS811_FW_MODE_BOOT</name>
          <initializer>= 0</initializer>
          <briefdescription>
<para>firmware is in boot mode, this allows new firmware to be loaded </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggaedfefa4560269ccc8dd9556b61d9c577a71982c6b85c48afd8df2bd862c55a85e" prot="public">
          <name>CCS811_FW_MODE_APP</name>
          <initializer>= 1</initializer>
          <briefdescription>
<para>formware is in application mode, deivce is ready to take ADC measurements </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>CCS811 firmware modes enumerator. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ccs811/include/ccs811.h" line="97" column="1" bodyfile="components/peripherals/i2c/esp_ccs811/include/ccs811.h" bodystart="97" bodyend="100"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1gade3afdceb8405d3b657d92d4abd60217" prot="public" static="no" strong="no">
        <type></type>
        <name>ens160_aqi_uba_indexes_e</name>
        <enumvalue id="group__drivers_1ggade3afdceb8405d3b657d92d4abd60217a810b422dd7f1e8eb4a9d6d3c2956503c" prot="public">
          <name>ENS160_AQI_UBA_INDEX_UNKNOWN</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>uba air quality index is unknown </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggade3afdceb8405d3b657d92d4abd60217a9d8fb3a52c953b8011b4d461042f9d80" prot="public">
          <name>ENS160_AQI_UBA_INDEX_1</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>uba air quality index of 1 is excellent </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggade3afdceb8405d3b657d92d4abd60217a49d52089490f4e2a9386936251aab04c" prot="public">
          <name>ENS160_AQI_UBA_INDEX_2</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>uba air quality index of 2 is good </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggade3afdceb8405d3b657d92d4abd60217a732ff3e985bc45ba109fe52f4c5ef6a6" prot="public">
          <name>ENS160_AQI_UBA_INDEX_3</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>uba air quality index of 3 is moderate </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggade3afdceb8405d3b657d92d4abd60217a2afaa2fa6e4eb4b2ee1a57019ad5e762" prot="public">
          <name>ENS160_AQI_UBA_INDEX_4</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>uba air quality index of 4 is poor </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggade3afdceb8405d3b657d92d4abd60217a2bef77054e8955a0d03316217c3787f9" prot="public">
          <name>ENS160_AQI_UBA_INDEX_5</name>
          <initializer>= 5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>uba air quality index of 5 is unhealthy </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>ENS160 air quality index of the uba enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ens160/include/ens160.h" line="103" column="1" bodyfile="components/peripherals/i2c/esp_ens160/include/ens160.h" bodystart="103" bodyend="110"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1ga85829c5c19d6ec9d3ea8643d3d2627a6" prot="public" static="no" strong="no">
        <type></type>
        <name>ens160_interrupt_pin_polarities_e</name>
        <enumvalue id="group__drivers_1gga85829c5c19d6ec9d3ea8643d3d2627a6a450b74eae6c7bc01837114e36e257bd5" prot="public">
          <name>ENS160_INT_PIN_POLARITY_ACTIVE_LO</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>ens160 interrupt pin polarity active low (default) </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga85829c5c19d6ec9d3ea8643d3d2627a6a55f4e0769b8ad914c0399b3af272a945" prot="public">
          <name>ENS160_INT_PIN_POLARITY_ACTIVE_HI</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>ens160 interrupt pin polarity active high </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>ENS160 interrupt pin polarities enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ens160/include/ens160.h" line="115" column="1" bodyfile="components/peripherals/i2c/esp_ens160/include/ens160.h" bodystart="115" bodyend="118"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1ga75c593a0cc73463325240b4024666622" prot="public" static="no" strong="no">
        <type></type>
        <name>ens160_interrupt_pin_drivers_e</name>
        <enumvalue id="group__drivers_1gga75c593a0cc73463325240b4024666622ab7c98b25f90dd5005f51895aaf07f456" prot="public">
          <name>ENS160_INT_PIN_DRIVE_OPEN_DRAIN</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>ens160 interrupt pin drive open drain </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga75c593a0cc73463325240b4024666622a06dc38f3dfb05f5f5b74bbffc98f7970" prot="public">
          <name>ENS160_INT_PIN_DRIVE_PUSH_PULL</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>ens160 interrupt pin drive push/pull </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>ENS160 interrupt pin drivers enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ens160/include/ens160.h" line="123" column="1" bodyfile="components/peripherals/i2c/esp_ens160/include/ens160.h" bodystart="123" bodyend="126"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1gae268b5469d64277325caa3f5fc989850" prot="public" static="no" strong="no">
        <type></type>
        <name>ens160_operating_modes_e</name>
        <enumvalue id="group__drivers_1ggae268b5469d64277325caa3f5fc989850a6aa8e1b080be1957ba87d3c10f424951" prot="public">
          <name>ENS160_OPMODE_DEEP_SLEEP</name>
          <initializer>= 0x00</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>ens160 deep sleep mode (low-power standby) </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggae268b5469d64277325caa3f5fc989850a99235d15a08bdeff5ff011c5bb9ebd81" prot="public">
          <name>ENS160_OPMODE_IDLE</name>
          <initializer>= 0x01</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>ens160 idle mode (low-power) (default) </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggae268b5469d64277325caa3f5fc989850a126972f1631eade3a26360e45d1c94e1" prot="public">
          <name>ENS160_OPMODE_STANDARD</name>
          <initializer>= 0x02</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>ens160 standard gas sensing mode </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggae268b5469d64277325caa3f5fc989850aaf93f073c29ed1b0772e2563c567e383" prot="public">
          <name>ENS160_OPMODE_RESET</name>
          <initializer>= 0xf0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>ens160 reset mode </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>ENS160 operating modes enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ens160/include/ens160.h" line="131" column="1" bodyfile="components/peripherals/i2c/esp_ens160/include/ens160.h" bodystart="131" bodyend="136"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1gaf2a9ed5d8ac048fb5697822bb1694523" prot="public" static="no" strong="no">
        <type></type>
        <name>ens160_commands_e</name>
        <enumvalue id="group__drivers_1ggaf2a9ed5d8ac048fb5697822bb1694523a7057edf1edff9b6c33d6706a8d8e9305" prot="public">
          <name>ENS160_CMD_NORMAL</name>
          <initializer>= 0x00</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>ens160 normal operation command (default) </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggaf2a9ed5d8ac048fb5697822bb1694523a1075d08e6fb45b770613308d61865d99" prot="public">
          <name>ENS160_CMD_GET_FW_APPVER</name>
          <initializer>= 0x0e</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>ens160 get firmware version command </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggaf2a9ed5d8ac048fb5697822bb1694523a774e685b4aedaaabbc52542f66089e93" prot="public">
          <name>ENS160_CMD_CLEAR_GPR</name>
          <initializer>= 0xcc</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>ens160 clear general purpose read registers command </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>ENS160 commands enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ens160/include/ens160.h" line="141" column="1" bodyfile="components/peripherals/i2c/esp_ens160/include/ens160.h" bodystart="141" bodyend="145"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1ga5af0eb865fa92927dfd16523bb653742" prot="public" static="no" strong="no">
        <type></type>
        <name>ens160_validity_flags_e</name>
        <enumvalue id="group__drivers_1gga5af0eb865fa92927dfd16523bb653742a26345bcbbdfacd24a06cd0ec33038ae7" prot="public">
          <name>ENS160_VALFLAG_NORMAL</name>
          <initializer>= 0x00</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>ens160 normal operation validity flag </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga5af0eb865fa92927dfd16523bb653742a46de0ca9c1984f11ace5fe5fe7445cc6" prot="public">
          <name>ENS160_VALFLAG_WARMUP</name>
          <initializer>= 0x01</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>ens160 warm-up phase validity flag (first 3-minutes after power-on) </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga5af0eb865fa92927dfd16523bb653742ae12feb5e210c38c99a621d7856858a4c" prot="public">
          <name>ENS160_VALFLAG_INITIAL_STARTUP</name>
          <initializer>= 0x02</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>ens160 initial start-up phase validity flag (first full hour of operation after power-on, once in the sensor&apos;s lifetime) </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga5af0eb865fa92927dfd16523bb653742a5e1a92acf9a54d6aec0d4dbc1fe47193" prot="public">
          <name>ENS160_VALFLAG_INVALID_OUTPUT</name>
          <initializer>= 0x03</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>ens160 invalid output validity flag </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>ENS160 validity flags enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ens160/include/ens160.h" line="150" column="1" bodyfile="components/peripherals/i2c/esp_ens160/include/ens160.h" bodystart="150" bodyend="155"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1ga1916160d74d5ce30f5508b7bcbc8928c" prot="public" static="no" strong="no">
        <type></type>
        <name>hdc1080_acquisition_modes_e</name>
        <enumvalue id="group__drivers_1gga1916160d74d5ce30f5508b7bcbc8928cac2b3038fcf6beb733571b7b30f370f6f" prot="public">
          <name>HDC1080_ACQUISITION_SINGLE</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>acquisition in single mode for temperature or humidity </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga1916160d74d5ce30f5508b7bcbc8928cadbc7d48f926d1f8d8d3fa30236b79497" prot="public">
          <name>HDC1080_ACQUISITION_SEQUENCED</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>acquisition in sequenced mode for both temperature and humidity </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>HDC1080 acquisition modes enumerator definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_hdc1080/include/hdc1080.h" line="83" column="1" bodyfile="components/peripherals/i2c/esp_hdc1080/include/hdc1080.h" bodystart="83" bodyend="86"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1gaa9046a79c6161e97ce6f4eedb2fabcbf" prot="public" static="no" strong="no">
        <type></type>
        <name>hdc1080_battery_states_e</name>
        <enumvalue id="group__drivers_1ggaa9046a79c6161e97ce6f4eedb2fabcbfaa4f5dbc0b640f9beb484a1af8a5c5582" prot="public">
          <name>HDC1080_BATT_VOLT_OVER_2_8V</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>battery voltage is over 2.8 volts </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggaa9046a79c6161e97ce6f4eedb2fabcbfa75bf64388d9765e555f36bc0b735e86f" prot="public">
          <name>HDC1080_BATT_VOLT_UNDER_2_8V</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>battery voltage is under 2.8 volts </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>HDC1080 battery states enumerator definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_hdc1080/include/hdc1080.h" line="91" column="1" bodyfile="components/peripherals/i2c/esp_hdc1080/include/hdc1080.h" bodystart="91" bodyend="94"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1ga67668000949d016e559d46366831972c" prot="public" static="no" strong="no">
        <type></type>
        <name>hdc1080_temperature_resolutions_e</name>
        <enumvalue id="group__drivers_1gga67668000949d016e559d46366831972ca28ef676034a8e76374410a20228782fe" prot="public">
          <name>HDC1080_TEMPERATURE_RESOLUTION_14BIT</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>temperature measurement 14-bit resolution </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga67668000949d016e559d46366831972ca2891414464804111773c6c31d5542b79" prot="public">
          <name>HDC1080_TEMPERATURE_RESOLUTION_11BIT</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>temperature measurement 11-bit resolution </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>HDC1080 temperature measurement resolutions enumerator definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_hdc1080/include/hdc1080.h" line="99" column="1" bodyfile="components/peripherals/i2c/esp_hdc1080/include/hdc1080.h" bodystart="99" bodyend="102"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1gafebf60aee364b0512cc8b5dbc2e4acab" prot="public" static="no" strong="no">
        <type></type>
        <name>hdc1080_humidity_resolutions_e</name>
        <enumvalue id="group__drivers_1ggafebf60aee364b0512cc8b5dbc2e4acabaabc33facda545a62722e9afa5fb54eb0" prot="public">
          <name>HDC1080_HUMIDITY_RESOLUTION_14BIT</name>
          <initializer>= (0b00)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>humidity measurement 14-bit resolution </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggafebf60aee364b0512cc8b5dbc2e4acaba0fbb7b270d2575e47a1f613d417b5d72" prot="public">
          <name>HDC1080_HUMIDITY_RESOLUTION_11BIT</name>
          <initializer>= (0b01)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>humidity measurement 11-bit resolution </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggafebf60aee364b0512cc8b5dbc2e4acaba86d56e5e68f8c1a35d06f6aff2c0138c" prot="public">
          <name>HDC1080_HUMIDITY_RESOLUTION_8BIT</name>
          <initializer>= (0b10)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>humidity measurement 8-bit resolution </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>HDC1080 humidity measurement resolutions enumerator definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_hdc1080/include/hdc1080.h" line="107" column="1" bodyfile="components/peripherals/i2c/esp_hdc1080/include/hdc1080.h" bodystart="107" bodyend="111"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1ga3430b51778b4d6cf0c6be7aab962707a" prot="public" static="no" strong="no">
        <type></type>
        <name>hmc5883l_calibration_options_e</name>
        <enumvalue id="group__drivers_1gga3430b51778b4d6cf0c6be7aab962707aa1369e6a5083539870f199650d1f6b3db" prot="public">
          <name>HMC5883L_CAL_GAIN_DIFF</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>calculates the difference in the gain of the each axis magnetometer axis </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga3430b51778b4d6cf0c6be7aab962707aacb4b0209384e103e79c53c7d485316e9" prot="public">
          <name>HMC5883L_CAL_AXES_MEAN</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>calculates the mean of each axes magnetic field, when the Magnetometer is rotated 360 degree </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga3430b51778b4d6cf0c6be7aab962707aae0a2627cf169d00812b47e83ee22ec1e" prot="public">
          <name>HMC5883L_CAL_BOTH</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>do both </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>HMC5883L possible calibration options </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_hmc5883l/include/hmc5883l.h" line="78" column="1" bodyfile="components/peripherals/i2c/esp_hmc5883l/include/hmc5883l.h" bodystart="78" bodyend="82"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1ga5f5de977bcf14d5aeacedd4c8367dd2f" prot="public" static="no" strong="no">
        <type></type>
        <name>hmc5883l_modes_e</name>
        <enumvalue id="group__drivers_1gga5f5de977bcf14d5aeacedd4c8367dd2fad480e6b2a4718df08a15bd1a35e01dba" prot="public">
          <name>HMC5883L_MODE_CONTINUOUS</name>
          <initializer>= (0b00)</initializer>
          <briefdescription>
<para>Continuous mode. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga5f5de977bcf14d5aeacedd4c8367dd2fa57a3a69d9969746197e64d9f9fef7b1a" prot="public">
          <name>HMC5883L_MODE_SINGLE</name>
          <initializer>= (0b01)</initializer>
          <briefdescription>
<para>Single measurement mode, default. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga5f5de977bcf14d5aeacedd4c8367dd2fabb186e612aa76b65830373a455716a54" prot="public">
          <name>HMC5883L_MODE_IDLE</name>
          <initializer>= (0b10)</initializer>
          <briefdescription>
<para>Idle mode. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga5f5de977bcf14d5aeacedd4c8367dd2fa758c491e4cf555c50aad88266ba87ac2" prot="public">
          <name>HMC5883L_MODE_IDLE2</name>
          <initializer>= (0b11)</initializer>
          <briefdescription>
<para>Idle mode. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>HMC5883L possible operating modes </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_hmc5883l/include/hmc5883l.h" line="87" column="1" bodyfile="components/peripherals/i2c/esp_hmc5883l/include/hmc5883l.h" bodystart="87" bodyend="92"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1ga9231bcbd7f72cf02258e1fc5e51d2fdc" prot="public" static="no" strong="no">
        <type></type>
        <name>hmc5883l_sample_averages_e</name>
        <enumvalue id="group__drivers_1gga9231bcbd7f72cf02258e1fc5e51d2fdca16381319403bf8a94a4955a13e1cd5e3" prot="public">
          <name>HMC5883L_SAMPLE_1</name>
          <initializer>= (0b00)</initializer>
          <briefdescription>
<para>1 sample, default </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga9231bcbd7f72cf02258e1fc5e51d2fdca7a03c681633ca72b7705ca7e1219f5fa" prot="public">
          <name>HMC5883L_SAMPLE_2</name>
          <initializer>= (0b01)</initializer>
          <briefdescription>
<para>2 samples </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga9231bcbd7f72cf02258e1fc5e51d2fdca01b4d8e0fe0869c202d59e4474ba1512" prot="public">
          <name>HMC5883L_SAMPLE_4</name>
          <initializer>= (0b10)</initializer>
          <briefdescription>
<para>4 samples </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga9231bcbd7f72cf02258e1fc5e51d2fdcac7d689b5ca0a63a624cad17e869776c4" prot="public">
          <name>HMC5883L_SAMPLE_8</name>
          <initializer>= (0b11)</initializer>
          <briefdescription>
<para>8 samples </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>HMC5883L number of samples averaged per measurement </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_hmc5883l/include/hmc5883l.h" line="97" column="1" bodyfile="components/peripherals/i2c/esp_hmc5883l/include/hmc5883l.h" bodystart="97" bodyend="102"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1gab3a3115db483560ccfcbb2329d4bc910" prot="public" static="no" strong="no">
        <type></type>
        <name>hmc5883l_data_rates_e</name>
        <enumvalue id="group__drivers_1ggab3a3115db483560ccfcbb2329d4bc910a5aca588351a0cd813fc7377d8a0e5851" prot="public">
          <name>HMC5883L_DATA_RATE_00_75</name>
          <initializer>= (0b000)</initializer>
          <briefdescription>
<para>0.75 Hz </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggab3a3115db483560ccfcbb2329d4bc910ac041612a82e06e1c304a383074b66f7c" prot="public">
          <name>HMC5883L_DATA_RATE_01_50</name>
          <initializer>= (0b001)</initializer>
          <briefdescription>
<para>1.5 Hz </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggab3a3115db483560ccfcbb2329d4bc910a69d2ee3be42227488759f5953e6176c5" prot="public">
          <name>HMC5883L_DATA_RATE_03_00</name>
          <initializer>= (0b010)</initializer>
          <briefdescription>
<para>3 Hz </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggab3a3115db483560ccfcbb2329d4bc910a04576a34d5b25e9f8ee4a69156e0492b" prot="public">
          <name>HMC5883L_DATA_RATE_07_50</name>
          <initializer>= (0b011)</initializer>
          <briefdescription>
<para>7.5 Hz </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggab3a3115db483560ccfcbb2329d4bc910a12f27f5dafa214aaedf4cec43e26b595" prot="public">
          <name>HMC5883L_DATA_RATE_15_00</name>
          <initializer>= (0b100)</initializer>
          <briefdescription>
<para>15 Hz, default </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggab3a3115db483560ccfcbb2329d4bc910a452b054b11653b873784322b95b74dbf" prot="public">
          <name>HMC5883L_DATA_RATE_30_00</name>
          <initializer>= (0b101)</initializer>
          <briefdescription>
<para>30 Hz </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggab3a3115db483560ccfcbb2329d4bc910a0da0bf075af0819cc1a448997e77b620" prot="public">
          <name>HMC5883L_DATA_RATE_75_00</name>
          <initializer>= (0b110)</initializer>
          <briefdescription>
<para>75 Hz </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggab3a3115db483560ccfcbb2329d4bc910aec5304988541e24aa5194e1c2bf76d88" prot="public">
          <name>HMC5883L_DATA_RATE_RESERVED</name>
          <initializer>= (0b111)</initializer>
          <briefdescription>
<para>220 Hz, HMC5983 only </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>HMC5883L possible data output rate in continuous measurement mode </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_hmc5883l/include/hmc5883l.h" line="107" column="1" bodyfile="components/peripherals/i2c/esp_hmc5883l/include/hmc5883l.h" bodystart="107" bodyend="116"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1gadaf60b6050a6e8a19038b8950d3e5bf7" prot="public" static="no" strong="no">
        <type></type>
        <name>hmc5883l_biases_e</name>
        <enumvalue id="group__drivers_1ggadaf60b6050a6e8a19038b8950d3e5bf7a6ff9a24c7caefaa6478a17fbbc1ec132" prot="public">
          <name>HMC5883L_BIAS_NORMAL</name>
          <initializer>= (0b00)</initializer>
          <briefdescription>
<para>Default flow, no bias. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggadaf60b6050a6e8a19038b8950d3e5bf7a492bd9dae5ef015133506e983e043a6a" prot="public">
          <name>HMC5883L_BIAS_POSITIVE</name>
          <initializer>= (0b01)</initializer>
          <briefdescription>
<para>Positive bias configuration all axes, used for self test (see datasheet) </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggadaf60b6050a6e8a19038b8950d3e5bf7ac4cab55f577afa8c89ea44636de78d16" prot="public">
          <name>HMC5883L_BIAS_NEGATIVE</name>
          <initializer>= (0b10)</initializer>
          <briefdescription>
<para>Negative bias configuration all axes, used for self test (see datasheet) </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggadaf60b6050a6e8a19038b8950d3e5bf7a200bee3eb8ede512151f5a4023432b8a" prot="public">
          <name>HMC5883L_BIAS_RESERVED</name>
          <initializer>= (0b11)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>HMC5883L possible measurement mode of the device (bias) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_hmc5883l/include/hmc5883l.h" line="121" column="1" bodyfile="components/peripherals/i2c/esp_hmc5883l/include/hmc5883l.h" bodystart="121" bodyend="126"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1gab5113b8281f21e348730a6ac2db59627" prot="public" static="no" strong="no">
        <type></type>
        <name>hmc5883l_gains_e</name>
        <enumvalue id="group__drivers_1ggab5113b8281f21e348730a6ac2db59627a4f8dff983b7cd3d746923b15c8b81381" prot="public">
          <name>HMC5883L_GAIN_1370</name>
          <initializer>= (0b000)</initializer>
          <briefdescription>
<para>0.73 mG/LSb, range -0.88..+0.88 G </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggab5113b8281f21e348730a6ac2db59627a4c9fb5ef3e6503e2cb8b996eae4ab4d1" prot="public">
          <name>HMC5883L_GAIN_1090</name>
          <initializer>= (0b001)</initializer>
          <briefdescription>
<para>0.92 mG/LSb, range -1.3..+1.3 G, default </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggab5113b8281f21e348730a6ac2db59627a6f6d2a7052a5f6034173291b21b09feb" prot="public">
          <name>HMC5883L_GAIN_820</name>
          <initializer>= (0b010)</initializer>
          <briefdescription>
<para>1.22 mG/LSb, range -1.9..+1.9 G </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggab5113b8281f21e348730a6ac2db59627afc7f1827e7a1dc3253a0b29e0c644543" prot="public">
          <name>HMC5883L_GAIN_660</name>
          <initializer>= (0b011)</initializer>
          <briefdescription>
<para>1.52 mG/LSb, range -2.5..+2.5 G </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggab5113b8281f21e348730a6ac2db59627ab0bf948de94998b8b52bbe2202c1b497" prot="public">
          <name>HMC5883L_GAIN_440</name>
          <initializer>= (0b100)</initializer>
          <briefdescription>
<para>2.27 mG/LSb, range -4.0..+4.0 G </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggab5113b8281f21e348730a6ac2db59627a1a7dd4a5b0288e8ddf45398f1b35583d" prot="public">
          <name>HMC5883L_GAIN_390</name>
          <initializer>= (0b101)</initializer>
          <briefdescription>
<para>2.56 mG/LSb, range -4.7..+4.7 G </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggab5113b8281f21e348730a6ac2db59627a374a3840fb5f01e1e7cbc03153ea8ec3" prot="public">
          <name>HMC5883L_GAIN_330</name>
          <initializer>= (0b110)</initializer>
          <briefdescription>
<para>3.03 mG/LSb, range -5.6..+5.6 G </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggab5113b8281f21e348730a6ac2db59627a7f55cd7dc7c08cbb1c2a26f00704be51" prot="public">
          <name>HMC5883L_GAIN_230</name>
          <initializer>= (0b111)</initializer>
          <briefdescription>
<para>4.35 mG/LSb, range -8.1..+8.1 G </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>HMC5883L possible device gains </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_hmc5883l/include/hmc5883l.h" line="131" column="1" bodyfile="components/peripherals/i2c/esp_hmc5883l/include/hmc5883l.h" bodystart="131" bodyend="140"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1ga331987c52263d3232c0355c54284a98c" prot="public" static="no" strong="no">
        <type></type>
        <name>ina226_averaging_modes_e</name>
        <enumvalue id="group__drivers_1gga331987c52263d3232c0355c54284a98ca63e4883a131990d4884d11274ff2584c" prot="public">
          <name>INA226_AVG_MODE_1</name>
          <initializer>= (0b000)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>default </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga331987c52263d3232c0355c54284a98cac9db0a17fef9797865a0965f4ec94d9c" prot="public">
          <name>INA226_AVG_MODE_4</name>
          <initializer>= (0b001)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga331987c52263d3232c0355c54284a98ca62662290aafc5a65df7fbbb3d4f9eb1d" prot="public">
          <name>INA226_AVG_MODE_16</name>
          <initializer>= (0b010)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga331987c52263d3232c0355c54284a98caa6f1040be8ac7ab1341f6bc74b48994b" prot="public">
          <name>INA226_AVG_MODE_64</name>
          <initializer>= (0b011)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga331987c52263d3232c0355c54284a98cab00b81a661036c53b87bc3976316dbd2" prot="public">
          <name>INA226_AVG_MODE_128</name>
          <initializer>= (0b100)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga331987c52263d3232c0355c54284a98caae67e3b2b9b13621c0f9f517c5351ec5" prot="public">
          <name>INA226_AVG_MODE_256</name>
          <initializer>= (0b101)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga331987c52263d3232c0355c54284a98caad496eefad687ae70ef85543d487649c" prot="public">
          <name>INA226_AVG_MODE_512</name>
          <initializer>= (0b110)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga331987c52263d3232c0355c54284a98cabad35ccca95a00b414b9f83996a1de57" prot="public">
          <name>INA226_AVG_MODE_1024</name>
          <initializer>= (0b111)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Averaging modes enumerator for ADC resolution/averaging. </para>
        </briefdescription>
        <detaileddescription>
<para>ADC resolution/averaging </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ina226/include/ina226.h" line="120" column="1" bodyfile="components/peripherals/i2c/esp_ina226/include/ina226.h" bodystart="120" bodyend="129"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1ga0ff2d17cdd65de6c48164da40f545f30" prot="public" static="no" strong="no">
        <type></type>
        <name>ina226_volt_conv_times_e</name>
        <enumvalue id="group__drivers_1gga0ff2d17cdd65de6c48164da40f545f30a5bf79f9024d1ae5b6d56ccc950fcab91" prot="public">
          <name>INA226_VOLT_CONV_TIME_140US</name>
          <initializer>= (0b000)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga0ff2d17cdd65de6c48164da40f545f30a17867e239095f4f207c9a1a58a32c01d" prot="public">
          <name>INA226_VOLT_CONV_TIME_204US</name>
          <initializer>= (0b001)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga0ff2d17cdd65de6c48164da40f545f30aebdf8a9adcbb9364867eedb603721966" prot="public">
          <name>INA226_VOLT_CONV_TIME_332US</name>
          <initializer>= (0b010)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga0ff2d17cdd65de6c48164da40f545f30aeb93dfc354874e99b5063f9257e32cd2" prot="public">
          <name>INA226_VOLT_CONV_TIME_588US</name>
          <initializer>= (0b011)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga0ff2d17cdd65de6c48164da40f545f30ad1265344ea7f32c52958b4d4a25d69be" prot="public">
          <name>INA226_VOLT_CONV_TIME_1_1MS</name>
          <initializer>= (0b100)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>1.1 ms default </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga0ff2d17cdd65de6c48164da40f545f30a49fa0e7e6ee596d3d2f06eb455658c41" prot="public">
          <name>INA226_VOLT_CONV_TIME_2_116MS</name>
          <initializer>= (0b101)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga0ff2d17cdd65de6c48164da40f545f30a388eec5be739ad4f1d704f2ca5157543" prot="public">
          <name>INA226_VOLT_CONV_TIME_4_156MS</name>
          <initializer>= (0b110)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga0ff2d17cdd65de6c48164da40f545f30ae638df6c99689686b10ee0267ae6ce49" prot="public">
          <name>INA226_VOLT_CONV_TIME_8_244MS</name>
          <initializer>= (0b111)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Voltage conversion times enumerator for ADC resolution/averaging. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ina226/include/ina226.h" line="134" column="1" bodyfile="components/peripherals/i2c/esp_ina226/include/ina226.h" bodystart="134" bodyend="143"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1ga5a5218c9d32b83def8dc014eb623dcb8" prot="public" static="no" strong="no">
        <type></type>
        <name>ina226_operating_modes_e</name>
        <enumvalue id="group__drivers_1gga5a5218c9d32b83def8dc014eb623dcb8af6b26a9c672c20589cb734b63af6bfd5" prot="public">
          <name>INA226_OP_MODE_SHUTDOWN</name>
          <initializer>= (0b000)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>device is powered down </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga5a5218c9d32b83def8dc014eb623dcb8a3293ba0081729be64055d568dc40158d" prot="public">
          <name>INA226_OP_MODE_TRIG_SHUNT_VOLT</name>
          <initializer>= (0b001)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>triggers single-shot conversion when set </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga5a5218c9d32b83def8dc014eb623dcb8a1fcde25b1e71bb3dba61d39a3b872726" prot="public">
          <name>INA226_OP_MODE_TRIG_BUS_VOLT</name>
          <initializer>= (0b010)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>triggers single-shot conversion when set </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga5a5218c9d32b83def8dc014eb623dcb8aeee89fd6db62c7add799a438e040ebb8" prot="public">
          <name>INA226_OP_MODE_TRIG_SHUNT_BUS</name>
          <initializer>= (0b011)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>triggers single-shot conversion when set </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga5a5218c9d32b83def8dc014eb623dcb8a49a957afbbca75f55d71a28e2dc05657" prot="public">
          <name>INA226_OP_MODE_SHUTDOWN2</name>
          <initializer>= (0b100)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>device is powered down </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga5a5218c9d32b83def8dc014eb623dcb8a920dee79f4bb9c412fae909979d44f6e" prot="public">
          <name>INA226_OP_MODE_CONT_SHUNT_VOLT</name>
          <initializer>= (0b101)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>normal operating mode </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga5a5218c9d32b83def8dc014eb623dcb8a2878f2a7c9d1734ccb6973da01e60808" prot="public">
          <name>INA226_OP_MODE_CONT_BUS_VOLT</name>
          <initializer>= (0b110)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>normal operating mode </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga5a5218c9d32b83def8dc014eb623dcb8a90d9863cfc37473007339c7934a08278" prot="public">
          <name>INA226_OP_MODE_CONT_SHUNT_BUS</name>
          <initializer>= (0b111)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>normal operating mode default </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Current conversion times enumerator for ADC resolution/averaging. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ina226/include/ina226.h" line="148" column="1" bodyfile="components/peripherals/i2c/esp_ina226/include/ina226.h" bodystart="148" bodyend="157"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1gacec7ad35708eaa6b8e5db59c1559e44f" prot="public" static="no" strong="no">
        <type></type>
        <name>ltr390uv_operation_modes_e</name>
        <enumvalue id="group__drivers_1ggacec7ad35708eaa6b8e5db59c1559e44fa838acfa6477be7c21cd1d97a429522a2" prot="public">
          <name>LTR390UV_OM_ALS</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggacec7ad35708eaa6b8e5db59c1559e44fabd02ba3e97f2f105936ab58a0d676f76" prot="public">
          <name>LTR390UV_OM_UVS</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>LTR390UV operation modes enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" line="92" column="1" bodyfile="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" bodystart="92" bodyend="95"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1ga7aa7abb83bd1c9c3c8c9aa98d37b1248" prot="public" static="no" strong="no">
        <type></type>
        <name>ltr390uv_sensor_resolutions_e</name>
        <enumvalue id="group__drivers_1gga7aa7abb83bd1c9c3c8c9aa98d37b1248a5467706754caf5275635f50bfdb19d0f" prot="public">
          <name>LTR390UV_SR_20BIT</name>
          <initializer>= (0b000)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>ltr390uv 20-bit resolution, conversion time = 400ms </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga7aa7abb83bd1c9c3c8c9aa98d37b1248ab209363d7772f1504184cc5a269937e5" prot="public">
          <name>LTR390UV_SR_19BIT</name>
          <initializer>= (0b001)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>ltr390uv 19-bit resolution, conversion time = 200ms </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga7aa7abb83bd1c9c3c8c9aa98d37b1248a8a08abe0fd2ae3808e7107c7e8e73ed4" prot="public">
          <name>LTR390UV_SR_18BIT</name>
          <initializer>= (0b010)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>ltr390uv 18-bit resolution, conversion time = 100ms (default) </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga7aa7abb83bd1c9c3c8c9aa98d37b1248add862cab8a62e535802b8dc01ea72796" prot="public">
          <name>LTR390UV_SR_17BIT</name>
          <initializer>= (0b011)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>ltr390uv 17-bit resolution, conversion time = 50ms </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga7aa7abb83bd1c9c3c8c9aa98d37b1248afb56b7437d2795a29e01f2b0589e8912" prot="public">
          <name>LTR390UV_SR_16BIT</name>
          <initializer>= (0b100)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>ltr390uv 16-bit resolution, conversion time = 25ms </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga7aa7abb83bd1c9c3c8c9aa98d37b1248a8bffc70885178a5fd3186e5b1121a75b" prot="public">
          <name>LTR390UV_SR_13BIT</name>
          <initializer>= (0b101)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>ltr390uv 13-bit resolution, conversion time = 12.5ms </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>LTR390UV sensor resolutions enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" line="100" column="1" bodyfile="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" bodystart="100" bodyend="107"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1ga763aecfa1b468ef300d966da552be213" prot="public" static="no" strong="no">
        <type></type>
        <name>ltr390uv_measurement_rates_e</name>
        <enumvalue id="group__drivers_1gga763aecfa1b468ef300d966da552be213ae359bb8f1fc2f8e3ed34192a181fab90" prot="public">
          <name>LTR390UV_MR_25MS</name>
          <initializer>= (0b000)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>ltr390uv </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga763aecfa1b468ef300d966da552be213a9ced5813f58e1f28c1a0be725491b752" prot="public">
          <name>LTR390UV_MR_50MS</name>
          <initializer>= (0b001)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>ltr390uv </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga763aecfa1b468ef300d966da552be213a00fdeefcd13123ebf902a1bdfd5556f3" prot="public">
          <name>LTR390UV_MR_100MS</name>
          <initializer>= (0b010)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>ltr390uv (default) </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga763aecfa1b468ef300d966da552be213a7b278a0622e3aa8e805ce4914657e3e2" prot="public">
          <name>LTR390UV_MR_200MS</name>
          <initializer>= (0b011)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>ltr390uv </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga763aecfa1b468ef300d966da552be213a847bf49b9025682edeea26b26325cd34" prot="public">
          <name>LTR390UV_MR_500MS</name>
          <initializer>= (0b100)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>ltr390uv </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga763aecfa1b468ef300d966da552be213a3d961741dd3daabc63f1318e221ba611" prot="public">
          <name>LTR390UV_MR_1000MS</name>
          <initializer>= (0b101)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>ltr390uv </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga763aecfa1b468ef300d966da552be213a1ba81687c5599656326e9bfcf51f09f6" prot="public">
          <name>LTR390UV_MR_2000MS</name>
          <initializer>= (0b110)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>ltr390uv </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga763aecfa1b468ef300d966da552be213a152ed7e571afabc702de349f81bd516b" prot="public">
          <name>LTR390UV_MR_2000_MS</name>
          <initializer>= (0b111)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>ltr390uv </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>LTR390UV measurement rates enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" line="112" column="1" bodyfile="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" bodystart="112" bodyend="121"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1ga240bac95531dbc35edc64da1ca0a84b3" prot="public" static="no" strong="no">
        <type></type>
        <name>ltr390uv_measurement_gains_e</name>
        <enumvalue id="group__drivers_1gga240bac95531dbc35edc64da1ca0a84b3a3e146d1b823b52002221ef90edef2efa" prot="public">
          <name>LTR390UV_MG_X1</name>
          <initializer>= (0b000)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>ltr390uv </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga240bac95531dbc35edc64da1ca0a84b3a631c2a196edbcafd5a4a23c4786c323f" prot="public">
          <name>LTR390UV_MG_X3</name>
          <initializer>= (0b001)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>ltr390uv (default) </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga240bac95531dbc35edc64da1ca0a84b3a910261c0f0fd54c6a1bf98d07e52315c" prot="public">
          <name>LTR390UV_MG_X6</name>
          <initializer>= (0b010)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>ltr390uv </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga240bac95531dbc35edc64da1ca0a84b3a053f383eb8ccb90355283c1dc53e0082" prot="public">
          <name>LTR390UV_MG_X9</name>
          <initializer>= (0b011)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>ltr390uv </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga240bac95531dbc35edc64da1ca0a84b3ae087e7ff745b0f4bc2e71fc698001474" prot="public">
          <name>LTR390UV_MG_X18</name>
          <initializer>= (0b100)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>ltr390uv </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>LTR390UV measurement gains enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" line="126" column="1" bodyfile="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" bodystart="126" bodyend="132"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1gaa8a45ec5ee3af6edfe3ef76b4285974f" prot="public" static="no" strong="no">
        <type></type>
        <name>ltr390uv_ls_interrupts_e</name>
        <enumvalue id="group__drivers_1ggaa8a45ec5ee3af6edfe3ef76b4285974fa4985e0b1cf7c91e5fe5b0c570971d55f" prot="public">
          <name>LTR390UV_LSI_ALS</name>
          <initializer>= (0b01)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggaa8a45ec5ee3af6edfe3ef76b4285974faab7f57bfce6f705b12feb519c382b814" prot="public">
          <name>LTR390UV_LSI_UVS</name>
          <initializer>= (0b11)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>LTR390UV light source interrupts enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" line="137" column="1" bodyfile="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" bodystart="137" bodyend="140"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1ga98bf6ef762aa82d3a01c0d42169f0224" prot="public" static="no" strong="no">
        <type></type>
        <name>max30105_adc_range_controls_e</name>
        <enumvalue id="group__drivers_1gga98bf6ef762aa82d3a01c0d42169f0224a950e031b8efb6b2bcb3a032a1ffe3c9a" prot="public">
          <name>MAX30105_ARC_7_81LSB</name>
          <initializer>= (0x00)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>max30105 7.81 LSB size (pA), 2048 full-scale (nA) </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga98bf6ef762aa82d3a01c0d42169f0224ada2a14a32fe8b5046bd4bb2b8d464ca6" prot="public">
          <name>MAX30105_ARC_15_63LSB</name>
          <initializer>= (0x01)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>max30105 15.63 LSB size (pA), 4096 full-scale (nA) </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga98bf6ef762aa82d3a01c0d42169f0224a0b354b163122215d457fce377a776b7f" prot="public">
          <name>MAX30105_ARC_31_25LSB</name>
          <initializer>= (0x02)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>max30105 31.25 LSB size (pA), 8192 full-scale (nA) </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga98bf6ef762aa82d3a01c0d42169f0224a0d5d6188a4d4d1f325950eb976723b63" prot="public">
          <name>MAX30105_ARC_62_5LSB</name>
          <initializer>= (0x03)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>max30105 62.5 LSB size (pA), 16384 full-scale (nA) </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>MAX30105 particle-sensing ADC range controls (18-bit resolution) enumerator (register 0x0a). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_max30105/include/max30105.h" line="75" column="1" bodyfile="components/peripherals/i2c/esp_max30105/include/max30105.h" bodystart="75" bodyend="80"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1gaf3d372d9d9a63fe1bc8b70e59180476a" prot="public" static="no" strong="no">
        <type></type>
        <name>max30105_sample_rate_controls_e</name>
        <enumvalue id="group__drivers_1ggaf3d372d9d9a63fe1bc8b70e59180476aa883ea5322e3fc73152e2312c8178cd53" prot="public">
          <name>MAX30105_SRC_50SPS</name>
          <initializer>= (0b000)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>max30105 50 samples per second </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggaf3d372d9d9a63fe1bc8b70e59180476aa7330a5d4d8260f8816620d2803a5b90e" prot="public">
          <name>MAX30105_SRC_100SPS</name>
          <initializer>= (0b001)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>max30105 100 samples per second </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggaf3d372d9d9a63fe1bc8b70e59180476aa31c9d99a5419ca04e0621f84efe42e05" prot="public">
          <name>MAX30105_SRC_200SPS</name>
          <initializer>= (0b010)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>max30105 200 samples per second </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggaf3d372d9d9a63fe1bc8b70e59180476aa28d7707283cbb411977e4c93d99b58af" prot="public">
          <name>MAX30105_SRC_400SPS</name>
          <initializer>= (0b011)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>max30105 400 samples per second </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggaf3d372d9d9a63fe1bc8b70e59180476aa8cdf90d10ad2ba8eb22d3644f0fdc192" prot="public">
          <name>MAX30105_SRC_800SPS</name>
          <initializer>= (0b100)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>max30105 800 samples per second </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggaf3d372d9d9a63fe1bc8b70e59180476aab0de5e8296d4e3a3cf61bcc6b4072f27" prot="public">
          <name>MAX30105_SRC_1000SPS</name>
          <initializer>= (0b101)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>max30105 1000 samples per second </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggaf3d372d9d9a63fe1bc8b70e59180476aafcbbfee8e59cdb99830ba22f22f39b59" prot="public">
          <name>MAX30105_SRC_1600SPS</name>
          <initializer>= (0b110)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>max30105 1600 samples per second </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggaf3d372d9d9a63fe1bc8b70e59180476aa5227294c6f94cd37705eb8d95bc85fcc" prot="public">
          <name>MAX30105_SRC_3200SPS</name>
          <initializer>= (0b111)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>max30105 3200 samples per second </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>MAX30105 particle-sensing sample rate control enumerator (register 0x0a). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_max30105/include/max30105.h" line="85" column="1" bodyfile="components/peripherals/i2c/esp_max30105/include/max30105.h" bodystart="85" bodyend="94"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1ga0c696bd78787c0c17489d990a4a7342a" prot="public" static="no" strong="no">
        <type></type>
        <name>max30105_led_pulse_width_controls_e</name>
        <enumvalue id="group__drivers_1gga0c696bd78787c0c17489d990a4a7342aae79b1a0726270b44bf2c9f025d3538e8" prot="public">
          <name>MAX30105_LPWC_69US_15BITS</name>
          <initializer>= (0b00)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>max30105 68.95us pulse width with 15-bit ADC resolution </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga0c696bd78787c0c17489d990a4a7342aa0b5af1fa2526ab1fe2000d82e1454f2c" prot="public">
          <name>MAX30105_LPWC_118US_16BITS</name>
          <initializer>= (0b01)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>max30105 117.78us pulse width with 16-bit ADC resolution </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga0c696bd78787c0c17489d990a4a7342aac46a74e2e57c68b4578b33a25699cc1a" prot="public">
          <name>MAX30105_LPWC_215US_17BITS</name>
          <initializer>= (0b10)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>max30105 215.44us pulse width with 17-bit ADC resolution </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga0c696bd78787c0c17489d990a4a7342aa7d6370e7f116e13b5016a9d0833a8913" prot="public">
          <name>MAX30105_LPWC_411US_18BITS</name>
          <initializer>= (0b11)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>max30105 410.75us pulse width with 18-bit ADC resolution </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>MAX30105 LED pulse width controls enumerator (register 0x0a). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_max30105/include/max30105.h" line="99" column="1" bodyfile="components/peripherals/i2c/esp_max30105/include/max30105.h" bodystart="99" bodyend="104"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1gacd9ab5ee398b718652084d7527c11afd" prot="public" static="no" strong="no">
        <type></type>
        <name>max30105_control_modes_e</name>
        <enumvalue id="group__drivers_1ggacd9ab5ee398b718652084d7527c11afdac4c048b6756fd485251330b285b9b92f" prot="public">
          <name>MAX30105_CM_PARTICLE_SENSING_1LED</name>
          <initializer>= (0b010)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>max30105 particle sensing mode with 1 LED </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggacd9ab5ee398b718652084d7527c11afdaf65173d7f758929d4113cde78a57f11a" prot="public">
          <name>MAX30105_CM_PARTICLE_SENSING_2LED</name>
          <initializer>= (0b011)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>max30105 particle sensing mode with 2 LEDs </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggacd9ab5ee398b718652084d7527c11afdaabfaa28f1aa038d7a396ea6c0da46eaf" prot="public">
          <name>MAX30105_CM_MULTIPLE_LED</name>
          <initializer>= (0b111)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>max30105 multiple LED mode </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>MAX30105 control modes enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_max30105/include/max30105.h" line="109" column="1" bodyfile="components/peripherals/i2c/esp_max30105/include/max30105.h" bodystart="109" bodyend="113"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1gad2d631b3ded4311c550b7bc4e1d97daa" prot="public" static="no" strong="no">
        <type></type>
        <name>max30105_multi_led_control_modes_e</name>
        <enumvalue id="group__drivers_1ggad2d631b3ded4311c550b7bc4e1d97daaab32ce692d3fa747acce1cb9751c7d30a" prot="public">
          <name>MAX30105_MLCM_DISABLED</name>
          <initializer>= (0b000)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>max30105 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggad2d631b3ded4311c550b7bc4e1d97daaa34b34f34411fe4ff2ecdef54fdd7db3e" prot="public">
          <name>MAX30105_MLCM_RED_LED</name>
          <initializer>= (0b001)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>max30105 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggad2d631b3ded4311c550b7bc4e1d97daaaf58bcd000b256f7033cecd1adade10c8" prot="public">
          <name>MAX30105_MLCM_IR_LED</name>
          <initializer>= (0b010)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>max30105 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggad2d631b3ded4311c550b7bc4e1d97daaa7e12856c57f72a6d8ce847df8fbb168a" prot="public">
          <name>MAX30105_MLCM_GREEN_LED</name>
          <initializer>= (0b011)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>max30105 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggad2d631b3ded4311c550b7bc4e1d97daaa5eecddf4b253176e3d50948033a55dfa" prot="public">
          <name>MAX30105_MLCM_NONE</name>
          <initializer>= (0b100)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>max30105 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggad2d631b3ded4311c550b7bc4e1d97daaa1dfbfc6f8ffb57c469f77c092a1ba491" prot="public">
          <name>MAX30105_MLCM_RED_PILOT</name>
          <initializer>= (0b101)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>max30105 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggad2d631b3ded4311c550b7bc4e1d97daaa8e9040f90abfd6476351ae2d39cdbbe6" prot="public">
          <name>MAX30105_MLCM_IR_PILOT</name>
          <initializer>= (0b110)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>max30105 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggad2d631b3ded4311c550b7bc4e1d97daaa0f751522ea16846dd74a4f1dd042080b" prot="public">
          <name>MAX30105_MLCM_GREEN_PILOT</name>
          <initializer>= (0b111)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>max30105 </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>MAX30105 multi-LED control modes enumerator (registers 0x11-0x12). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_max30105/include/max30105.h" line="118" column="1" bodyfile="components/peripherals/i2c/esp_max30105/include/max30105.h" bodystart="118" bodyend="127"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1ga91713d91ba70b980968ce118b795aa86" prot="public" static="no" strong="no">
        <type></type>
        <name>max30105_led_pulse_amplitudes_e</name>
        <enumvalue id="group__drivers_1gga91713d91ba70b980968ce118b795aa86a85f3dd602feabbe8d99cfd116d35f465" prot="public">
          <name>MAX30105_LPA_0_0MA</name>
          <initializer>= (0x00)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>max30105 LED pulse amplitude at 0.0 mA </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga91713d91ba70b980968ce118b795aa86af292deff4d4e49dffbc6c212c2629b22" prot="public">
          <name>MAX30105_LPA_0_2MA</name>
          <initializer>= (0x01)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>max30105 LED pulse amplitude at 0.2 mA </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga91713d91ba70b980968ce118b795aa86a52a28b7773aa19e59e60d8793b93ab9b" prot="public">
          <name>MAX30105_LPA_0_4MA</name>
          <initializer>= (0x02)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>max30105 LED pulse amplitude at 0.4 mA </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga91713d91ba70b980968ce118b795aa86afe812b4d8bdffe4dbe47a54636fdcd95" prot="public">
          <name>MAX30105_LPA_3_1MA</name>
          <initializer>= (0x0f)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>max30105 LED pulse amplitude at 3.1 mA </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga91713d91ba70b980968ce118b795aa86aa0f4e7a263429beb7bf1b5bd6f48f8b4" prot="public">
          <name>MAX30105_LPA_6_4MA</name>
          <initializer>= (0x1f)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>max30105 LED pulse amplitude at 6.4 mA </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga91713d91ba70b980968ce118b795aa86a99f31ff8467cdca2bc7533f28ef5c93c" prot="public">
          <name>MAX30105_LPA_12_5MA</name>
          <initializer>= (0x3f)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>max30105 LED pulse amplitude at 12.5 mA </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga91713d91ba70b980968ce118b795aa86a41238e5ff923626531300fc667ba0ae8" prot="public">
          <name>MAX30105_LPA_25_4MA</name>
          <initializer>= (0x7f)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>max30105 LED pulse amplitude at 25.4 mA </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga91713d91ba70b980968ce118b795aa86a00a6cc342d8cd8a2329ea6df7fe1ddfd" prot="public">
          <name>MAX30105_LPA_50_0MA</name>
          <initializer>= (0xff)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>max30105 LED pulse amplitude at 50.0 mA </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>MAX30105 LED pulse amplitudes enumerator (registers 0x0c-0x10). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_max30105/include/max30105.h" line="132" column="1" bodyfile="components/peripherals/i2c/esp_max30105/include/max30105.h" bodystart="132" bodyend="141"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1ga92efd847e10c5b4a6167fc04c43d4f6b" prot="public" static="no" strong="no">
        <type></type>
        <name>mlx90614_sensor_iirs_e</name>
        <enumvalue id="group__drivers_1gga92efd847e10c5b4a6167fc04c43d4f6badc85a2ac93dfc949d8ec7b3a8b952200" prot="public">
          <name>MLX90614_SENSOR_IIR_100</name>
          <initializer>= (0b100)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga92efd847e10c5b4a6167fc04c43d4f6ba21b2377ca745fa7830b3ced4436672e9" prot="public">
          <name>MLX90614_SENSOR_IIR_80</name>
          <initializer>= (0b101)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga92efd847e10c5b4a6167fc04c43d4f6ba4dc88653514ebf692d19b30e06c24186" prot="public">
          <name>MLX90614_SENSOR_IIR_67</name>
          <initializer>= (0b110)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga92efd847e10c5b4a6167fc04c43d4f6ba957c1769e65e822d6a07b10fd0d95c4d" prot="public">
          <name>MLX90614_SENSOR_IIR_57</name>
          <initializer>= (0b111)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga92efd847e10c5b4a6167fc04c43d4f6ba425814cecbcfefc1d8a7b01d6a2b5625" prot="public">
          <name>MLX90614_SENSOR_IIR_50</name>
          <initializer>= (0b000)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga92efd847e10c5b4a6167fc04c43d4f6ba405adfad266791697288f81fad128506" prot="public">
          <name>MLX90614_SENSOR_IIR_25</name>
          <initializer>= (0b001)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga92efd847e10c5b4a6167fc04c43d4f6ba60bbd869b510ef77dc8eb14743e1d7ad" prot="public">
          <name>MLX90614_SENSOR_IIR_17</name>
          <initializer>= (0b010)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga92efd847e10c5b4a6167fc04c43d4f6bae4d32c1186d10e9a4dc1193b35213af5" prot="public">
          <name>MLX90614_SENSOR_IIR_13</name>
          <initializer>= (0b011)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" line="72" column="1" bodyfile="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" bodystart="72" bodyend="81"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1ga546e297a0a181c9b915f35a71f3e0a99" prot="public" static="no" strong="no">
        <type></type>
        <name>mlx90614_sensor_test_repeat_states_e</name>
        <enumvalue id="group__drivers_1gga546e297a0a181c9b915f35a71f3e0a99a7a2a90237348af927b58c7dbd1e60076" prot="public">
          <name>MLX90614_SENSOR_TEST_REPEAT_OFF</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga546e297a0a181c9b915f35a71f3e0a99a5a1197f70ff8cfc62caec587dc75e130" prot="public">
          <name>MLX90614_SENSOR_TEST_REPEAT_ON</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" line="83" column="1" bodyfile="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" bodystart="83" bodyend="86"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1gae08a8a5cf4b37eec8732490a6817f40b" prot="public" static="no" strong="no">
        <type></type>
        <name>mlx90614_temperature_sensors_e</name>
        <enumvalue id="group__drivers_1ggae08a8a5cf4b37eec8732490a6817f40baa84d63f97700fea55e56052b658d808f" prot="public">
          <name>MLX90614_TEMPERATURE_SENSOR_TA_TOBJ1</name>
          <initializer>= (0b00)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggae08a8a5cf4b37eec8732490a6817f40ba58332f7b5e1f4b212f8793f34962dbb8" prot="public">
          <name>MLX90614_TEMPERATURE_SENSOR_TA_TOBJ2</name>
          <initializer>= (0b01)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggae08a8a5cf4b37eec8732490a6817f40ba3b1c39e1b293f74ef82c5ad1a92b8aab" prot="public">
          <name>MLX90614_TEMPERATURE_SENSOR_TOBJ2</name>
          <initializer>= (0b10)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggae08a8a5cf4b37eec8732490a6817f40ba6c9c119d1416e449546918c35f11068d" prot="public">
          <name>MLX90614_TEMPERATURE_SENSOR_TOBJ1_TOBJ2</name>
          <initializer>= (0b11)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" line="88" column="1" bodyfile="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" bodystart="88" bodyend="93"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1ga56a1afb3409b596d28df446f310cc326" prot="public" static="no" strong="no">
        <type></type>
        <name>mlx90614_sensor_ir_types_e</name>
        <enumvalue id="group__drivers_1gga56a1afb3409b596d28df446f310cc326a82b3a6894de90e3a1047bd3fe9603260" prot="public">
          <name>MLX90614_SENSOR_IR_TYPE_SINGLE</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga56a1afb3409b596d28df446f310cc326a8808207056b2b34a483b19f7da26c595" prot="public">
          <name>MLX90614_SENSOR_IR_TYPE_DUAL</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" line="95" column="1" bodyfile="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" bodystart="95" bodyend="98"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1gae68ea2486d7bc2b110e8dc98c0beee25" prot="public" static="no" strong="no">
        <type></type>
        <name>mlx90614_k_signs_e</name>
        <enumvalue id="group__drivers_1ggae68ea2486d7bc2b110e8dc98c0beee25a297b3632788f78e8d2fc075c1bd40a96" prot="public">
          <name>MLX90614_K_SIGN_POSITIVE</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggae68ea2486d7bc2b110e8dc98c0beee25a8b7198f743924b637cf3fedf0c414c71" prot="public">
          <name>MLX90614_K_SIGN_NEGATIVE</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" line="100" column="1" bodyfile="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" bodystart="100" bodyend="103"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1gabf74502d8cbca8b8606f26b4f7e5967a" prot="public" static="no" strong="no">
        <type></type>
        <name>mlx90614_fir_values_e</name>
        <enumvalue id="group__drivers_1ggabf74502d8cbca8b8606f26b4f7e5967aa8366236bd54221bad59f192c0aa0031f" prot="public">
          <name>MLX90614_FIR_128</name>
          <initializer>= (0b100)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggabf74502d8cbca8b8606f26b4f7e5967aa4521236a1f9d6c3145cd74e0a951f7ee" prot="public">
          <name>MLX90614_FIR_256</name>
          <initializer>= (0b101)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggabf74502d8cbca8b8606f26b4f7e5967aaa3eaf24c71aaf777d179a7822e0c100f" prot="public">
          <name>MLX90614_FIR_512</name>
          <initializer>= (0b110)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggabf74502d8cbca8b8606f26b4f7e5967aa11ad62869865170aed419783d4a5a4d1" prot="public">
          <name>MLX90614_FIR_1024</name>
          <initializer>= (0b111)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" line="105" column="1" bodyfile="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" bodystart="105" bodyend="110"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1ga01a78e5a5f35e03c71610dd41cd95108" prot="public" static="no" strong="no">
        <type></type>
        <name>ml90614_gains_e</name>
        <enumvalue id="group__drivers_1gga01a78e5a5f35e03c71610dd41cd95108a60a016bd1b362d89570d700814bf3b42" prot="public">
          <name>MLX90614_GAIN_1</name>
          <initializer>= (0b000)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga01a78e5a5f35e03c71610dd41cd95108a0092ad9eac1acc6009f3b696706935d8" prot="public">
          <name>MLX90614_GAIN_3</name>
          <initializer>= (0b001)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga01a78e5a5f35e03c71610dd41cd95108a97f769893081a15ba486ed46ce9250d3" prot="public">
          <name>MLX90614_GAIN_6</name>
          <initializer>= (0b010)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga01a78e5a5f35e03c71610dd41cd95108aeb6005a9758429b13051d6d18a26f4ec" prot="public">
          <name>MLX90614_GAIN_12_5</name>
          <initializer>= (0b011)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga01a78e5a5f35e03c71610dd41cd95108a22e7a8e551d114374939e0c5baeeeced" prot="public">
          <name>MLX90614_GAIN_25</name>
          <initializer>= (0b100)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga01a78e5a5f35e03c71610dd41cd95108a82a60d97c7a4ed287d463599744e4c84" prot="public">
          <name>MLX90614_GAIN_50</name>
          <initializer>= (0b101)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga01a78e5a5f35e03c71610dd41cd95108afca9ef1658485dee9ac197f0798932c9" prot="public">
          <name>MLX90614_GAIN_100A</name>
          <initializer>= (0b110)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga01a78e5a5f35e03c71610dd41cd95108aa4dbee7da56e20360efcf7c648d4d4e3" prot="public">
          <name>MLX90614_GAIN_100B</name>
          <initializer>= (0b111)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" line="112" column="1" bodyfile="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" bodystart="112" bodyend="121"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1gac95431e5427a30171d5ddea58a95b237" prot="public" static="no" strong="no">
        <type></type>
        <name>mlx90614_nk2_signs_e</name>
        <enumvalue id="group__drivers_1ggac95431e5427a30171d5ddea58a95b237aaa0fb1a1f694f5a421cffc158033902e" prot="public">
          <name>MLX90614_KT2_SIGN_POSITIVE</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggac95431e5427a30171d5ddea58a95b237a72a050073fd5d9e2852b0c09193188b4" prot="public">
          <name>MLX90614_KT2_SIGN_NEGATIVE</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" line="123" column="1" bodyfile="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" bodystart="123" bodyend="126"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1ga16a2b1d336ad732a2890d46ece5309b9" prot="public" static="no" strong="no">
        <type></type>
        <name>mlx90614_sensor_test_states_e</name>
        <enumvalue id="group__drivers_1gga16a2b1d336ad732a2890d46ece5309b9a4dff82af06f6aad37382fff0cb6f4790" prot="public">
          <name>MLX90614_SENSOR_TEST_ENABLED</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga16a2b1d336ad732a2890d46ece5309b9a4a88d67374627df8ba723e03e26e9a4c" prot="public">
          <name>MLX90614_SENSOR_TEST_DISABLED</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" line="128" column="1" bodyfile="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" bodystart="128" bodyend="131"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1ga8e9380a7d16499b60fd49ad3ddfdb271" prot="public" static="no" strong="no">
        <type></type>
        <name>mlx90614_pwm_modes_e</name>
        <enumvalue id="group__drivers_1gga8e9380a7d16499b60fd49ad3ddfdb271a3a9a90fe00d8f73e2835a147c7e97ba9" prot="public">
          <name>MLX90614_PWM_MODE_EXTENDED</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga8e9380a7d16499b60fd49ad3ddfdb271aa3f4a2bfbc65be4d72aab179e9a6a91c" prot="public">
          <name>MLX90614_PWM_MODE_SINGLE</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" line="151" column="1" bodyfile="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" bodystart="151" bodyend="154"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1gad23dce5f60776be65e30411579b0443a" prot="public" static="no" strong="no">
        <type></type>
        <name>mlx90614_pwm_mode_states_e</name>
        <enumvalue id="group__drivers_1ggad23dce5f60776be65e30411579b0443aa235110e8f19d77557936ab29bfca43ae" prot="public">
          <name>MLX90614_PWM_MODE_STATE_DISABLED</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggad23dce5f60776be65e30411579b0443aa5df301d3460791b95bfae58fc9db7735" prot="public">
          <name>MLX90614_PWM_MODE_STATE_ENABLED</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" line="156" column="1" bodyfile="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" bodystart="156" bodyend="159"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1gac5355e605192364611862a4aae22e661" prot="public" static="no" strong="no">
        <type></type>
        <name>mlx90614_sda_pin_modes_e</name>
        <enumvalue id="group__drivers_1ggac5355e605192364611862a4aae22e661a7736c0f20d9ed03eb606977c20c9383e" prot="public">
          <name>MLX90614_SDA_PIN_MODE_OPEN_DRAIN</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggac5355e605192364611862a4aae22e661a89b86097eb5079340d67252dcada2a72" prot="public">
          <name>MLX90614_SDA_PIN_MODE_PUSH_PULL</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" line="161" column="1" bodyfile="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" bodystart="161" bodyend="164"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1ga47bc81fdd2c975118fe84493652827b6" prot="public" static="no" strong="no">
        <type></type>
        <name>mlx90614_thermal_modes_e</name>
        <enumvalue id="group__drivers_1gga47bc81fdd2c975118fe84493652827b6a3d3adbce12c77b38a304dbc6009251d6" prot="public">
          <name>MLX90614_THERMAL_MODE_PWM</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga47bc81fdd2c975118fe84493652827b6aeb6a95f5f8a85a93603db09eae611e0c" prot="public">
          <name>MLX90614_THERMAL_MODE_THERMAL_RELAY</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" line="166" column="1" bodyfile="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" bodystart="166" bodyend="169"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1gaf4e61285cf550d22e9e3e3ec620410d0" prot="public" static="no" strong="no">
        <type></type>
        <name>mmc56x3_measurement_times_e</name>
        <enumvalue id="group__drivers_1ggaf4e61285cf550d22e9e3e3ec620410d0ad5a544fd7c5cbdefd8c590fe3a14484d" prot="public">
          <name>MMC56X3_MEAS_TIME_6_6MS</name>
          <initializer>= (0b00)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggaf4e61285cf550d22e9e3e3ec620410d0a87503cd498b7f3125541f5834e4d0419" prot="public">
          <name>MMC56X3_MEAS_TIME_3_5MS</name>
          <initializer>= (0b01)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggaf4e61285cf550d22e9e3e3ec620410d0ac9af9edf53c42165845d3da9611373e4" prot="public">
          <name>MMC56X3_MEAS_TIME_2MS</name>
          <initializer>= (0b10)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggaf4e61285cf550d22e9e3e3ec620410d0a6c82de2ea87dacc0e3b3917585264547" prot="public">
          <name>MMC56X3_MEAS_TIME_1_2MS</name>
          <initializer>= (0b11)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>MMC56X3 measurement times enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mmc56x3/include/mmc56x3.h" line="80" column="1" bodyfile="components/peripherals/i2c/esp_mmc56x3/include/mmc56x3.h" bodystart="80" bodyend="85"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1ga71668da0f8cf8f448a8f211da3ded77e" prot="public" static="no" strong="no">
        <type></type>
        <name>mmc56x3_measurement_samples_e</name>
        <enumvalue id="group__drivers_1gga71668da0f8cf8f448a8f211da3ded77eac5cb6823e8fcc14e97593b0d09e39239" prot="public">
          <name>MMC56X3_MEAS_SAMPLE_1</name>
          <initializer>= (0b000)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga71668da0f8cf8f448a8f211da3ded77ea9d2511eb93b8f25e04159b9eeff23df6" prot="public">
          <name>MMC56X3_MEAS_SAMPLE_25</name>
          <initializer>= (0b001)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga71668da0f8cf8f448a8f211da3ded77eab822e88a58beaa8995f5734d83c9c446" prot="public">
          <name>MMC56X3_MEAS_SAMPLE_75</name>
          <initializer>= (0b010)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga71668da0f8cf8f448a8f211da3ded77ea9a18d73858b461a541c073c9d01484a8" prot="public">
          <name>MMC56X3_MEAS_SAMPLE_100</name>
          <initializer>= (0b011)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga71668da0f8cf8f448a8f211da3ded77ea037cd4c5cd78e666b67d1a21b0beee7b" prot="public">
          <name>MMC56X3_MEAS_SAMPLE_250</name>
          <initializer>= (0b100)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga71668da0f8cf8f448a8f211da3ded77eaab77d1d7ee04da96d20490b193857ec8" prot="public">
          <name>MMC56X3_MEAS_SAMPLE_500</name>
          <initializer>= (0b101)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga71668da0f8cf8f448a8f211da3ded77ea073a0629205a330287f521ebed722429" prot="public">
          <name>MMC56X3_MEAS_SAMPLE_1000</name>
          <initializer>= (0b110)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga71668da0f8cf8f448a8f211da3ded77ea184882e76ace1b43f0c7ab3f88e7d7d8" prot="public">
          <name>MMC56X3_MEAS_SAMPLE_2000</name>
          <initializer>= (0b111)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>MMC56X3 measurement samples enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mmc56x3/include/mmc56x3.h" line="90" column="1" bodyfile="components/peripherals/i2c/esp_mmc56x3/include/mmc56x3.h" bodystart="90" bodyend="99"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1ga60c42832aeeee03d299ed1e790f81e09" prot="public" static="no" strong="no">
        <type></type>
        <name>mpu6050_ext_sync_settings_e</name>
        <enumvalue id="group__drivers_1gga60c42832aeeee03d299ed1e790f81e09aca571ec015832fcf3a8f2ea8adcf2723" prot="public">
          <name>MPU6050_EXT_SYNC_SETTING_INPUT_DISABLED</name>
          <initializer>= (0b000)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>mpu6050 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga60c42832aeeee03d299ed1e790f81e09a2cf3fe6dfa161edd245ef030bc9db229" prot="public">
          <name>MPU6050_EXT_SYNC_SETTING_TEMP_OUT_L</name>
          <initializer>= (0b001)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>mpu6050 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga60c42832aeeee03d299ed1e790f81e09a33b97b68a2950633c3e1e7738599e23f" prot="public">
          <name>MPU6050_EXT_SYNC_SETTING_GYRO_XOUT_L</name>
          <initializer>= (0b010)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>mpu6050 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga60c42832aeeee03d299ed1e790f81e09ab01138482e38e41a72d250aa22a143d1" prot="public">
          <name>MPU6050_EXT_SYNC_SETTING_GYRO_YOUT_L</name>
          <initializer>= (0b011)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>mpu6050 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga60c42832aeeee03d299ed1e790f81e09a2f5ff9eddfc7629d4b78f07a51ba28a4" prot="public">
          <name>MPU6050_EXT_SYNC_SETTING_GYRO_ZOUT_L</name>
          <initializer>= (0b100)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>mpu6050 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga60c42832aeeee03d299ed1e790f81e09ae530b4b7457fe3ec23ed308543af298a" prot="public">
          <name>MPU6050_EXT_SYNC_SETTING_ACCEL_XOUT_L</name>
          <initializer>= (0b101)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>mpu6050 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga60c42832aeeee03d299ed1e790f81e09abceb86dd6057790905893cfd163099a2" prot="public">
          <name>MPU6050_EXT_SYNC_SETTING_ACCEL_YOUT_L</name>
          <initializer>= (0b110)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>mpu6050 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga60c42832aeeee03d299ed1e790f81e09a9249e4f4174c2359d95a8c7170700f64" prot="public">
          <name>MPU6050_EXT_SYNC_SETTING_ACCEL_ZOUT_L</name>
          <initializer>= (0b111)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>mpu6050 </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>MPU6050 external synchronization settings enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" line="80" column="1" bodyfile="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" bodystart="80" bodyend="89"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1gad454686cba9d58e8e6dc020f42df7302" prot="public" static="no" strong="no">
        <type></type>
        <name>mpu6050_digital_low_pass_filters_e</name>
        <enumvalue id="group__drivers_1ggad454686cba9d58e8e6dc020f42df7302aec6f0920d07720a1d373ce80aefb9abd" prot="public">
          <name>MPU6050_DIGITAL_LP_FILTER_ACCEL_260KHZ_GYRO_256KHZ</name>
          <initializer>= (0b000)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>mpu6050 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggad454686cba9d58e8e6dc020f42df7302afc1c9dba3f0426b1efd003c695f64a1e" prot="public">
          <name>MPU6050_DIGITAL_LP_FILTER_ACCEL_184KHZ_GYRO_188KHZ</name>
          <initializer>= (0b001)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>mpu6050 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggad454686cba9d58e8e6dc020f42df7302a471e632a52c101fe14f7367e8f6bfed0" prot="public">
          <name>MPU6050_DIGITAL_LP_FILTER_ACCEL_94KHZ_GYRO_98KHZ</name>
          <initializer>= (0b010)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>mpu6050 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggad454686cba9d58e8e6dc020f42df7302a68bb659b0fcf16a404a64d40388447c0" prot="public">
          <name>MPU6050_DIGITAL_LP_FILTER_ACCEL_44KHZ_GYRO_42KHZ</name>
          <initializer>= (0b011)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>mpu6050 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggad454686cba9d58e8e6dc020f42df7302abd612def5300110e690fbea3662aa4cd" prot="public">
          <name>MPU6050_DIGITAL_LP_FILTER_ACCEL_21KHZ_GYRO_20KHZ</name>
          <initializer>= (0b100)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>mpu6050 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggad454686cba9d58e8e6dc020f42df7302af08ea68850981a7d9748796bf29f4e72" prot="public">
          <name>MPU6050_DIGITAL_LP_FILTER_ACCEL_10KHZ_GYRO_10KHZ</name>
          <initializer>= (0b101)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>mpu6050 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggad454686cba9d58e8e6dc020f42df7302a03bb9f1595caf7da01402b0f53a371e8" prot="public">
          <name>MPU6050_DIGITAL_LP_FILTER_ACCEL_5KHZ_GYRO_5KHZ</name>
          <initializer>= (0b110)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>mpu6050 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggad454686cba9d58e8e6dc020f42df7302a6bf671fd1399ed0b180d3719bd5c0007" prot="public">
          <name>MPU6050_DIGITAL_LP_FILTER_RESERVED</name>
          <initializer>= (0b111)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>mpu6050 reserved but disables low-pass filter </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>MPU6050 digital low-pass filters enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" line="94" column="1" bodyfile="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" bodystart="94" bodyend="103"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1gadc5bc45ff9daba6efbdfdd49ae8c98e1" prot="public" static="no" strong="no">
        <type></type>
        <name>mpu6050_gyro_full_scale_ranges_e</name>
        <enumvalue id="group__drivers_1ggadc5bc45ff9daba6efbdfdd49ae8c98e1abfe624918157686260af0c890ccbcea3" prot="public">
          <name>MPU6050_GYRO_FS_RANGE_250DPS</name>
          <initializer>= (0b00)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>mpu6050 gyroscope full-scale range ± 250 °/s </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggadc5bc45ff9daba6efbdfdd49ae8c98e1a3eed49608367524b44192bdb585e3b6c" prot="public">
          <name>MPU6050_GYRO_FS_RANGE_500DPS</name>
          <initializer>= (0b01)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>mpu6050 gyroscope full-scale range ± 500 °/s </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggadc5bc45ff9daba6efbdfdd49ae8c98e1acf8ad4fb1ce2d8212167144335fc9b14" prot="public">
          <name>MPU6050_GYRO_FS_RANGE_1000DPS</name>
          <initializer>= (0b10)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>mpu6050 gyroscope full-scale range ± 1000 °/s </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggadc5bc45ff9daba6efbdfdd49ae8c98e1aee566e311f78f747f8638a9f4323d522" prot="public">
          <name>MPU6050_GYRO_FS_RANGE_2000DPS</name>
          <initializer>= (0b11)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>mpu6050 gyroscope full-scale range ± 2000 °/s </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>MPU6050 gyroscope full-scale ranges enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" line="108" column="1" bodyfile="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" bodystart="108" bodyend="113"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1gafdfc70c10ee16636fbeb7a5ca3f0b326" prot="public" static="no" strong="no">
        <type></type>
        <name>mpu6050_accel_full_scale_ranges_e</name>
        <enumvalue id="group__drivers_1ggafdfc70c10ee16636fbeb7a5ca3f0b326a4a6d876988cc2c4c68b5cb58eb397fbf" prot="public">
          <name>MPU6050_ACCEL_FS_RANGE_2G</name>
          <initializer>= (0b00)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>mpu6050 accelerometer full-scale range ± 2g </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggafdfc70c10ee16636fbeb7a5ca3f0b326a8327b2d64c66cde486cc22f2817e82eb" prot="public">
          <name>MPU6050_ACCEL_FS_RANGE_4G</name>
          <initializer>= (0b01)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>mpu6050 accelerometer full-scale range ± 4g </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggafdfc70c10ee16636fbeb7a5ca3f0b326a1fe06dc822f51c600a9624ed21c59565" prot="public">
          <name>MPU6050_ACCEL_FS_RANGE_8G</name>
          <initializer>= (0b10)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>mpu6050 accelerometer full-scale range ± 8g </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggafdfc70c10ee16636fbeb7a5ca3f0b326a822d6222ad0321cc7e42a99f46d6de85" prot="public">
          <name>MPU6050_ACCEL_FS_RANGE_16G</name>
          <initializer>= (0b11)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>mpu6050 accelerometer full-scale range ± 16g </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>MPU6050 accelerometer full-scale ranges enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" line="118" column="1" bodyfile="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" bodystart="118" bodyend="123"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1gaf48aed66889785fbd5707f8b9581cec2" prot="public" static="no" strong="no">
        <type></type>
        <name>mpu6050_gyro_clock_sources_e</name>
        <enumvalue id="group__drivers_1ggaf48aed66889785fbd5707f8b9581cec2abdd270294c5b3a82767f5139363dd719" prot="public">
          <name>MPU6050_GYRO_CS_INT_8MHZ</name>
          <initializer>= (0b000)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>mpu6050 internal 8MHz oscillator </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggaf48aed66889785fbd5707f8b9581cec2ae9c01646b282b1776c48d6db37bcce15" prot="public">
          <name>MPU6050_GYRO_CS_PLL_X_AXIS_REF</name>
          <initializer>= (0b001)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>mpu6050 PLL with x-axis gyroscope reference </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggaf48aed66889785fbd5707f8b9581cec2a06f09b7777780d841094f8e9f225f9c6" prot="public">
          <name>MPU6050_GYRO_CS_PLL_Y_AXIS_REF</name>
          <initializer>= (0b010)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>mpu6050 PLL with y-axis gyroscope reference </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggaf48aed66889785fbd5707f8b9581cec2a4b9a44a203e0ad13535ade943585ed40" prot="public">
          <name>MPU6050_GYRO_CS_PLL_Z_AXIS_REF</name>
          <initializer>= (0b011)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>mpu6050 PLL with z-axis gyroscope reference </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggaf48aed66889785fbd5707f8b9581cec2a3dcada5b7a8a6e4f5bacc59a872db0dd" prot="public">
          <name>MPU6050_GYRO_CS_PLL_EXT_32_768KHZ_REF</name>
          <initializer>= (0b100)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>mpu6050 PLL with external 32.768kHz reference </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggaf48aed66889785fbd5707f8b9581cec2a44b50fa9edeb5415ec1e1a88b5238f00" prot="public">
          <name>MPU6050_GYRO_CS_PLL_EXT_19_2MHZ_REF</name>
          <initializer>= (0b101)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>mpu6050 PLL with external 19.2MHz reference </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggaf48aed66889785fbd5707f8b9581cec2a68d81ee583845fc36f969bcee1457516" prot="public">
          <name>MPU6050_GYRO_CS_RESERVED</name>
          <initializer>= (0b110)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>mpu6050 reserved </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggaf48aed66889785fbd5707f8b9581cec2ac891fd14a64d933fdb7b1e04f0ce8bbb" prot="public">
          <name>MPU6050_GYRO_CS_CLOCK_STOP_IN_RESET</name>
          <initializer>= (0b111)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>mpu6050 stops the clock an keeps the timing generator in reset </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>MPU6050 gyroscope clock sources enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" line="128" column="1" bodyfile="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" bodystart="128" bodyend="137"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1ga624aac5a1a12902bf2a57fab72518e2a" prot="public" static="no" strong="no">
        <type></type>
        <name>mpu6050_low_power_wake_controls_e</name>
        <enumvalue id="group__drivers_1gga624aac5a1a12902bf2a57fab72518e2aa8b2ee2c1331adde79f85c532b7babab3" prot="public">
          <name>MPU6050_LP_WAKE_CONTROL_1_25HZ</name>
          <initializer>= (0b00)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>mpu6050 1.25Hz wake-up frequency </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga624aac5a1a12902bf2a57fab72518e2aa4e2898fc37def98eaa44e7db57b805bc" prot="public">
          <name>MPU6050_LP_WAKE_CONTROL_5HZ</name>
          <initializer>= (0b01)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>mpu6050 5Hz wake-up frequency </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga624aac5a1a12902bf2a57fab72518e2aa96022e17e86e377695bfafd2d9985f3f" prot="public">
          <name>MPU6050_LP_WAKE_CONTROL_20HZ</name>
          <initializer>= (0b10)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>mpu6050 20Hz wake-up frequency </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga624aac5a1a12902bf2a57fab72518e2aa993c25b63b369f2d90fe521632c68f1f" prot="public">
          <name>MPU6050_LP_WAKE_CONTROL_40HZ</name>
          <initializer>= (0b11)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>mpu6050 40Hz wake-up frequency </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>MPU6050 low-power wake controls enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" line="142" column="1" bodyfile="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" bodystart="142" bodyend="147"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1ga9356be1cf7df96f1b9169c94f9b71500" prot="public" static="no" strong="no">
        <type></type>
        <name>mpu6050_irq_pin_active_level_e</name>
        <enumvalue id="group__drivers_1gga9356be1cf7df96f1b9169c94f9b71500a804279cf29975f39e9d13c8171db6cac" prot="public">
          <name>MPU6050_IRQ_PIN_ACTIVE_HIGH</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The mpu6050 sets its INT pin HIGH on interrupt </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga9356be1cf7df96f1b9169c94f9b71500a081a69cffbdb0f2ea247e61d45d787e1" prot="public">
          <name>MPU6050_IRQ_PIN_ACTIVE_LOW</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The mpu6050 sets its INT pin LOW on interrupt </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" line="149" column="1" bodyfile="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" bodystart="149" bodyend="152"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1ga601c0d945ccf60ff1c3c3623f7be0945" prot="public" static="no" strong="no">
        <type></type>
        <name>mpu6050_irq_pin_mode_e</name>
        <enumvalue id="group__drivers_1gga601c0d945ccf60ff1c3c3623f7be0945aba18dbc4a79a25f1ffe60415f61cda6e" prot="public">
          <name>MPU6050_IRQ_PIN_PUSH_PULL</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The mpu6050 configures its INT pin as push-pull </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga601c0d945ccf60ff1c3c3623f7be0945a576b7ed38081bc9bf1ddf313ac0800b7" prot="public">
          <name>MPU6050_IRQ_PIN_OPEN_DRAIN</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The mpu6050 configures its INT pin as open drain </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" line="154" column="1" bodyfile="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" bodystart="154" bodyend="157"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1gae9ecb16db229f807a9b467af6133f84a" prot="public" static="no" strong="no">
        <type></type>
        <name>mpu6050_irq_latch_e</name>
        <enumvalue id="group__drivers_1ggae9ecb16db229f807a9b467af6133f84aa9312d4ea728435febc4b1d92a45a61d9" prot="public">
          <name>MPU6050_IRQ_LATCH_50US</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The mpu6050 produces a 50 microsecond pulse on interrupt </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggae9ecb16db229f807a9b467af6133f84aa679654136e4341892e0ab6cf3d009a96" prot="public">
          <name>MPU6050_IRQ_LATCH_UNTIL_CLEARED</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The mpu6050 latches its INT pin to its active level, until interrupt is cleared </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" line="159" column="1" bodyfile="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" bodystart="159" bodyend="162"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1ga70edf2c072916510c87e4108451fc2e8" prot="public" static="no" strong="no">
        <type></type>
        <name>mpu6050_irq_clear_e</name>
        <enumvalue id="group__drivers_1gga70edf2c072916510c87e4108451fc2e8aeb797e476d41b2ba8ab2439b91aee9db" prot="public">
          <name>MPU6050_IRQ_CLEAR_ON_ANY_READ</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>INT_STATUS register bits are cleared on any register read </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga70edf2c072916510c87e4108451fc2e8ac6ba64eb3f17989a73c4f4936ca317cf" prot="public">
          <name>MPU6050_IRQ_CLEAR_ON_STATUS_READ</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>INT_STATUS register bits are cleared only by reading INT_STATUS value </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" line="164" column="1" bodyfile="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" bodystart="164" bodyend="167"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1ga172a041d0029789cda43731ae5d58411" prot="public" static="no" strong="no">
        <type></type>
        <name>sgp4x_versions_e</name>
        <enumvalue id="group__drivers_1gga172a041d0029789cda43731ae5d58411abd896d46b209f042add938b9449048a9" prot="public">
          <name>SGP4X_VERSION_SGP40</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>not implemented </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga172a041d0029789cda43731ae5d58411a1ff0690c7e75e8063c8ff36232527426" prot="public">
          <name>SGP4X_VERSION_SGP41</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>SGP4X versions enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_sgp4x/include/sgp4x.h" line="71" column="1" bodyfile="components/peripherals/i2c/esp_sgp4x/include/sgp4x.h" bodystart="71" bodyend="74"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1gabdae5ef8438d30d79eb2d817cff393f5" prot="public" static="no" strong="no">
        <type></type>
        <name>sht4x_heater_modes_e</name>
        <enumvalue id="group__drivers_1ggabdae5ef8438d30d79eb2d817cff393f5ae1759d62c6282914ff338f90c4fa78a2" prot="public">
          <name>SHT4X_HEATER_OFF</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>heater is off, default </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggabdae5ef8438d30d79eb2d817cff393f5a9d5c66f9115bee09cc5da01230f83d2e" prot="public">
          <name>SHT4X_HEATER_HIGH_LONG</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>high power (~200mW), 1 second pulse </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggabdae5ef8438d30d79eb2d817cff393f5a0a1a957519bc723aa23c13149209a4cc" prot="public">
          <name>SHT4X_HEATER_HIGH_SHORT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>high power (~200mW), 0.1 second pulse </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggabdae5ef8438d30d79eb2d817cff393f5ae3062ce05c98b888cab3f28520621c94" prot="public">
          <name>SHT4X_HEATER_MEDIUM_LONG</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>medium power (~110mW), 1 second pulse </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggabdae5ef8438d30d79eb2d817cff393f5a05a3b66525eee9b0d9979755f35aeed7" prot="public">
          <name>SHT4X_HEATER_MEDIUM_SHORT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>medium power (~110mW), 0.1 second pulse </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggabdae5ef8438d30d79eb2d817cff393f5ad847dbc812530568ac5e469b5e04e511" prot="public">
          <name>SHT4X_HEATER_LOW_LONG</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>low power (~20mW), 1 second pulse </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggabdae5ef8438d30d79eb2d817cff393f5a8bb53413f25e9310a24d725f90ea7b6f" prot="public">
          <name>SHT4X_HEATER_LOW_SHORT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>low power (~20mW), 0.1 second pulse </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>SHT4X measurement heater modes enumerator definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_sht4x/include/sht4x.h" line="104" column="1" bodyfile="components/peripherals/i2c/esp_sht4x/include/sht4x.h" bodystart="104" bodyend="112"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1ga4302f128b226e236bedc8d9347c6c0db" prot="public" static="no" strong="no">
        <type></type>
        <name>sht4x_repeat_modes_e</name>
        <enumvalue id="group__drivers_1gga4302f128b226e236bedc8d9347c6c0dba759060ab31ac2e2a5b069d8355a6d5cc" prot="public">
          <name>SHT4X_REPEAT_HIGH</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>high repeatability (high resolution) </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga4302f128b226e236bedc8d9347c6c0dba2dc4600e4a85ee7b75099f60d113a059" prot="public">
          <name>SHT4X_REPEAT_MEDIUM</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>medium repeatability (medium resolution) </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga4302f128b226e236bedc8d9347c6c0dba66f245e9754d21246870746721be8c7a" prot="public">
          <name>SHT4X_REPEAT_LOW</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>low repeatability (low resolution) </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>SHT4X measurement repeatability modes enumerator definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_sht4x/include/sht4x.h" line="117" column="1" bodyfile="components/peripherals/i2c/esp_sht4x/include/sht4x.h" bodystart="117" bodyend="121"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1gabdd2dcaa53dee72cf9aa359046c84532" prot="public" static="no" strong="no">
        <type></type>
        <name>ssd1306_scroll_frames_e</name>
        <enumvalue id="group__drivers_1ggabdd2dcaa53dee72cf9aa359046c84532a0fd77720964951adaf4bb97fcb6c24fc" prot="public">
          <name>SSD1306_SCROLL_5_FRAMES</name>
          <initializer>= 0b000</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggabdd2dcaa53dee72cf9aa359046c84532a2a357690f8837c5d9a6aa96c4f936498" prot="public">
          <name>SSD1306_SCROLL_64_FRAMES</name>
          <initializer>= 0b001</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggabdd2dcaa53dee72cf9aa359046c84532a41ab9f8d274f0dda84eb335c319668f4" prot="public">
          <name>SSD1306_SCROLL_128_FRAMES</name>
          <initializer>= 0b010</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggabdd2dcaa53dee72cf9aa359046c84532af0330135a4fa388d35eaa235003038d7" prot="public">
          <name>SSD1306_SCROLL_256_FRAMES</name>
          <initializer>= 0b011</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggabdd2dcaa53dee72cf9aa359046c84532a1daa48fb30d579d1e9a62a5a7ca9a988" prot="public">
          <name>SSD1306_SCROLL_3_FRAMES</name>
          <initializer>= 0b100</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggabdd2dcaa53dee72cf9aa359046c84532ac3d036b95c297d626f07b7a9f766b33b" prot="public">
          <name>SSD1306_SCROLL_4_FRAMES</name>
          <initializer>= 0b101</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggabdd2dcaa53dee72cf9aa359046c84532addd52b8b41a62c96d2af56687876ba23" prot="public">
          <name>SSD1306_SCROLL_25_FRAMES</name>
          <initializer>= 0b110</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggabdd2dcaa53dee72cf9aa359046c84532abff8fb69633377b0ae1cc50ba4c91571" prot="public">
          <name>SSD1306_SCROLL_2_FRAMES</name>
          <initializer>= 0b111</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>SSD1306 scroll step in terms of frame frequency enumerator definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" line="121" column="1" bodyfile="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" bodystart="121" bodyend="130"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1gad20fb783c2b062540932c223746bdf04" prot="public" static="no" strong="no">
        <type></type>
        <name>ssd1306_scroll_types_e</name>
        <enumvalue id="group__drivers_1ggad20fb783c2b062540932c223746bdf04a9bc753e516b745f6c064dac0a3820adb" prot="public">
          <name>SSD1306_SCROLL_RIGHT</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggad20fb783c2b062540932c223746bdf04ab37c75d3d70581d3b674f93f45b224b8" prot="public">
          <name>SSD1306_SCROLL_LEFT</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggad20fb783c2b062540932c223746bdf04a931a55c9a7174be9b385ad28800121fb" prot="public">
          <name>SSD1306_SCROLL_DOWN</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggad20fb783c2b062540932c223746bdf04afeb81599c839d6d6cbfd56a89940229f" prot="public">
          <name>SSD1306_SCROLL_UP</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggad20fb783c2b062540932c223746bdf04afab5f74a9b76c3398ed76aa6989aa375" prot="public">
          <name>SSD1306_SCROLL_STOP</name>
          <initializer>= 5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>SSD1306 scroll types enumerator definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" line="136" column="1" bodyfile="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" bodystart="136" bodyend="142"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1ga85941c2a1b9163f4a70e01778f7026e5" prot="public" static="no" strong="no">
        <type></type>
        <name>ssd1306_panel_sizes_e</name>
        <enumvalue id="group__drivers_1gga85941c2a1b9163f4a70e01778f7026e5aa55bf7971e79aa2e7b5779eb65762c4e" prot="public">
          <name>SSD1306_PANEL_128x32</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>128x32 ssd1306 display </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga85941c2a1b9163f4a70e01778f7026e5a302ac4c8da144d757ebd2c588b4ff6ea" prot="public">
          <name>SSD1306_PANEL_128x64</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>128x64 ssd1306 display </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga85941c2a1b9163f4a70e01778f7026e5a0e344987b6336995c655efa639ad71e4" prot="public">
          <name>SSD1306_PANEL_128x128</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>128x128 ssd1327 display </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>SSD1306 panel sizes enumerator definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" line="148" column="1" bodyfile="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" bodystart="148" bodyend="152"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1gaf6cb02afbfe93b9fac415a1f80f250f4" prot="public" static="no" strong="no">
        <type></type>
        <name>tbi2cxxx_types_e</name>
        <enumvalue id="group__drivers_1ggaf6cb02afbfe93b9fac415a1f80f250f4a99708bd3f0b5d2606ff0c353aad49224" prot="public">
          <name>TBI2CH04</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>tb(p) series non-contact infrared temperature sensor with 3.814° FOV and heatsink(O) </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggaf6cb02afbfe93b9fac415a1f80f250f4a079ff709adf9dd4243d580b924c95611" prot="public">
          <name>TBI2CH08</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>tb(p) series non-contact infrared temperature sensor with 7.16° FOV and heatsink(O) </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggaf6cb02afbfe93b9fac415a1f80f250f4a29147d5e4b8570644ebbdcab9604538e" prot="public">
          <name>TBI2CH70</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>tb(p) series non-contact infrared temperature sensor with 70° FOV and heatsink(O) </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggaf6cb02afbfe93b9fac415a1f80f250f4a605bda69a4cd4bd0503448a84f2ef728" prot="public">
          <name>TBI2CS70</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>tb(p) series non-contact infrared temperature sensor with 70° FOV and heatsink(X) </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>TBI2CXXX types enumerators. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_tbi2cxxx/include/tbi2cxxx.h" line="75" column="1" bodyfile="components/peripherals/i2c/esp_tbi2cxxx/include/tbi2cxxx.h" bodystart="75" bodyend="80"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1ga43330b906b500291d79752f60652555d" prot="public" static="no" strong="no">
        <type></type>
        <name>tlv493d_power_modes_e</name>
        <enumvalue id="group__drivers_1gga43330b906b500291d79752f60652555da096d4f84a3c98ffc81ecce9b391e9cb3" prot="public">
          <name>TLV493D_POWER_DOWN_MODE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>0, 0, 0, 1000 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga43330b906b500291d79752f60652555da7c4dc9deabc6fd57f2361702ce138dc1" prot="public">
          <name>TLV493D_FAST_MODE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>1, 0, 0, 0 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga43330b906b500291d79752f60652555da947876ba048b07fdd2d6fb2ffc1fec72" prot="public">
          <name>TLV493D_LOW_POWER_MODE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>0, 1, 1, 10 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga43330b906b500291d79752f60652555da81daf123b750564b4a35b46b72ba2535" prot="public">
          <name>TLV493D_ULTRA_LOW_POWER_MODE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>0, 1, 0, 100 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga43330b906b500291d79752f60652555da709b17b9642a9101413e26db720bf6ff" prot="public">
          <name>TLV493D_MASTER_CONTROLLED_MODE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>1, 1, 1, 10 </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>TLV493D power modes enumerator. </para>
        </briefdescription>
        <detaileddescription>
<para>Fast, Low Power, Low Power Period, Measurement Time </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_tlv493d/include/tlv493d.h" line="75" column="1" bodyfile="components/peripherals/i2c/esp_tlv493d/include/tlv493d.h" bodystart="75" bodyend="81"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1ga8a1c2496b7b3fa516317908155db1508" prot="public" static="no" strong="no">
        <type></type>
        <name>tlv493d_channel_conversions_e</name>
        <enumvalue id="group__drivers_1gga8a1c2496b7b3fa516317908155db1508af446743d9c89b99bb95bdaabf5194916" prot="public">
          <name>TLV493D_CHANNEL_CONV_COMPLETED</name>
          <initializer>= (0b00)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga8a1c2496b7b3fa516317908155db1508a012a375baafc7e2743b122fff316d8e7" prot="public">
          <name>TLV493D_CHANNEL_Y_CONV_ONGOING</name>
          <initializer>= (0b01)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga8a1c2496b7b3fa516317908155db1508aae464eaf155584e61361e90825a5ba4c" prot="public">
          <name>TLV493D_CHANNEL_Z_CONV_ONGOING</name>
          <initializer>= (0b10)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga8a1c2496b7b3fa516317908155db1508aef9640548ffe3c2dd6366536a66c2a8d" prot="public">
          <name>TLV493D_CHANNEL_TEMP_CONV_ONGOING</name>
          <initializer>= (0b11)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>TLV493D channel conversations enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_tlv493d/include/tlv493d.h" line="86" column="1" bodyfile="components/peripherals/i2c/esp_tlv493d/include/tlv493d.h" bodystart="86" bodyend="91"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1ga81ff587a2eccd15913024e248e774309" prot="public" static="no" strong="no">
        <type></type>
        <name>tlv493d_i2c_addresses_e</name>
        <enumvalue id="group__drivers_1gga81ff587a2eccd15913024e248e774309ade6901091068cc2fc3f9bb46fd088001" prot="public">
          <name>TLV493D_I2C_ADDRESS_00</name>
          <initializer>= (0b00)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga81ff587a2eccd15913024e248e774309ade5e0e3340f1e7b2570430e2316485a2" prot="public">
          <name>TLV493D_I2C_ADDRESS_01</name>
          <initializer>= (0b01)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga81ff587a2eccd15913024e248e774309a42577dad5a09c789431d60f242f3110c" prot="public">
          <name>TLV493D_I2C_ADDRESS_10</name>
          <initializer>= (0b10)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga81ff587a2eccd15913024e248e774309a4b9b9e6f231c756cb6b7dda236ccf251" prot="public">
          <name>TLV493D_I2C_ADDRESS_11</name>
          <initializer>= (0b11)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>TLV493D addresses for slaves enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_tlv493d/include/tlv493d.h" line="96" column="1" bodyfile="components/peripherals/i2c/esp_tlv493d/include/tlv493d.h" bodystart="96" bodyend="101"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1ga86b1342fde57c461ca1223323b8a3a49" prot="public" static="no" strong="no">
        <type></type>
        <name>tlv493d_low_power_periods_e</name>
        <enumvalue id="group__drivers_1gga86b1342fde57c461ca1223323b8a3a49a7b74c51c74d14df8e9c5db8fc5952a0a" prot="public">
          <name>TLV493D_LOW_POWER_PERIOD_100MS</name>
          <initializer>= (0b0)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga86b1342fde57c461ca1223323b8a3a49aa6ce304274fa0d4ee779a4d36edbbbe0" prot="public">
          <name>TLV493D_LOW_POWER_PERIOD_12MS</name>
          <initializer>= (0b1)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>TLV493D low power periods enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_tlv493d/include/tlv493d.h" line="106" column="1" bodyfile="components/peripherals/i2c/esp_tlv493d/include/tlv493d.h" bodystart="106" bodyend="109"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1gaafe00e5378c3d305d67a8a885f7d0088" prot="public" static="no" strong="no">
        <type></type>
        <name>veml6040_channels_t</name>
        <enumvalue id="group__drivers_1ggaafe00e5378c3d305d67a8a885f7d0088add1f950e18487ef58a066a2baee75e7b" prot="public">
          <name>VEML6040_CHANNEL_RED</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggaafe00e5378c3d305d67a8a885f7d0088a704f19fb4e81b0a67febbedd081b4ca8" prot="public">
          <name>VEML6040_CHANNEL_GREEN</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggaafe00e5378c3d305d67a8a885f7d0088a2b756d5ec1d619597c429604bee983b8" prot="public">
          <name>VEML6040_CHANNEL_BLUE</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggaafe00e5378c3d305d67a8a885f7d0088ac458f90d132e01062b9720cacd47f9f0" prot="public">
          <name>VEML6040_CHANNEL_WHITE</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>VEML6040 channels enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_veml6040/include/veml6040.h" line="81" column="1" bodyfile="components/peripherals/i2c/esp_veml6040/include/veml6040.h" bodystart="81" bodyend="86"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1gabf4fab025b920a1b4a67341f19269084" prot="public" static="no" strong="no">
        <type></type>
        <name>veml6040_integration_times_e</name>
        <enumvalue id="group__drivers_1ggabf4fab025b920a1b4a67341f19269084a30979d64e8f0c5f9e8c2c6950e21664b" prot="public">
          <name>VEML6040_INTEGRATION_TIME_40MS</name>
          <initializer>= (0b000)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggabf4fab025b920a1b4a67341f19269084a1ad3d5e371edc480a1669ab9bef22145" prot="public">
          <name>VEML6040_INTEGRATION_TIME_80MS</name>
          <initializer>= (0b001)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggabf4fab025b920a1b4a67341f19269084ad2f9c7b8e127defbf2e608c23a4bb4de" prot="public">
          <name>VEML6040_INTEGRATION_TIME_160MS</name>
          <initializer>= (0b010)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggabf4fab025b920a1b4a67341f19269084a6e013adfb6c01df93eb1383bb893a5d0" prot="public">
          <name>VEML6040_INTEGRATION_TIME_320MS</name>
          <initializer>= (0b011)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggabf4fab025b920a1b4a67341f19269084a1f5c173f6a528e877c7b063be13ec9b0" prot="public">
          <name>VEML6040_INTEGRATION_TIME_640MS</name>
          <initializer>= (0b100)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggabf4fab025b920a1b4a67341f19269084abe171b41303bb074068aa21fe0696d82" prot="public">
          <name>VEML6040_INTEGRATION_TIME_1280MS</name>
          <initializer>= (0b101)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>VEML6040 integration times enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_veml6040/include/veml6040.h" line="91" column="1" bodyfile="components/peripherals/i2c/esp_veml6040/include/veml6040.h" bodystart="91" bodyend="98"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1ga58f992449473ea7be7328a63b3125334" prot="public" static="no" strong="no">
        <type></type>
        <name>veml6040_triggers_e</name>
        <enumvalue id="group__drivers_1gga58f992449473ea7be7328a63b3125334ae166ad6c78f645e296123d267cae17b5" prot="public">
          <name>VEML6040_TRIGGER_NONE</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>veml6040 no trigger </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga58f992449473ea7be7328a63b3125334a59357a805c94a0903b10ad954bb245ca" prot="public">
          <name>VEML6040_TRIGGER_ONE_TIME</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>veml6040 trigger one time detect cycle </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>VEML6040 triggers enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_veml6040/include/veml6040.h" line="103" column="1" bodyfile="components/peripherals/i2c/esp_veml6040/include/veml6040.h" bodystart="103" bodyend="106"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1ga0e4af5e35aa466da691135e807831e4b" prot="public" static="no" strong="no">
        <type></type>
        <name>veml6040_modes_e</name>
        <enumvalue id="group__drivers_1gga0e4af5e35aa466da691135e807831e4ba235d5d10df643a361c9cb66a29c2079f" prot="public">
          <name>VEML6040_MODE_AUTO</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>veml6040 auto mode </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga0e4af5e35aa466da691135e807831e4ba2a0a5f8aa86315f11b5c80564def84b0" prot="public">
          <name>VEML6040_MODE_MANUAL</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>veml6040 manual force mode </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>VEML6040 modes enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_veml6040/include/veml6040.h" line="111" column="1" bodyfile="components/peripherals/i2c/esp_veml6040/include/veml6040.h" bodystart="111" bodyend="114"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1gafa58f8a71ae5eef80d07b8fcf7b2cfde" prot="public" static="no" strong="no">
        <type></type>
        <name>veml7700_gains_e</name>
        <enumvalue id="group__drivers_1ggafa58f8a71ae5eef80d07b8fcf7b2cfdeabeab0c3096e16b0da29aebabbfffa5df" prot="public">
          <name>VEML7700_GAIN_1</name>
          <initializer>= (0b00)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>ALS gain x 1 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggafa58f8a71ae5eef80d07b8fcf7b2cfdeaf93f1df542e02ed35638dc4bc3ce2cdf" prot="public">
          <name>VEML7700_GAIN_2</name>
          <initializer>= (0b01)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>ALS gain x 2 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggafa58f8a71ae5eef80d07b8fcf7b2cfdea73a976ef82d71ed587cede5f7cb543a0" prot="public">
          <name>VEML7700_GAIN_DIV_8</name>
          <initializer>= (0b10)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>ALS gain x (1/8) </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggafa58f8a71ae5eef80d07b8fcf7b2cfdea6eea1a8246afc202c4c70d9f98cc9e34" prot="public">
          <name>VEML7700_GAIN_DIV_4</name>
          <initializer>= (0b11)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>ALS gain x (1/4) </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>VEML7700 gains enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_veml7700/include/veml7700.h" line="84" column="1" bodyfile="components/peripherals/i2c/esp_veml7700/include/veml7700.h" bodystart="84" bodyend="89"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1gadcd6105390bfa71aefb8729e525e499d" prot="public" static="no" strong="no">
        <type></type>
        <name>veml7700_integration_times_e</name>
        <enumvalue id="group__drivers_1ggadcd6105390bfa71aefb8729e525e499dad865ec40f6a4dd289087fd994616e833" prot="public">
          <name>VEML7700_INTEGRATION_TIME_25MS</name>
          <initializer>= (0b1100)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggadcd6105390bfa71aefb8729e525e499da4ebbf4b9a6a95e08e731ca9260b6afcd" prot="public">
          <name>VEML7700_INTEGRATION_TIME_50MS</name>
          <initializer>= (0b1000)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggadcd6105390bfa71aefb8729e525e499dac53c19cbf3253eb2cb78c3124241d679" prot="public">
          <name>VEML7700_INTEGRATION_TIME_100MS</name>
          <initializer>= (0b0000)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggadcd6105390bfa71aefb8729e525e499daa3791b82dc534e8ad3bcff4adc90008e" prot="public">
          <name>VEML7700_INTEGRATION_TIME_200MS</name>
          <initializer>= (0b0001)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggadcd6105390bfa71aefb8729e525e499da43a9c011902fe36a0bfaf1dac7cbbf44" prot="public">
          <name>VEML7700_INTEGRATION_TIME_400MS</name>
          <initializer>= (0b0010)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggadcd6105390bfa71aefb8729e525e499dac99fb983186b4c6c073c80ff5919d321" prot="public">
          <name>VEML7700_INTEGRATION_TIME_800MS</name>
          <initializer>= (0b0011)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>VEML7700 integration times enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_veml7700/include/veml7700.h" line="94" column="1" bodyfile="components/peripherals/i2c/esp_veml7700/include/veml7700.h" bodystart="94" bodyend="101"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1ga9601a985c2253bf3aa279a4d28c2bdda" prot="public" static="no" strong="no">
        <type></type>
        <name>veml7700_persistence_protections_e</name>
        <enumvalue id="group__drivers_1gga9601a985c2253bf3aa279a4d28c2bddaafd5b23a40ad4026096f07139f2582e22" prot="public">
          <name>VEML7700_PERSISTENCE_PROTECTION_1</name>
          <initializer>= (0b00)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga9601a985c2253bf3aa279a4d28c2bddaa88d8c1cb1ad6dddb0c2b209fbc1c472f" prot="public">
          <name>VEML7700_PERSISTENCE_PROTECTION_2</name>
          <initializer>= (0b01)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga9601a985c2253bf3aa279a4d28c2bddaa4c78f48e2786b72c1c4538c0a5111d31" prot="public">
          <name>VEML7700_PERSISTENCE_PROTECTION_4</name>
          <initializer>= (0b10)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga9601a985c2253bf3aa279a4d28c2bddaa5d26d040abf6e25bdd9c49693ebbf18a" prot="public">
          <name>VEML7700_PERSISTENCE_PROTECTION_8</name>
          <initializer>= (0b11)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>VEML7700 persistence protections enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_veml7700/include/veml7700.h" line="106" column="1" bodyfile="components/peripherals/i2c/esp_veml7700/include/veml7700.h" bodystart="106" bodyend="111"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1gacaed454ccb717d5cbabc902938c4abd1" prot="public" static="no" strong="no">
        <type></type>
        <name>veml7700_power_saving_modes_e</name>
        <enumvalue id="group__drivers_1ggacaed454ccb717d5cbabc902938c4abd1aa0657d4b9b160fb557e83fafc63cb3bd" prot="public">
          <name>VEML7700_POWER_SAVING_MODE_1</name>
          <initializer>= (0b00)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggacaed454ccb717d5cbabc902938c4abd1a614a04e96996c5add2e5250a8e2759be" prot="public">
          <name>VEML7700_POWER_SAVING_MODE_2</name>
          <initializer>= (0b01)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggacaed454ccb717d5cbabc902938c4abd1a75fe8c2861d43fcb146f703ac3c048d6" prot="public">
          <name>VEML7700_POWER_SAVING_MODE_3</name>
          <initializer>= (0b10)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggacaed454ccb717d5cbabc902938c4abd1a7f69448be95761bb3f2d2cd98074fb95" prot="public">
          <name>VEML7700_POWER_SAVING_MODE_4</name>
          <initializer>= (0b11)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>VEML7700 power saving modes enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_veml7700/include/veml7700.h" line="116" column="1" bodyfile="components/peripherals/i2c/esp_veml7700/include/veml7700.h" bodystart="116" bodyend="121"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1gacf07a98756a425197bfab93e4d170eac" prot="public" static="no" strong="no">
        <type></type>
        <name>ds18b20_resolutions_e</name>
        <enumvalue id="group__drivers_1ggacf07a98756a425197bfab93e4d170eaca5333ef2c5e5ec44213bf3f40bd9aa50b" prot="public">
          <name>DS18B20_RESOLUTION_9BIT</name>
          <initializer>= 0b00</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>9bit, increment of 0.5°C, needs ~93.75ms convert time (Tconv/8) </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggacf07a98756a425197bfab93e4d170eaca6274d477f2d9d92a62050c3375c361a0" prot="public">
          <name>DS18B20_RESOLUTION_10BIT</name>
          <initializer>= 0b01</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>10bit, increment of 0.25°C, needs ~187.5ms convert time (Tconv/4) </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggacf07a98756a425197bfab93e4d170eaca0396bfa58a01fdd9922771715e1467f6" prot="public">
          <name>DS18B20_RESOLUTION_11BIT</name>
          <initializer>= 0b10</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>11bit, increment of 0.125°C, needs ~375ms convert time (Tconv/2) </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggacf07a98756a425197bfab93e4d170eacaf2f20b32fccc2658193d818188ae54ca" prot="public">
          <name>DS18B20_RESOLUTION_12BIT</name>
          <initializer>= 0b11</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>12bit, increment of 0.0625°C, needs ~750ms convert time (Tconv) </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>DS18B20 supported resolutions enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/owb/esp_ds18b20/include/ds18b20.h" line="74" column="1" bodyfile="components/peripherals/owb/esp_ds18b20/include/ds18b20.h" bodystart="74" bodyend="79"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1ga92074ef906c67e5618499f4bb24b8910" prot="public" static="no" strong="no">
        <type></type>
        <name>spi_max31865_fault_detection_cycles_t</name>
        <enumvalue id="group__drivers_1gga92074ef906c67e5618499f4bb24b8910a7e42a55b51f3ea878fb4055b998a8838" prot="public">
          <name>SPI_MAX31865_FAULT_DETECT_FINISHED</name>
          <initializer>= (0b00)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga92074ef906c67e5618499f4bb24b8910a1366e39ad3346194530251bdecf2812c" prot="public">
          <name>SPI_MAX31865_FAULT_DETECT_STILL_RUNNING</name>
          <initializer>= (0b01)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga92074ef906c67e5618499f4bb24b8910a8250eb93065bafb62cb7f101cbfed50b" prot="public">
          <name>SPI_MAX31865_FAULT_DETECT_CYCLE1_RUNNING</name>
          <initializer>= (0b10)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga92074ef906c67e5618499f4bb24b8910ad398507b7cc184d4c18587c74aab814d" prot="public">
          <name>SPI_MAX31865_FAULT_DETECT_CYCLE2_RUNNING</name>
          <initializer>= (0b11)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/spi/esp_max31865/max31865.h" line="69" column="1" bodyfile="components/peripherals/spi/esp_max31865/max31865.h" bodystart="69" bodyend="74"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1ga98e0a496fe65e0e43f418cea4b22c7e0" prot="public" static="no" strong="no">
        <type></type>
        <name>spi_max31865_modes_t</name>
        <enumvalue id="group__drivers_1gga98e0a496fe65e0e43f418cea4b22c7e0ac8e94fa02248e471db049658c4c8f69e" prot="public">
          <name>SPI_MAX31865_MODE_SINGLE</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Single consersion mode, default </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga98e0a496fe65e0e43f418cea4b22c7e0aa783ce807ffc8518f05d587264fabb75" prot="public">
          <name>SPI_MAX31865_MODE_AUTO</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Automatic conversion mode at 50/60Hz rate </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/spi/esp_max31865/max31865.h" line="76" column="1" bodyfile="components/peripherals/spi/esp_max31865/max31865.h" bodystart="76" bodyend="79"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1gad5b862850f162f3a3fcddc3c51ed528a" prot="public" static="no" strong="no">
        <type></type>
        <name>spi_max31865_filters_t</name>
        <enumvalue id="group__drivers_1ggad5b862850f162f3a3fcddc3c51ed528aabd3a37c19908b948019ae0af583161d8" prot="public">
          <name>SPI_MAX31865_FILTER_60HZ</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>60Hz </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggad5b862850f162f3a3fcddc3c51ed528aa5fc0b423bd3ced40604e0f6038d94ed0" prot="public">
          <name>SPI_MAX31865_FILTER_50HZ</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>50Hz </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/spi/esp_max31865/max31865.h" line="81" column="1" bodyfile="components/peripherals/spi/esp_max31865/max31865.h" bodystart="81" bodyend="84"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1ga1d19580fd4f7ad1cc6a72e14b3f55f13" prot="public" static="no" strong="no">
        <type></type>
        <name>spi_max31865_connection_types_t</name>
        <enumvalue id="group__drivers_1gga1d19580fd4f7ad1cc6a72e14b3f55f13af5014dcc06577502d7d2974cf2d78a97" prot="public">
          <name>SPI_MAX31865_2WIRE_OR_4WIRE</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>2-wires or 4-wires </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga1d19580fd4f7ad1cc6a72e14b3f55f13ad9075f38a3017d196785c921063c5e76" prot="public">
          <name>SPI_MAX31865_3WIRE</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>3-wires </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/spi/esp_max31865/max31865.h" line="86" column="1" bodyfile="components/peripherals/spi/esp_max31865/max31865.h" bodystart="86" bodyend="89"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1ga0ec7f26460e9c80e771d01b2f78c8ce7" prot="public" static="no" strong="no">
        <type></type>
        <name>spi_max31865_standards_t</name>
        <enumvalue id="group__drivers_1gga0ec7f26460e9c80e771d01b2f78c8ce7a055cc2aa48486da615523f957dde1105" prot="public">
          <name>SPI_MAX31865_ITS90</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>ITS-90 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga0ec7f26460e9c80e771d01b2f78c8ce7add89532ce2f8598fad8d3f84af2bd1fa" prot="public">
          <name>SPI_MAX31865_DIN43760</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>DIN43760 </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga0ec7f26460e9c80e771d01b2f78c8ce7ada0a12e5bfefb8a955113b90391010d7" prot="public">
          <name>SPI_MAX31865_US_INDUSTRIAL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>US INDUSTRIAL </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/spi/esp_max31865/max31865.h" line="91" column="1" bodyfile="components/peripherals/spi/esp_max31865/max31865.h" bodystart="91" bodyend="95"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1ga7c19f6649ac85eab8edb7dd5a4377816" prot="public" static="no" strong="no">
        <type></type>
        <name>datatable_event_types_tag</name>
        <enumvalue id="group__drivers_1gga7c19f6649ac85eab8edb7dd5a4377816a8869cf7adcc7fdd5f3300a9696d780c8" prot="public">
          <name>DATATABLE_EVENT_INIT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>data-table initialized successfully </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga7c19f6649ac85eab8edb7dd5a4377816a793d57136675d356e1c112cddf99ea5f" prot="public">
          <name>DATATABLE_EVENT_RESET_ROWS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>data-table rows were reset </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga7c19f6649ac85eab8edb7dd5a4377816a541d420238237767fab406a135551676" prot="public">
          <name>DATATABLE_EVENT_RESET_SAMPLES</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>data-table buffer samples were reset </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga7c19f6649ac85eab8edb7dd5a4377816a2559ec83d7dbbec515a6684211dee26b" prot="public">
          <name>DATATABLE_EVENT_FIFO_ROWS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>data-table rows underwent a FIFO operation </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga7c19f6649ac85eab8edb7dd5a4377816aef3aeeb31e701efd2efed36ddc13eae1" prot="public">
          <name>DATATABLE_EVENT_FIFO_SAMPLES</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>data-table buffer samples underwent a FIFO operation </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga7c19f6649ac85eab8edb7dd5a4377816a4890066fa2eae4f743ba90bbe8806bb1" prot="public">
          <name>DATATABLE_EVENT_SAMPLE_PUSHED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>data-table sample was pushed onto the buffer samples stack </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga7c19f6649ac85eab8edb7dd5a4377816a4d53c4bf4ed7e94e5cf5468f88cdae01" prot="public">
          <name>DATATABLE_EVENT_PROCESS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>data-table processed successfully </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga7c19f6649ac85eab8edb7dd5a4377816a68e7042e3fd410efa73e46c91859cf06" prot="public">
          <name>DATATABLE_EVENT_PROCESS_ELAPSED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>data-table processing time-into-interval has elapsed </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Data-table event types enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/storage/esp_datalogger/include/datatable.h" line="79" column="1" bodyfile="components/storage/esp_datalogger/include/datatable.h" bodystart="79" bodyend="88"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1gaf718dc8c4c330cd71f59550b5cb469af" prot="public" static="no" strong="no">
        <type></type>
        <name>datatable_data_storage_types_tag</name>
        <enumvalue id="group__drivers_1ggaf718dc8c4c330cd71f59550b5cb469afa0857f605c93e66b2472dc7565d7c2cc5" prot="public">
          <name>DATATABLE_DATA_STORAGE_MEMORY_RING</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>data-table ring memory performs a first-in first-out (FIFO) with the data-table </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggaf718dc8c4c330cd71f59550b5cb469afae4b664843cd621669a41c5d4a712727a" prot="public">
          <name>DATATABLE_DATA_STORAGE_MEMORY_RESET</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>data-table memory reset performs a data-table reset when data-table is full </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1ggaf718dc8c4c330cd71f59550b5cb469afae4d50177bffb1045a0575bed52e8248f" prot="public">
          <name>DATATABLE_DATA_STORAGE_MEMORY_STOP</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>data-table memory stop pauses data storage when data-table is full </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Data-table data storage-types enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/storage/esp_datalogger/include/datatable.h" line="93" column="1" bodyfile="components/storage/esp_datalogger/include/datatable.h" bodystart="93" bodyend="97"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1ga6e629cedb8ec22b387bc6b930698bb08" prot="public" static="no" strong="no">
        <type></type>
        <name>datatable_column_process_types_tag</name>
        <enumvalue id="group__drivers_1gga6e629cedb8ec22b387bc6b930698bb08a704c6c89f5218bb80a109881e2839574" prot="public">
          <name>DATATABLE_COLUMN_PROCESS_SMP</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>a sample is stored at every processing interval </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga6e629cedb8ec22b387bc6b930698bb08a321e6164c50d0a8605331fdc706149fc" prot="public">
          <name>DATATABLE_COLUMN_PROCESS_AVG</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>stored samples are averaged over the processing interval </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga6e629cedb8ec22b387bc6b930698bb08ad538e886017b3bc0a4f00f17ff704448" prot="public">
          <name>DATATABLE_COLUMN_PROCESS_MIN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>stored samples are analyzed for minimum over the processing interval </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga6e629cedb8ec22b387bc6b930698bb08a24bb34cdfd6189640dce73b519eb2731" prot="public">
          <name>DATATABLE_COLUMN_PROCESS_MAX</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>stored samples are analyzed for maximum over the processing interval </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga6e629cedb8ec22b387bc6b930698bb08a95d3977427bee323bf70182ccaf54de7" prot="public">
          <name>DATATABLE_COLUMN_PROCESS_MIN_TS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>stored samples are analyzed for minimum with timestamp over the processing interval </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga6e629cedb8ec22b387bc6b930698bb08a549957c321cd2044e7bfcc2144f167b1" prot="public">
          <name>DATATABLE_COLUMN_PROCESS_MAX_TS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>stored samples are analyzed for maximum with timestamp over the processing interval </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Data-table column statistical process-types enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/storage/esp_datalogger/include/datatable.h" line="102" column="1" bodyfile="components/storage/esp_datalogger/include/datatable.h" bodystart="102" bodyend="109"/>
      </memberdef>
      <memberdef kind="enum" id="group__drivers_1ga48dcf880194f2d005e1fcaa1f6aeb363" prot="public" static="no" strong="no">
        <type></type>
        <name>datatable_column_data_types_tag</name>
        <enumvalue id="group__drivers_1gga48dcf880194f2d005e1fcaa1f6aeb363a693fb46f0ae61991a4aadb1b789a3301" prot="public">
          <name>DATATABLE_COLUMN_DATA_ID</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>record identifier column data-type, system default, see <computeroutput>datatable_id_data_type_t</computeroutput> for data-type structure. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga48dcf880194f2d005e1fcaa1f6aeb363adb0b516990763d63fa4d0494cbb77746" prot="public">
          <name>DATATABLE_COLUMN_DATA_TS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>record timestamp (date and time) column data type, system default, see <computeroutput>datatable_ts_data_type_t</computeroutput> for data-type structure. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga48dcf880194f2d005e1fcaa1f6aeb363a5467991e33a1658bd4744f52655d0bcd" prot="public">
          <name>DATATABLE_COLUMN_DATA_VECTOR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>vector (u and v components) column data type, user-defined, see <computeroutput>datatable_vector_data_type_t</computeroutput> for data-type structure. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga48dcf880194f2d005e1fcaa1f6aeb363a64962d281c779d5a99d222c5347a7719" prot="public">
          <name>DATATABLE_COLUMN_DATA_BOOL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>boolean column data type, user-defined, see <computeroutput>datatable_bool_data_type_t</computeroutput> for data-type structure. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga48dcf880194f2d005e1fcaa1f6aeb363a402158cdbaef98f852bed0f38fee1768" prot="public">
          <name>DATATABLE_COLUMN_DATA_FLOAT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>float 32-bit column data type, user-defined, see <computeroutput>datatable_float_data_type_t</computeroutput> for data-type structure. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__drivers_1gga48dcf880194f2d005e1fcaa1f6aeb363ab7253b2357a606713ede490a8e883cb0" prot="public">
          <name>DATATABLE_COLUMN_DATA_INT16</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>int16 column data type, user-defined, see <computeroutput>datatable_int16_data_type_t</computeroutput> for data-type structure. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Data-table column data-types enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/storage/esp_datalogger/include/datatable.h" line="114" column="1" bodyfile="components/storage/esp_datalogger/include/datatable.h" bodystart="114" bodyend="122"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__drivers_1ga15f16165cfb4b322efe163ac65f02cdd" prot="public" static="no">
        <type>struct <ref refid="structs12sd__config__s" kindref="compound">s12sd_config_s</ref></type>
        <definition>typedef struct s12sd_config_s s12sd_config_t</definition>
        <argsstring></argsstring>
        <name>s12sd_config_t</name>
        <briefdescription>
<para>S12SD configuration structure definition. </para>
        </briefdescription>
        <detaileddescription>
<para>public enumerator, union, and structure definitions </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/adc/esp_s12sd/include/s12sd.h" line="86" column="16"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga7965668835bb577a7fa0a8f1c572bdff" prot="public" static="no">
        <type>struct s12sd_context_t</type>
        <definition>typedef struct s12sd_context_t s12sd_context_t</definition>
        <argsstring></argsstring>
        <name>s12sd_context_t</name>
        <briefdescription>
<para>S12SD context structure definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/adc/esp_s12sd/include/s12sd.h" line="101" column="30" bodyfile="components/peripherals/adc/esp_s12sd/include/s12sd.h" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga7bd30cb31497500d06f7189146fcca08" prot="public" static="no">
        <type>struct <ref refid="structs12sd__context__t" kindref="compound">s12sd_context_t</ref> *</type>
        <definition>typedef struct s12sd_context_t* s12sd_handle_t</definition>
        <argsstring></argsstring>
        <name>s12sd_handle_t</name>
        <briefdescription>
<para>S12SD handle structure definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/adc/esp_s12sd/include/s12sd.h" line="106" column="31" bodyfile="components/peripherals/adc/esp_s12sd/include/s12sd.h" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1gae6649d0c7e2b9bda0ec664a94c4a31b8" prot="public" static="no">
        <type>enum <ref refid="group__drivers_1gabab94be3831f8f2b9625a28dc64f09cb" kindref="member">ahtxx_sensor_types_e</ref></type>
        <definition>typedef enum ahtxx_sensor_types_e ahtxx_sensor_types_t</definition>
        <argsstring></argsstring>
        <name>ahtxx_sensor_types_t</name>
        <briefdescription>
<para>AHTXX sensor types enumerator definition. </para>
        </briefdescription>
        <detaileddescription>
<para>public enumerator, union, and structure definitions </para>
<para><simplesect kind="note"><para>AHTXX types vary slightly with respect to setup and initialization according to available documentation. The AHT10 and AHT20 are setup through the initialization command. The AHT21, AHT25 and AHT30 are setup by resetting 0x1b, 0x1c, and 0x1e initializing registers. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ahtxx/include/ahtxx.h" line="125" column="22"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga4481478f7508935e24b98cf5027da6dd" prot="public" static="no">
        <type>struct <ref refid="structahtxx__config__s" kindref="compound">ahtxx_config_s</ref></type>
        <definition>typedef struct ahtxx_config_s ahtxx_config_t</definition>
        <argsstring></argsstring>
        <name>ahtxx_config_t</name>
        <briefdescription>
<para>AHTXX configuration structure definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ahtxx/include/ahtxx.h" line="147" column="16"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga39698f791d9caec004bf818b4145d461" prot="public" static="no">
        <type>struct ahtxx_context_t</type>
        <definition>typedef struct ahtxx_context_t ahtxx_context_t</definition>
        <argsstring></argsstring>
        <name>ahtxx_context_t</name>
        <briefdescription>
<para>AHTXX context structure definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ahtxx/include/ahtxx.h" line="160" column="30" bodyfile="components/peripherals/i2c/esp_ahtxx/include/ahtxx.h" bodystart="160" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1gab66af7e90e12339f8760c01abf09c759" prot="public" static="no">
        <type>struct <ref refid="structahtxx__context__t" kindref="compound">ahtxx_context_t</ref> *</type>
        <definition>typedef struct ahtxx_context_t* ahtxx_handle_t</definition>
        <argsstring></argsstring>
        <name>ahtxx_handle_t</name>
        <briefdescription>
<para>AHTXX handle structure definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ahtxx/include/ahtxx.h" line="165" column="31" bodyfile="components/peripherals/i2c/esp_ahtxx/include/ahtxx.h" bodystart="165" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1gacfe2f1f091a67cbc516f4df50ef69e00" prot="public" static="no">
        <type>enum <ref refid="group__drivers_1gaa4cd7940a46bd75fcf1bcf0ddc1254dc" kindref="member">ak8975_operating_modes_e</ref></type>
        <definition>typedef enum ak8975_operating_modes_e ak8975_operating_modes_t</definition>
        <argsstring></argsstring>
        <name>ak8975_operating_modes_t</name>
        <briefdescription>
<para>AK8975 operating modes enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ak8975/include/ak8975.h" line="84" column="26"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1gae81add8ce1a1a058e64e53db692711b0" prot="public" static="no">
        <type>struct <ref refid="structak8975__magnetic__axes__data__s" kindref="compound">ak8975_magnetic_axes_data_s</ref></type>
        <definition>typedef struct ak8975_magnetic_axes_data_s ak8975_magnetic_axes_data_t</definition>
        <argsstring></argsstring>
        <name>ak8975_magnetic_axes_data_t</name>
        <briefdescription>
<para>AK8975 processed compass axes data structure and axes have a range +/-1229 uT. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>AK8975 data overflow of axes (x, y, z) is a sum of the absolute values for each axis and the sum of the axes should be smaller than 2400 uT (|X|+|Y|+|Z| &lt; 2400 uT). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ak8975/include/ak8975.h" line="144" column="29"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1gaf99bb3c94a024a483845a4d71adb1500" prot="public" static="no">
        <type>struct <ref refid="structak8975__axes__data__s" kindref="compound">ak8975_axes_data_s</ref></type>
        <definition>typedef struct ak8975_axes_data_s ak8975_axes_data_t</definition>
        <argsstring></argsstring>
        <name>ak8975_axes_data_t</name>
        <briefdescription>
<para>AK8975 axes data registers (HX, HZ, HZ) structure. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ak8975/include/ak8975.h" line="153" column="20"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga357954982de125a621354044159b20be" prot="public" static="no">
        <type>struct <ref refid="structak8975__config__s" kindref="compound">ak8975_config_s</ref></type>
        <definition>typedef struct ak8975_config_s ak8975_config_t</definition>
        <argsstring></argsstring>
        <name>ak8975_config_t</name>
        <briefdescription>
<para>AK8975 configuration structure. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ak8975/include/ak8975.h" line="161" column="17"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1gaabbf49a0a495d836aeac7741ae14323b" prot="public" static="no">
        <type>struct ak8975_context_t</type>
        <definition>typedef struct ak8975_context_t ak8975_context_t</definition>
        <argsstring></argsstring>
        <name>ak8975_context_t</name>
        <briefdescription>
<para>AK8975 context structure definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ak8975/include/ak8975.h" line="179" column="31" bodyfile="components/peripherals/i2c/esp_ak8975/include/ak8975.h" bodystart="179" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga0210b1c72185499916196ef2f5d77bc7" prot="public" static="no">
        <type>struct <ref refid="structak8975__context__t" kindref="compound">ak8975_context_t</ref> *</type>
        <definition>typedef struct ak8975_context_t* ak8975_handle_t</definition>
        <argsstring></argsstring>
        <name>ak8975_handle_t</name>
        <briefdescription>
<para>AK8975 handle structure definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ak8975/include/ak8975.h" line="183" column="31" bodyfile="components/peripherals/i2c/esp_ak8975/include/ak8975.h" bodystart="183" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1gae6862ac911069aff23cf8b3c4a847c4b" prot="public" static="no">
        <type>void *</type>
        <definition>typedef void* as3935_monitor_handle_t</definition>
        <argsstring></argsstring>
        <name>as3935_monitor_handle_t</name>
        <briefdescription>
<para>AS3935 monitor handle definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="124" column="14" bodyfile="components/peripherals/i2c/esp_as3935/include/as3935.h" bodystart="124" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1gafcdd75c9b18aa4151eed84cbae265196" prot="public" static="no">
        <type>enum <ref refid="group__drivers_1ga63df1d57941dc4eeebbb6abce2893ec4" kindref="member">as3935_analog_frontends_e</ref></type>
        <definition>typedef enum as3935_analog_frontends_e as3935_analog_frontends_t</definition>
        <argsstring></argsstring>
        <name>as3935_analog_frontends_t</name>
        <briefdescription>
<para>AS3935 enumerator and structure declarations. </para>
        </briefdescription>
        <detaileddescription>
<para>AS3935 analog frontends (AFE) REG0x00[5:1] enumerator. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="136" column="27"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1gad9f48dfeb1eb18e645d35d6e452ff258" prot="public" static="no">
        <type>enum <ref refid="group__drivers_1ga76873b27bfda85122afe3056932a41b5" kindref="member">as3935_power_states_e</ref></type>
        <definition>typedef enum as3935_power_states_e as3935_power_states_t</definition>
        <argsstring></argsstring>
        <name>as3935_power_states_t</name>
        <briefdescription>
<para>AS3935 power states REG0x00[0] enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="144" column="23"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga8f2c35c2430ffa2cb6dc8cec41d3c61f" prot="public" static="no">
        <type>enum <ref refid="group__drivers_1ga07e6782fe9746241d6091a5e671ddf06" kindref="member">as3935_clear_statistics_states_e</ref></type>
        <definition>typedef enum as3935_clear_statistics_states_e as3935_clear_statistics_states_t</definition>
        <argsstring></argsstring>
        <name>as3935_clear_statistics_states_t</name>
        <briefdescription>
<para>AS3935 clear statistics states REG0x02[6] enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="152" column="34"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1gaa65d7446b4cd69035489e605630e4ad4" prot="public" static="no">
        <type>enum <ref refid="group__drivers_1ga28767b92e44b11a5884ebf3061d9a753" kindref="member">as3935_disturber_detection_states_e</ref></type>
        <definition>typedef enum as3935_disturber_detection_states_e as3935_disturber_detection_states_t</definition>
        <argsstring></argsstring>
        <name>as3935_disturber_detection_states_t</name>
        <briefdescription>
<para>AS3935 disturber detection states REG0x03[5] enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="160" column="37"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga5f247d07802d9bbb1e360c525c2a6d8e" prot="public" static="no">
        <type>enum <ref refid="group__drivers_1gae8d5e63bd855f08926d2cf8dd575d4fb" kindref="member">as3935_co_irq_pin_states_e</ref></type>
        <definition>typedef enum as3935_co_irq_pin_states_e as3935_co_irq_pin_states_t</definition>
        <argsstring></argsstring>
        <name>as3935_co_irq_pin_states_t</name>
        <briefdescription>
<para>AS3935 CO IRQ pin states REG0x08[5]|[6]|[7] enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="168" column="28"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1gae87eb824861eb634b5833d61b9b7526b" prot="public" static="no">
        <type>enum <ref refid="group__drivers_1ga0175dff15d1cdeaeb6356e51e164e1ef" kindref="member">as3935_watchdog_thresholds_e</ref></type>
        <definition>typedef enum as3935_watchdog_thresholds_e as3935_watchdog_thresholds_t</definition>
        <argsstring></argsstring>
        <name>as3935_watchdog_thresholds_t</name>
        <briefdescription>
<para>AS3935 watchdog thresholds REG0x01[3:0] enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="185" column="30"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga64db4a0d5e3024512fe00e5e5038453f" prot="public" static="no">
        <type>enum <ref refid="group__drivers_1ga29aaeb2c04fa0769eb47710872276ae7" kindref="member">as3935_noise_levels_e</ref></type>
        <definition>typedef enum as3935_noise_levels_e as3935_noise_levels_t</definition>
        <argsstring></argsstring>
        <name>as3935_noise_levels_t</name>
        <briefdescription>
<para>AS3935 noise floor generator and evaluation REG0x01[6:4] enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="199" column="23"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga21f56ccf3843a6c0c746d20dfadcfde5" prot="public" static="no">
        <type>enum <ref refid="group__drivers_1gaf534bc5e125fdfbf1d17f73d9880b2f5" kindref="member">as3935_interrupt_states_e</ref></type>
        <definition>typedef enum as3935_interrupt_states_e as3935_interrupt_states_t</definition>
        <argsstring></argsstring>
        <name>as3935_interrupt_states_t</name>
        <briefdescription>
<para>AS3935 interrupt states REG0x03[3:0] enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="209" column="27"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga2f7cf5db258dc86f6c91a06ebe1cfc47" prot="public" static="no">
        <type>enum <ref refid="group__drivers_1gac774273f7f01a9abefcce06b3dd47545" kindref="member">as3935_minimum_lightnings_e</ref></type>
        <definition>typedef enum as3935_minimum_lightnings_e as3935_minimum_lightnings_t</definition>
        <argsstring></argsstring>
        <name>as3935_minimum_lightnings_t</name>
        <briefdescription>
<para>AS3935 minimum number of lightning detections REG0x02[5:4] enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="219" column="29"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga8c14ebf450e76a255c518b9d12f1d066" prot="public" static="no">
        <type>enum <ref refid="group__drivers_1gac4304bb8b282c117513c857c129366da" kindref="member">as3935_frequency_division_ratios_e</ref></type>
        <definition>typedef enum as3935_frequency_division_ratios_e as3935_frequency_division_ratios_t</definition>
        <argsstring></argsstring>
        <name>as3935_frequency_division_ratios_t</name>
        <briefdescription>
<para>AS3935 frequency division ratio for antenna tunning REG0x03[7:3] LCO_FDIV enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="229" column="36"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga225a265e70e9df5e37f4675415503e55" prot="public" static="no">
        <type>enum <ref refid="group__drivers_1ga5eb1c46f1bc22a554c2f5d0f5915ea33" kindref="member">as3935_lightning_distances_e</ref></type>
        <definition>typedef enum as3935_lightning_distances_e as3935_lightning_distances_t</definition>
        <argsstring></argsstring>
        <name>as3935_lightning_distances_t</name>
        <briefdescription>
<para>AS3935 lightning estimated distances REG0x07[5:0] enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="251" column="30"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga2b41e02b37a9239442282aff4884611f" prot="public" static="no">
        <type>enum <ref refid="group__drivers_1ga31f8d48a516b0216dce18138d4afbf98" kindref="member">as3935_rco_calibration_results_e</ref></type>
        <definition>typedef enum as3935_rco_calibration_results_e as3935_rco_calibration_results_t</definition>
        <argsstring></argsstring>
        <name>as3935_rco_calibration_results_t</name>
        <briefdescription>
<para>AS3935 oscillator calibration status results enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="260" column="34"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1gab16ed1f5754c2f383f278257cdd03733" prot="public" static="no">
        <type>enum <ref refid="group__drivers_1gaf8cadca485dfb3ffa6a6fdcb5cda1d65" kindref="member">as3935_oscillator_modes_e</ref></type>
        <definition>typedef enum as3935_oscillator_modes_e as3935_oscillator_modes_t</definition>
        <argsstring></argsstring>
        <name>as3935_oscillator_modes_t</name>
        <briefdescription>
<para>AS3935 tuning mode oscillators enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="269" column="27"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga98b0fd83fb81dd7cbb6c853a260ac02a" prot="public" static="no">
        <type>struct <ref refid="structas3935__config__s" kindref="compound">as3935_config_s</ref></type>
        <definition>typedef struct as3935_config_s as3935_config_t</definition>
        <argsstring></argsstring>
        <name>as3935_config_t</name>
        <briefdescription>
<para>I2C AS3935 device configuration structure. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="360" column="17"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga5ddd19fd749c95246e6d2748a79d3d3b" prot="public" static="no">
        <type>struct as3935_context_t</type>
        <definition>typedef struct as3935_context_t as3935_context_t</definition>
        <argsstring></argsstring>
        <name>as3935_context_t</name>
        <briefdescription>
<para>AS3935 context structure definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="373" column="31" bodyfile="components/peripherals/i2c/esp_as3935/include/as3935.h" bodystart="373" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1gaf334b3bfc6ce484444d6c68e9830cf15" prot="public" static="no">
        <type>struct <ref refid="structas3935__context__t" kindref="compound">as3935_context_t</ref> *</type>
        <definition>typedef struct as3935_context_t* as3935_handle_t</definition>
        <argsstring></argsstring>
        <name>as3935_handle_t</name>
        <briefdescription>
<para>AS3935 handle structure definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="378" column="31" bodyfile="components/peripherals/i2c/esp_as3935/include/as3935.h" bodystart="378" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga45e59e28a4d992ec5a99737ade86a6bb" prot="public" static="no">
        <type>gpio_isr_t</type>
        <definition>typedef gpio_isr_t as3935_isr_t</definition>
        <argsstring></argsstring>
        <name>as3935_isr_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="380" column="20" bodyfile="components/peripherals/i2c/esp_as3935/include/as3935.h" bodystart="380" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1gaa77267644eb529603b76dd63463c163c" prot="public" static="no">
        <type>struct <ref refid="structas3935__monitor__base__s" kindref="compound">as3935_monitor_base_s</ref></type>
        <definition>typedef struct as3935_monitor_base_s as3935_monitor_base_t</definition>
        <argsstring></argsstring>
        <name>as3935_monitor_base_t</name>
        <briefdescription>
<para>AS3935 device event object structure. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="388" column="23"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1gad4067f669531ae9713b9e0a799029075" prot="public" static="no">
        <type>struct <ref refid="structas3935__monitor__context__s" kindref="compound">as3935_monitor_context_s</ref></type>
        <definition>typedef struct as3935_monitor_context_s as3935_monitor_context_t</definition>
        <argsstring></argsstring>
        <name>as3935_monitor_context_t</name>
        <briefdescription>
<para>esp AS3935 device state machine structure. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="401" column="26"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga22f338d9e4256e61c9cfa261878ea595" prot="public" static="no">
        <type>enum <ref refid="group__drivers_1ga3380dc47e384e45764c545b3b7f4bf78" kindref="member">as7341_als_modes_e</ref></type>
        <definition>typedef enum as7341_als_modes_e as7341_als_modes_t</definition>
        <argsstring></argsstring>
        <name>as7341_als_modes_t</name>
        <briefdescription>
<para>AS7341 ambient light sensing mode enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as7341/include/as7341.h" line="84" column="20"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga0479e51e6364405689f20f22f4eaaa13" prot="public" static="no">
        <type>enum <ref refid="group__drivers_1ga7e619cf208ff5b9325d4853a03114f96" kindref="member">as7341_led_drive_strengths_e</ref></type>
        <definition>typedef enum as7341_led_drive_strengths_e as7341_led_drive_strengths_t</definition>
        <argsstring></argsstring>
        <name>as7341_led_drive_strengths_t</name>
        <briefdescription>
<para>AS7341 led driving strengths enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as7341/include/as7341.h" line="98" column="30"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga27b623acd6c033c0a6ffc1ed0244b502" prot="public" static="no">
        <type>enum <ref refid="group__drivers_1ga8528eb7af062b58f8c7da844bdb7aa8b" kindref="member">as7341_spectral_gains_e</ref></type>
        <definition>typedef enum as7341_spectral_gains_e as7341_spectral_gains_t</definition>
        <argsstring></argsstring>
        <name>as7341_spectral_gains_t</name>
        <briefdescription>
<para>AS7341 allowable gain multipliers enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as7341/include/as7341.h" line="115" column="25"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga17212344d38fe0316d78bd439bbfa6c3" prot="public" static="no">
        <type>enum <ref refid="group__drivers_1ga69412adda5c99f4a8502dc9ca1f29376" kindref="member">as7341_flicker_detection_gains_e</ref></type>
        <definition>typedef enum as7341_flicker_detection_gains_e as7341_flicker_detection_gains_t</definition>
        <argsstring></argsstring>
        <name>as7341_flicker_detection_gains_t</name>
        <briefdescription>
<para>AS7341 allowable flicker detection gain multipliers enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as7341/include/as7341.h" line="132" column="34"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga820a0faa02578e68ad310882a50af614" prot="public" static="no">
        <type>enum <ref refid="group__drivers_1ga7a2c8b2911ff3c7db880944f2cfe0c37" kindref="member">as7341_flicker_detection_states_e</ref></type>
        <definition>typedef enum as7341_flicker_detection_states_e as7341_flicker_detection_states_t</definition>
        <argsstring></argsstring>
        <name>as7341_flicker_detection_states_t</name>
        <briefdescription>
<para>AS7341 flicker detection states enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as7341/include/as7341.h" line="143" column="35"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1gacd9eda447520eb4166bc70bf0d2e9f86" prot="public" static="no">
        <type>enum <ref refid="group__drivers_1ga7f032ade17db7652f5be652c96877a72" kindref="member">as7341_smux_commands_e</ref></type>
        <definition>typedef enum as7341_smux_commands_e as7341_smux_commands_t</definition>
        <argsstring></argsstring>
        <name>as7341_smux_commands_t</name>
        <briefdescription>
<para>AS7341 available SMUX commands enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as7341/include/as7341.h" line="152" column="24"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1gad0cdfc4fec333ed2019e55fc8e1ebb24" prot="public" static="no">
        <type>struct <ref refid="structas7341__channels__basic__counts__data__s" kindref="compound">as7341_channels_basic_counts_data_s</ref></type>
        <definition>typedef struct as7341_channels_basic_counts_data_s as7341_channels_basic_counts_data_t</definition>
        <argsstring></argsstring>
        <name>as7341_channels_basic_counts_data_t</name>
        <briefdescription>
<para>AS7341 channels basic counts data structure. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as7341/include/as7341.h" line="475" column="37"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga9102f9187825808d80bcf5f77dbdc426" prot="public" static="no">
        <type>struct <ref refid="structas7341__channels__spectral__data__s" kindref="compound">as7341_channels_spectral_data_s</ref></type>
        <definition>typedef struct as7341_channels_spectral_data_s as7341_channels_spectral_data_t</definition>
        <argsstring></argsstring>
        <name>as7341_channels_spectral_data_t</name>
        <briefdescription>
<para>AS7341 channels spectral data structure. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as7341/include/as7341.h" line="491" column="33"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga927515039a6879c9453bd1eda2a49997" prot="public" static="no">
        <type>struct <ref refid="structas7341__config__s" kindref="compound">as7341_config_s</ref></type>
        <definition>typedef struct as7341_config_s as7341_config_t</definition>
        <argsstring></argsstring>
        <name>as7341_config_t</name>
        <briefdescription>
<para>AS7341 configuration structure. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as7341/include/as7341.h" line="502" column="17"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga3b05f02274e44adca88dee6069dee5c9" prot="public" static="no">
        <type>struct as7341_context_t</type>
        <definition>typedef struct as7341_context_t as7341_context_t</definition>
        <argsstring></argsstring>
        <name>as7341_context_t</name>
        <briefdescription>
<para>AS7341 context structure definitions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as7341/include/as7341.h" line="518" column="31" bodyfile="components/peripherals/i2c/esp_as7341/include/as7341.h" bodystart="518" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1gaca771a90491a159df8e5eaa1f23cb61f" prot="public" static="no">
        <type>struct <ref refid="structas7341__context__t" kindref="compound">as7341_context_t</ref> *</type>
        <definition>typedef struct as7341_context_t* as7341_handle_t</definition>
        <argsstring></argsstring>
        <name>as7341_handle_t</name>
        <briefdescription>
<para>AS7341 handle structure definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as7341/include/as7341.h" line="523" column="31" bodyfile="components/peripherals/i2c/esp_as7341/include/as7341.h" bodystart="523" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga76514573edf401f3839df07163bff37a" prot="public" static="no">
        <type>enum <ref refid="group__drivers_1ga66416e4a883bd9a0719917edaeaae8a7" kindref="member">bh1750_measurement_modes_e</ref></type>
        <definition>typedef enum bh1750_measurement_modes_e bh1750_measurement_modes_t</definition>
        <argsstring></argsstring>
        <name>bh1750_measurement_modes_t</name>
        <briefdescription>
<para>BH1750 measurement modes enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bh1750/include/bh1750.h" line="86" column="28"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga473a8d2e67b27ec75271fdda3b84dbba" prot="public" static="no">
        <type>struct <ref refid="structbh1750__config__s" kindref="compound">bh1750_config_s</ref></type>
        <definition>typedef struct bh1750_config_s bh1750_config_t</definition>
        <argsstring></argsstring>
        <name>bh1750_config_t</name>
        <briefdescription>
<para>BH1750 device configuration structure. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bh1750/include/bh1750.h" line="98" column="17"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1gafbb0c71ed2cd2bbdd5f13d269a2cca0f" prot="public" static="no">
        <type>struct bh1750_context_t</type>
        <definition>typedef struct bh1750_context_t bh1750_context_t</definition>
        <argsstring></argsstring>
        <name>bh1750_context_t</name>
        <briefdescription>
<para>BH1750 context structure definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bh1750/include/bh1750.h" line="111" column="31" bodyfile="components/peripherals/i2c/esp_bh1750/include/bh1750.h" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1gaf7d20c4f1eb201955b708b4d81779200" prot="public" static="no">
        <type>struct <ref refid="structbh1750__context__t" kindref="compound">bh1750_context_t</ref> *</type>
        <definition>typedef struct bh1750_context_t* bh1750_handle_t</definition>
        <argsstring></argsstring>
        <name>bh1750_handle_t</name>
        <briefdescription>
<para>BH1750 handle structure definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bh1750/include/bh1750.h" line="116" column="31" bodyfile="components/peripherals/i2c/esp_bh1750/include/bh1750.h" bodystart="116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga457964ffe1aeb9433d63ed769051c6d6" prot="public" static="no">
        <type>enum <ref refid="group__drivers_1gae4d73e09adf36a810fdf5b28b78b5a36" kindref="member">bme680_heater_setpoints_e</ref></type>
        <definition>typedef enum bme680_heater_setpoints_e bme680_heater_setpoints_t</definition>
        <argsstring></argsstring>
        <name>bme680_heater_setpoints_t</name>
        <briefdescription>
<para>BME680 heater set-points enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bme680/include/bme680.h" line="105" column="27"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga0ae04038fc3cbfd0bbe06d04a716578a" prot="public" static="no">
        <type>enum <ref refid="group__drivers_1gadc9774869967ccfbe0d894a20a2a7745" kindref="member">bme680_gas_wait_multipliers_e</ref></type>
        <definition>typedef enum bme680_gas_wait_multipliers_e bme680_gas_wait_multipliers_t</definition>
        <argsstring></argsstring>
        <name>bme680_gas_wait_multipliers_t</name>
        <briefdescription>
<para>BME680 gas wait multipliers enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bme680/include/bme680.h" line="115" column="31"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga659bc184b62bd53670e369a09e6a315b" prot="public" static="no">
        <type>enum <ref refid="group__drivers_1ga07839710ced515edc57e1265a9f942d0" kindref="member">bme680_iir_filters_e</ref></type>
        <definition>typedef enum bme680_iir_filters_e bme680_iir_filters_t</definition>
        <argsstring></argsstring>
        <name>bme680_iir_filters_t</name>
        <briefdescription>
<para>BME680 IIR filters coefficient enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bme680/include/bme680.h" line="129" column="22"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga631c33b35db1e3bcdc9dbeb3732e7e21" prot="public" static="no">
        <type>enum <ref refid="group__drivers_1ga036c0d22ef7602a37e6acc30754c44d6" kindref="member">bme680_power_modes_e</ref></type>
        <definition>typedef enum bme680_power_modes_e bme680_power_modes_t</definition>
        <argsstring></argsstring>
        <name>bme680_power_modes_t</name>
        <briefdescription>
<para>BME680 power modes enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bme680/include/bme680.h" line="139" column="22"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga7b38c1d35a8f7a27af3c264c46f78bbe" prot="public" static="no">
        <type>enum <ref refid="group__drivers_1ga94e531ba21486e2c6f40f16e3021a97a" kindref="member">bme680_pressure_oversampling_e</ref></type>
        <definition>typedef enum bme680_pressure_oversampling_e bme680_pressure_oversampling_t</definition>
        <argsstring></argsstring>
        <name>bme680_pressure_oversampling_t</name>
        <briefdescription>
<para>BME680 pressure oversampling enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bme680/include/bme680.h" line="151" column="32"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga5be0c6fd6abecc9e2e055f27ec0be79d" prot="public" static="no">
        <type>enum <ref refid="group__drivers_1ga759038547cb6202de03caba5a7c882a7" kindref="member">bme680_temperature_oversampling_e</ref></type>
        <definition>typedef enum bme680_temperature_oversampling_e bme680_temperature_oversampling_t</definition>
        <argsstring></argsstring>
        <name>bme680_temperature_oversampling_t</name>
        <briefdescription>
<para>BME680 temperature oversampling enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bme680/include/bme680.h" line="163" column="35"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga36a632407bbbcf95a69386b2240e981d" prot="public" static="no">
        <type>enum <ref refid="group__drivers_1ga3fff6756c917ec8461faffdfb8bb2ef4" kindref="member">bme680_humidity_oversampling_e</ref></type>
        <definition>typedef enum bme680_humidity_oversampling_e bme680_humidity_oversampling_t</definition>
        <argsstring></argsstring>
        <name>bme680_humidity_oversampling_t</name>
        <briefdescription>
<para>BME680 humidity oversampling enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bme680/include/bme680.h" line="175" column="32"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga1fcb18f07741a3e8b640e2d3ba059f12" prot="public" static="no">
        <type>struct <ref refid="structbme680__cal__factors__s" kindref="compound">bme680_cal_factors_s</ref></type>
        <definition>typedef struct bme680_cal_factors_s bme680_cal_factors_t</definition>
        <argsstring></argsstring>
        <name>bme680_cal_factors_t</name>
        <briefdescription>
<para>BME680 calibration factors structure definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bme680/include/bme680.h" line="310" column="22"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga3238b870a3bc18b1c513b52ebb74e125" prot="public" static="no">
        <type>struct <ref refid="structbme680__data__s" kindref="compound">bme680_data_s</ref></type>
        <definition>typedef struct bme680_data_s bme680_data_t</definition>
        <argsstring></argsstring>
        <name>bme680_data_t</name>
        <briefdescription>
<para>BME680 data structure definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bme680/include/bme680.h" line="329" column="15"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga9eb84555a3dc9ced6a91394e16736f96" prot="public" static="no">
        <type>struct <ref refid="structbme680__adc__data__s" kindref="compound">bme680_adc_data_s</ref></type>
        <definition>typedef struct bme680_adc_data_s bme680_adc_data_t</definition>
        <argsstring></argsstring>
        <name>bme680_adc_data_t</name>
        <briefdescription>
<para>BME680 ADC data structure definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bme680/include/bme680.h" line="343" column="19"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga754b18e9f8c3f77d4c2738fa59403150" prot="public" static="no">
        <type>struct <ref refid="structbme680__config__s" kindref="compound">bme680_config_s</ref></type>
        <definition>typedef struct bme680_config_s bme680_config_t</definition>
        <argsstring></argsstring>
        <name>bme680_config_t</name>
        <briefdescription>
<para>BME680 configuration structure definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bme680/include/bme680.h" line="363" column="17"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1gae8f85658022709fe28cbfbc010cd7b3d" prot="public" static="no">
        <type>struct bme680_context_t</type>
        <definition>typedef struct bme680_context_t bme680_context_t</definition>
        <argsstring></argsstring>
        <name>bme680_context_t</name>
        <briefdescription>
<para>BME680 context structure definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bme680/include/bme680.h" line="380" column="31" bodyfile="components/peripherals/i2c/esp_bme680/include/bme680.h" bodystart="380" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga613796da4cb6da455381a179729e91f0" prot="public" static="no">
        <type>struct <ref refid="structbme680__context__t" kindref="compound">bme680_context_t</ref> *</type>
        <definition>typedef struct bme680_context_t* bme680_handle_t</definition>
        <argsstring></argsstring>
        <name>bme680_handle_t</name>
        <briefdescription>
<para>BME680 handle structure definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bme680/include/bme680.h" line="385" column="31" bodyfile="components/peripherals/i2c/esp_bme680/include/bme680.h" bodystart="385" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga6f4e9c7fd7225c16ee96a6f9df8b9719" prot="public" static="no">
        <type>enum <ref refid="group__drivers_1ga43c86457744677ce2fe05bf08c31ce5d" kindref="member">bmp280_iir_filters_e</ref></type>
        <definition>typedef enum bmp280_iir_filters_e bmp280_iir_filters_t</definition>
        <argsstring></argsstring>
        <name>bmp280_iir_filters_t</name>
        <briefdescription>
<para>BMP280 IIR filters coefficient enumerator definition. </para>
        </briefdescription>
        <detaileddescription>
<para>public enumerator, union, and structure definitions </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp280/include/bmp280.h" line="94" column="22"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1gaa9766737a9535054ecb73ff34d467dbd" prot="public" static="no">
        <type>enum <ref refid="group__drivers_1gad9ece41b3c809c1942a598a8776f6e12" kindref="member">bmp280_standby_times_e</ref></type>
        <definition>typedef enum bmp280_standby_times_e bmp280_standby_times_t</definition>
        <argsstring></argsstring>
        <name>bmp280_standby_times_t</name>
        <briefdescription>
<para>BMP280 stand-by times enumerator definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp280/include/bmp280.h" line="108" column="24"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga09b778eb79ca4059180c508483dd7426" prot="public" static="no">
        <type>enum <ref refid="group__drivers_1gaa4f8d7bff4d2100e147454563eb16712" kindref="member">bmp280_power_modes_e</ref></type>
        <definition>typedef enum bmp280_power_modes_e bmp280_power_modes_t</definition>
        <argsstring></argsstring>
        <name>bmp280_power_modes_t</name>
        <briefdescription>
<para>BMP280 power modes enumerator definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp280/include/bmp280.h" line="118" column="22"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga21e2402ff8bbe587f1c9564f68de0561" prot="public" static="no">
        <type>enum <ref refid="group__drivers_1ga4cb3c585b3e9d393ee0b44b8ec0b8dbc" kindref="member">bmp280_pressure_oversampling_e</ref></type>
        <definition>typedef enum bmp280_pressure_oversampling_e bmp280_pressure_oversampling_t</definition>
        <argsstring></argsstring>
        <name>bmp280_pressure_oversampling_t</name>
        <briefdescription>
<para>BMP280 pressure oversampling enumerator definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp280/include/bmp280.h" line="130" column="32"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga5cfc950126ecbc2ac018615da7ed9448" prot="public" static="no">
        <type>enum <ref refid="group__drivers_1gaf7580026dc3ad627fe0fc505fd1d24cd" kindref="member">bmp280_temperature_oversampling_e</ref></type>
        <definition>typedef enum bmp280_temperature_oversampling_e bmp280_temperature_oversampling_t</definition>
        <argsstring></argsstring>
        <name>bmp280_temperature_oversampling_t</name>
        <briefdescription>
<para>BMP280 temperature oversampling enumerator definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp280/include/bmp280.h" line="144" column="35"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga56de4c11f5b22c1d0cf373c243652b52" prot="public" static="no">
        <type>struct <ref refid="structbmp280__cal__factors__s" kindref="compound">bmp280_cal_factors_s</ref></type>
        <definition>typedef struct bmp280_cal_factors_s bmp280_cal_factors_t</definition>
        <argsstring></argsstring>
        <name>bmp280_cal_factors_t</name>
        <briefdescription>
<para>BMP280 temperature and pressure calibration factors structure definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp280/include/bmp280.h" line="203" column="22"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga683075794a68e847ac00880f3fbc5a1e" prot="public" static="no">
        <type>struct <ref refid="structbmp280__config__s" kindref="compound">bmp280_config_s</ref></type>
        <definition>typedef struct bmp280_config_s bmp280_config_t</definition>
        <argsstring></argsstring>
        <name>bmp280_config_t</name>
        <briefdescription>
<para>BMP280 configuration structure definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp280/include/bmp280.h" line="216" column="17"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga5be89f99e28f2b4a3c427a0d8bb8929c" prot="public" static="no">
        <type>struct bmp280_context_t</type>
        <definition>typedef struct bmp280_context_t bmp280_context_t</definition>
        <argsstring></argsstring>
        <name>bmp280_context_t</name>
        <briefdescription>
<para>BMP280 context structure definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp280/include/bmp280.h" line="231" column="31" bodyfile="components/peripherals/i2c/esp_bmp280/include/bmp280.h" bodystart="231" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga4ba5e63f50d3e97eabf7bdb5491420f4" prot="public" static="no">
        <type>struct <ref refid="structbmp280__context__t" kindref="compound">bmp280_context_t</ref> *</type>
        <definition>typedef struct bmp280_context_t* bmp280_handle_t</definition>
        <argsstring></argsstring>
        <name>bmp280_handle_t</name>
        <briefdescription>
<para>BMP280 handle structure definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp280/include/bmp280.h" line="236" column="32" bodyfile="components/peripherals/i2c/esp_bmp280/include/bmp280.h" bodystart="236" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1gab4a8dfad87b98ad3cc0c4da8f082104e" prot="public" static="no">
        <type>enum <ref refid="group__drivers_1ga4a45b4eebb3310bfc79c1a8fb6c2720b" kindref="member">bmp390_iir_filters_e</ref></type>
        <definition>typedef enum bmp390_iir_filters_e bmp390_iir_filters_t</definition>
        <argsstring></argsstring>
        <name>bmp390_iir_filters_t</name>
        <briefdescription>
<para>BMP390 IIR filters coefficient enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp390/include/bmp390.h" line="90" column="22"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga58ee132e8b4fa817a9829f66c51aaa50" prot="public" static="no">
        <type>enum <ref refid="group__drivers_1ga1ee0ad95b878f162342e3a2b31c21b5d" kindref="member">bmp390_output_data_rates_e</ref></type>
        <definition>typedef enum bmp390_output_data_rates_e bmp390_output_data_rates_t</definition>
        <argsstring></argsstring>
        <name>bmp390_output_data_rates_t</name>
        <briefdescription>
<para>BMP390 output data rates enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp390/include/bmp390.h" line="105" column="28"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga4df194ff4b85bf00f7402a426a3edcf9" prot="public" static="no">
        <type>enum <ref refid="group__drivers_1ga42a6b3878c63588fdf5601a0a0385d61" kindref="member">bmp390_power_modes_e</ref></type>
        <definition>typedef enum bmp390_power_modes_e bmp390_power_modes_t</definition>
        <argsstring></argsstring>
        <name>bmp390_power_modes_t</name>
        <briefdescription>
<para>BMP390 power modes enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp390/include/bmp390.h" line="115" column="22"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga9d5fc1770bbe5e33b017e920cdb24511" prot="public" static="no">
        <type>enum <ref refid="group__drivers_1ga7d8fbea6422f39b254b222705433918b" kindref="member">bmp390_pressure_oversampling_e</ref></type>
        <definition>typedef enum bmp390_pressure_oversampling_e bmp390_pressure_oversampling_t</definition>
        <argsstring></argsstring>
        <name>bmp390_pressure_oversampling_t</name>
        <briefdescription>
<para>BMP390 pressure oversampling enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp390/include/bmp390.h" line="127" column="32"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga5d10f7b42daa4f054964fc57567a2f55" prot="public" static="no">
        <type>enum <ref refid="group__drivers_1ga7f2043cbe079464e80e1b2ae2c788ee5" kindref="member">bmp390_temperature_oversampling_e</ref></type>
        <definition>typedef enum bmp390_temperature_oversampling_e bmp390_temperature_oversampling_t</definition>
        <argsstring></argsstring>
        <name>bmp390_temperature_oversampling_t</name>
        <briefdescription>
<para>BMP390 temperature oversampling enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp390/include/bmp390.h" line="139" column="35"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga7374d1ab55c2db33457ecf05b496cb05" prot="public" static="no">
        <type>struct <ref refid="structbmp390__cal__factors__s" kindref="compound">bmp390_cal_factors_s</ref></type>
        <definition>typedef struct bmp390_cal_factors_s bmp390_cal_factors_t</definition>
        <argsstring></argsstring>
        <name>bmp390_cal_factors_t</name>
        <briefdescription>
<para>BMP390 temperature and pressure calibration factors structure. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp390/include/bmp390.h" line="255" column="22"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga2c788db0abaebcfbc32448cd17d60237" prot="public" static="no">
        <type>struct <ref refid="structbmp390__conv__cal__factors__s" kindref="compound">bmp390_conv_cal_factors_s</ref></type>
        <definition>typedef struct bmp390_conv_cal_factors_s bmp390_conv_cal_factors_t</definition>
        <argsstring></argsstring>
        <name>bmp390_conv_cal_factors_t</name>
        <briefdescription>
<para>BMP390 temperature and pressure converted calibration factors structure. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp390/include/bmp390.h" line="277" column="27"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga20d02eb65a21261e5d01ade14b047d92" prot="public" static="no">
        <type>struct <ref refid="structbmp390__config__s" kindref="compound">bmp390_config_s</ref></type>
        <definition>typedef struct bmp390_config_s bmp390_config_t</definition>
        <argsstring></argsstring>
        <name>bmp390_config_t</name>
        <briefdescription>
<para>BMP390 configuration structure. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp390/include/bmp390.h" line="290" column="17"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1gaed1052f38ff974a54835e487c9c96aa7" prot="public" static="no">
        <type>struct bmp390_context_t</type>
        <definition>typedef struct bmp390_context_t bmp390_context_t</definition>
        <argsstring></argsstring>
        <name>bmp390_context_t</name>
        <briefdescription>
<para>BMP390 context structure definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp390/include/bmp390.h" line="306" column="31" bodyfile="components/peripherals/i2c/esp_bmp390/include/bmp390.h" bodystart="306" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga527bfd427c1d151b37b9f728b8378b70" prot="public" static="no">
        <type>struct <ref refid="structbmp390__context__t" kindref="compound">bmp390_context_t</ref> *</type>
        <definition>typedef struct bmp390_context_t* bmp390_handle_t</definition>
        <argsstring></argsstring>
        <name>bmp390_handle_t</name>
        <briefdescription>
<para>BMP390 handle structure definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp390/include/bmp390.h" line="311" column="31" bodyfile="components/peripherals/i2c/esp_bmp390/include/bmp390.h" bodystart="311" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1gad91c6a3379cef0d15d8465d67c1479fa" prot="public" static="no">
        <type>enum <ref refid="group__drivers_1gad77e9dec744afbae856a9e21ee269514" kindref="member">ccs811_drive_modes_e</ref></type>
        <definition>typedef enum ccs811_drive_modes_e ccs811_drive_modes_t</definition>
        <argsstring></argsstring>
        <name>ccs811_drive_modes_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>CCS811 drive modes enumerator. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ccs811/include/ccs811.h" line="92" column="22"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1gadcc6aa53d50a1deb71f652886244b5b0" prot="public" static="no">
        <type>enum <ref refid="group__drivers_1gaedfefa4560269ccc8dd9556b61d9c577" kindref="member">ccs811_firmware_modes_e</ref></type>
        <definition>typedef enum ccs811_firmware_modes_e ccs811_firmware_modes_t</definition>
        <argsstring></argsstring>
        <name>ccs811_firmware_modes_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>CCS811 firmware modes enumerator. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ccs811/include/ccs811.h" line="100" column="25"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga7b2dc0d56f2446e378d4d2be4e33cebb" prot="public" static="no">
        <type>struct <ref refid="structccs811__thresholds__register__s" kindref="compound">ccs811_thresholds_register_s</ref></type>
        <definition>typedef struct ccs811_thresholds_register_s ccs811_thresholds_register_t</definition>
        <argsstring></argsstring>
        <name>ccs811_thresholds_register_t</name>
        <briefdescription>
<para>CCS811 thresholds register structure. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ccs811/include/ccs811.h" line="162" column="30"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1gae23c53308d871ca1dc743c3f00167060" prot="public" static="no">
        <type>struct <ref refid="structccs811__environmental__data__register__s" kindref="compound">ccs811_environmental_data_register_s</ref></type>
        <definition>typedef struct ccs811_environmental_data_register_s ccs811_environmental_data_register_t</definition>
        <argsstring></argsstring>
        <name>ccs811_environmental_data_register_t</name>
        <briefdescription>
<para>CCS811 environmental data register structure. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ccs811/include/ccs811.h" line="170" column="38"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1gab35e15dea9a2729c641d7fce4e19b7c9" prot="public" static="no">
        <type>struct <ref refid="structccs811__error__row__s" kindref="compound">ccs811_error_row_s</ref></type>
        <definition>typedef struct ccs811_error_row_s ccs811_error_row_t</definition>
        <argsstring></argsstring>
        <name>ccs811_error_row_t</name>
        <briefdescription>
<para>CCS811 error row definition structure. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ccs811/include/ccs811.h" line="207" column="20"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga935eb9ffb87083d7fbc1859298ab2146" prot="public" static="no">
        <type>struct <ref refid="structccs811__measure__mode__row__s" kindref="compound">ccs811_measure_mode_row_s</ref></type>
        <definition>typedef struct ccs811_measure_mode_row_s ccs811_measure_mode_row_t</definition>
        <argsstring></argsstring>
        <name>ccs811_measure_mode_row_t</name>
        <briefdescription>
<para>CCS811 measure mode row definition structure. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ccs811/include/ccs811.h" line="215" column="27"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga6c6ead2572e33cd7719d804d59b630b6" prot="public" static="no">
        <type>struct ccs811_context_t</type>
        <definition>typedef struct ccs811_context_t ccs811_context_t</definition>
        <argsstring></argsstring>
        <name>ccs811_context_t</name>
        <briefdescription>
<para>CCS811 context structure definitions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ccs811/include/ccs811.h" line="252" column="31" bodyfile="components/peripherals/i2c/esp_ccs811/include/ccs811.h" bodystart="252" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga93f5ff3bbfd6b970a656de57f9ab5621" prot="public" static="no">
        <type>struct <ref refid="structccs811__context__t" kindref="compound">ccs811_context_t</ref> *</type>
        <definition>typedef struct ccs811_context_t* ccs811_handle_t</definition>
        <argsstring></argsstring>
        <name>ccs811_handle_t</name>
        <briefdescription>
<para>CCS811 handle structure definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ccs811/include/ccs811.h" line="257" column="31" bodyfile="components/peripherals/i2c/esp_ccs811/include/ccs811.h" bodystart="257" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga60912896ba51c5b7836e2e6705362d87" prot="public" static="no">
        <type>enum <ref refid="group__drivers_1gade3afdceb8405d3b657d92d4abd60217" kindref="member">ens160_aqi_uba_indexes_e</ref></type>
        <definition>typedef enum ens160_aqi_uba_indexes_e ens160_aqi_uba_indexes_t</definition>
        <argsstring></argsstring>
        <name>ens160_aqi_uba_indexes_t</name>
        <briefdescription>
<para>ENS160 air quality index of the uba enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ens160/include/ens160.h" line="110" column="26"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1gac6754110d0d3ab4e720a7b9283289e88" prot="public" static="no">
        <type>enum <ref refid="group__drivers_1ga85829c5c19d6ec9d3ea8643d3d2627a6" kindref="member">ens160_interrupt_pin_polarities_e</ref></type>
        <definition>typedef enum ens160_interrupt_pin_polarities_e ens160_interrupt_pin_polarities_t</definition>
        <argsstring></argsstring>
        <name>ens160_interrupt_pin_polarities_t</name>
        <briefdescription>
<para>ENS160 interrupt pin polarities enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ens160/include/ens160.h" line="118" column="35"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga9b85a4755141783e62806d5409559fe6" prot="public" static="no">
        <type>enum <ref refid="group__drivers_1ga75c593a0cc73463325240b4024666622" kindref="member">ens160_interrupt_pin_drivers_e</ref></type>
        <definition>typedef enum ens160_interrupt_pin_drivers_e ens160_interrupt_pin_drivers_t</definition>
        <argsstring></argsstring>
        <name>ens160_interrupt_pin_drivers_t</name>
        <briefdescription>
<para>ENS160 interrupt pin drivers enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ens160/include/ens160.h" line="126" column="32"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga6d531eebb2d3fc8bc6de830bfb2aaaf4" prot="public" static="no">
        <type>enum <ref refid="group__drivers_1gae268b5469d64277325caa3f5fc989850" kindref="member">ens160_operating_modes_e</ref></type>
        <definition>typedef enum ens160_operating_modes_e ens160_operating_modes_t</definition>
        <argsstring></argsstring>
        <name>ens160_operating_modes_t</name>
        <briefdescription>
<para>ENS160 operating modes enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ens160/include/ens160.h" line="136" column="26"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1gaa5184b5f2bb84de6f76b86821d1dada9" prot="public" static="no">
        <type>enum <ref refid="group__drivers_1gaf2a9ed5d8ac048fb5697822bb1694523" kindref="member">ens160_commands_e</ref></type>
        <definition>typedef enum ens160_commands_e ens160_commands_t</definition>
        <argsstring></argsstring>
        <name>ens160_commands_t</name>
        <briefdescription>
<para>ENS160 commands enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ens160/include/ens160.h" line="145" column="19"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1gac81c26d5b704c609e33b6f4ba7057201" prot="public" static="no">
        <type>enum <ref refid="group__drivers_1ga5af0eb865fa92927dfd16523bb653742" kindref="member">ens160_validity_flags_e</ref></type>
        <definition>typedef enum ens160_validity_flags_e ens160_validity_flags_t</definition>
        <argsstring></argsstring>
        <name>ens160_validity_flags_t</name>
        <briefdescription>
<para>ENS160 validity flags enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ens160/include/ens160.h" line="155" column="25"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1gad4000dc9360128d86e30a75d36a78349" prot="public" static="no">
        <type>union <ref refid="unionens160__app__version__u" kindref="compound">ens160_app_version_u</ref></type>
        <definition>typedef union ens160_app_version_u ens160_app_version_t</definition>
        <argsstring></argsstring>
        <name>ens160_app_version_t</name>
        <briefdescription>
<para>ENS160 application version register structure. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ens160/include/ens160.h" line="197" column="22"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga9bf81e9124e5c07b24ebebc2dd141904" prot="public" static="no">
        <type>struct <ref refid="structens160__air__quality__data__s" kindref="compound">ens160_air_quality_data_s</ref></type>
        <definition>typedef struct ens160_air_quality_data_s ens160_air_quality_data_t</definition>
        <argsstring></argsstring>
        <name>ens160_air_quality_data_t</name>
        <briefdescription>
<para>ENS160 air quality data structure. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ens160/include/ens160.h" line="218" column="27"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1gaff8f3f610bc3439129f39f314c4e4616" prot="public" static="no">
        <type>struct <ref refid="structens160__air__quality__raw__data__s" kindref="compound">ens160_air_quality_raw_data_s</ref></type>
        <definition>typedef struct ens160_air_quality_raw_data_s ens160_air_quality_raw_data_t</definition>
        <argsstring></argsstring>
        <name>ens160_air_quality_raw_data_t</name>
        <briefdescription>
<para>ENS160 air quality raw data structure. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ens160/include/ens160.h" line="232" column="31"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga160c5dbdb5e259518d2e997c49566e2b" prot="public" static="no">
        <type>struct <ref refid="structens160__aqi__uba__row__s" kindref="compound">ens160_aqi_uba_row_s</ref></type>
        <definition>typedef struct ens160_aqi_uba_row_s ens160_aqi_uba_row_t</definition>
        <argsstring></argsstring>
        <name>ens160_aqi_uba_row_t</name>
        <briefdescription>
<para>ENS160 air quality index of the UBA row definition structure. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ens160/include/ens160.h" line="243" column="22"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1gadcf19e4502c842b6dbc749ed6e19ab96" prot="public" static="no">
        <type>struct <ref refid="structens160__config__s" kindref="compound">ens160_config_s</ref></type>
        <definition>typedef struct ens160_config_s ens160_config_t</definition>
        <argsstring></argsstring>
        <name>ens160_config_t</name>
        <briefdescription>
<para>ENS160 configuration structure. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ens160/include/ens160.h" line="257" column="17"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga95db824fc41cc56d10b4d9a21a983a97" prot="public" static="no">
        <type>struct ens160_context_t</type>
        <definition>typedef struct ens160_context_t ens160_context_t</definition>
        <argsstring></argsstring>
        <name>ens160_context_t</name>
        <briefdescription>
<para>ENS160 context structure definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ens160/include/ens160.h" line="274" column="31" bodyfile="components/peripherals/i2c/esp_ens160/include/ens160.h" bodystart="274" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1gafdcb747a70da714654218fbcd1d1e2c9" prot="public" static="no">
        <type>struct <ref refid="structens160__context__t" kindref="compound">ens160_context_t</ref> *</type>
        <definition>typedef struct ens160_context_t* ens160_handle_t</definition>
        <argsstring></argsstring>
        <name>ens160_handle_t</name>
        <briefdescription>
<para>ENS160 handle structure definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ens160/include/ens160.h" line="278" column="31" bodyfile="components/peripherals/i2c/esp_ens160/include/ens160.h" bodystart="278" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga176f5a25487d02065834216ba3c2436c" prot="public" static="no">
        <type>enum <ref refid="group__drivers_1ga1916160d74d5ce30f5508b7bcbc8928c" kindref="member">hdc1080_acquisition_modes_e</ref></type>
        <definition>typedef enum hdc1080_acquisition_modes_e hdc1080_acquisition_modes_t</definition>
        <argsstring></argsstring>
        <name>hdc1080_acquisition_modes_t</name>
        <briefdescription>
<para>HDC1080 acquisition modes enumerator definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_hdc1080/include/hdc1080.h" line="86" column="29"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga126d151aef7991dffa944650fec31883" prot="public" static="no">
        <type>enum <ref refid="group__drivers_1gaa9046a79c6161e97ce6f4eedb2fabcbf" kindref="member">hdc1080_battery_states_e</ref></type>
        <definition>typedef enum hdc1080_battery_states_e hdc1080_battery_states_t</definition>
        <argsstring></argsstring>
        <name>hdc1080_battery_states_t</name>
        <briefdescription>
<para>HDC1080 battery states enumerator definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_hdc1080/include/hdc1080.h" line="94" column="26"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga778ae16b2d80f624217c3a1a9fa94cc8" prot="public" static="no">
        <type>enum <ref refid="group__drivers_1ga67668000949d016e559d46366831972c" kindref="member">hdc1080_temperature_resolutions_e</ref></type>
        <definition>typedef enum hdc1080_temperature_resolutions_e hdc1080_temperature_resolutions_t</definition>
        <argsstring></argsstring>
        <name>hdc1080_temperature_resolutions_t</name>
        <briefdescription>
<para>HDC1080 temperature measurement resolutions enumerator definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_hdc1080/include/hdc1080.h" line="102" column="35"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1gae67808de49aceb774fa76ef6f6277c5d" prot="public" static="no">
        <type>enum <ref refid="group__drivers_1gafebf60aee364b0512cc8b5dbc2e4acab" kindref="member">hdc1080_humidity_resolutions_e</ref></type>
        <definition>typedef enum hdc1080_humidity_resolutions_e hdc1080_humidity_resolutions_t</definition>
        <argsstring></argsstring>
        <name>hdc1080_humidity_resolutions_t</name>
        <briefdescription>
<para>HDC1080 humidity measurement resolutions enumerator definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_hdc1080/include/hdc1080.h" line="111" column="32"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga7eaba97c9208eb971d02ddb6e51edf44" prot="public" static="no">
        <type>struct <ref refid="structhdc1080__config__s" kindref="compound">hdc1080_config_s</ref></type>
        <definition>typedef struct hdc1080_config_s hdc1080_config_t</definition>
        <argsstring></argsstring>
        <name>hdc1080_config_t</name>
        <briefdescription>
<para>HDC1080 configuration structure definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_hdc1080/include/hdc1080.h" line="162" column="18"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga80f63a7971e30241c43b4acde6806be9" prot="public" static="no">
        <type>struct hdc1080_context_t</type>
        <definition>typedef struct hdc1080_context_t hdc1080_context_t</definition>
        <argsstring></argsstring>
        <name>hdc1080_context_t</name>
        <briefdescription>
<para>HDC1080 context structure definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_hdc1080/include/hdc1080.h" line="178" column="32" bodyfile="components/peripherals/i2c/esp_hdc1080/include/hdc1080.h" bodystart="178" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1gae7a6c4d039c3dca434589908c50186da" prot="public" static="no">
        <type>struct <ref refid="structhdc1080__context__t" kindref="compound">hdc1080_context_t</ref> *</type>
        <definition>typedef struct hdc1080_context_t* hdc1080_handle_t</definition>
        <argsstring></argsstring>
        <name>hdc1080_handle_t</name>
        <briefdescription>
<para>HDC1080 handle structure definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_hdc1080/include/hdc1080.h" line="183" column="33" bodyfile="components/peripherals/i2c/esp_hdc1080/include/hdc1080.h" bodystart="183" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1gaefa61370e32ccb29c52f64cf90d66568" prot="public" static="no">
        <type>enum <ref refid="group__drivers_1ga3430b51778b4d6cf0c6be7aab962707a" kindref="member">hmc5883l_calibration_options_e</ref></type>
        <definition>typedef enum hmc5883l_calibration_options_e hmc5883l_calibration_options_t</definition>
        <argsstring></argsstring>
        <name>hmc5883l_calibration_options_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>HMC5883L possible calibration options </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_hmc5883l/include/hmc5883l.h" line="82" column="32"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga227eea47f9b9be8f323edf19cbd31cc3" prot="public" static="no">
        <type>enum <ref refid="group__drivers_1ga5f5de977bcf14d5aeacedd4c8367dd2f" kindref="member">hmc5883l_modes_e</ref></type>
        <definition>typedef enum hmc5883l_modes_e hmc5883l_modes_t</definition>
        <argsstring></argsstring>
        <name>hmc5883l_modes_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>HMC5883L possible operating modes </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_hmc5883l/include/hmc5883l.h" line="92" column="18"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga3a8535b0ae0bbcd4791d1ea82b2c7d95" prot="public" static="no">
        <type>enum <ref refid="group__drivers_1ga9231bcbd7f72cf02258e1fc5e51d2fdc" kindref="member">hmc5883l_sample_averages_e</ref></type>
        <definition>typedef enum hmc5883l_sample_averages_e hmc5883l_sample_averages_t</definition>
        <argsstring></argsstring>
        <name>hmc5883l_sample_averages_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>HMC5883L number of samples averaged per measurement </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_hmc5883l/include/hmc5883l.h" line="102" column="28"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga599171517024a28b3792e0fd83ca90b6" prot="public" static="no">
        <type>enum <ref refid="group__drivers_1gab3a3115db483560ccfcbb2329d4bc910" kindref="member">hmc5883l_data_rates_e</ref></type>
        <definition>typedef enum hmc5883l_data_rates_e hmc5883l_data_rates_t</definition>
        <argsstring></argsstring>
        <name>hmc5883l_data_rates_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>HMC5883L possible data output rate in continuous measurement mode </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_hmc5883l/include/hmc5883l.h" line="116" column="23"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1gad941291c3f369dcacd94d21562a79264" prot="public" static="no">
        <type>enum <ref refid="group__drivers_1gadaf60b6050a6e8a19038b8950d3e5bf7" kindref="member">hmc5883l_biases_e</ref></type>
        <definition>typedef enum hmc5883l_biases_e hmc5883l_biases_t</definition>
        <argsstring></argsstring>
        <name>hmc5883l_biases_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>HMC5883L possible measurement mode of the device (bias) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_hmc5883l/include/hmc5883l.h" line="126" column="19"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga3cc0b9a961b1f08dde6a46499afb1235" prot="public" static="no">
        <type>enum <ref refid="group__drivers_1gab5113b8281f21e348730a6ac2db59627" kindref="member">hmc5883l_gains_e</ref></type>
        <definition>typedef enum hmc5883l_gains_e hmc5883l_gains_t</definition>
        <argsstring></argsstring>
        <name>hmc5883l_gains_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>HMC5883L possible device gains </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_hmc5883l/include/hmc5883l.h" line="140" column="18"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga735831537ec6082a7ebdf2333153d5c0" prot="public" static="no">
        <type>struct <ref refid="structhmc5883l__axes__data__s" kindref="compound">hmc5883l_axes_data_s</ref></type>
        <definition>typedef struct hmc5883l_axes_data_s hmc5883l_axes_data_t</definition>
        <argsstring></argsstring>
        <name>hmc5883l_axes_data_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>HMC5883L raw measurement result </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_hmc5883l/include/hmc5883l.h" line="196" column="22"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga350add29bf7765c4323eb78a9a42cbfe" prot="public" static="no">
        <type>struct <ref refid="structhmc5883l__magnetic__axes__data__s" kindref="compound">hmc5883l_magnetic_axes_data_s</ref></type>
        <definition>typedef struct hmc5883l_magnetic_axes_data_s hmc5883l_magnetic_axes_data_t</definition>
        <argsstring></argsstring>
        <name>hmc5883l_magnetic_axes_data_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>HMC5883L measurement result, milligauss </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_hmc5883l/include/hmc5883l.h" line="206" column="31"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1gaf0975315b8dc0b6ba1fc54c3137d3305" prot="public" static="no">
        <type>struct <ref refid="structhmc5883l__offset__axes__data__s" kindref="compound">hmc5883l_offset_axes_data_s</ref></type>
        <definition>typedef struct hmc5883l_offset_axes_data_s hmc5883l_offset_axes_data_t</definition>
        <argsstring></argsstring>
        <name>hmc5883l_offset_axes_data_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_hmc5883l/include/hmc5883l.h" line="212" column="29"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1gadcc0ae2de4207928ed1ce56633744275" prot="public" static="no">
        <type>struct <ref refid="structhmc5883l__gain__error__axes__data__s" kindref="compound">hmc5883l_gain_error_axes_data_s</ref></type>
        <definition>typedef struct hmc5883l_gain_error_axes_data_s hmc5883l_gain_error_axes_data_t</definition>
        <argsstring></argsstring>
        <name>hmc5883l_gain_error_axes_data_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_hmc5883l/include/hmc5883l.h" line="218" column="33"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga8f35b67fc189ae7fc9aeb20cb5736dc8" prot="public" static="no">
        <type>struct <ref refid="structhmc5883l__config__s" kindref="compound">hmc5883l_config_s</ref></type>
        <definition>typedef struct hmc5883l_config_s hmc5883l_config_t</definition>
        <argsstring></argsstring>
        <name>hmc5883l_config_t</name>
        <briefdescription>
<para>HMC5883L device configuration structure. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_hmc5883l/include/hmc5883l.h" line="232" column="19"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1gaa9e66d827571e4f6e079c466a6934afe" prot="public" static="no">
        <type>struct hmc5883l_context_t</type>
        <definition>typedef struct hmc5883l_context_t hmc5883l_context_t</definition>
        <argsstring></argsstring>
        <name>hmc5883l_context_t</name>
        <briefdescription>
<para>HMC5883L context structure definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_hmc5883l/include/hmc5883l.h" line="255" column="33" bodyfile="components/peripherals/i2c/esp_hmc5883l/include/hmc5883l.h" bodystart="255" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1gaf0841944691d27c897f212f90ebc9cb0" prot="public" static="no">
        <type>struct <ref refid="structhmc5883l__context__t" kindref="compound">hmc5883l_context_t</ref> *</type>
        <definition>typedef struct hmc5883l_context_t* hmc5883l_handle_t</definition>
        <argsstring></argsstring>
        <name>hmc5883l_handle_t</name>
        <briefdescription>
<para>HMC5883L handle structure definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_hmc5883l/include/hmc5883l.h" line="260" column="33" bodyfile="components/peripherals/i2c/esp_hmc5883l/include/hmc5883l.h" bodystart="260" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga963e4501c0e67fbf3fdd7949d502bc07" prot="public" static="no">
        <type>enum <ref refid="group__drivers_1ga331987c52263d3232c0355c54284a98c" kindref="member">ina226_averaging_modes_e</ref></type>
        <definition>typedef enum ina226_averaging_modes_e ina226_averaging_modes_t</definition>
        <argsstring></argsstring>
        <name>ina226_averaging_modes_t</name>
        <briefdescription>
<para>Averaging modes enumerator for ADC resolution/averaging. </para>
        </briefdescription>
        <detaileddescription>
<para>ADC resolution/averaging </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ina226/include/ina226.h" line="129" column="26"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga6473ec6acaf13b36c0fb1ca22c000a69" prot="public" static="no">
        <type>enum <ref refid="group__drivers_1ga0ff2d17cdd65de6c48164da40f545f30" kindref="member">ina226_volt_conv_times_e</ref></type>
        <definition>typedef enum ina226_volt_conv_times_e ina226_volt_conv_times_t</definition>
        <argsstring></argsstring>
        <name>ina226_volt_conv_times_t</name>
        <briefdescription>
<para>Voltage conversion times enumerator for ADC resolution/averaging. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ina226/include/ina226.h" line="143" column="26"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga18ff6bf61fd3856f69c1d767fcae6595" prot="public" static="no">
        <type>enum <ref refid="group__drivers_1ga5a5218c9d32b83def8dc014eb623dcb8" kindref="member">ina226_operating_modes_e</ref></type>
        <definition>typedef enum ina226_operating_modes_e ina226_operating_modes_t</definition>
        <argsstring></argsstring>
        <name>ina226_operating_modes_t</name>
        <briefdescription>
<para>Current conversion times enumerator for ADC resolution/averaging. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ina226/include/ina226.h" line="157" column="26"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga0f70616e438f7c5550604e0d4d0e5079" prot="public" static="no">
        <type>struct <ref refid="structina226__config__s" kindref="compound">ina226_config_s</ref></type>
        <definition>typedef struct ina226_config_s ina226_config_t</definition>
        <argsstring></argsstring>
        <name>ina226_config_t</name>
        <briefdescription>
<para>INA226 device configuration. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ina226/include/ina226.h" line="210" column="17"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1gad799f647ac6105b466d07e9e3a4ca27c" prot="public" static="no">
        <type>struct ina226_context_t</type>
        <definition>typedef struct ina226_context_t ina226_context_t</definition>
        <argsstring></argsstring>
        <name>ina226_context_t</name>
        <briefdescription>
<para>INA226 context structure definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ina226/include/ina226.h" line="225" column="31" bodyfile="components/peripherals/i2c/esp_ina226/include/ina226.h" bodystart="225" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga3901c989e3581b1e9aec926f6c1a6bcc" prot="public" static="no">
        <type>struct <ref refid="structina226__context__t" kindref="compound">ina226_context_t</ref> *</type>
        <definition>typedef struct ina226_context_t* ina226_handle_t</definition>
        <argsstring></argsstring>
        <name>ina226_handle_t</name>
        <briefdescription>
<para>INA226 handle structure definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ina226/include/ina226.h" line="230" column="31" bodyfile="components/peripherals/i2c/esp_ina226/include/ina226.h" bodystart="230" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga6e86bca5a4b2cc0f14a16764864b3210" prot="public" static="no">
        <type>enum <ref refid="group__drivers_1gacec7ad35708eaa6b8e5db59c1559e44f" kindref="member">ltr390uv_operation_modes_e</ref></type>
        <definition>typedef enum ltr390uv_operation_modes_e ltr390uv_operation_modes_t</definition>
        <argsstring></argsstring>
        <name>ltr390uv_operation_modes_t</name>
        <briefdescription>
<para>LTR390UV operation modes enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" line="95" column="28"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1gaa32e4995981a20b7d75b408afb944741" prot="public" static="no">
        <type>enum <ref refid="group__drivers_1ga7aa7abb83bd1c9c3c8c9aa98d37b1248" kindref="member">ltr390uv_sensor_resolutions_e</ref></type>
        <definition>typedef enum ltr390uv_sensor_resolutions_e ltr390uv_sensor_resolutions_t</definition>
        <argsstring></argsstring>
        <name>ltr390uv_sensor_resolutions_t</name>
        <briefdescription>
<para>LTR390UV sensor resolutions enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" line="107" column="31"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga42a99fe430350963604a513012dcc091" prot="public" static="no">
        <type>enum <ref refid="group__drivers_1ga763aecfa1b468ef300d966da552be213" kindref="member">ltr390uv_measurement_rates_e</ref></type>
        <definition>typedef enum ltr390uv_measurement_rates_e ltr390uv_measurement_rates_t</definition>
        <argsstring></argsstring>
        <name>ltr390uv_measurement_rates_t</name>
        <briefdescription>
<para>LTR390UV measurement rates enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" line="121" column="30"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga7827e02d5538c097a4df71803ebd364d" prot="public" static="no">
        <type>enum <ref refid="group__drivers_1ga240bac95531dbc35edc64da1ca0a84b3" kindref="member">ltr390uv_measurement_gains_e</ref></type>
        <definition>typedef enum ltr390uv_measurement_gains_e ltr390uv_measurement_gains_t</definition>
        <argsstring></argsstring>
        <name>ltr390uv_measurement_gains_t</name>
        <briefdescription>
<para>LTR390UV measurement gains enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" line="132" column="30"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1gac6c810ae7af3a884575208f8cacdcd63" prot="public" static="no">
        <type>enum <ref refid="group__drivers_1gaa8a45ec5ee3af6edfe3ef76b4285974f" kindref="member">ltr390uv_ls_interrupts_e</ref></type>
        <definition>typedef enum ltr390uv_ls_interrupts_e ltr390uv_ls_interrupts_t</definition>
        <argsstring></argsstring>
        <name>ltr390uv_ls_interrupts_t</name>
        <briefdescription>
<para>LTR390UV light source interrupts enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" line="140" column="26"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1gaf416c36c716812bdd1e7270f706cb3b9" prot="public" static="no">
        <type>struct <ref refid="structltr390uv__config__s" kindref="compound">ltr390uv_config_s</ref></type>
        <definition>typedef struct ltr390uv_config_s ltr390uv_config_t</definition>
        <argsstring></argsstring>
        <name>ltr390uv_config_t</name>
        <briefdescription>
<para>LTR390UV configuration structure. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" line="224" column="19"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1gada5ca4cc72b6a5862ecde1a9dbc0ad21" prot="public" static="no">
        <type>struct ltr390uv_context_t</type>
        <definition>typedef struct ltr390uv_context_t ltr390uv_context_t</definition>
        <argsstring></argsstring>
        <name>ltr390uv_context_t</name>
        <briefdescription>
<para>LTR390UV context structure definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" line="237" column="33" bodyfile="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" bodystart="237" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga4360ca0586c82540265c60066087511e" prot="public" static="no">
        <type>struct <ref refid="structltr390uv__context__t" kindref="compound">ltr390uv_context_t</ref> *</type>
        <definition>typedef struct ltr390uv_context_t* ltr390uv_handle_t</definition>
        <argsstring></argsstring>
        <name>ltr390uv_handle_t</name>
        <briefdescription>
<para>LTR390UV handle structure definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" line="242" column="33" bodyfile="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" bodystart="242" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga43d657a1d3a7b05732cbdbb33966fab3" prot="public" static="no">
        <type>enum <ref refid="group__drivers_1ga98bf6ef762aa82d3a01c0d42169f0224" kindref="member">max30105_adc_range_controls_e</ref></type>
        <definition>typedef enum max30105_adc_range_controls_e max30105_adc_range_controls_t</definition>
        <argsstring></argsstring>
        <name>max30105_adc_range_controls_t</name>
        <briefdescription>
<para>MAX30105 particle-sensing ADC range controls (18-bit resolution) enumerator (register 0x0a). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_max30105/include/max30105.h" line="80" column="31"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1gaab7fd56cf0d8380269eda50ce2203daf" prot="public" static="no">
        <type>enum <ref refid="group__drivers_1gaf3d372d9d9a63fe1bc8b70e59180476a" kindref="member">max30105_sample_rate_controls_e</ref></type>
        <definition>typedef enum max30105_sample_rate_controls_e max30105_sample_rate_controls_t</definition>
        <argsstring></argsstring>
        <name>max30105_sample_rate_controls_t</name>
        <briefdescription>
<para>MAX30105 particle-sensing sample rate control enumerator (register 0x0a). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_max30105/include/max30105.h" line="94" column="33"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga467ed91f3c7c5b58c2bf4cbcecdcf540" prot="public" static="no">
        <type>enum <ref refid="group__drivers_1ga0c696bd78787c0c17489d990a4a7342a" kindref="member">max30105_led_pulse_width_controls_e</ref></type>
        <definition>typedef enum max30105_led_pulse_width_controls_e max30105_led_pulse_width_controls_t</definition>
        <argsstring></argsstring>
        <name>max30105_led_pulse_width_controls_t</name>
        <briefdescription>
<para>MAX30105 LED pulse width controls enumerator (register 0x0a). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_max30105/include/max30105.h" line="104" column="37"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga6b290cee329e4df021ed1672555998b0" prot="public" static="no">
        <type>enum <ref refid="group__drivers_1gacd9ab5ee398b718652084d7527c11afd" kindref="member">max30105_control_modes_e</ref></type>
        <definition>typedef enum max30105_control_modes_e max30105_control_modes_t</definition>
        <argsstring></argsstring>
        <name>max30105_control_modes_t</name>
        <briefdescription>
<para>MAX30105 control modes enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_max30105/include/max30105.h" line="113" column="26"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga8862965873347aebec368c49876ecc04" prot="public" static="no">
        <type>enum <ref refid="group__drivers_1gad2d631b3ded4311c550b7bc4e1d97daa" kindref="member">max30105_multi_led_control_modes_e</ref></type>
        <definition>typedef enum max30105_multi_led_control_modes_e max30105_multi_led_control_modes_t</definition>
        <argsstring></argsstring>
        <name>max30105_multi_led_control_modes_t</name>
        <briefdescription>
<para>MAX30105 multi-LED control modes enumerator (registers 0x11-0x12). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_max30105/include/max30105.h" line="127" column="36"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga6bcb9c6da09821085e0ac5e9cbf47c15" prot="public" static="no">
        <type>enum <ref refid="group__drivers_1ga91713d91ba70b980968ce118b795aa86" kindref="member">max30105_led_pulse_amplitudes_e</ref></type>
        <definition>typedef enum max30105_led_pulse_amplitudes_e max30105_led_pulse_amplitudes_t</definition>
        <argsstring></argsstring>
        <name>max30105_led_pulse_amplitudes_t</name>
        <briefdescription>
<para>MAX30105 LED pulse amplitudes enumerator (registers 0x0c-0x10). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_max30105/include/max30105.h" line="141" column="33"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga4c7293592ca99025e76fc2e23044deb9" prot="public" static="no">
        <type>struct <ref refid="structmax30105__config__s" kindref="compound">max30105_config_s</ref></type>
        <definition>typedef struct max30105_config_s max30105_config_t</definition>
        <argsstring></argsstring>
        <name>max30105_config_t</name>
        <briefdescription>
<para>MAX30105 configuration structure. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_max30105/include/max30105.h" line="272" column="19"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1gabb3e7cd86fe992c4cab0bda4393181d5" prot="public" static="no">
        <type>struct max30105_context_t</type>
        <definition>typedef struct max30105_context_t max30105_context_t</definition>
        <argsstring></argsstring>
        <name>max30105_context_t</name>
        <briefdescription>
<para>MAX30105 context structure definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_max30105/include/max30105.h" line="290" column="33" bodyfile="components/peripherals/i2c/esp_max30105/include/max30105.h" bodystart="290" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga871d59246e5c9f84ce0edb737276caab" prot="public" static="no">
        <type>struct <ref refid="structmax30105__context__t" kindref="compound">max30105_context_t</ref> *</type>
        <definition>typedef struct max30105_context_t* max30105_handle_t</definition>
        <argsstring></argsstring>
        <name>max30105_handle_t</name>
        <briefdescription>
<para>MAX30105 handle structure definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_max30105/include/max30105.h" line="295" column="33" bodyfile="components/peripherals/i2c/esp_max30105/include/max30105.h" bodystart="295" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga2bd968817dd0493afe4f07ef98b8cdda" prot="public" static="no">
        <type>enum mlx90614_sensor_iirs_e</type>
        <definition>typedef enum mlx90614_sensor_iirs_e mlx90614_sensor_iirs_t</definition>
        <argsstring></argsstring>
        <name>mlx90614_sensor_iirs_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" line="81" column="24"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga5bb10b811ba32b4de700664bd4c2c85f" prot="public" static="no">
        <type>enum mlx90614_sensor_test_repeat_states_e</type>
        <definition>typedef enum mlx90614_sensor_test_repeat_states_e mlx90614_sensor_test_repeat_states_t</definition>
        <argsstring></argsstring>
        <name>mlx90614_sensor_test_repeat_states_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" line="86" column="38"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga9bc379b35d23822db3afa12f99dec1e8" prot="public" static="no">
        <type>enum mlx90614_temperature_sensors_e</type>
        <definition>typedef enum mlx90614_temperature_sensors_e mlx90614_temperature_sensors_t</definition>
        <argsstring></argsstring>
        <name>mlx90614_temperature_sensors_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" line="93" column="32"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1gae856afaf21918545908784b5ab8d94c1" prot="public" static="no">
        <type>enum mlx90614_sensor_ir_types_e</type>
        <definition>typedef enum mlx90614_sensor_ir_types_e mlx90614_sensor_ir_types_t</definition>
        <argsstring></argsstring>
        <name>mlx90614_sensor_ir_types_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" line="98" column="28"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga911f92fa947b6e2ffccae0e8f0155b4c" prot="public" static="no">
        <type>enum mlx90614_k_signs_e</type>
        <definition>typedef enum mlx90614_k_signs_e mlx90614_k_signs_t</definition>
        <argsstring></argsstring>
        <name>mlx90614_k_signs_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" line="103" column="20"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga7b8aeae3f6eb63310f3e6962baaef4e6" prot="public" static="no">
        <type>enum mlx90614_fir_values_e</type>
        <definition>typedef enum mlx90614_fir_values_e mlx90614_fir_values_t</definition>
        <argsstring></argsstring>
        <name>mlx90614_fir_values_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" line="110" column="23"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga81cb5910deedff4834e94731f8724323" prot="public" static="no">
        <type>enum ml90614_gains_e</type>
        <definition>typedef enum ml90614_gains_e ml90614_gains_t</definition>
        <argsstring></argsstring>
        <name>ml90614_gains_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" line="121" column="17"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga1d36abcfb14269bcd6c97b77bab827bc" prot="public" static="no">
        <type>enum mlx90614_nk2_signs_e</type>
        <definition>typedef enum mlx90614_nk2_signs_e mlx90614_nk2_signs_t</definition>
        <argsstring></argsstring>
        <name>mlx90614_nk2_signs_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" line="126" column="22"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga4b82d2ce4c2d3bc85dc7bcfb1bf168c1" prot="public" static="no">
        <type>enum mlx90614_sensor_test_states_e</type>
        <definition>typedef enum mlx90614_sensor_test_states_e mlx90614_sensor_test_states_t</definition>
        <argsstring></argsstring>
        <name>mlx90614_sensor_test_states_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" line="131" column="31"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1gacc4944f4bdf13aeea459a484788d5407" prot="public" static="no">
        <type>enum mlx90614_pwm_modes_e</type>
        <definition>typedef enum mlx90614_pwm_modes_e mlx90614_pwm_modes_t</definition>
        <argsstring></argsstring>
        <name>mlx90614_pwm_modes_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" line="154" column="22"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga40e20a9db420e0702abedb7ca67e85ba" prot="public" static="no">
        <type>enum mlx90614_pwm_mode_states_e</type>
        <definition>typedef enum mlx90614_pwm_mode_states_e mlx90614_pwm_mode_states_t</definition>
        <argsstring></argsstring>
        <name>mlx90614_pwm_mode_states_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" line="159" column="28"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga3c07143696cc5390835361d3d556d082" prot="public" static="no">
        <type>enum mlx90614_sda_pin_modes_e</type>
        <definition>typedef enum mlx90614_sda_pin_modes_e mlx90614_sda_pin_modes_t</definition>
        <argsstring></argsstring>
        <name>mlx90614_sda_pin_modes_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" line="164" column="26"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga2580ebab990984a1e36dbe337a2bba3b" prot="public" static="no">
        <type>enum mlx90614_thermal_modes_e</type>
        <definition>typedef enum mlx90614_thermal_modes_e mlx90614_thermal_modes_t</definition>
        <argsstring></argsstring>
        <name>mlx90614_thermal_modes_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" line="169" column="26"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga3b89cb540f8756eaa8561b0803944261" prot="public" static="no">
        <type>struct <ref refid="structmlx90614__config__s" kindref="compound">mlx90614_config_s</ref></type>
        <definition>typedef struct mlx90614_config_s mlx90614_config_t</definition>
        <argsstring></argsstring>
        <name>mlx90614_config_t</name>
        <briefdescription>
<para>MLX90614 configuration structure. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" line="209" column="19"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1gaa7222f0a99512b7b4925618ad56c9800" prot="public" static="no">
        <type>struct mlx90614_context_t</type>
        <definition>typedef struct mlx90614_context_t mlx90614_context_t</definition>
        <argsstring></argsstring>
        <name>mlx90614_context_t</name>
        <briefdescription>
<para>MLX90614 context structure definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" line="226" column="33" bodyfile="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" bodystart="226" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga5cb6e6c62eec0b78a6e74bc7d9a0c186" prot="public" static="no">
        <type>struct <ref refid="structmlx90614__context__t" kindref="compound">mlx90614_context_t</ref> *</type>
        <definition>typedef struct mlx90614_context_t* mlx90614_handle_t</definition>
        <argsstring></argsstring>
        <name>mlx90614_handle_t</name>
        <briefdescription>
<para>MLX90614 handle structure definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" line="230" column="33" bodyfile="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" bodystart="230" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga04eb0a8975116163a7527e4a3710d90d" prot="public" static="no">
        <type>enum <ref refid="group__drivers_1gaf4e61285cf550d22e9e3e3ec620410d0" kindref="member">mmc56x3_measurement_times_e</ref></type>
        <definition>typedef enum mmc56x3_measurement_times_e mmc56x3_measurement_times_t</definition>
        <argsstring></argsstring>
        <name>mmc56x3_measurement_times_t</name>
        <briefdescription>
<para>MMC56X3 measurement times enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mmc56x3/include/mmc56x3.h" line="85" column="29"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga6a8e469cb5a690f8bcb7a6163f01b490" prot="public" static="no">
        <type>enum <ref refid="group__drivers_1ga71668da0f8cf8f448a8f211da3ded77e" kindref="member">mmc56x3_measurement_samples_e</ref></type>
        <definition>typedef enum mmc56x3_measurement_samples_e mmc56x3_measurement_samples_t</definition>
        <argsstring></argsstring>
        <name>mmc56x3_measurement_samples_t</name>
        <briefdescription>
<para>MMC56X3 measurement samples enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mmc56x3/include/mmc56x3.h" line="99" column="31"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga4f12cc6fde28c182e28c53d82ebbddbb" prot="public" static="no">
        <type>struct <ref refid="structmmc56x3__magnetic__axes__data__s" kindref="compound">mmc56x3_magnetic_axes_data_s</ref></type>
        <definition>typedef struct mmc56x3_magnetic_axes_data_s mmc56x3_magnetic_axes_data_t</definition>
        <argsstring></argsstring>
        <name>mmc56x3_magnetic_axes_data_t</name>
        <briefdescription>
<para>MMC56X3 magnetic axes data structure. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mmc56x3/include/mmc56x3.h" line="169" column="30"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga6d0ea50e620e218d585d9a966d012eb2" prot="public" static="no">
        <type>struct <ref refid="structmmc56x3__selftest__axes__data__s" kindref="compound">mmc56x3_selftest_axes_data_s</ref></type>
        <definition>typedef struct mmc56x3_selftest_axes_data_s mmc56x3_selftest_axes_data_t</definition>
        <argsstring></argsstring>
        <name>mmc56x3_selftest_axes_data_t</name>
        <briefdescription>
<para>MMC56X3 self-test axes data structure. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mmc56x3/include/mmc56x3.h" line="178" column="30"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1gace8f7bf433f0bfc89754ddbfb7a7d2d3" prot="public" static="no">
        <type>struct <ref refid="structmmc56x3__config__s" kindref="compound">mmc56x3_config_s</ref></type>
        <definition>typedef struct mmc56x3_config_s mmc56x3_config_t</definition>
        <argsstring></argsstring>
        <name>mmc56x3_config_t</name>
        <briefdescription>
<para>MMC56X3 configuration structure. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mmc56x3/include/mmc56x3.h" line="191" column="18"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga306c7721699bc0c650c17044d6573cdb" prot="public" static="no">
        <type>struct mmc56x3_context_t</type>
        <definition>typedef struct mmc56x3_context_t mmc56x3_context_t</definition>
        <argsstring></argsstring>
        <name>mmc56x3_context_t</name>
        <briefdescription>
<para>MMC56X3 context structure definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mmc56x3/include/mmc56x3.h" line="205" column="32" bodyfile="components/peripherals/i2c/esp_mmc56x3/include/mmc56x3.h" bodystart="205" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1gad7010c389e7821d1ed37ec2be5341039" prot="public" static="no">
        <type>struct <ref refid="structmmc56x3__context__t" kindref="compound">mmc56x3_context_t</ref> *</type>
        <definition>typedef struct mmc56x3_context_t* mmc56x3_handle_t</definition>
        <argsstring></argsstring>
        <name>mmc56x3_handle_t</name>
        <briefdescription>
<para>MMC56X3 handle structure definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mmc56x3/include/mmc56x3.h" line="209" column="32" bodyfile="components/peripherals/i2c/esp_mmc56x3/include/mmc56x3.h" bodystart="209" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1gae6971aae6c76c396fdfa0a891d71758b" prot="public" static="no">
        <type>enum <ref refid="group__drivers_1ga60c42832aeeee03d299ed1e790f81e09" kindref="member">mpu6050_ext_sync_settings_e</ref></type>
        <definition>typedef enum mpu6050_ext_sync_settings_e mpu6050_ext_sync_settings_t</definition>
        <argsstring></argsstring>
        <name>mpu6050_ext_sync_settings_t</name>
        <briefdescription>
<para>MPU6050 external synchronization settings enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" line="89" column="29"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga66c3850a98762b956bf29752258cf1e5" prot="public" static="no">
        <type>enum <ref refid="group__drivers_1gad454686cba9d58e8e6dc020f42df7302" kindref="member">mpu6050_digital_low_pass_filters_e</ref></type>
        <definition>typedef enum mpu6050_digital_low_pass_filters_e mpu6050_digital_low_pass_filters_t</definition>
        <argsstring></argsstring>
        <name>mpu6050_digital_low_pass_filters_t</name>
        <briefdescription>
<para>MPU6050 digital low-pass filters enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" line="103" column="36"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga83b04137e3d4087b57cee9d3b03fb125" prot="public" static="no">
        <type>enum <ref refid="group__drivers_1gadc5bc45ff9daba6efbdfdd49ae8c98e1" kindref="member">mpu6050_gyro_full_scale_ranges_e</ref></type>
        <definition>typedef enum mpu6050_gyro_full_scale_ranges_e mpu6050_gyro_full_scale_ranges_t</definition>
        <argsstring></argsstring>
        <name>mpu6050_gyro_full_scale_ranges_t</name>
        <briefdescription>
<para>MPU6050 gyroscope full-scale ranges enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" line="113" column="34"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1gaccb4fe687b8e124add5341d65adffd17" prot="public" static="no">
        <type>enum <ref refid="group__drivers_1gafdfc70c10ee16636fbeb7a5ca3f0b326" kindref="member">mpu6050_accel_full_scale_ranges_e</ref></type>
        <definition>typedef enum mpu6050_accel_full_scale_ranges_e mpu6050_accel_full_scale_ranges_t</definition>
        <argsstring></argsstring>
        <name>mpu6050_accel_full_scale_ranges_t</name>
        <briefdescription>
<para>MPU6050 accelerometer full-scale ranges enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" line="123" column="35"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga4e458ffc849cd4ef563ccf541059dbc3" prot="public" static="no">
        <type>enum <ref refid="group__drivers_1gaf48aed66889785fbd5707f8b9581cec2" kindref="member">mpu6050_gyro_clock_sources_e</ref></type>
        <definition>typedef enum mpu6050_gyro_clock_sources_e mpu6050_gyro_clock_sources_t</definition>
        <argsstring></argsstring>
        <name>mpu6050_gyro_clock_sources_t</name>
        <briefdescription>
<para>MPU6050 gyroscope clock sources enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" line="137" column="30"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga9ce03e420660f6a27e4f6a4f1d773732" prot="public" static="no">
        <type>enum <ref refid="group__drivers_1ga624aac5a1a12902bf2a57fab72518e2a" kindref="member">mpu6050_low_power_wake_controls_e</ref></type>
        <definition>typedef enum mpu6050_low_power_wake_controls_e mpu6050_low_power_wake_controls_t</definition>
        <argsstring></argsstring>
        <name>mpu6050_low_power_wake_controls_t</name>
        <briefdescription>
<para>MPU6050 low-power wake controls enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" line="147" column="35"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga6bf230e9bcab449e78f7c875fbb5338f" prot="public" static="no">
        <type>enum <ref refid="group__drivers_1ga9356be1cf7df96f1b9169c94f9b71500" kindref="member">mpu6050_irq_pin_active_level_e</ref></type>
        <definition>typedef enum mpu6050_irq_pin_active_level_e mpu6050_irq_pin_active_level_t</definition>
        <argsstring></argsstring>
        <name>mpu6050_irq_pin_active_level_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" line="152" column="32"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1gae8d2b9dffb86a01285be335d14f5c00a" prot="public" static="no">
        <type>enum <ref refid="group__drivers_1ga601c0d945ccf60ff1c3c3623f7be0945" kindref="member">mpu6050_irq_pin_mode_e</ref></type>
        <definition>typedef enum mpu6050_irq_pin_mode_e mpu6050_irq_pin_mode_t</definition>
        <argsstring></argsstring>
        <name>mpu6050_irq_pin_mode_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" line="157" column="24"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga2e90898f5d135504b6244c05910675e7" prot="public" static="no">
        <type>enum <ref refid="group__drivers_1gae9ecb16db229f807a9b467af6133f84a" kindref="member">mpu6050_irq_latch_e</ref></type>
        <definition>typedef enum mpu6050_irq_latch_e mpu6050_irq_latch_t</definition>
        <argsstring></argsstring>
        <name>mpu6050_irq_latch_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" line="162" column="21"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1gac42345853231db632fad85916967efb2" prot="public" static="no">
        <type>enum <ref refid="group__drivers_1ga70edf2c072916510c87e4108451fc2e8" kindref="member">mpu6050_irq_clear_e</ref></type>
        <definition>typedef enum mpu6050_irq_clear_e mpu6050_irq_clear_t</definition>
        <argsstring></argsstring>
        <name>mpu6050_irq_clear_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" line="167" column="21"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1gaa9f0a26731db81cff4749f6f4dbbd136" prot="public" static="no">
        <type>struct <ref refid="structmpu6050__data__axes__s" kindref="compound">mpu6050_data_axes_s</ref></type>
        <definition>typedef struct mpu6050_data_axes_s mpu6050_data_axes_t</definition>
        <argsstring></argsstring>
        <name>mpu6050_data_axes_t</name>
        <briefdescription>
<para>MPU6050 raw data axes structure. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" line="379" column="21"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga1cbed61b6b5f2475c4a93fa08042d07b" prot="public" static="no">
        <type>struct <ref refid="structmpu6050__gyro__data__axes__s" kindref="compound">mpu6050_gyro_data_axes_s</ref></type>
        <definition>typedef struct mpu6050_gyro_data_axes_s mpu6050_gyro_data_axes_t</definition>
        <argsstring></argsstring>
        <name>mpu6050_gyro_data_axes_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" line="385" column="26"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1gac80d9c098cadfa910f6a961a6395db3d" prot="public" static="no">
        <type>struct <ref refid="structmpu6050__accel__data__axes__s" kindref="compound">mpu6050_accel_data_axes_s</ref></type>
        <definition>typedef struct mpu6050_accel_data_axes_s mpu6050_accel_data_axes_t</definition>
        <argsstring></argsstring>
        <name>mpu6050_accel_data_axes_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" line="391" column="27"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1gacc2428e618f61cb801ce1780931e12ef" prot="public" static="no">
        <type>struct <ref refid="structmpu6050__attitude__s" kindref="compound">mpu6050_attitude_s</ref></type>
        <definition>typedef struct mpu6050_attitude_s mpu6050_attitude_t</definition>
        <argsstring></argsstring>
        <name>mpu6050_attitude_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" line="401" column="20"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga4fd5f2a4d35a7d1fa00e158e990372f5" prot="public" static="no">
        <type>struct <ref refid="structmpu6050__config__s" kindref="compound">mpu6050_config_s</ref></type>
        <definition>typedef struct mpu6050_config_s mpu6050_config_t</definition>
        <argsstring></argsstring>
        <name>mpu6050_config_t</name>
        <briefdescription>
<para>MPU6050 configuration structure definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" line="418" column="18"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga54134ab0bd012c4cbabf9ea5def06a77" prot="public" static="no">
        <type>struct mpu6050_context_t</type>
        <definition>typedef struct mpu6050_context_t mpu6050_context_t</definition>
        <argsstring></argsstring>
        <name>mpu6050_context_t</name>
        <briefdescription>
<para>MPU6050 context structure definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" line="433" column="32" bodyfile="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" bodystart="433" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga3f041319af2d0918869a8e0895f074a1" prot="public" static="no">
        <type>struct <ref refid="structmpu6050__context__t" kindref="compound">mpu6050_context_t</ref> *</type>
        <definition>typedef struct mpu6050_context_t* mpu6050_handle_t</definition>
        <argsstring></argsstring>
        <name>mpu6050_handle_t</name>
        <briefdescription>
<para>MPU6050 handle structure definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" line="438" column="32" bodyfile="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" bodystart="438" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga924de93352178878008b66bf0bbbceb7" prot="public" static="no">
        <type>gpio_isr_t</type>
        <definition>typedef gpio_isr_t mpu6050_isr_t</definition>
        <argsstring></argsstring>
        <name>mpu6050_isr_t</name>
        <briefdescription>
<para>MPU6050 interrupt service routine definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" line="443" column="20" bodyfile="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" bodystart="443" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1gab2c506f07b7bddbd098b2088b8dd7588" prot="public" static="no">
        <type>enum <ref refid="group__drivers_1ga172a041d0029789cda43731ae5d58411" kindref="member">sgp4x_versions_e</ref></type>
        <definition>typedef enum sgp4x_versions_e sgp4x_versions_t</definition>
        <argsstring></argsstring>
        <name>sgp4x_versions_t</name>
        <briefdescription>
<para>SGP4X versions enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_sgp4x/include/sgp4x.h" line="74" column="18"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1gab95ea1d287fff9ab6baf42f3c99b0a9b" prot="public" static="no">
        <type>struct sgp4x_context_t</type>
        <definition>typedef struct sgp4x_context_t sgp4x_context_t</definition>
        <argsstring></argsstring>
        <name>sgp4x_context_t</name>
        <briefdescription>
<para>SGP4X context structure definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_sgp4x/include/sgp4x.h" line="109" column="30" bodyfile="components/peripherals/i2c/esp_sgp4x/include/sgp4x.h" bodystart="109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1gac40d2deb3fe0027ff3588c50d583b0cd" prot="public" static="no">
        <type>struct <ref refid="structsgp4x__context__t" kindref="compound">sgp4x_context_t</ref> *</type>
        <definition>typedef struct sgp4x_context_t* sgp4x_handle_t</definition>
        <argsstring></argsstring>
        <name>sgp4x_handle_t</name>
        <briefdescription>
<para>SGP4X handle structure definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_sgp4x/include/sgp4x.h" line="114" column="30" bodyfile="components/peripherals/i2c/esp_sgp4x/include/sgp4x.h" bodystart="114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga172b07afab8f75e7f52efe0e5669461a" prot="public" static="no">
        <type>enum <ref refid="group__drivers_1gabdae5ef8438d30d79eb2d817cff393f5" kindref="member">sht4x_heater_modes_e</ref></type>
        <definition>typedef enum sht4x_heater_modes_e sht4x_heater_modes_t</definition>
        <argsstring></argsstring>
        <name>sht4x_heater_modes_t</name>
        <briefdescription>
<para>SHT4X measurement heater modes enumerator definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_sht4x/include/sht4x.h" line="112" column="22"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1gaa3ca8d58b6772111c2fe9b2714691e74" prot="public" static="no">
        <type>enum <ref refid="group__drivers_1ga4302f128b226e236bedc8d9347c6c0db" kindref="member">sht4x_repeat_modes_e</ref></type>
        <definition>typedef enum sht4x_repeat_modes_e sht4x_repeat_modes_t</definition>
        <argsstring></argsstring>
        <name>sht4x_repeat_modes_t</name>
        <briefdescription>
<para>SHT4X measurement repeatability modes enumerator definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_sht4x/include/sht4x.h" line="121" column="22"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga5ca6e3df86dcbbba4a2a65014de70423" prot="public" static="no">
        <type>struct <ref refid="structsht4x__config__s" kindref="compound">sht4x_config_s</ref></type>
        <definition>typedef struct sht4x_config_s sht4x_config_t</definition>
        <argsstring></argsstring>
        <name>sht4x_config_t</name>
        <briefdescription>
<para>SHT4X configuration structure definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_sht4x/include/sht4x.h" line="131" column="16"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga5706addb9fe9e48c36c0374fc2ac4bdd" prot="public" static="no">
        <type>struct sht4x_context_t</type>
        <definition>typedef struct sht4x_context_t sht4x_context_t</definition>
        <argsstring></argsstring>
        <name>sht4x_context_t</name>
        <briefdescription>
<para>SHT4X context structure definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_sht4x/include/sht4x.h" line="146" column="30" bodyfile="components/peripherals/i2c/esp_sht4x/include/sht4x.h" bodystart="146" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1gadc26551d1aa695a4d05c3912bd035b8a" prot="public" static="no">
        <type>struct <ref refid="structsht4x__context__t" kindref="compound">sht4x_context_t</ref> *</type>
        <definition>typedef struct sht4x_context_t* sht4x_handle_t</definition>
        <argsstring></argsstring>
        <name>sht4x_handle_t</name>
        <briefdescription>
<para>SHT4X handle structure definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_sht4x/include/sht4x.h" line="151" column="31" bodyfile="components/peripherals/i2c/esp_sht4x/include/sht4x.h" bodystart="151" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga836c705453828cd65340e8e2624a3de5" prot="public" static="no">
        <type>enum <ref refid="group__drivers_1gabdd2dcaa53dee72cf9aa359046c84532" kindref="member">ssd1306_scroll_frames_e</ref></type>
        <definition>typedef enum ssd1306_scroll_frames_e ssd1306_scroll_frames_t</definition>
        <argsstring></argsstring>
        <name>ssd1306_scroll_frames_t</name>
        <briefdescription>
<para>SSD1306 scroll step in terms of frame frequency enumerator definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" line="130" column="25"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1gaf8e3e2280d538ecfec1f53095ec54847" prot="public" static="no">
        <type>enum <ref refid="group__drivers_1gad20fb783c2b062540932c223746bdf04" kindref="member">ssd1306_scroll_types_e</ref></type>
        <definition>typedef enum ssd1306_scroll_types_e ssd1306_scroll_types_t</definition>
        <argsstring></argsstring>
        <name>ssd1306_scroll_types_t</name>
        <briefdescription>
<para>SSD1306 scroll types enumerator definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" line="142" column="24"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1gad6091a399ddc3b3655a001590c678a50" prot="public" static="no">
        <type>enum <ref refid="group__drivers_1ga85941c2a1b9163f4a70e01778f7026e5" kindref="member">ssd1306_panel_sizes_e</ref></type>
        <definition>typedef enum ssd1306_panel_sizes_e ssd1306_panel_sizes_t</definition>
        <argsstring></argsstring>
        <name>ssd1306_panel_sizes_t</name>
        <briefdescription>
<para>SSD1306 panel sizes enumerator definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" line="152" column="23"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga80b45fc2a0d42716012f7ed8efcb02bb" prot="public" static="no">
        <type>struct <ref refid="structssd1306__page__s" kindref="compound">ssd1306_page_s</ref></type>
        <definition>typedef struct ssd1306_page_s ssd1306_page_t</definition>
        <argsstring></argsstring>
        <name>ssd1306_page_t</name>
        <briefdescription>
<para>SSD1306 page structure definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" line="159" column="16"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1gaff4705a429ede4e139d7ed0ff2c8b6d5" prot="public" static="no">
        <type>struct <ref refid="structssd1306__panel__s" kindref="compound">ssd1306_panel_s</ref></type>
        <definition>typedef struct ssd1306_panel_s ssd1306_panel_t</definition>
        <argsstring></argsstring>
        <name>ssd1306_panel_t</name>
        <briefdescription>
<para>SSD1306 panel structure definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" line="169" column="17"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga186675dfec5f35aaec36d35275c50432" prot="public" static="no">
        <type>struct <ref refid="structssd1306__bdf__font__s" kindref="compound">ssd1306_bdf_font_s</ref></type>
        <definition>typedef struct ssd1306_bdf_font_s ssd1306_bdf_font_t</definition>
        <argsstring></argsstring>
        <name>ssd1306_bdf_font_t</name>
        <briefdescription>
<para>SSD1306 BDF font structure definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" line="184" column="20"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1gac71b91b4b58813d41ceba1ac27ef9214" prot="public" static="no">
        <type>struct <ref refid="structssd1306__config__s" kindref="compound">ssd1306_config_s</ref></type>
        <definition>typedef struct ssd1306_config_s ssd1306_config_t</definition>
        <argsstring></argsstring>
        <name>ssd1306_config_t</name>
        <briefdescription>
<para>SSD1306 configuration structure definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" line="196" column="18"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga8366b1895b5cf6f409d492fbdbd28197" prot="public" static="no">
        <type>struct ssd1306_context_t</type>
        <definition>typedef struct ssd1306_context_t ssd1306_context_t</definition>
        <argsstring></argsstring>
        <name>ssd1306_context_t</name>
        <briefdescription>
<para>SSD1306 context structure definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" line="217" column="32" bodyfile="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" bodystart="217" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1gad00aae97f6e6ed7273b46e4b955d89bb" prot="public" static="no">
        <type>struct <ref refid="structssd1306__context__t" kindref="compound">ssd1306_context_t</ref> *</type>
        <definition>typedef struct ssd1306_context_t* ssd1306_handle_t</definition>
        <argsstring></argsstring>
        <name>ssd1306_handle_t</name>
        <briefdescription>
<para>SSD1306 handle stucture definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" line="222" column="33" bodyfile="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" bodystart="222" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga4830be2c679b256ac53104be90a614b4" prot="public" static="no">
        <type>enum <ref refid="group__drivers_1gaf6cb02afbfe93b9fac415a1f80f250f4" kindref="member">tbi2cxxx_types_e</ref></type>
        <definition>typedef enum tbi2cxxx_types_e tbi2cxxx_types_t</definition>
        <argsstring></argsstring>
        <name>tbi2cxxx_types_t</name>
        <briefdescription>
<para>TBI2CXXX types enumerators. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_tbi2cxxx/include/tbi2cxxx.h" line="80" column="18"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1gaa2c53e981afa7e2c33a020a1463a9f63" prot="public" static="no">
        <type>struct <ref refid="structtbi2cxxx__config__s" kindref="compound">tbi2cxxx_config_s</ref></type>
        <definition>typedef struct tbi2cxxx_config_s tbi2cxxx_config_t</definition>
        <argsstring></argsstring>
        <name>tbi2cxxx_config_t</name>
        <briefdescription>
<para>TBI2CXXX configuration structure. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_tbi2cxxx/include/tbi2cxxx.h" line="90" column="19"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga7c2dfb8c7742a4d9a3b8c769f0f7e0fa" prot="public" static="no">
        <type>struct tbi2cxxx_context_t</type>
        <definition>typedef struct tbi2cxxx_context_t tbi2cxxx_context_t</definition>
        <argsstring></argsstring>
        <name>tbi2cxxx_context_t</name>
        <briefdescription>
<para>TBI2CXXX context structure definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_tbi2cxxx/include/tbi2cxxx.h" line="103" column="33" bodyfile="components/peripherals/i2c/esp_tbi2cxxx/include/tbi2cxxx.h" bodystart="103" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1gae94ca8f4dde9ba65a809b2482ac7ee39" prot="public" static="no">
        <type>struct <ref refid="structtbi2cxxx__context__t" kindref="compound">tbi2cxxx_context_t</ref> *</type>
        <definition>typedef struct tbi2cxxx_context_t* tbi2cxxx_handle_t</definition>
        <argsstring></argsstring>
        <name>tbi2cxxx_handle_t</name>
        <briefdescription>
<para>TBI2CXXX handle structure definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_tbi2cxxx/include/tbi2cxxx.h" line="108" column="33" bodyfile="components/peripherals/i2c/esp_tbi2cxxx/include/tbi2cxxx.h" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga02db763e5747b105f9e52eacb812b95e" prot="public" static="no">
        <type>enum <ref refid="group__drivers_1ga43330b906b500291d79752f60652555d" kindref="member">tlv493d_power_modes_e</ref></type>
        <definition>typedef enum tlv493d_power_modes_e tlv493d_power_modes_t</definition>
        <argsstring></argsstring>
        <name>tlv493d_power_modes_t</name>
        <briefdescription>
<para>TLV493D power modes enumerator. </para>
        </briefdescription>
        <detaileddescription>
<para>Fast, Low Power, Low Power Period, Measurement Time </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_tlv493d/include/tlv493d.h" line="81" column="23"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga38099431745f98ecb45e97a48e95354f" prot="public" static="no">
        <type>enum <ref refid="group__drivers_1ga8a1c2496b7b3fa516317908155db1508" kindref="member">tlv493d_channel_conversions_e</ref></type>
        <definition>typedef enum tlv493d_channel_conversions_e tlv493d_channel_conversions_t</definition>
        <argsstring></argsstring>
        <name>tlv493d_channel_conversions_t</name>
        <briefdescription>
<para>TLV493D channel conversations enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_tlv493d/include/tlv493d.h" line="91" column="31"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1gaa476e735b76d51c1cf315acadc5224e0" prot="public" static="no">
        <type>enum <ref refid="group__drivers_1ga81ff587a2eccd15913024e248e774309" kindref="member">tlv493d_i2c_addresses_e</ref></type>
        <definition>typedef enum tlv493d_i2c_addresses_e tlv493d_i2c_addresses_t</definition>
        <argsstring></argsstring>
        <name>tlv493d_i2c_addresses_t</name>
        <briefdescription>
<para>TLV493D addresses for slaves enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_tlv493d/include/tlv493d.h" line="101" column="25"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1gabbdc9914456cb4111ff59a09fe48a6d4" prot="public" static="no">
        <type>enum <ref refid="group__drivers_1ga86b1342fde57c461ca1223323b8a3a49" kindref="member">tlv493d_low_power_periods_e</ref></type>
        <definition>typedef enum tlv493d_low_power_periods_e tlv493d_low_power_periods_t</definition>
        <argsstring></argsstring>
        <name>tlv493d_low_power_periods_t</name>
        <briefdescription>
<para>TLV493D low power periods enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_tlv493d/include/tlv493d.h" line="109" column="29"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga045be470f3f6742d429efbee2444f60c" prot="public" static="no">
        <type>struct <ref refid="structtlv493d__raw__data__s" kindref="compound">tlv493d_raw_data_s</ref></type>
        <definition>typedef struct tlv493d_raw_data_s tlv493d_data_signal_t</definition>
        <argsstring></argsstring>
        <name>tlv493d_data_signal_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_tlv493d/include/tlv493d.h" line="228" column="23"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1gacf4d9b4cbe70a3d77085b259842b1574" prot="public" static="no">
        <type>struct <ref refid="structtlv493d__data__s" kindref="compound">tlv493d_data_s</ref></type>
        <definition>typedef struct tlv493d_data_s tlv493d_data_t</definition>
        <argsstring></argsstring>
        <name>tlv493d_data_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_tlv493d/include/tlv493d.h" line="236" column="16"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga93552d2492ff661b95f1b0b8171d46da" prot="public" static="no">
        <type>struct <ref refid="structtlv493d__config__s" kindref="compound">tlv493d_config_s</ref></type>
        <definition>typedef struct tlv493d_config_s tlv493d_config_t</definition>
        <argsstring></argsstring>
        <name>tlv493d_config_t</name>
        <briefdescription>
<para>TLV493D configuration structure. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_tlv493d/include/tlv493d.h" line="249" column="18"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1gac2c0e0351b825e8899fdc4d9af90f0d2" prot="public" static="no">
        <type>struct tlv493d_context_t</type>
        <definition>typedef struct tlv493d_context_t tlv493d_context_t</definition>
        <argsstring></argsstring>
        <name>tlv493d_context_t</name>
        <briefdescription>
<para>TLV493D context structure definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_tlv493d/include/tlv493d.h" line="265" column="32" bodyfile="components/peripherals/i2c/esp_tlv493d/include/tlv493d.h" bodystart="265" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga74d5bbe8e6492b2ba70d8f9849e31bad" prot="public" static="no">
        <type>struct <ref refid="structtlv493d__context__t" kindref="compound">tlv493d_context_t</ref> *</type>
        <definition>typedef struct tlv493d_context_t* tlv493d_handle_t</definition>
        <argsstring></argsstring>
        <name>tlv493d_handle_t</name>
        <briefdescription>
<para>TLV493D handle structure definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_tlv493d/include/tlv493d.h" line="270" column="32" bodyfile="components/peripherals/i2c/esp_tlv493d/include/tlv493d.h" bodystart="270" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga965474f5a3cc90e59052034af367a774" prot="public" static="no">
        <type>enum <ref refid="group__drivers_1gabf4fab025b920a1b4a67341f19269084" kindref="member">veml6040_integration_times_e</ref></type>
        <definition>typedef enum veml6040_integration_times_e veml6040_integration_times_t</definition>
        <argsstring></argsstring>
        <name>veml6040_integration_times_t</name>
        <briefdescription>
<para>VEML6040 integration times enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_veml6040/include/veml6040.h" line="98" column="30"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga80b746ffca4da5b50952601d10cce4a8" prot="public" static="no">
        <type>enum <ref refid="group__drivers_1ga58f992449473ea7be7328a63b3125334" kindref="member">veml6040_triggers_e</ref></type>
        <definition>typedef enum veml6040_triggers_e veml6040_triggers_t</definition>
        <argsstring></argsstring>
        <name>veml6040_triggers_t</name>
        <briefdescription>
<para>VEML6040 triggers enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_veml6040/include/veml6040.h" line="106" column="21"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga9d3ce83e852049877f395e14bc449799" prot="public" static="no">
        <type>enum <ref refid="group__drivers_1ga0e4af5e35aa466da691135e807831e4b" kindref="member">veml6040_modes_e</ref></type>
        <definition>typedef enum veml6040_modes_e veml6040_modes_t</definition>
        <argsstring></argsstring>
        <name>veml6040_modes_t</name>
        <briefdescription>
<para>VEML6040 modes enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_veml6040/include/veml6040.h" line="114" column="18"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1gad40ef4055e142e70775987b4dcc2babd" prot="public" static="no">
        <type>struct <ref refid="structveml6040__config__s" kindref="compound">veml6040_config_s</ref></type>
        <definition>typedef struct veml6040_config_s veml6040_config_t</definition>
        <argsstring></argsstring>
        <name>veml6040_config_t</name>
        <briefdescription>
<para>VEML6040 configuration structure. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_veml6040/include/veml6040.h" line="142" column="19"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1gac0f1c12a8381f111bdc8912a8d477b11" prot="public" static="no">
        <type>struct veml6040_context_t</type>
        <definition>typedef struct veml6040_context_t veml6040_context_t</definition>
        <argsstring></argsstring>
        <name>veml6040_context_t</name>
        <briefdescription>
<para>VEML6040 context structure definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_veml6040/include/veml6040.h" line="155" column="33" bodyfile="components/peripherals/i2c/esp_veml6040/include/veml6040.h" bodystart="155" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga5138a917680071ae02ee47c3caa2a447" prot="public" static="no">
        <type>struct <ref refid="structveml6040__context__t" kindref="compound">veml6040_context_t</ref> *</type>
        <definition>typedef struct veml6040_context_t* veml6040_handle_t</definition>
        <argsstring></argsstring>
        <name>veml6040_handle_t</name>
        <briefdescription>
<para>VEML6040 handle structure definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_veml6040/include/veml6040.h" line="160" column="33" bodyfile="components/peripherals/i2c/esp_veml6040/include/veml6040.h" bodystart="160" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga147216bbdea3f623352b8f1e4f65a88e" prot="public" static="no">
        <type>enum <ref refid="group__drivers_1gafa58f8a71ae5eef80d07b8fcf7b2cfde" kindref="member">veml7700_gains_e</ref></type>
        <definition>typedef enum veml7700_gains_e veml7700_gains_t</definition>
        <argsstring></argsstring>
        <name>veml7700_gains_t</name>
        <briefdescription>
<para>VEML7700 gains enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_veml7700/include/veml7700.h" line="89" column="18"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1gafac680c13034d3d5f1a9c422f9e7cbfa" prot="public" static="no">
        <type>enum <ref refid="group__drivers_1gadcd6105390bfa71aefb8729e525e499d" kindref="member">veml7700_integration_times_e</ref></type>
        <definition>typedef enum veml7700_integration_times_e veml7700_integration_times_t</definition>
        <argsstring></argsstring>
        <name>veml7700_integration_times_t</name>
        <briefdescription>
<para>VEML7700 integration times enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_veml7700/include/veml7700.h" line="101" column="30"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1gaeeb143d2beee98ad2a2ff5c989edb913" prot="public" static="no">
        <type>enum <ref refid="group__drivers_1ga9601a985c2253bf3aa279a4d28c2bdda" kindref="member">veml7700_persistence_protections_e</ref></type>
        <definition>typedef enum veml7700_persistence_protections_e veml7700_persistence_protections_t</definition>
        <argsstring></argsstring>
        <name>veml7700_persistence_protections_t</name>
        <briefdescription>
<para>VEML7700 persistence protections enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_veml7700/include/veml7700.h" line="111" column="36"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1gad31166a451080a6684c80980ade4a1f4" prot="public" static="no">
        <type>enum <ref refid="group__drivers_1gacaed454ccb717d5cbabc902938c4abd1" kindref="member">veml7700_power_saving_modes_e</ref></type>
        <definition>typedef enum veml7700_power_saving_modes_e veml7700_power_saving_modes_t</definition>
        <argsstring></argsstring>
        <name>veml7700_power_saving_modes_t</name>
        <briefdescription>
<para>VEML7700 power saving modes enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_veml7700/include/veml7700.h" line="121" column="31"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga7d53219e1d496e47e273799a4c34cd97" prot="public" static="no">
        <type>struct <ref refid="structveml7700__config__s" kindref="compound">veml7700_config_s</ref></type>
        <definition>typedef struct veml7700_config_s veml7700_config_t</definition>
        <argsstring></argsstring>
        <name>veml7700_config_t</name>
        <briefdescription>
<para>VEML7700 device configuration structure. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_veml7700/include/veml7700.h" line="215" column="19"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga206ddf04736f5390439b35d66c84faec" prot="public" static="no">
        <type>struct veml7700_context_t</type>
        <definition>typedef struct veml7700_context_t veml7700_context_t</definition>
        <argsstring></argsstring>
        <name>veml7700_context_t</name>
        <briefdescription>
<para>VEML7700 context structure definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_veml7700/include/veml7700.h" line="230" column="33" bodyfile="components/peripherals/i2c/esp_veml7700/include/veml7700.h" bodystart="230" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga15f981acc0edb18aed9c141c822210e8" prot="public" static="no">
        <type>struct <ref refid="structveml7700__context__t" kindref="compound">veml7700_context_t</ref> *</type>
        <definition>typedef struct veml7700_context_t* veml7700_handle_t</definition>
        <argsstring></argsstring>
        <name>veml7700_handle_t</name>
        <briefdescription>
<para>VEML7700 handle structure definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_veml7700/include/veml7700.h" line="235" column="33" bodyfile="components/peripherals/i2c/esp_veml7700/include/veml7700.h" bodystart="235" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga622b32418d99b0ae4feaf2e955f7a0f8" prot="public" static="no">
        <type>enum <ref refid="group__drivers_1gacf07a98756a425197bfab93e4d170eac" kindref="member">ds18b20_resolutions_e</ref></type>
        <definition>typedef enum ds18b20_resolutions_e ds18b20_resolutions_t</definition>
        <argsstring></argsstring>
        <name>ds18b20_resolutions_t</name>
        <briefdescription>
<para>DS18B20 supported resolutions enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/owb/esp_ds18b20/include/ds18b20.h" line="79" column="23"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1gaf0a7fbdb7b61aa0636778a6f5e22ce68" prot="public" static="no">
        <type>struct <ref refid="structds18b20__config__s" kindref="compound">ds18b20_config_s</ref></type>
        <definition>typedef struct ds18b20_config_s ds18b20_config_t</definition>
        <argsstring></argsstring>
        <name>ds18b20_config_t</name>
        <briefdescription>
<para>DS18B20 device configuration structure. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/owb/esp_ds18b20/include/ds18b20.h" line="116" column="18"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga5f45d3221c872f27577d7ab8294474bd" prot="public" static="no">
        <type>struct ds18b20_context_t</type>
        <definition>typedef struct ds18b20_context_t ds18b20_context_t</definition>
        <argsstring></argsstring>
        <name>ds18b20_context_t</name>
        <briefdescription>
<para>DS18B20 context structure definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/owb/esp_ds18b20/include/ds18b20.h" line="130" column="32" bodyfile="components/peripherals/owb/esp_ds18b20/include/ds18b20.h" bodystart="130" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1gaa0631d921e9f741ba8c1cd3696723ba6" prot="public" static="no">
        <type>struct <ref refid="structds18b20__context__t" kindref="compound">ds18b20_context_t</ref> *</type>
        <definition>typedef struct ds18b20_context_t* ds18b20_handle_t</definition>
        <argsstring></argsstring>
        <name>ds18b20_handle_t</name>
        <briefdescription>
<para>DS18B20 handle structure definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/owb/esp_ds18b20/include/ds18b20.h" line="135" column="32" bodyfile="components/peripherals/owb/esp_ds18b20/include/ds18b20.h" bodystart="135" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1gac3083b69c7df4abfe2ee7e528fe0e65e" prot="public" static="no">
        <type>struct spi_max31865_t</type>
        <definition>typedef struct spi_max31865_t spi_max31865_t</definition>
        <argsstring></argsstring>
        <name>spi_max31865_t</name>
        <briefdescription>
<para>MAX31865 SPI device structure definitions. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/spi/esp_max31865/max31865.h" line="165" column="29" bodyfile="components/peripherals/spi/esp_max31865/max31865.h" bodystart="165" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1gab7de7aa3b7f22bb305271068cd193f6f" prot="public" static="no">
        <type>struct <ref refid="structspi__max31865__t" kindref="compound">spi_max31865_t</ref> *</type>
        <definition>typedef struct spi_max31865_t* spi_max31865_handle_t</definition>
        <argsstring></argsstring>
        <name>spi_max31865_handle_t</name>
        <briefdescription>
<para>MAX31865 SPI device handle structure. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/spi/esp_max31865/max31865.h" line="170" column="29" bodyfile="components/peripherals/spi/esp_max31865/max31865.h" bodystart="170" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga6bb009d09ad1eda55a1a49e1f3271921" prot="public" static="no">
        <type>enum <ref refid="group__drivers_1ga7c19f6649ac85eab8edb7dd5a4377816" kindref="member">datatable_event_types_tag</ref></type>
        <definition>typedef enum datatable_event_types_tag datatable_event_types_t</definition>
        <argsstring></argsstring>
        <name>datatable_event_types_t</name>
        <briefdescription>
<para>Data-table event types enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/storage/esp_datalogger/include/datatable.h" line="88" column="25"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1gafea26979a663f28e185180413d2a0657" prot="public" static="no">
        <type>enum <ref refid="group__drivers_1gaf718dc8c4c330cd71f59550b5cb469af" kindref="member">datatable_data_storage_types_tag</ref></type>
        <definition>typedef enum datatable_data_storage_types_tag datatable_data_storage_types_t</definition>
        <argsstring></argsstring>
        <name>datatable_data_storage_types_t</name>
        <briefdescription>
<para>Data-table data storage-types enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/storage/esp_datalogger/include/datatable.h" line="97" column="32"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga487a0c36cd9fb41c6e507bb73f850d48" prot="public" static="no">
        <type>enum <ref refid="group__drivers_1ga6e629cedb8ec22b387bc6b930698bb08" kindref="member">datatable_column_process_types_tag</ref></type>
        <definition>typedef enum datatable_column_process_types_tag datatable_column_process_types_t</definition>
        <argsstring></argsstring>
        <name>datatable_column_process_types_t</name>
        <briefdescription>
<para>Data-table column statistical process-types enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/storage/esp_datalogger/include/datatable.h" line="109" column="34"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga99852941e2ac190b9cb243918bb56cbe" prot="public" static="no">
        <type>enum <ref refid="group__drivers_1ga48dcf880194f2d005e1fcaa1f6aeb363" kindref="member">datatable_column_data_types_tag</ref></type>
        <definition>typedef enum datatable_column_data_types_tag datatable_column_data_types_t</definition>
        <argsstring></argsstring>
        <name>datatable_column_data_types_t</name>
        <briefdescription>
<para>Data-table column data-types enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/storage/esp_datalogger/include/datatable.h" line="122" column="31"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1gaeda2d59cb27fb56357d98ba4335156ae" prot="public" static="no">
        <type>struct <ref refid="structdatatable__event__tag" kindref="compound">datatable_event_tag</ref></type>
        <definition>typedef struct datatable_event_tag datatable_event_t</definition>
        <argsstring></argsstring>
        <name>datatable_event_t</name>
        <briefdescription>
<para>Data-table event structure. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/storage/esp_datalogger/include/datatable.h" line="132" column="19"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1gae397b383bdf6cba570a50642a798b17b" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* datatable_event) (void *handle, datatable_event_t)</definition>
        <argsstring>)(void *handle, datatable_event_t)</argsstring>
        <name>datatable_event</name>
        <briefdescription>
<para>Data-logger event. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/storage/esp_datalogger/include/datatable.h" line="138" column="9" bodyfile="components/storage/esp_datalogger/include/datatable.h" bodystart="138" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1gae3784df766248feae0c4317018d7e0af" prot="public" static="no">
        <type>struct <ref refid="structdatatable__id__column__data__type__tag" kindref="compound">datatable_id_column_data_type_tag</ref></type>
        <definition>typedef struct datatable_id_column_data_type_tag datatable_id_column_data_type_t</definition>
        <argsstring></argsstring>
        <name>datatable_id_column_data_type_t</name>
        <briefdescription>
<para>Data-table record identifier column data-type structure. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/storage/esp_datalogger/include/datatable.h" line="145" column="33"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1gaf6b323c1059f6a637a19a773b1b35aca" prot="public" static="no">
        <type>struct <ref refid="structdatatable__ts__column__data__type__tag" kindref="compound">datatable_ts_column_data_type_tag</ref></type>
        <definition>typedef struct datatable_ts_column_data_type_tag datatable_ts_column_data_type_t</definition>
        <argsstring></argsstring>
        <name>datatable_ts_column_data_type_t</name>
        <briefdescription>
<para>Data-table record timestamp (utc) column data-type structure. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/storage/esp_datalogger/include/datatable.h" line="152" column="33"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1gaf22960c594220872d4ffba635f2ed885" prot="public" static="no">
        <type>struct <ref refid="structdatatable__vector__column__data__type__tag" kindref="compound">datatable_vector_column_data_type_tag</ref></type>
        <definition>typedef struct datatable_vector_column_data_type_tag datatable_vector_column_data_type_t</definition>
        <argsstring></argsstring>
        <name>datatable_vector_column_data_type_t</name>
        <briefdescription>
<para>Data-table vector data-type column structure. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/storage/esp_datalogger/include/datatable.h" line="161" column="37"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1gad65b0416634f3f308e459cb86245364a" prot="public" static="no">
        <type>struct <ref refid="structdatatable__bool__column__data__type__tag" kindref="compound">datatable_bool_column_data_type_tag</ref></type>
        <definition>typedef struct datatable_bool_column_data_type_tag datatable_bool_column_data_type_t</definition>
        <argsstring></argsstring>
        <name>datatable_bool_column_data_type_t</name>
        <briefdescription>
<para>Data-table bool data-type column structure. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/storage/esp_datalogger/include/datatable.h" line="168" column="35"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga91ce526b12f2b7685d7c29ac5e85b2b7" prot="public" static="no">
        <type>struct <ref refid="structdatatable__float__column__data__type__tag" kindref="compound">datatable_float_column_data_type_tag</ref></type>
        <definition>typedef struct datatable_float_column_data_type_tag datatable_float_column_data_type_t</definition>
        <argsstring></argsstring>
        <name>datatable_float_column_data_type_t</name>
        <briefdescription>
<para>Data-table float data-type column structure. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/storage/esp_datalogger/include/datatable.h" line="176" column="36"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga65022271d03b52fb6fb744ae2a89b4bf" prot="public" static="no">
        <type>struct <ref refid="structdatatable__fp16__column__data__type__tag" kindref="compound">datatable_fp16_column_data_type_tag</ref></type>
        <definition>typedef struct datatable_fp16_column_data_type_tag datatable_fp16_column_data_type_t</definition>
        <argsstring></argsstring>
        <name>datatable_fp16_column_data_type_t</name>
        <briefdescription>
<para>Data-table float 16-bit data-type column structure. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/storage/esp_datalogger/include/datatable.h" line="184" column="35"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1gaa5748e9b1c8d28ccb97cb0987271a644" prot="public" static="no">
        <type>struct <ref refid="structdatatable__int16__column__data__type__tag" kindref="compound">datatable_int16_column_data_type_tag</ref></type>
        <definition>typedef struct datatable_int16_column_data_type_tag datatable_int16_column_data_type_t</definition>
        <argsstring></argsstring>
        <name>datatable_int16_column_data_type_t</name>
        <briefdescription>
<para>Data-table int16 data-type column structure. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/storage/esp_datalogger/include/datatable.h" line="192" column="36"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga4cab61e7d0a437c5256a034e1ac012ad" prot="public" static="no">
        <type>struct <ref refid="structdatatable__column__name__tag" kindref="compound">datatable_column_name_tag</ref></type>
        <definition>typedef struct datatable_column_name_tag datatable_column_name_t</definition>
        <argsstring></argsstring>
        <name>datatable_column_name_t</name>
        <briefdescription>
<para>Data-table column name structure. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/storage/esp_datalogger/include/datatable.h" line="199" column="25"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga5d1a7ffc0777ec12780e576d0a3a4e95" prot="public" static="no">
        <type>struct <ref refid="structdatatable__column__tag" kindref="compound">datatable_column_tag</ref></type>
        <definition>typedef struct datatable_column_tag datatable_column_t</definition>
        <argsstring></argsstring>
        <name>datatable_column_t</name>
        <briefdescription>
<para>Data-table column structure. The data-table record identifier and timestamp columns are created by default when the data-table is created. The record identifier and record timestamp data-types are excluded from data processing. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/storage/esp_datalogger/include/datatable.h" line="209" column="20"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga1b4136f3a54eecfa26399e3ad68c340d" prot="public" static="no">
        <type>struct <ref refid="structdatatable__process__tag" kindref="compound">datatable_process_tag</ref></type>
        <definition>typedef struct datatable_process_tag datatable_process_t</definition>
        <argsstring></argsstring>
        <name>datatable_process_t</name>
        <briefdescription>
<para>Data-table process structure. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/storage/esp_datalogger/include/datatable.h" line="218" column="21"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga58b94d6f9e1be1eaf4584002e1905058" prot="public" static="no">
        <type>union <ref refid="uniondatatable__buffer__tag" kindref="compound">datatable_buffer_tag</ref></type>
        <definition>typedef union datatable_buffer_tag datatable_buffer_t</definition>
        <argsstring></argsstring>
        <name>datatable_buffer_t</name>
        <briefdescription>
<para>Data-table buffer union structure. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/storage/esp_datalogger/include/datatable.h" line="228" column="20"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1gafdf46b5183ba6678a79453181aff427c" prot="public" static="no">
        <type>union <ref refid="uniondatatable__row__data__column__tag" kindref="compound">datatable_row_data_column_tag</ref></type>
        <definition>typedef union datatable_row_data_column_tag datatable_row_data_column_t</definition>
        <argsstring></argsstring>
        <name>datatable_row_data_column_t</name>
        <briefdescription>
<para>Data-table row data column structure. This structure is a data model that represents data storage of the record based on the data-table&apos;s column column data-type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/storage/esp_datalogger/include/datatable.h" line="242" column="29"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga9dff1bcb1f19fd9373a9662c6131d340" prot="public" static="no">
        <type>struct <ref refid="structdatatable__row__tag" kindref="compound">datatable_row_tag</ref></type>
        <definition>typedef struct datatable_row_tag datatable_row_t</definition>
        <argsstring></argsstring>
        <name>datatable_row_t</name>
        <briefdescription>
<para>Data-table row structure. This structure is a data model that represents data storage of record by data-table row and configured data-table columns. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/storage/esp_datalogger/include/datatable.h" line="250" column="17"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga25f6266267983aec4306306da8a7a603" prot="public" static="no">
        <type>struct <ref refid="structdatatable__config__tag" kindref="compound">datatable_config_tag</ref></type>
        <definition>typedef struct datatable_config_tag datatable_config_t</definition>
        <argsstring></argsstring>
        <name>datatable_config_t</name>
        <briefdescription>
<para>Data-table configuration structure definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/storage/esp_datalogger/include/datatable.h" line="264" column="20"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga2f8fab83857e2869c7ffb644dc86bee2" prot="public" static="no">
        <type>struct datatable_t</type>
        <definition>typedef struct datatable_t datatable_t</definition>
        <argsstring></argsstring>
        <name>datatable_t</name>
        <briefdescription>
<para>Data-table structure. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/storage/esp_datalogger/include/datatable.h" line="294" column="26" bodyfile="components/storage/esp_datalogger/include/datatable.h" bodystart="294" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__drivers_1ga85af77872c8413dc5845585b11a246cc" prot="public" static="no">
        <type>struct <ref refid="structdatatable__t" kindref="compound">datatable_t</ref> *</type>
        <definition>typedef struct datatable_t* datatable_handle_t</definition>
        <argsstring></argsstring>
        <name>datatable_handle_t</name>
        <briefdescription>
<para>Data-table handle structure. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/storage/esp_datalogger/include/datatable.h" line="299" column="26" bodyfile="components/storage/esp_datalogger/include/datatable.h" bodystart="299" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="var">
      <memberdef kind="variable" id="group__drivers_1ga5f9e62f6da7b8790a7906e92a36c8366" prot="public" static="no" mutable="no">
        <type></type>
        <definition>ahtxx_status_register_t</definition>
        <argsstring></argsstring>
        <name>ahtxx_status_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ahtxx/include/ahtxx.h" line="138" column="2" bodyfile="components/peripherals/i2c/esp_ahtxx/include/ahtxx.h" bodystart="138" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1gaa52243530b8fb5ebd65c22156ee445c0" prot="public" static="no" mutable="no">
        <type></type>
        <definition>ak8975_control_register_t</definition>
        <argsstring></argsstring>
        <name>ak8975_control_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ak8975/include/ak8975.h" line="95" column="2" bodyfile="components/peripherals/i2c/esp_ak8975/include/ak8975.h" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1gaa181e1ef21b4b1ecd7f01fb05d38fb27" prot="public" static="no" mutable="no">
        <type></type>
        <definition>ak8975_status1_register_t</definition>
        <argsstring></argsstring>
        <name>ak8975_status1_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ak8975/include/ak8975.h" line="106" column="2" bodyfile="components/peripherals/i2c/esp_ak8975/include/ak8975.h" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1ga448dba23aa679a47666d94da58912a41" prot="public" static="no" mutable="no">
        <type></type>
        <definition>ak8975_status2_register_t</definition>
        <argsstring></argsstring>
        <name>ak8975_status2_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ak8975/include/ak8975.h" line="119" column="2" bodyfile="components/peripherals/i2c/esp_ak8975/include/ak8975.h" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1ga6871d5d20f971162e4cdc025c3054cf3" prot="public" static="no" mutable="no">
        <type></type>
        <definition>ak8975_selftest_control_register_t</definition>
        <argsstring></argsstring>
        <name>ak8975_selftest_control_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ak8975/include/ak8975.h" line="131" column="2" bodyfile="components/peripherals/i2c/esp_ak8975/include/ak8975.h" bodystart="131" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1gaf6aa7c2994d2098890edace001157963" prot="public" static="no" mutable="no">
        <type></type>
        <definition>as3935_0x00_register_t</definition>
        <argsstring></argsstring>
        <name>as3935_0x00_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="281" column="2" bodyfile="components/peripherals/i2c/esp_as3935/include/as3935.h" bodystart="281" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1gaa2643fda1eaff21ad07c82dacd55241b" prot="public" static="no" mutable="no">
        <type></type>
        <definition>as3935_0x01_register_t</definition>
        <argsstring></argsstring>
        <name>as3935_0x01_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="293" column="2" bodyfile="components/peripherals/i2c/esp_as3935/include/as3935.h" bodystart="293" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1ga16174d3b325575897bfb040e6b8668ae" prot="public" static="no" mutable="no">
        <type></type>
        <definition>as3935_0x02_register_t</definition>
        <argsstring></argsstring>
        <name>as3935_0x02_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="306" column="2" bodyfile="components/peripherals/i2c/esp_as3935/include/as3935.h" bodystart="306" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1ga08e4ac5034f3e7a1df518bf59c867352" prot="public" static="no" mutable="no">
        <type></type>
        <definition>as3935_0x03_register_t</definition>
        <argsstring></argsstring>
        <name>as3935_0x03_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="319" column="2" bodyfile="components/peripherals/i2c/esp_as3935/include/as3935.h" bodystart="319" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1ga9d3fb6a7599c0653f1e47fbbef1c7369" prot="public" static="no" mutable="no">
        <type></type>
        <definition>as3935_0x07_register_t</definition>
        <argsstring></argsstring>
        <name>as3935_0x07_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="330" column="2" bodyfile="components/peripherals/i2c/esp_as3935/include/as3935.h" bodystart="330" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1ga9465e4f594cd1c07379e6d6a5c79a463" prot="public" static="no" mutable="no">
        <type></type>
        <definition>as3935_0x08_register_t</definition>
        <argsstring></argsstring>
        <name>as3935_0x08_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="344" column="2" bodyfile="components/peripherals/i2c/esp_as3935/include/as3935.h" bodystart="344" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1gaa26b34f6676f0f3b7be3381f8bcf34c3" prot="public" static="no" mutable="no">
        <type></type>
        <definition>as7341_enable_register_t</definition>
        <argsstring></argsstring>
        <name>as7341_enable_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as7341/include/as7341.h" line="186" column="2" bodyfile="components/peripherals/i2c/esp_as7341/include/as7341.h" bodystart="186" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1gae252e9dced6288514fb3aa077b7be69f" prot="public" static="no" mutable="no">
        <type></type>
        <definition>as7341_config_register_t</definition>
        <argsstring></argsstring>
        <name>as7341_config_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as7341/include/as7341.h" line="199" column="2" bodyfile="components/peripherals/i2c/esp_as7341/include/as7341.h" bodystart="199" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1ga1d5b431dbf86c737f691ef67b4638c95" prot="public" static="no" mutable="no">
        <type></type>
        <definition>as7341_flicker_detection_time1_register_t</definition>
        <argsstring></argsstring>
        <name>as7341_flicker_detection_time1_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as7341/include/as7341.h" line="209" column="2" bodyfile="components/peripherals/i2c/esp_as7341/include/as7341.h" bodystart="209" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1ga1d4021a923b3bfb9803e1ccc7a84836a" prot="public" static="no" mutable="no">
        <type></type>
        <definition>as7341_flicker_detection_time2_register_t</definition>
        <argsstring></argsstring>
        <name>as7341_flicker_detection_time2_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as7341/include/as7341.h" line="220" column="2" bodyfile="components/peripherals/i2c/esp_as7341/include/as7341.h" bodystart="220" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1ga72bceb6441a07d76d8d8bd3f51b2b116" prot="public" static="no" mutable="no">
        <type></type>
        <definition>as7341_gpio1_register_t</definition>
        <argsstring></argsstring>
        <name>as7341_gpio1_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as7341/include/as7341.h" line="232" column="2" bodyfile="components/peripherals/i2c/esp_as7341/include/as7341.h" bodystart="232" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1ga9bc2f2a449fcbb41a2193039a1efa376" prot="public" static="no" mutable="no">
        <type></type>
        <definition>as7341_gpio2_register_t</definition>
        <argsstring></argsstring>
        <name>as7341_gpio2_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as7341/include/as7341.h" line="246" column="2" bodyfile="components/peripherals/i2c/esp_as7341/include/as7341.h" bodystart="246" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1gad3bf7a6e6cc5733386f1af22fa21d23d" prot="public" static="no" mutable="no">
        <type></type>
        <definition>as7341_led_register_t</definition>
        <argsstring></argsstring>
        <name>as7341_led_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as7341/include/as7341.h" line="257" column="2" bodyfile="components/peripherals/i2c/esp_as7341/include/as7341.h" bodystart="257" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1gad5b9ecfefe22209028ac4aa881c6dff3" prot="public" static="no" mutable="no">
        <type></type>
        <definition>as7341_interrupt_enable_register_t</definition>
        <argsstring></argsstring>
        <name>as7341_interrupt_enable_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as7341/include/as7341.h" line="272" column="2" bodyfile="components/peripherals/i2c/esp_as7341/include/as7341.h" bodystart="272" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1ga2c1494183954398cc8db0cc5088d5c53" prot="public" static="no" mutable="no">
        <type></type>
        <definition>as7341_interrupt_status_register_t</definition>
        <argsstring></argsstring>
        <name>as7341_interrupt_status_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as7341/include/as7341.h" line="287" column="2" bodyfile="components/peripherals/i2c/esp_as7341/include/as7341.h" bodystart="287" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1ga1c27a1170ce8f4b7295ba708c1e66e53" prot="public" static="no" mutable="no">
        <type></type>
        <definition>as7341_device_status_register_t</definition>
        <argsstring></argsstring>
        <name>as7341_device_status_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as7341/include/as7341.h" line="299" column="2" bodyfile="components/peripherals/i2c/esp_as7341/include/as7341.h" bodystart="299" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1gafc4fd9f6c53cf26abac04fea1323917b" prot="public" static="no" mutable="no">
        <type></type>
        <definition>as7341_astatus_register_t</definition>
        <argsstring></argsstring>
        <name>as7341_astatus_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as7341/include/as7341.h" line="311" column="2" bodyfile="components/peripherals/i2c/esp_as7341/include/as7341.h" bodystart="311" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1ga0ee3be538a633ed89bfa7948bef1bb6d" prot="public" static="no" mutable="no">
        <type></type>
        <definition>as7341_status2_register_t</definition>
        <argsstring></argsstring>
        <name>as7341_status2_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as7341/include/as7341.h" line="328" column="2" bodyfile="components/peripherals/i2c/esp_as7341/include/as7341.h" bodystart="328" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1gab8e2a946bb1ad804082bbcb48b4a30f6" prot="public" static="no" mutable="no">
        <type></type>
        <definition>as7341_status3_register_t</definition>
        <argsstring></argsstring>
        <name>as7341_status3_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as7341/include/as7341.h" line="341" column="2" bodyfile="components/peripherals/i2c/esp_as7341/include/as7341.h" bodystart="341" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1gabbaa8ec597f27d8528036c605e56e23d" prot="public" static="no" mutable="no">
        <type></type>
        <definition>as7341_status5_register_t</definition>
        <argsstring></argsstring>
        <name>as7341_status5_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as7341/include/as7341.h" line="354" column="2" bodyfile="components/peripherals/i2c/esp_as7341/include/as7341.h" bodystart="354" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1ga9b152caa53bbe35e9f53f2a620d23686" prot="public" static="no" mutable="no">
        <type></type>
        <definition>as7341_status6_register_t</definition>
        <argsstring></argsstring>
        <name>as7341_status6_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as7341/include/as7341.h" line="371" column="2" bodyfile="components/peripherals/i2c/esp_as7341/include/as7341.h" bodystart="371" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1gac200a6e0847a415d0306b02ffce47b7d" prot="public" static="no" mutable="no">
        <type></type>
        <definition>as7341_flicker_detection_status_register_t</definition>
        <argsstring></argsstring>
        <name>as7341_flicker_detection_status_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as7341/include/as7341.h" line="387" column="2" bodyfile="components/peripherals/i2c/esp_as7341/include/as7341.h" bodystart="387" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1ga5d86bfb5133e562f3bf454c190e797fe" prot="public" static="no" mutable="no">
        <type></type>
        <definition>as7341_auxiliary_id_register_t</definition>
        <argsstring></argsstring>
        <name>as7341_auxiliary_id_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as7341/include/as7341.h" line="398" column="2" bodyfile="components/peripherals/i2c/esp_as7341/include/as7341.h" bodystart="398" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1ga86e744a65c56e5ff5dba17fda93e56a5" prot="public" static="no" mutable="no">
        <type></type>
        <definition>as7341_revision_id_register_t</definition>
        <argsstring></argsstring>
        <name>as7341_revision_id_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as7341/include/as7341.h" line="409" column="2" bodyfile="components/peripherals/i2c/esp_as7341/include/as7341.h" bodystart="409" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1ga583b1dcc5a113c1017203ef0e09196d8" prot="public" static="no" mutable="no">
        <type></type>
        <definition>as7341_part_id_register_t</definition>
        <argsstring></argsstring>
        <name>as7341_part_id_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as7341/include/as7341.h" line="420" column="2" bodyfile="components/peripherals/i2c/esp_as7341/include/as7341.h" bodystart="420" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1ga6e05e9d26e7005cca3e214e8a10da3d1" prot="public" static="no" mutable="no">
        <type></type>
        <definition>as7341_config0_register_t</definition>
        <argsstring></argsstring>
        <name>as7341_config0_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as7341/include/as7341.h" line="435" column="2" bodyfile="components/peripherals/i2c/esp_as7341/include/as7341.h" bodystart="435" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1ga3340490186829b6386892f65d6e06cec" prot="public" static="no" mutable="no">
        <type></type>
        <definition>as7341_config1_register_t</definition>
        <argsstring></argsstring>
        <name>as7341_config1_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as7341/include/as7341.h" line="446" column="2" bodyfile="components/peripherals/i2c/esp_as7341/include/as7341.h" bodystart="446" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1ga4974b505d9aa3c0281813ae1b32dbc93" prot="public" static="no" mutable="no">
        <type></type>
        <definition>as7341_config6_register_t</definition>
        <argsstring></argsstring>
        <name>as7341_config6_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as7341/include/as7341.h" line="458" column="2" bodyfile="components/peripherals/i2c/esp_as7341/include/as7341.h" bodystart="458" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1gabea65224f860e437759e4387b5491565" prot="public" static="no" mutable="no">
        <type></type>
        <definition>bme680_status0_register_t</definition>
        <argsstring></argsstring>
        <name>bme680_status0_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bme680/include/bme680.h" line="191" column="2" bodyfile="components/peripherals/i2c/esp_bme680/include/bme680.h" bodystart="191" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1gab0114eb1c546ffe338ba161f664af494" prot="public" static="no" mutable="no">
        <type></type>
        <definition>bme680_control_measurement_register_t</definition>
        <argsstring></argsstring>
        <name>bme680_control_measurement_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bme680/include/bme680.h" line="204" column="2" bodyfile="components/peripherals/i2c/esp_bme680/include/bme680.h" bodystart="204" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1ga44fcfaaca5dbafe3d4c710801af04513" prot="public" static="no" mutable="no">
        <type></type>
        <definition>bme680_control_humidity_register_t</definition>
        <argsstring></argsstring>
        <name>bme680_control_humidity_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bme680/include/bme680.h" line="218" column="2" bodyfile="components/peripherals/i2c/esp_bme680/include/bme680.h" bodystart="218" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1ga7a5b1c6c7ed556e900d209c05ac2028d" prot="public" static="no" mutable="no">
        <type></type>
        <definition>bme680_control_gas1_register_t</definition>
        <argsstring></argsstring>
        <name>bme680_control_gas1_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bme680/include/bme680.h" line="231" column="2" bodyfile="components/peripherals/i2c/esp_bme680/include/bme680.h" bodystart="231" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1gab63f32338a395879b458f622e61b908d" prot="public" static="no" mutable="no">
        <type></type>
        <definition>bme680_control_gas0_register_t</definition>
        <argsstring></argsstring>
        <name>bme680_control_gas0_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bme680/include/bme680.h" line="244" column="2" bodyfile="components/peripherals/i2c/esp_bme680/include/bme680.h" bodystart="244" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1ga5254434ee1305602287f13792f30ea10" prot="public" static="no" mutable="no">
        <type></type>
        <definition>bme680_gas_lsb_register_t</definition>
        <argsstring></argsstring>
        <name>bme680_gas_lsb_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bme680/include/bme680.h" line="258" column="2" bodyfile="components/peripherals/i2c/esp_bme680/include/bme680.h" bodystart="258" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1ga6265c588db38fcc244dc0e3812f64bcc" prot="public" static="no" mutable="no">
        <type></type>
        <definition>bme680_config_register_t</definition>
        <argsstring></argsstring>
        <name>bme680_config_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bme680/include/bme680.h" line="272" column="2" bodyfile="components/peripherals/i2c/esp_bme680/include/bme680.h" bodystart="272" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1gab4275190b29a8b511a23f08e22ad3ab1" prot="public" static="no" mutable="no">
        <type></type>
        <definition>bmp280_status_register_t</definition>
        <argsstring></argsstring>
        <name>bmp280_status_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp280/include/bmp280.h" line="157" column="2" bodyfile="components/peripherals/i2c/esp_bmp280/include/bmp280.h" bodystart="157" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1gac15060766ed5170fb5582e43d174461b" prot="public" static="no" mutable="no">
        <type></type>
        <definition>bmp280_control_measurement_register_t</definition>
        <argsstring></argsstring>
        <name>bmp280_control_measurement_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp280/include/bmp280.h" line="169" column="2" bodyfile="components/peripherals/i2c/esp_bmp280/include/bmp280.h" bodystart="169" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1ga5c32e4948e3309951cc0584929689208" prot="public" static="no" mutable="no">
        <type></type>
        <definition>bmp280_configuration_register_t</definition>
        <argsstring></argsstring>
        <name>bmp280_configuration_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp280/include/bmp280.h" line="182" column="2" bodyfile="components/peripherals/i2c/esp_bmp280/include/bmp280.h" bodystart="182" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1ga3dff8b15043966f62f623b54b0ccc145" prot="public" static="no" mutable="no">
        <type></type>
        <definition>bmp390_status_register_t</definition>
        <argsstring></argsstring>
        <name>bmp390_status_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp390/include/bmp390.h" line="153" column="2" bodyfile="components/peripherals/i2c/esp_bmp390/include/bmp390.h" bodystart="153" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1ga51462015ba056f56a18c103322b04acb" prot="public" static="no" mutable="no">
        <type></type>
        <definition>bmp390_interrupt_status_register_t</definition>
        <argsstring></argsstring>
        <name>bmp390_interrupt_status_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp390/include/bmp390.h" line="167" column="2" bodyfile="components/peripherals/i2c/esp_bmp390/include/bmp390.h" bodystart="167" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1ga7099d3e53045c2cef76813a293577d2e" prot="public" static="no" mutable="no">
        <type></type>
        <definition>bmp390_interrupt_control_register_t</definition>
        <argsstring></argsstring>
        <name>bmp390_interrupt_control_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp390/include/bmp390.h" line="184" column="2" bodyfile="components/peripherals/i2c/esp_bmp390/include/bmp390.h" bodystart="184" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1ga75edd05cb5b3fad748a81a08e868a63e" prot="public" static="no" mutable="no">
        <type></type>
        <definition>bmp390_power_control_register_t</definition>
        <argsstring></argsstring>
        <name>bmp390_power_control_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp390/include/bmp390.h" line="198" column="2" bodyfile="components/peripherals/i2c/esp_bmp390/include/bmp390.h" bodystart="198" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1ga20eaeb9dbdbd482d4cc9a52d2f6e6e77" prot="public" static="no" mutable="no">
        <type></type>
        <definition>bmp390_oversampling_register_t</definition>
        <argsstring></argsstring>
        <name>bmp390_oversampling_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp390/include/bmp390.h" line="210" column="2" bodyfile="components/peripherals/i2c/esp_bmp390/include/bmp390.h" bodystart="210" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1gad80acd2e911f5df47fb346229acf58ad" prot="public" static="no" mutable="no">
        <type></type>
        <definition>bmp390_output_data_rate_register_t</definition>
        <argsstring></argsstring>
        <name>bmp390_output_data_rate_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp390/include/bmp390.h" line="221" column="2" bodyfile="components/peripherals/i2c/esp_bmp390/include/bmp390.h" bodystart="221" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1ga189d47f01a7f594d9ca7def05569dc30" prot="public" static="no" mutable="no">
        <type></type>
        <definition>bmp390_configuration_register_t</definition>
        <argsstring></argsstring>
        <name>bmp390_configuration_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp390/include/bmp390.h" line="233" column="2" bodyfile="components/peripherals/i2c/esp_bmp390/include/bmp390.h" bodystart="233" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1gace61cc230408bb558e09786da8777ad6" prot="public" static="no" mutable="no">
        <type></type>
        <definition>ccs811_status_register_t</definition>
        <argsstring></argsstring>
        <name>ccs811_status_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ccs811/include/ccs811.h" line="117" column="2" bodyfile="components/peripherals/i2c/esp_ccs811/include/ccs811.h" bodystart="117" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1gafd35a3c78aa253b57f7c72bc2bf80971" prot="public" static="no" mutable="no">
        <type></type>
        <definition>ccs811_measure_mode_register_t</definition>
        <argsstring></argsstring>
        <name>ccs811_measure_mode_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ccs811/include/ccs811.h" line="131" column="2" bodyfile="components/peripherals/i2c/esp_ccs811/include/ccs811.h" bodystart="131" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1gad5731317a2a74378b6ff45ff62a0921b" prot="public" static="no" mutable="no">
        <type></type>
        <definition>ccs811_raw_data_register_t</definition>
        <argsstring></argsstring>
        <name>ccs811_raw_data_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ccs811/include/ccs811.h" line="142" column="2" bodyfile="components/peripherals/i2c/esp_ccs811/include/ccs811.h" bodystart="142" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1gad8a033af147862af8b783eafb7d10351" prot="public" static="no" mutable="no">
        <type></type>
        <definition>ccs811_threshold_value_t</definition>
        <argsstring></argsstring>
        <name>ccs811_threshold_value_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ccs811/include/ccs811.h" line="153" column="2" bodyfile="components/peripherals/i2c/esp_ccs811/include/ccs811.h" bodystart="153" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1ga308a2244325bd36aaea89b9e03eb5e3e" prot="public" static="no" mutable="no">
        <type></type>
        <definition>ccs811_firmware_version_format_t</definition>
        <argsstring></argsstring>
        <name>ccs811_firmware_version_format_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ccs811/include/ccs811.h" line="182" column="2" bodyfile="components/peripherals/i2c/esp_ccs811/include/ccs811.h" bodystart="182" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1ga41962e5dda0c8ad9ffb0db48dca758b2" prot="public" static="no" mutable="no">
        <type></type>
        <definition>ccs811_error_code_register_t</definition>
        <argsstring></argsstring>
        <name>ccs811_error_code_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ccs811/include/ccs811.h" line="199" column="2" bodyfile="components/peripherals/i2c/esp_ccs811/include/ccs811.h" bodystart="199" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1ga880aba1b3ea4afc21ac79ced737f8249" prot="public" static="no" mutable="no">
        <type></type>
        <definition>ens160_status_register_t</definition>
        <argsstring></argsstring>
        <name>ens160_status_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ens160/include/ens160.h" line="170" column="2" bodyfile="components/peripherals/i2c/esp_ens160/include/ens160.h" bodystart="170" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1gaea0689d74ee6a5e930fb71f836ceb88c" prot="public" static="no" mutable="no">
        <type></type>
        <definition>ens160_interrupt_config_register_t</definition>
        <argsstring></argsstring>
        <name>ens160_interrupt_config_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ens160/include/ens160.h" line="187" column="2" bodyfile="components/peripherals/i2c/esp_ens160/include/ens160.h" bodystart="187" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1ga6c28d322e58103959dcfbd3633ffd976" prot="public" static="no" mutable="no">
        <type></type>
        <definition>ens160_caqi_data_register_t</definition>
        <argsstring></argsstring>
        <name>ens160_caqi_data_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ens160/include/ens160.h" line="208" column="2" bodyfile="components/peripherals/i2c/esp_ens160/include/ens160.h" bodystart="208" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1ga99d517950425a1a7c2b945f62d2a4e9f" prot="public" static="no" mutable="no">
        <type></type>
        <definition>hdc1080_configuration_register_t</definition>
        <argsstring></argsstring>
        <name>hdc1080_configuration_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_hdc1080/include/hdc1080.h" line="128" column="2" bodyfile="components/peripherals/i2c/esp_hdc1080/include/hdc1080.h" bodystart="128" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1ga3773cbf5b2e11f5c5ab2a3652f3d895c" prot="public" static="no" mutable="no">
        <type></type>
        <definition>hdc1080_measurement_register_t</definition>
        <argsstring></argsstring>
        <name>hdc1080_measurement_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_hdc1080/include/hdc1080.h" line="139" column="2" bodyfile="components/peripherals/i2c/esp_hdc1080/include/hdc1080.h" bodystart="139" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1ga26f38a429dff7f99112c74b7ec86842f" prot="public" static="no" mutable="no">
        <type></type>
        <definition>hdc1080_serial_number_register_t</definition>
        <argsstring></argsstring>
        <name>hdc1080_serial_number_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_hdc1080/include/hdc1080.h" line="152" column="2" bodyfile="components/peripherals/i2c/esp_hdc1080/include/hdc1080.h" bodystart="152" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1gac125c3d57d46f8daec55d84131daf4df" prot="public" static="no" mutable="no">
        <type></type>
        <definition>hmc5883l_configuration1_register_t</definition>
        <argsstring></argsstring>
        <name>hmc5883l_configuration1_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_hmc5883l/include/hmc5883l.h" line="153" column="2" bodyfile="components/peripherals/i2c/esp_hmc5883l/include/hmc5883l.h" bodystart="153" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1gadd939c43ff658b96336f52b781ef7e41" prot="public" static="no" mutable="no">
        <type></type>
        <definition>hmc5883l_configuration2_register_t</definition>
        <argsstring></argsstring>
        <name>hmc5883l_configuration2_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_hmc5883l/include/hmc5883l.h" line="164" column="2" bodyfile="components/peripherals/i2c/esp_hmc5883l/include/hmc5883l.h" bodystart="164" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1ga5547045042735f4dc49f1825019b9086" prot="public" static="no" mutable="no">
        <type></type>
        <definition>hmc5883l_mode_register_t</definition>
        <argsstring></argsstring>
        <name>hmc5883l_mode_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_hmc5883l/include/hmc5883l.h" line="175" column="2" bodyfile="components/peripherals/i2c/esp_hmc5883l/include/hmc5883l.h" bodystart="175" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1gacdddcfcfe748b753717162ef4c69e34c" prot="public" static="no" mutable="no">
        <type></type>
        <definition>hmc5883l_status_register_t</definition>
        <argsstring></argsstring>
        <name>hmc5883l_status_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_hmc5883l/include/hmc5883l.h" line="187" column="2" bodyfile="components/peripherals/i2c/esp_hmc5883l/include/hmc5883l.h" bodystart="187" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1ga0b771c073300330aebdefb1d5d51e55f" prot="public" static="no" mutable="no">
        <type></type>
        <definition>ina226_config_register_t</definition>
        <argsstring></argsstring>
        <name>ina226_config_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ina226/include/ina226.h" line="173" column="2" bodyfile="components/peripherals/i2c/esp_ina226/include/ina226.h" bodystart="173" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1ga72512d6995ff674111d57959775780ab" prot="public" static="no" mutable="no">
        <type></type>
        <definition>ina226_mask_enable_register_t</definition>
        <argsstring></argsstring>
        <name>ina226_mask_enable_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ina226/include/ina226.h" line="194" column="2" bodyfile="components/peripherals/i2c/esp_ina226/include/ina226.h" bodystart="194" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1gabb9e4a3c391bc0e26aa39579608f1c90" prot="public" static="no" mutable="no">
        <type></type>
        <definition>ltr390uv_control_register_t</definition>
        <argsstring></argsstring>
        <name>ltr390uv_control_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" line="155" column="2" bodyfile="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" bodystart="155" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1gac96f25cf3d55a68e2dd2c9eb810f35e5" prot="public" static="no" mutable="no">
        <type></type>
        <definition>ltr390uv_measure_register_t</definition>
        <argsstring></argsstring>
        <name>ltr390uv_measure_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" line="168" column="2" bodyfile="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" bodystart="168" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1gaba053459e8182e63a7215ee409ba7b45" prot="public" static="no" mutable="no">
        <type></type>
        <definition>ltr390uv_gain_register_t</definition>
        <argsstring></argsstring>
        <name>ltr390uv_gain_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" line="179" column="2" bodyfile="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" bodystart="179" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1ga64ec83ef0fcb04e2b126400d55c19cc5" prot="public" static="no" mutable="no">
        <type></type>
        <definition>ltr390uv_status_register_t</definition>
        <argsstring></argsstring>
        <name>ltr390uv_status_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" line="193" column="2" bodyfile="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" bodystart="193" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1ga8cfcb462d13ac377ab12da7d6ada873a" prot="public" static="no" mutable="no">
        <type></type>
        <definition>ltr390uv_interrupt_config_register_t</definition>
        <argsstring></argsstring>
        <name>ltr390uv_interrupt_config_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" line="207" column="2" bodyfile="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" bodystart="207" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1ga4018385b2327aa69c96d0530336ed846" prot="public" static="no" mutable="no">
        <type></type>
        <definition>max30105_interrupt_status1_register_t</definition>
        <argsstring></argsstring>
        <name>max30105_interrupt_status1_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_max30105/include/max30105.h" line="156" column="2" bodyfile="components/peripherals/i2c/esp_max30105/include/max30105.h" bodystart="156" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1ga8d4facbc8f000df6e0787e29df5ef49b" prot="public" static="no" mutable="no">
        <type></type>
        <definition>max30105_interrupt_status2_register_t</definition>
        <argsstring></argsstring>
        <name>max30105_interrupt_status2_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_max30105/include/max30105.h" line="168" column="2" bodyfile="components/peripherals/i2c/esp_max30105/include/max30105.h" bodystart="168" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1gac2c6a18866cd13d26fd57da7c5f5a136" prot="public" static="no" mutable="no">
        <type></type>
        <definition>max30105_interrupt_enable1_register_t</definition>
        <argsstring></argsstring>
        <name>max30105_interrupt_enable1_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_max30105/include/max30105.h" line="182" column="2" bodyfile="components/peripherals/i2c/esp_max30105/include/max30105.h" bodystart="182" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1gabc18b87f4a6228b0bdbcf26c7a25c26b" prot="public" static="no" mutable="no">
        <type></type>
        <definition>max30105_interrupt_enable2_register_t</definition>
        <argsstring></argsstring>
        <name>max30105_interrupt_enable2_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_max30105/include/max30105.h" line="194" column="2" bodyfile="components/peripherals/i2c/esp_max30105/include/max30105.h" bodystart="194" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1ga1e907ca2d453126fd0e734b2446bf3fc" prot="public" static="no" mutable="no">
        <type></type>
        <definition>max30105_mode_configuration_register_t</definition>
        <argsstring></argsstring>
        <name>max30105_mode_configuration_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_max30105/include/max30105.h" line="207" column="2" bodyfile="components/peripherals/i2c/esp_max30105/include/max30105.h" bodystart="207" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1gaad0de3a6acde99c8be855907d04797e8" prot="public" static="no" mutable="no">
        <type></type>
        <definition>max30105_multi_led_mode_control_register_t</definition>
        <argsstring></argsstring>
        <name>max30105_multi_led_mode_control_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_max30105/include/max30105.h" line="220" column="2" bodyfile="components/peripherals/i2c/esp_max30105/include/max30105.h" bodystart="220" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1gae2b5f5a8e75ef1074452755dd61dce2f" prot="public" static="no" mutable="no">
        <type></type>
        <definition>max30105_fifo_write_pointer_register_t</definition>
        <argsstring></argsstring>
        <name>max30105_fifo_write_pointer_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_max30105/include/max30105.h" line="231" column="2" bodyfile="components/peripherals/i2c/esp_max30105/include/max30105.h" bodystart="231" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1ga128ca6ac30dac1a933b9881f72bf828c" prot="public" static="no" mutable="no">
        <type></type>
        <definition>max30105_fifo_overflow_counter_register_t</definition>
        <argsstring></argsstring>
        <name>max30105_fifo_overflow_counter_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_max30105/include/max30105.h" line="242" column="2" bodyfile="components/peripherals/i2c/esp_max30105/include/max30105.h" bodystart="242" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1ga4c83f0321b4edf21fcad580aec9e2f18" prot="public" static="no" mutable="no">
        <type></type>
        <definition>max30105_fifo_read_pointer_register_t</definition>
        <argsstring></argsstring>
        <name>max30105_fifo_read_pointer_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_max30105/include/max30105.h" line="253" column="2" bodyfile="components/peripherals/i2c/esp_max30105/include/max30105.h" bodystart="253" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1ga7d3d528fb48d7a83b165dc54c1870d63" prot="public" static="no" mutable="no">
        <type></type>
        <definition>max30105_fifo_data_register_t</definition>
        <argsstring></argsstring>
        <name>max30105_fifo_data_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_max30105/include/max30105.h" line="263" column="2" bodyfile="components/peripherals/i2c/esp_max30105/include/max30105.h" bodystart="263" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1ga14b57ff8c718907ab430d061963dbb1c" prot="public" static="no" mutable="no">
        <type></type>
        <definition>mlx90614_config_register_t</definition>
        <argsstring></argsstring>
        <name>mlx90614_config_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" line="149" column="2" bodyfile="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" bodystart="149" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1gae3ceb0fa8c527b7aec14fefbbd83c64f" prot="public" static="no" mutable="no">
        <type></type>
        <definition>mlx90614_pwmctrl_register_t</definition>
        <argsstring></argsstring>
        <name>mlx90614_pwmctrl_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" line="185" column="2" bodyfile="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" bodystart="185" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1gad76a801b916bc82549eb02576b75d972" prot="public" static="no" mutable="no">
        <type></type>
        <definition>mlx90614_flags_register_t</definition>
        <argsstring></argsstring>
        <name>mlx90614_flags_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" line="201" column="2" bodyfile="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" bodystart="201" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1ga1752207dcc7463810925a7eeab480dc4" prot="public" static="no" mutable="no">
        <type></type>
        <definition>mmc56x3_status_register_t</definition>
        <argsstring></argsstring>
        <name>mmc56x3_status_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mmc56x3/include/mmc56x3.h" line="113" column="2" bodyfile="components/peripherals/i2c/esp_mmc56x3/include/mmc56x3.h" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1ga29266c8e3281a54b288dda98738a5e74" prot="public" static="no" mutable="no">
        <type></type>
        <definition>mmc56x3_control0_register_t</definition>
        <argsstring></argsstring>
        <name>mmc56x3_control0_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mmc56x3/include/mmc56x3.h" line="130" column="2" bodyfile="components/peripherals/i2c/esp_mmc56x3/include/mmc56x3.h" bodystart="130" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1ga1921f4e58df587fde29aaf580c8ab5e5" prot="public" static="no" mutable="no">
        <type></type>
        <definition>mmc56x3_control1_register_t</definition>
        <argsstring></argsstring>
        <name>mmc56x3_control1_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mmc56x3/include/mmc56x3.h" line="146" column="2" bodyfile="components/peripherals/i2c/esp_mmc56x3/include/mmc56x3.h" bodystart="146" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1ga6a2d437974d0e524a81459f76215f012" prot="public" static="no" mutable="no">
        <type></type>
        <definition>mmc56x3_control2_register_t</definition>
        <argsstring></argsstring>
        <name>mmc56x3_control2_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mmc56x3/include/mmc56x3.h" line="160" column="2" bodyfile="components/peripherals/i2c/esp_mmc56x3/include/mmc56x3.h" bodystart="160" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1ga29ff55623d7a726a7cbd2cbbc89db0e9" prot="public" static="no" mutable="no">
        <type></type>
        <definition>mpu6050_self_test_register_t</definition>
        <argsstring></argsstring>
        <name>mpu6050_self_test_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" line="178" column="2" bodyfile="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" bodystart="178" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1gaaaab41c2a6b1ac456836778932e9915c" prot="public" static="no" mutable="no">
        <type></type>
        <definition>mpu6050_self_test_a_register_t</definition>
        <argsstring></argsstring>
        <name>mpu6050_self_test_a_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" line="191" column="2" bodyfile="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" bodystart="191" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1gacda0372173648e4368ca563b0c9c2baf" prot="public" static="no" mutable="no">
        <type></type>
        <definition>mpu6050_config_register_t</definition>
        <argsstring></argsstring>
        <name>mpu6050_config_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" line="203" column="2" bodyfile="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" bodystart="203" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1ga6ee332d81866aa9e689a43aca2a9b4be" prot="public" static="no" mutable="no">
        <type></type>
        <definition>mpu6050_gyro_config_register_t</definition>
        <argsstring></argsstring>
        <name>mpu6050_gyro_config_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" line="217" column="2" bodyfile="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" bodystart="217" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1gae8a25613372af08572c646c4dd0575bb" prot="public" static="no" mutable="no">
        <type></type>
        <definition>mpu6050_accel_config_register_t</definition>
        <argsstring></argsstring>
        <name>mpu6050_accel_config_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" line="231" column="2" bodyfile="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" bodystart="231" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1gac99b904e1d701cfdb33965365f852135" prot="public" static="no" mutable="no">
        <type></type>
        <definition>mpu6050_fifo_enable_register_t</definition>
        <argsstring></argsstring>
        <name>mpu6050_fifo_enable_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" line="248" column="2" bodyfile="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" bodystart="248" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1ga519422fa44dd1f9833b11beccaeba718" prot="public" static="no" mutable="no">
        <type></type>
        <definition>mpu6050_interrupt_enable_register_t</definition>
        <argsstring></argsstring>
        <name>mpu6050_interrupt_enable_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" line="262" column="2" bodyfile="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" bodystart="262" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1ga8e7f42ab0000026f4350a8d1cff37a27" prot="public" static="no" mutable="no">
        <type></type>
        <definition>mpu6050_interrupt_pin_config_register_t</definition>
        <argsstring></argsstring>
        <name>mpu6050_interrupt_pin_config_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" line="279" column="2" bodyfile="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" bodystart="279" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1gaf3a3377da6fd1f83110985c610aa0a27" prot="public" static="no" mutable="no">
        <type></type>
        <definition>mpu6050_interrupt_status_register_t</definition>
        <argsstring></argsstring>
        <name>mpu6050_interrupt_status_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" line="296" column="2" bodyfile="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" bodystart="296" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1ga6990b81a985d44a02f52513d5a7cf0ad" prot="public" static="no" mutable="no">
        <type></type>
        <definition>mpu6050_signal_path_reset_register_t</definition>
        <argsstring></argsstring>
        <name>mpu6050_signal_path_reset_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" line="309" column="2" bodyfile="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" bodystart="309" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1gac8abe5992a82d6165b3fc82b59ce190b" prot="public" static="no" mutable="no">
        <type></type>
        <definition>mpu6050_user_control_register_t</definition>
        <argsstring></argsstring>
        <name>mpu6050_user_control_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" line="326" column="2" bodyfile="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" bodystart="326" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1ga28a4bb36732d48168195bb81116af106" prot="public" static="no" mutable="no">
        <type></type>
        <definition>mpu6050_power_management1_register_t</definition>
        <argsstring></argsstring>
        <name>mpu6050_power_management1_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" line="341" column="2" bodyfile="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" bodystart="341" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1ga28673c0e3382c84dd99dcd0e59ae1095" prot="public" static="no" mutable="no">
        <type></type>
        <definition>mpu6050_power_management2_register_t</definition>
        <argsstring></argsstring>
        <name>mpu6050_power_management2_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" line="357" column="2" bodyfile="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" bodystart="357" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1ga344aa973c280b35f6541525c9d1e0bf2" prot="public" static="no" mutable="no">
        <type></type>
        <definition>mpu6050_who_am_i_register_t</definition>
        <argsstring></argsstring>
        <name>mpu6050_who_am_i_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" line="369" column="2" bodyfile="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" bodystart="369" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1ga284476c9c82f5dfccf00778d2c381f1d" prot="public" static="no" mutable="no">
        <type></type>
        <definition>sgp4x_self_test_result_t</definition>
        <argsstring></argsstring>
        <name>sgp4x_self_test_result_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_sgp4x/include/sgp4x.h" line="86" column="2" bodyfile="components/peripherals/i2c/esp_sgp4x/include/sgp4x.h" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1gab13b1cf96ea42240ca605719cb86d558" prot="public" static="yes" mutable="no">
        <type>const uint8_t</type>
        <definition>const uint8_t bdf_font_emoticon_22x21[]</definition>
        <argsstring>[]</argsstring>
        <name>bdf_font_emoticon_22x21</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ssd1306/include/bdf_font_emoticon_22x21.h" line="46" column="22" bodyfile="components/peripherals/i2c/esp_ssd1306/include/bdf_font_emoticon_22x21.h" bodystart="46" bodyend="117"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1ga0620eceecdd558c279bf38135d631502" prot="public" static="yes" mutable="no">
        <type>const uint8_t</type>
        <definition>const uint8_t bdf_font_nenr12_21x26[]</definition>
        <argsstring>[]</argsstring>
        <name>bdf_font_nenr12_21x26</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ssd1306/include/bdf_font_nenr12_21x26.h" line="46" column="22" bodyfile="components/peripherals/i2c/esp_ssd1306/include/bdf_font_nenr12_21x26.h" bodystart="46" bodyend="437"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1gaa636bf1af67a5e5549164c5546096456" prot="public" static="yes" mutable="no">
        <type>const uint8_t</type>
        <definition>const uint8_t data_tx_icon_32x32[]</definition>
        <argsstring>[]</argsstring>
        <name>data_tx_icon_32x32</name>
        <initializer>= {
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x0f, 0xff, 0xff, 0xf7, 0xf7, 0xff, 0xff, 
	0xf7, 0xf3, 0xff, 0xff, 0xf7, 0xf8, 0x00, 0x3f, 0xf7, 0xff, 0xff, 0xbf, 0xf7, 0xff, 0xff, 0xbf, 
	0xf7, 0xff, 0xff, 0xbf, 0xf7, 0xff, 0xff, 0xbf, 0xf7, 0xff, 0xff, 0xbf, 0xf7, 0xff, 0xff, 0xbf, 
	0xf7, 0xff, 0xff, 0xff, 0xf7, 0xff, 0xf9, 0xff, 0xf7, 0xff, 0xf8, 0xff, 0xf7, 0xff, 0x82, 0x7f, 
	0xf7, 0xff, 0x3f, 0xbf, 0xf7, 0xff, 0x7f, 0xdf, 0xf7, 0xff, 0x7f, 0xdf, 0xf7, 0xff, 0x3f, 0xbf, 
	0xf8, 0x03, 0x83, 0x7f, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xf9, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ssd1306/include/bitmap_icon.h" line="52" column="22" bodyfile="components/peripherals/i2c/esp_ssd1306/include/bitmap_icon.h" bodystart="52" bodyend="61"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1ga24080f2dc8ef73d22d90f53cb1e1d797" prot="public" static="yes" mutable="no">
        <type>const uint8_t</type>
        <definition>const uint8_t data_rx_icon_32x32[]</definition>
        <argsstring>[]</argsstring>
        <name>data_rx_icon_32x32</name>
        <initializer>= {
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x07, 0x83, 0xff, 0xfd, 0xfb, 0xbb, 0xff, 
	0xfd, 0xf8, 0x38, 0x0f, 0xfd, 0xff, 0xbb, 0xef, 0xfd, 0xff, 0xbb, 0xef, 0xfd, 0xff, 0xbf, 0xef, 
	0xf0, 0x40, 0x3a, 0x6f, 0xef, 0xff, 0xbb, 0x6f, 0xef, 0xff, 0x79, 0x6f, 0xef, 0xff, 0xbb, 0x6f, 
	0xef, 0xff, 0xd7, 0x6f, 0xef, 0x80, 0xef, 0x6f, 0xef, 0xff, 0xff, 0x6f, 0xef, 0xff, 0xff, 0x6f, 
	0xef, 0xff, 0xff, 0x6f, 0xef, 0xff, 0xff, 0x6f, 0xef, 0x80, 0x03, 0x6f, 0xef, 0xff, 0xff, 0x6f, 
	0xf7, 0xff, 0xff, 0x6f, 0xf8, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ssd1306/include/bitmap_icon.h" line="64" column="22" bodyfile="components/peripherals/i2c/esp_ssd1306/include/bitmap_icon.h" bodystart="64" bodyend="73"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1ga88d41ec875e8adc74ae012ea20bb572d" prot="public" static="yes" mutable="no">
        <type>const uint8_t</type>
        <definition>const uint8_t batman_icon_32x13[]</definition>
        <argsstring>[]</argsstring>
        <name>batman_icon_32x13</name>
        <initializer>= {
		0b11111111, 0b11111111, 0b11111111, 0b11111111,
		0b11111111, 0b10011111, 0b11111001, 0b11111111,
		0b11111110, 0b00111110, 0b01111100, 0b01111111,
		0b11111000, 0b00111100, 0b00111100, 0b00011111,
		0b11110000, 0b00011100, 0b00111000, 0b00001111,
		0b11110000, 0b00000000, 0b00000000, 0b00001111,
		0b11100000, 0b00000000, 0b00000000, 0b00000111,
		0b11100000, 0b00000000, 0b00000000, 0b00000111,
		0b11110000, 0b00000000, 0b00000000, 0b00001111,
		0b11110000, 0b11000100, 0b00100011, 0b00001111,
		0b11111001, 0b11111110, 0b01111111, 0b10011111,
		0b11111100, 0b11111110, 0b01111111, 0b00111111,
		0b11111111, 0b11111111, 0b11111111, 0b11111111
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ssd1306/include/bitmap_icon.h" line="76" column="22" bodyfile="components/peripherals/i2c/esp_ssd1306/include/bitmap_icon.h" bodystart="76" bodyend="90"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1gad86dc9153e138f6c5fa06555bfb5e17a" prot="public" static="yes" mutable="no">
        <type>const uint8_t</type>
        <definition>const uint8_t skull_icon_24x32[]</definition>
        <argsstring>[]</argsstring>
        <name>skull_icon_24x32</name>
        <initializer>= {
	0x00, 0xfe, 0x00, 0x03, 0xff, 0x80, 0x07, 0xff, 0xe0, 0x1f, 0xff, 0xf0, 0x3f, 0xff, 0xf8, 0x3f, 
	0xff, 0xf8, 0x3f, 0xff, 0xfc, 0x7f, 0xff, 0xfc, 0x7f, 0xff, 0xf4, 0x7f, 0xff, 0xfc, 0x7f, 0xff, 
	0xfc, 0x7f, 0xff, 0xec, 0x7f, 0xff, 0xfc, 0x7f, 0xff, 0xfc, 0x30, 0x7c, 0x1c, 0x30, 0x38, 0x1c, 
	0x30, 0x3c, 0x18, 0x70, 0x7c, 0x1c, 0x30, 0xe6, 0x1c, 0x3f, 0xc7, 0xf8, 0x3f, 0xc7, 0xf8, 0x0f, 
	0xc7, 0xf0, 0x0f, 0xef, 0xe0, 0x0f, 0xff, 0xe0, 0x0f, 0xff, 0xe0, 0x0f, 0xff, 0xe0, 0x07, 0xff, 
	0xc0, 0x07, 0xff, 0xc0, 0x03, 0xff, 0xc0, 0x03, 0xff, 0x80, 0x01, 0xff, 0x00, 0x00, 0xfe, 0x00
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ssd1306/include/bitmap_icon.h" line="93" column="22" bodyfile="components/peripherals/i2c/esp_ssd1306/include/bitmap_icon.h" bodystart="93" bodyend="100"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1gac750275364c3f443b2378d1bd962990f" prot="public" static="yes" mutable="no">
        <type>const uint8_t</type>
        <definition>const uint8_t radioactive_icon_32x32[]</definition>
        <argsstring>[]</argsstring>
        <name>radioactive_icon_32x32</name>
        <initializer>= {
	0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x80, 0x03, 0x80, 0x01, 0xc0, 0x07, 0x80, 0x03, 0xe0, 
	0x0f, 0xc0, 0x03, 0xf0, 0x1f, 0xc0, 0x07, 0xf8, 0x3f, 0xe0, 0x07, 0xfc, 0x3f, 0xf0, 0x0f, 0xfc, 
	0x7f, 0xf0, 0x0f, 0xfe, 0x7f, 0xf8, 0x1f, 0xfe, 0x7f, 0xf8, 0x3f, 0xfe, 0xff, 0xf8, 0x1f, 0xff, 
	0xff, 0xf3, 0xcf, 0xff, 0xff, 0xe7, 0xef, 0xff, 0xff, 0xe7, 0xe7, 0xff, 0x00, 0x07, 0xe0, 0x00, 
	0x00, 0x07, 0xe0, 0x00, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x07, 0xe0, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x1f, 0xf8, 0x00, 
	0x00, 0x1f, 0xf8, 0x00, 0x00, 0x3f, 0xfc, 0x00, 0x00, 0x7f, 0xfe, 0x00, 0x00, 0x7f, 0xfe, 0x00, 
	0x00, 0xff, 0xff, 0x00, 0x00, 0x7f, 0xff, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ssd1306/include/bitmap_icon.h" line="104" column="22" bodyfile="components/peripherals/i2c/esp_ssd1306/include/bitmap_icon.h" bodystart="104" bodyend="113"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1ga98f5fdcb6334b12aecc59fd18886b2a8" prot="public" static="yes" mutable="no">
        <type>const uint8_t</type>
        <definition>const uint8_t biohazard_icon_36x32[]</definition>
        <argsstring>[]</argsstring>
        <name>biohazard_icon_36x32</name>
        <initializer>= {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x01, 0x00, 0x00, 0x00, 0x30, 0x01, 0x80, 0x00, 0x00, 
	0x60, 0x00, 0xc0, 0x00, 0x00, 0x60, 0x00, 0x60, 0x00, 0x00, 0xe0, 0x00, 0x60, 0x00, 0x01, 0xc0, 
	0x00, 0x70, 0x00, 0x01, 0xc0, 0x00, 0x70, 0x00, 0x01, 0xe1, 0xf0, 0x78, 0x00, 0x01, 0xe7, 0xfc, 
	0x78, 0x00, 0x01, 0xe7, 0xfe, 0xf8, 0x00, 0x03, 0xf2, 0x0d, 0xf8, 0x00, 0x07, 0xf8, 0x03, 0xfe, 
	0x00, 0x0f, 0xfe, 0x07, 0xff, 0x00, 0x1f, 0xff, 0xbf, 0xff, 0x00, 0x3e, 0x1f, 0x9f, 0x87, 0x80, 
	0x30, 0x47, 0x0c, 0x61, 0x80, 0x20, 0x63, 0x08, 0xe0, 0xc0, 0x60, 0x70, 0x00, 0xe0, 0x40, 0x40, 
	0x70, 0xf1, 0xe0, 0x40, 0x40, 0x70, 0xf1, 0xc0, 0x00, 0x00, 0x38, 0xe3, 0xc0, 0x00, 0x00, 0x3c, 
	0xe7, 0x80, 0x00, 0x00, 0x1e, 0xe7, 0x00, 0x00, 0x00, 0x0e, 0xf6, 0x00, 0x00, 0x00, 0x01, 0xf4, 
	0x00, 0x00, 0x00, 0x01, 0xf8, 0x00, 0x00, 0x00, 0x03, 0xf8, 0x00, 0x00, 0x00, 0x07, 0xfc, 0x00, 
	0x00, 0x06, 0x1f, 0xff, 0x84, 0x00, 0x01, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x7e, 0x0f, 0xc0, 0x00
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ssd1306/include/bitmap_icon.h" line="116" column="22" bodyfile="components/peripherals/i2c/esp_ssd1306/include/bitmap_icon.h" bodystart="116" bodyend="127"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1gac2c67423d7bdcde4d4630e7f2071643f" prot="public" static="yes" mutable="no">
        <type>const uint8_t</type>
        <definition>const uint8_t proton_icon_32x32[]</definition>
        <argsstring>[]</argsstring>
        <name>proton_icon_32x32</name>
        <initializer>= {
	0x00, 0x01, 0xc0, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x06, 0x30, 0x00, 0x00, 0x0c, 0x10, 0x00, 
	0x00, 0x08, 0x1b, 0xe0, 0x00, 0x18, 0x1f, 0xf0, 0x00, 0x10, 0x3c, 0x18, 0x00, 0x10, 0xec, 0x18, 
	0x00, 0x31, 0x84, 0x18, 0x00, 0x33, 0x84, 0x10, 0x00, 0xff, 0xff, 0x10, 0x07, 0xfc, 0x07, 0xf0, 
	0x1c, 0x38, 0x06, 0x78, 0x70, 0x30, 0x86, 0x6e, 0x60, 0x63, 0xe6, 0x47, 0xc0, 0xe3, 0xe6, 0xc3, 
	0xc1, 0xe3, 0xe7, 0x83, 0xc1, 0x23, 0xe7, 0x03, 0x63, 0x21, 0xc6, 0x06, 0x3e, 0x20, 0x0e, 0x1c, 
	0x0f, 0x20, 0x1e, 0x78, 0x07, 0xff, 0xff, 0xc0, 0x0c, 0x3f, 0xfe, 0x00, 0x0c, 0x30, 0xc4, 0x00, 
	0x0c, 0x11, 0x84, 0x00, 0x0c, 0x1f, 0x0c, 0x00, 0x0c, 0x1c, 0x08, 0x00, 0x07, 0xf8, 0x18, 0x00, 
	0x03, 0x8c, 0x18, 0x00, 0x00, 0x06, 0x30, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x03, 0xc0, 0x00
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ssd1306/include/bitmap_icon.h" line="130" column="22" bodyfile="components/peripherals/i2c/esp_ssd1306/include/bitmap_icon.h" bodystart="130" bodyend="139"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1gad8095df6695efe863e6032d10976ff08" prot="public" static="yes" mutable="no">
        <type>const uint8_t</type>
        <definition>const uint8_t molecule_icon_32x32[]</definition>
        <argsstring>[]</argsstring>
        <name>molecule_icon_32x32</name>
        <initializer>= {
	0x07, 0x00, 0x00, 0x00, 0x0f, 0x80, 0x00, 0x00, 0x0f, 0x80, 0x00, 0x00, 0x0f, 0x80, 0x00, 0x00, 
	0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 
	0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x03, 0xc0, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x0f, 0xf0, 0x00, 
	0x00, 0x0f, 0xf0, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x03, 0xc0, 0x00, 
	0xe0, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 
	0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0xfc, 
	0x00, 0x20, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ssd1306/include/bitmap_icon.h" line="142" column="22" bodyfile="components/peripherals/i2c/esp_ssd1306/include/bitmap_icon.h" bodystart="142" bodyend="151"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1gaee0b238f690f93af44b2555dcdd690c3" prot="public" static="yes" mutable="no">
        <type>const uint8_t</type>
        <definition>const uint8_t skull_icon_50x64[]</definition>
        <argsstring>[]</argsstring>
        <name>skull_icon_50x64</name>
        <initializer>= {
	0x00, 0x00, 0x07, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x01, 
	0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 
	0xfc, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0x80, 
	0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x01, 
	0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x03, 0xff, 0xff, 
	0xff, 0xff, 0xf0, 0x00, 0x05, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x05, 0xff, 0xff, 0xff, 0xff, 
	0xfc, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xec, 0x00, 0x06, 0xff, 0xff, 0xff, 0xff, 0xec, 0x00, 
	0x0e, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xdc, 0x00, 0x0f, 0x7f, 
	0xff, 0xff, 0xff, 0xfe, 0x00, 0x0f, 0x7f, 0xff, 0xff, 0xff, 0xbe, 0x00, 0x0f, 0xff, 0xff, 0xff, 
	0xff, 0xbe, 0x00, 0x0f, 0xbf, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x0f, 0xbf, 0xff, 0xff, 0xff, 0x7e, 
	0x00, 0x0f, 0xbf, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xbc, 0x00, 0x0f, 
	0x7f, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x07, 0xfe, 0x3f, 
	0xff, 0x8f, 0xdc, 0x00, 0x06, 0xe0, 0x0f, 0xfe, 0x00, 0xf8, 0x00, 0x07, 0xc0, 0x07, 0xfc, 0x00, 
	0xf8, 0x00, 0x07, 0xc0, 0x03, 0xf8, 0x00, 0x78, 0x00, 0x03, 0xc0, 0x03, 0xf8, 0x00, 0x78, 0x00, 
	0x01, 0xc0, 0x03, 0xf8, 0x00, 0x70, 0x00, 0x01, 0xc0, 0x07, 0xf8, 0x00, 0x70, 0x00, 0x07, 0xc0, 
	0x07, 0xfc, 0x00, 0x7c, 0x00, 0x07, 0xc0, 0x0f, 0x3c, 0x00, 0xfc, 0x00, 0x07, 0xc0, 0x1e, 0x1f, 
	0x00, 0xfc, 0x00, 0x07, 0xe0, 0xfe, 0x0f, 0xc0, 0xf8, 0x00, 0x03, 0xf3, 0xfc, 0x0f, 0xfb, 0xf8, 
	0x00, 0x03, 0xff, 0xfc, 0x0f, 0xff, 0xf0, 0x00, 0x01, 0xff, 0xfc, 0x07, 0xff, 0xf0, 0x00, 0x00, 
	0xff, 0xfc, 0x07, 0xff, 0xe0, 0x00, 0x00, 0x7f, 0xfc, 0x07, 0xff, 0xc0, 0x00, 0x00, 0x1f, 0xfc, 
	0x0f, 0xfe, 0x00, 0x00, 0x00, 0x3e, 0xfe, 0x0f, 0xdf, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 
	0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xdf, 0x80, 0x00, 
	0x00, 0x3f, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x3e, 0xff, 0xff, 0x7f, 0x80, 0x00, 0x00, 0x3e, 
	0xf7, 0xfd, 0xff, 0x00, 0x00, 0x00, 0x1f, 0xb7, 0xbf, 0xff, 0x00, 0x00, 0x00, 0x1f, 0xb7, 0xbf, 
	0xfe, 0x00, 0x00, 0x00, 0x0f, 0xf7, 0xbf, 0xfc, 0x00, 0x00, 0x00, 0x0f, 0xf7, 0xbf, 0xfc, 0x00, 
	0x00, 0x00, 0x07, 0xf7, 0xbf, 0xfc, 0x00, 0x00, 0x00, 0x07, 0xfe, 0x07, 0xf8, 0x00, 0x00, 0x00, 
	0x03, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x01, 0xff, 
	0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0x80, 
	0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xfc, 0x00, 0x00, 0x00
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ssd1306/include/bitmap_icon.h" line="154" column="22" bodyfile="components/peripherals/i2c/esp_ssd1306/include/bitmap_icon.h" bodystart="154" bodyend="183"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1gac8c3cff605d4774dd6ed5a4d7115d9bf" prot="public" static="yes" mutable="no">
        <type>const uint8_t</type>
        <definition>const uint8_t radioactive_icon_64x64[]</definition>
        <argsstring>[]</argsstring>
        <name>radioactive_icon_64x64</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ssd1306/include/bitmap_icon.h" line="187" column="22" bodyfile="components/peripherals/i2c/esp_ssd1306/include/bitmap_icon.h" bodystart="187" bodyend="220"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1gae3bc5fdd23ee776b90cf0fee59e6e0dc" prot="public" static="yes" mutable="no">
        <type>const uint8_t</type>
        <definition>const uint8_t biohazard_icon_70x64[]</definition>
        <argsstring>[]</argsstring>
        <name>biohazard_icon_70x64</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ssd1306/include/bitmap_icon.h" line="223" column="22" bodyfile="components/peripherals/i2c/esp_ssd1306/include/bitmap_icon.h" bodystart="223" bodyend="260"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1ga7155324113082070ea9a111bd43bffd4" prot="public" static="yes" mutable="no">
        <type>const uint8_t</type>
        <definition>const uint8_t proton_icon_64x64[]</definition>
        <argsstring>[]</argsstring>
        <name>proton_icon_64x64</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ssd1306/include/bitmap_icon.h" line="263" column="22" bodyfile="components/peripherals/i2c/esp_ssd1306/include/bitmap_icon.h" bodystart="263" bodyend="296"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1gaeddb51270429ff123d2d899064f8a1cb" prot="public" static="yes" mutable="no">
        <type>const uint8_t</type>
        <definition>const uint8_t molecule_icon_64x64[]</definition>
        <argsstring>[]</argsstring>
        <name>molecule_icon_64x64</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ssd1306/include/bitmap_icon.h" line="299" column="22" bodyfile="components/peripherals/i2c/esp_ssd1306/include/bitmap_icon.h" bodystart="299" bodyend="332"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1ga9b39f4b2be397276c4aa5d8ad16c8b4a" prot="public" static="yes" mutable="no">
        <type>const uint8_t</type>
        <definition>const uint8_t font_latin_8x8_tr[FONT_LATIN_8x8_ROWS_SIZE][FONT_LATIN_8x8_COLS_SIZE]</definition>
        <argsstring>[FONT_LATIN_8x8_ROWS_SIZE][FONT_LATIN_8x8_COLS_SIZE]</argsstring>
        <name>font_latin_8x8_tr</name>
        <briefdescription>
<para>8x8 latin font map with control and extended characters. This font map is transposed 90 degrees for unicode points that are compatible with the SSD13xx display panel. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ssd1306/include/font_latin_8x8.h" line="111" column="22" bodyfile="components/peripherals/i2c/esp_ssd1306/include/font_latin_8x8.h" bodystart="111" bodyend="368"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1gae17c2ce427f8f758d4ce5d4635043b26" prot="public" static="no" mutable="no">
        <type></type>
        <definition>tlv493d_temperature_msb_register_t</definition>
        <argsstring></argsstring>
        <name>tlv493d_temperature_msb_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_tlv493d/include/tlv493d.h" line="119" column="2" bodyfile="components/peripherals/i2c/esp_tlv493d/include/tlv493d.h" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1gade8d8489dfc7dd57ec9970dbe38bbe8c" prot="public" static="no" mutable="no">
        <type></type>
        <definition>tlv493d_bx_by_lsb_register_t</definition>
        <argsstring></argsstring>
        <name>tlv493d_bx_by_lsb_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_tlv493d/include/tlv493d.h" line="127" column="2" bodyfile="components/peripherals/i2c/esp_tlv493d/include/tlv493d.h" bodystart="127" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1ga91dbd0ed0ee4376c49d20160408fb206" prot="public" static="no" mutable="no">
        <type></type>
        <definition>tlv493d_bz_lsb_register_t</definition>
        <argsstring></argsstring>
        <name>tlv493d_bz_lsb_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_tlv493d/include/tlv493d.h" line="138" column="2" bodyfile="components/peripherals/i2c/esp_tlv493d/include/tlv493d.h" bodystart="138" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1gab6cc2e99721349d328b53a9f6fb9468c" prot="public" static="no" mutable="no">
        <type></type>
        <definition>tlv493d_factory_setting1_register_t</definition>
        <argsstring></argsstring>
        <name>tlv493d_factory_setting1_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_tlv493d/include/tlv493d.h" line="150" column="2" bodyfile="components/peripherals/i2c/esp_tlv493d/include/tlv493d.h" bodystart="150" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1gae3b2c8b8080921d1030bb6de79e9443f" prot="public" static="no" mutable="no">
        <type></type>
        <definition>tlv493d_factory_setting2_register_t</definition>
        <argsstring></argsstring>
        <name>tlv493d_factory_setting2_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_tlv493d/include/tlv493d.h" line="160" column="2" bodyfile="components/peripherals/i2c/esp_tlv493d/include/tlv493d.h" bodystart="160" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1ga26d43baa139f9bf0c1acd35e377e43e9" prot="public" static="no" mutable="no">
        <type></type>
        <definition>tlv493d_factory_setting3_register_t</definition>
        <argsstring></argsstring>
        <name>tlv493d_factory_setting3_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_tlv493d/include/tlv493d.h" line="171" column="2" bodyfile="components/peripherals/i2c/esp_tlv493d/include/tlv493d.h" bodystart="171" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1ga0abad624b8cad07bba1133fbcf529b91" prot="public" static="no" mutable="no">
        <type></type>
        <definition>tlv493d_reserved1_register_t</definition>
        <argsstring></argsstring>
        <name>tlv493d_reserved1_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_tlv493d/include/tlv493d.h" line="182" column="2" bodyfile="components/peripherals/i2c/esp_tlv493d/include/tlv493d.h" bodystart="182" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1gaf3163215aa3e65378de317e77e29fabd" prot="public" static="no" mutable="no">
        <type></type>
        <definition>tlv493d_mode1_register_t</definition>
        <argsstring></argsstring>
        <name>tlv493d_mode1_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_tlv493d/include/tlv493d.h" line="197" column="2" bodyfile="components/peripherals/i2c/esp_tlv493d/include/tlv493d.h" bodystart="197" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1ga4544ac5a3aeb6d18aa977dfd5a3fbb75" prot="public" static="no" mutable="no">
        <type></type>
        <definition>tlv493d_reserved2_register_t</definition>
        <argsstring></argsstring>
        <name>tlv493d_reserved2_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_tlv493d/include/tlv493d.h" line="207" column="2" bodyfile="components/peripherals/i2c/esp_tlv493d/include/tlv493d.h" bodystart="207" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1ga522dfd1970326f970174ab86b81a4efb" prot="public" static="no" mutable="no">
        <type></type>
        <definition>tlv493d_mode2_register_t</definition>
        <argsstring></argsstring>
        <name>tlv493d_mode2_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_tlv493d/include/tlv493d.h" line="220" column="2" bodyfile="components/peripherals/i2c/esp_tlv493d/include/tlv493d.h" bodystart="220" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1ga43dbb20bdd937de4f7b9f61d356e4f6a" prot="public" static="no" mutable="no">
        <type></type>
        <definition>veml6040_config_register_t</definition>
        <argsstring></argsstring>
        <name>veml6040_config_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_veml6040/include/veml6040.h" line="130" column="2" bodyfile="components/peripherals/i2c/esp_veml6040/include/veml6040.h" bodystart="130" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1ga144aedf94d5108e694811f602ad2b7a0" prot="public" static="no" mutable="no">
        <type></type>
        <definition>veml7700_configuration_register_t</definition>
        <argsstring></argsstring>
        <name>veml7700_configuration_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_veml7700/include/veml7700.h" line="150" column="2" bodyfile="components/peripherals/i2c/esp_veml7700/include/veml7700.h" bodystart="150" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1ga9fe6b3f26d0cb45e02cf5a2ce8013f71" prot="public" static="no" mutable="no">
        <type></type>
        <definition>veml7700_power_saving_mode_register_t</definition>
        <argsstring></argsstring>
        <name>veml7700_power_saving_mode_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_veml7700/include/veml7700.h" line="169" column="2" bodyfile="components/peripherals/i2c/esp_veml7700/include/veml7700.h" bodystart="169" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1ga0b086037f3a29b97e0e6dbec1aa0049d" prot="public" static="no" mutable="no">
        <type></type>
        <definition>veml7700_interrupt_status_register_t</definition>
        <argsstring></argsstring>
        <name>veml7700_interrupt_status_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_veml7700/include/veml7700.h" line="186" column="2" bodyfile="components/peripherals/i2c/esp_veml7700/include/veml7700.h" bodystart="186" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1ga7e6fdbe1ae516df2b5b22bdd426ee16f" prot="public" static="no" mutable="no">
        <type></type>
        <definition>veml7700_identifier_register_t</definition>
        <argsstring></argsstring>
        <name>veml7700_identifier_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_veml7700/include/veml7700.h" line="197" column="2" bodyfile="components/peripherals/i2c/esp_veml7700/include/veml7700.h" bodystart="197" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1gada01db8c7a5a83c156ac9d257af0f8d3" prot="public" static="no" mutable="no">
        <type></type>
        <definition>ds18b20_configuration_register_t</definition>
        <argsstring></argsstring>
        <name>ds18b20_configuration_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/owb/esp_ds18b20/include/ds18b20.h" line="91" column="2" bodyfile="components/peripherals/owb/esp_ds18b20/include/ds18b20.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1ga232797305b800c1c591c037a6f34eb37" prot="public" static="no" mutable="no">
        <type></type>
        <definition>ds18b20_scratchpad_t</definition>
        <argsstring></argsstring>
        <name>ds18b20_scratchpad_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/owb/esp_ds18b20/include/ds18b20.h" line="106" column="2" bodyfile="components/peripherals/owb/esp_ds18b20/include/ds18b20.h" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1ga2a5a906bfe5641729118f9652501702f" prot="public" static="no" mutable="no">
        <type></type>
        <definition>spi_max31865_configuration_register_t</definition>
        <argsstring></argsstring>
        <name>spi_max31865_configuration_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/spi/esp_max31865/max31865.h" line="113" column="2" bodyfile="components/peripherals/spi/esp_max31865/max31865.h" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__drivers_1ga8851896d0af9e67e22033e22f08075dc" prot="public" static="no" mutable="no">
        <type></type>
        <definition>spi_max31865_fault_status_register_t</definition>
        <argsstring></argsstring>
        <name>spi_max31865_fault_status_register_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/spi/esp_max31865/max31865.h" line="130" column="2" bodyfile="components/peripherals/spi/esp_max31865/max31865.h" bodystart="130" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="group__drivers_1gafe725213331255cb80b1f2eabc9fb010" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t s12sd_init</definition>
        <argsstring>(const s12sd_config_t *s12sd_config, s12sd_handle_t *s12sd_handle)</argsstring>
        <name>s12sd_init</name>
        <param>
          <type>const <ref refid="group__drivers_1ga15f16165cfb4b322efe163ac65f02cdd" kindref="member">s12sd_config_t</ref> *</type>
          <declname>s12sd_config</declname>
        </param>
        <param>
          <type><ref refid="group__drivers_1ga7bd30cb31497500d06f7189146fcca08" kindref="member">s12sd_handle_t</ref> *</type>
          <declname>s12sd_handle</declname>
        </param>
        <briefdescription>
<para>Initializes an adc S12SD device. </para>
        </briefdescription>
        <detaileddescription>
<para>public function and subroutine declarations </para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">s12sd_config</parametername>
</parameternamelist>
<parameterdescription>
<para>S12SD device configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">s12sd_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>S12SD device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ESP_OK: init success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/adc/esp_s12sd/include/s12sd.h" line="119" column="11" bodyfile="components/peripherals/adc/esp_s12sd/s12sd.c" bodystart="185" bodyend="223" declfile="components/peripherals/adc/esp_s12sd/include/s12sd.h" declline="119" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga219c7f2cf38372bf720a29ff7eb1748f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t s12sd_measure</definition>
        <argsstring>(s12sd_handle_t handle, uint8_t *uv_index)</argsstring>
        <name>s12sd_measure</name>
        <param>
          <type><ref refid="group__drivers_1ga7bd30cb31497500d06f7189146fcca08" kindref="member">s12sd_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>uv_index</declname>
        </param>
        <briefdescription>
<para>Measure S12SD device. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>S12SD device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">uv_index</parametername>
</parameternamelist>
<parameterdescription>
<para>uv index (1 to 11). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ESP_OK: init success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/adc/esp_s12sd/include/s12sd.h" line="128" column="11" bodyfile="components/peripherals/adc/esp_s12sd/s12sd.c" bodystart="225" bodyend="262" declfile="components/peripherals/adc/esp_s12sd/include/s12sd.h" declline="128" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga701d5eb60680b39ba39ee56241838d89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t s12sd_delete</definition>
        <argsstring>(s12sd_handle_t handle)</argsstring>
        <name>s12sd_delete</name>
        <param>
          <type><ref refid="group__drivers_1ga7bd30cb31497500d06f7189146fcca08" kindref="member">s12sd_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Deinitialize S12SD device. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>S12SD device handle </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ESP_OK: init success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/adc/esp_s12sd/include/s12sd.h" line="136" column="11" bodyfile="components/peripherals/adc/esp_s12sd/s12sd.c" bodystart="264" bodyend="276" declfile="components/peripherals/adc/esp_s12sd/include/s12sd.h" declline="136" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga44d0ad127b85de655a7340e091f8e3f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * s12sd_get_fw_version</definition>
        <argsstring>(void)</argsstring>
        <name>s12sd_get_fw_version</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Converts S12SD firmware version numbers (major, minor, patch) into a string. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>char* S12SD firmware version as a string that is formatted as X.X.X (e.g. 4.0.0). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/adc/esp_s12sd/include/s12sd.h" line="143" column="12" bodyfile="components/peripherals/adc/esp_s12sd/s12sd.c" bodystart="278" bodyend="280" declfile="components/peripherals/adc/esp_s12sd/include/s12sd.h" declline="143" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga9be3443ef114eb41b77a82057ae97b60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t s12sd_get_fw_version_number</definition>
        <argsstring>(void)</argsstring>
        <name>s12sd_get_fw_version_number</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Converts S12SD firmware version numbers (major, minor, patch) into an integer value. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>int32_t S12SD firmware version number. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/adc/esp_s12sd/include/s12sd.h" line="150" column="9" bodyfile="components/peripherals/adc/esp_s12sd/s12sd.c" bodystart="282" bodyend="284" declfile="components/peripherals/adc/esp_s12sd/include/s12sd.h" declline="150" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gad642cb1b7454d7bc92b753b37ccd7111" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>union</type>
        <definition>union __attribute__</definition>
        <argsstring>((packed)) ahtxx_status_register_u</argsstring>
        <name>__attribute__</name>
        <param>
          <type>(packed)</type>
        </param>
        <briefdescription>
<para>AHTXX status register structure definition. </para>
        </briefdescription>
        <detaileddescription>
<para>MAX31865 SPI fault status register structure.</para>
<para>MAX31865 SPI configuration register structure.</para>
<para>DS18B20 scratchpad structure. Power-up state depends on value(s) stored in EEPROM.</para>
<para>DS18B20 configuration register structure. See datasheet for details, Figure 10 and Table 2.</para>
<para>VEML7700 identifier register structure.</para>
<para>VEML7700 interrupt status register structure.</para>
<para>VEML7700 power saving mode register structure.</para>
<para>VEML7700 configuration register structure.</para>
<para>VEML6040 configuration register structure.</para>
<para>write only 0x03</para>
<para>write only 0x02</para>
<para>write only 0x01</para>
<para>write only 0x00</para>
<para>read only 0x09</para>
<para>read only 0x08</para>
<para>read only 0x07</para>
<para>SGP4X self-test result structure.</para>
<para>MPU6050 who am i or device identifier register structure.</para>
<para>MPU6050 power management 2 register structure.</para>
<para>MPU6050 power management 1 register structure.</para>
<para>MPU6050 user control register structure.</para>
<para>MPU6050 signal path reset register structure.</para>
<para>MPU6050 interrupt status register structure.</para>
<para>MPU6050 interrupt pin configuration register structure.</para>
<para>MPU6050 interrupt enable register structure.</para>
<para>MPU6050 FIFO enable register structure.</para>
<para>MPU6050 accelerometer configuration register structure.</para>
<para>MPU6050 gyroscope configuration register structure.</para>
<para>MPU6050 configuration register structure.</para>
<para>MPU6050 self-test a register structure.</para>
<para>MPU6050 self-test register (self-test x, y, z) structure.</para>
<para>MMC56X3 control 2 register (0x1D Write) (POR 0x00) structure.</para>
<para>MMC56X3 control 1 register (0x1C Write) (POR 0x00) structure.</para>
<para>MMC56X3 control 0 register (0x1B Write) (POR 0x00) structure.</para>
<para>MMC56X3 status 1 register (0x18 Read) (POR 0x00) structure.</para>
<para>MLX90614 flags register structure.</para>
<para>MLX90614 PWM control register structure.</para>
<para>MLX90614 configuration register structure.</para>
<para>MAX30105 FIFO data register (0x07, read-write | POR State 0x00) structure.</para>
<para>MAX30105 FIFO read pointer register (0x06, read-write | POR State 0x00) structure.</para>
<para>MAX30105 FIFO overflow counter register (0x05, read-write | POR State 0x00) structure.</para>
<para>MAX30105 FIFO write pointer register (0x04, read-write | POR State 0x00) structure.</para>
<para>MAX30105 multi-LED mode control registers (0x11-0x12, read-write | POR State 0x00) structure.</para>
<para>MAX30105 mode configuration register (0x09, read-write | POR State 0x00) structure.</para>
<para>MAX30105 interrupt enable 2 register (0x03, read-write | POR State 0x00) structure.</para>
<para>MAX30105 interrupt enable 1 register (0x02, read-write | POR State 0x00) structure.</para>
<para>MAX30105 interrupt status 2 register (0x01, read-only | POR State 0x00) structure.</para>
<para>MAX30105 interrupt status 1 register (0x00, read-only | POR State 0x00) structure.</para>
<para>LTR390UV interrupt configuration register (0x19 read-write | POR State 0x10) structure.</para>
<para>LTR390UV main status register (0x07 read-only | POR State 0x20) structure.</para>
<para>LTR390UV ALS UVS gain register (0x04 read-write | POR State 0x01) structure.</para>
<para>LTR390UV ALS UVS measurement register (0x04 read-write | POR State 0x22) structure.</para>
<para>LTR390UV main control register (0x00 read-write | POR State 0x00) structure.</para>
<para>Alert configuration and Conversion Ready flag.</para>
<para>All-register reset, shunt voltage and bus voltage ADC conversion times and averaging, operating mode.</para>
<para>HMC5883L status register structure.</para>
<para>HMC5883L mode register structure.</para>
<para>HMC5883L configuration 2 (b) register structure.</para>
<para>HMC5883L configuration 1 (a) register structure.</para>
<para>HDC1080 serial number register structure definition.</para>
<para>HDC1080 temperature or humidity measurement register structure definition.</para>
<para>HDC1080 device configuration register structure definition.</para>
<para>ENS160 calculated air quality index (aqi) data register structure. See datasheet for AQI-UBA details.</para>
<para>ENS160 interrupt configuration register structure.</para>
<para>ENS160 status register structure.</para>
<para>CCS811 error codes <computeroutput>ERROR_ID</computeroutput> register structure.</para>
<para>CCS811 firmware version format (bootloader 0x23 and application 0x24) structure (review).</para>
<para>CCS811 threshold value structure (big endien).</para>
<para>CCS811 raw data register structure (review - not correct).</para>
<para>CCS811 measure mode and condition register structure.</para>
<para>CCS811 status register structure.</para>
<para>BMP390 configuration register (0x1f) structure. The reset state is 0x00 for this register.</para>
<para>BMP390 ODR register (0x1d) structure. The reset state is 0x00 for this register.</para>
<para>BMP390 OSR register (0x1c) structure. The reset state is 0x02 for this register.</para>
<para>BMP390 power control register (0x1b) structure. The reset state is 0x00 for this register.</para>
<para>BMP390 interrupt control register (0x19) structure. The reset state is 0x02 for this register.</para>
<para>BMP390 interrupt status register (0x11) structure. The reset state is ? for this register.</para>
<para>BMP390 status register (0x03) structure. The reset state is 0x00 for this register.</para>
<para>BMP280 configuration register (0xf5) structure definition. The reset state is 0x00 for this register.</para>
<para>BMP280 control measurement register (0xf4) structure definition. The reset state is 0x00 for this register.</para>
<para>BMP280 status register (0xf3) structure definition. The reset state is 0x00 for this register.</para>
<para>BME680 configuration register (0x75) structure. The reset state is 0x00 for this register. This register contains SPI and IIR filter settings.</para>
<para>BME680 control gas_r_lsb register (0x2b) structure. The reset state is 0x00 for this register. This register contains the gas resistance lsb, gas validation flag, heater stab, and gas range settings.</para>
<para>BME680 control gas 1 register (0x70) structure. The reset state is 0x00 for this register. This register contains heater setting.</para>
<para>BME680 control gas 0 register (0x71) structure. The reset state is 0x00 for this register. This register contains the heater set-point and gas conversion settings.</para>
<para>BME680 control measurement register (0x72) structure. The reset state is 0x00 for this register. This register contains humidity oversampling and SPI interrupt settings.</para>
<para>BME680 control measurement register (0x74) structure. The reset state is 0x00 for this register. This register contains the power mode, pressure and temperature oversampling settings.</para>
<para>BME680 status 0 register (0x1d) structure. The reset state is 0x00 for this register. This register contains the gas measurement index, measuring status, gas measuring status, and new data status.</para>
<para>AS7341 configuration 6 register (0xaf) structure.</para>
<para>AS7341 configuration 1 register (0xaa) structure.</para>
<para>AS7341 configuration 0 register (0xa9) structure.</para>
<para>AS7341 part number identifier register (0x92) structure.</para>
<para>AS7341 revision number identifier register (0x91) structure.</para>
<para>AS7341 auxiliary identifier register (0x90) structure.</para>
<para>AS7341 flicker detection status register (0xdb) structure.</para>
<para>AS7341 status 6 register (0xa7) structure.</para>
<para>AS7341 status 5 register (0xa6) structure.</para>
<para>AS7341 status 3 register (0xa4) structure.</para>
<para>AS7341 status 2 register (0xa3) structure.</para>
<para>AS7341 astatus register (0x94) structure.</para>
<para>AS7341 device status register (0x71) structure.</para>
<para>AS7341 interrupt status register (0x93) structure.</para>
<para>AS7341 interrupt enable register (0xf9) structure.</para>
<para>AS7341 led register (0x74) structure.</para>
<para>AS7341 gpio2 register (0xbe) structure.</para>
<para>AS7341 gpio1 register (0x73) structure.</para>
<para>AS7341 flicker detection time 2 register (0xDA) structure.</para>
<para>AS7341 flicker detection time 1 register (0xD8) structure. THIS ISN&apos;T NEEDED.</para>
<para>AS7341 configuration register (0x70) structure.</para>
<para>AS7341 enable register (0x80) structure.</para>
<para>AS3935 register 0x08 structure.</para>
<para>AS3935 register 0x07 structure.</para>
<para>AS3935 register 0x03 structure.</para>
<para>AS3935 register 0x02 structure.</para>
<para>AS3935 register 0x01 structure.</para>
<para>AS3935 register 0x00 structure.</para>
<para>AK8975 self-test control register structure.</para>
<para>AK8975 status 2 register structure.</para>
<para>AK8975 status 1 register structure.</para>
<para>AK8975 control register structure.</para>
<para>violet -&gt; F1 indigo -&gt; F2 blue -&gt; F3 cyan -&gt; F4 green -&gt; F5 yellow -&gt; F6 orange -&gt; F7 red -&gt; F8 </para>
<para><simplesect kind="note"><para>To operate the device enable power and interrupts before enabling spectral measurements.</para>
</simplesect>
<simplesect kind="note"><para>Each bit will clear after the register is read.</para>
</simplesect>
Table 1 - Configuration Register #0 (see datasheet pg. 7) REGISTER NAME BIT Reserved 15:13 ALS_GAIN 12:11 Reserved 10 ALS_IT 9:6 ALS_PERS 5:4 Reserved 3:2 ALS_INT_END 1 ALS_SD 0</para>
<para>Table 4 - Power Saving Modes (see datasheet pg. 8) REGISTER NAME BIT Reserved 15:3 PSM 2:1 PSM_EN 0</para>
<para>Table 7 - Interrupt Status (see datasheet pg. 9) REGISTER NAME BIT </para>
        </detaileddescription>
        <inbodydescription>
<para>&lt; reserved (bit:0-2) <linebreak/>
</para>
<para>&lt; ahtxx is calibrated when true (bit:3)</para>
<para>&lt; reserved (bit:4-6)</para>
<para>&lt; ahtxx is busy when true (bit:7)</para>
<para>&lt; operating mode (bit:0-3) <linebreak/>
</para>
<para>&lt; reserved and set to 0 (bit:4-7) <linebreak/>
</para>
<para>&lt; represents the 8-bit control register parts in bits. <linebreak/>
</para>
<para>&lt; represents the 8-bit control register as <computeroutput>uint8_t</computeroutput>. <linebreak/>
</para>
<para>&lt; data ready status (bit:0) <linebreak/>
</para>
<para>&lt; reserved and set to 0 (bit:1-7) <linebreak/>
</para>
<para>&lt; represents the 8-bit status 1 register parts in bits. <linebreak/>
</para>
<para>&lt; represents the 8-bit status 1 register as <computeroutput>uint8_t</computeroutput>. <linebreak/>
</para>
<para>&lt; reserved and set to 0 (bit:0-1) <linebreak/>
</para>
<para>&lt; data error status (bit:2) <linebreak/>
</para>
<para>&lt; magnetic sensor overflow status (bit:3) <linebreak/>
</para>
<para>&lt; reserved and set to 0 (bit:4-7) <linebreak/>
</para>
<para>&lt; represents the 8-bit status 2 register parts in bits. <linebreak/>
</para>
<para>&lt; represents the 8-bit status 2 register as <computeroutput>uint8_t</computeroutput>. <linebreak/>
</para>
<para>&lt; reserved and set to 0 (bit:0-5) <linebreak/>
</para>
<para>&lt; self-test status (bit:6) <linebreak/>
</para>
<para>&lt; reserved and set to 0 (bit:7) <linebreak/>
</para>
<para>&lt; represents the 8-bit self-test control register parts in bits. <linebreak/>
</para>
<para>&lt; represents the 8-bit self-test control register as <computeroutput>uint8_t</computeroutput>. <linebreak/>
</para>
<para>&lt; power on or off (bit:0) <linebreak/>
</para>
<para>&lt; analog front-end (AFE) and watchdog (bit:1-5)</para>
<para>&lt; reserved and set to 0 (bit:6-7)</para>
<para>&lt; represents the 8-bit control register parts in bits.</para>
<para>&lt; represents the 8-bit control register as <computeroutput>uint8_t</computeroutput></para>
<para>&lt; watchdog threshold (bit:0-3)</para>
<para>&lt; noise floor level (bit:4-6)</para>
<para>&lt; reserved and set to 0 (bit:7) <linebreak/>
</para>
<para>&lt; represents the 8-bit control register parts in bits.</para>
<para>&lt; represents the 8-bit control register as <computeroutput>uint8_t</computeroutput></para>
<para>&lt; spike rejection (bit:0-3)</para>
<para>&lt; minimum number of lightning (bit:4-5)</para>
<para>&lt; clear statistics (bit:6) <linebreak/>
</para>
<para>&lt; reserved and set to 0 (bit:7) <linebreak/>
</para>
<para>&lt; represents the 8-bit control register parts in bits.</para>
<para>&lt; represents the 8-bit control register as <computeroutput>uint8_t</computeroutput></para>
<para>&lt; lightning event interrupt (bit:0-3)</para>
<para>&lt; reserved and set to 0 (bit:4) <linebreak/>
</para>
<para>&lt; disturber detection state (bit:5) <linebreak/>
</para>
<para>&lt; lco frequency division (bit:6-7)</para>
<para>&lt; represents the 8-bit control register parts in bits.</para>
<para>&lt; represents the 8-bit control register as <computeroutput>uint8_t</computeroutput></para>
<para>&lt; lightning distance estimation (bit:0-5)</para>
<para>&lt; reserved and set to 0 (bit:6-7)</para>
<para>&lt; represents the 8-bit control register parts in bits.</para>
<para>&lt; represents the 8-bit control register as <computeroutput>uint8_t</computeroutput></para>
<para>&lt; internal tuning capacitors from 0 to 120pF in steps of 8pF (0-15) (bit:0-3)</para>
<para>&lt; reserved and set to 0 (bit:4)</para>
<para>&lt; display trco on irq pin (bit:5)</para>
<para>&lt; display srco on irq pin (bit:6)</para>
<para>&lt; display lco on irq pin (bit:7)</para>
<para>&lt; represents the 8-bit control register parts in bits.</para>
<para>&lt; represents the 8-bit control register as <computeroutput>uint8_t</computeroutput></para>
<para>&lt; as7341 power enabled when true (bit:0) <linebreak/>
</para>
<para>&lt; as7341 spectral measurement enabled when true (bit:1) <linebreak/>
</para>
<para>&lt; reserved (bit:2)</para>
<para>&lt; as7341 wait time between two consecutive spectral measurements enabled when true (bit:3)</para>
<para>&lt; as7341 starts SMUX command when true and bit is cleared when SMUX operation is finished (bit:4)</para>
<para>&lt; reserved (bit:5)</para>
<para>&lt; as7341 flicker detection enabled when true (bit:6) <linebreak/>
</para>
<para>&lt; reserved (bit:7)</para>
<para>&lt; as7341 ambient light sensing mode (bit:0-1) <linebreak/>
</para>
<para>&lt; as7341 sync signal applied on output pin interrupt when true (bit:2)</para>
<para>&lt; as7341 register LED controls LED connected to pin LDR when true (register 0x74), otherwise, exernal LED is not controlled by as7341 (bit:3)</para>
<para>&lt; reserved (bit:4-7)</para>
<para>&lt; as7341 flicker detection integration time LSB (t = FD_TIME * 2.78us) (bit:0-7)</para>
<para>&lt; as7341 flicker detection integration time MSB (t = FD_TIME * 2.78us) (bit:0-2)</para>
<para>&lt; as7341 flicker detection gain (bit:3-7)</para>
<para>&lt; as7341 photo diode connected to interrupt pin when true (bit:0)</para>
<para>&lt; as7341 photo diode connected to GPIO pin when true (bit:1)</para>
<para>&lt; reserved (bit:2-7)</para>
<para>&lt; as7341 GPIO pin is input when true if gpio input is enabled (bit:0)</para>
<para>&lt; as7341 output state of GPIO pin is active when true (bit:1)</para>
<para>&lt; as7341 GPIO pin accepts non-floating input when true (bit:2)</para>
<para>&lt; as7341 output state of GPIO pin is inverted when true (bit:3)</para>
<para>&lt; reserved (bit:4-7)</para>
<para>&lt; as7341 LED driving strength (bit:0-6)</para>
<para>&lt; as7341 external LED connected to LDR pin is enabled when true (bit:7)</para>
<para>&lt; as7341 interrupt asserted when system interrupts occur when enabled (bit:0)</para>
<para>&lt; reserved (bit:1)</para>
<para>&lt; as7341 interrupt asserted when FIFO LVL exceeds FIFO threshold condition when enabled (bit:2)</para>
<para>&lt; as7341 interrupt asserted subject to spectral thresholds and persistence filter when enabled (bit:3)</para>
<para>&lt; reserved (bit:4-6)</para>
<para>&lt; as7341 spectral and flicker detection interrupt asserted when enabled (bit:7)</para>
<para>&lt; as7341 system interrupt asserted when true (bit:0)</para>
<para>&lt; as7341 calibration interrupt asserted when true (bit:1)</para>
<para>&lt; as7341 interrupt asserted when FIFO LVL exceeds FIFO threshold condition when true (bit:2)</para>
<para>&lt; as7341 interrupt asserted subject to spectral threholds and persistence filter when true (bit:3)</para>
<para>&lt; reserved (bit:4-6)</para>
<para>&lt; as7341 spectral and flicker detection interrupt asserted when true (bit:7)</para>
<para>&lt; as7341 spectral measurement status is ready when true (bit:0)</para>
<para>&lt; as7341 device waits for sync pulse on GPIO to start integration when true (bit:1)</para>
<para>&lt; reserved (bit:2-7)</para>
<para>&lt; as7341 gain applied for the spectral data latched to this ASTATUS read (bit:3-0)</para>
<para>&lt; reserved (bit:4-6)</para>
<para>&lt; as7341 latched data is affected by analog or digital saturation (bit:7)</para>
<para>&lt; as7341 maximum counter value has been reached during flicker detection when true (bit:0)</para>
<para>&lt; as7341 intensity of ambient light ha exceeded the maximum integration level for analg circuit for flicker detection when true (bit:1)</para>
<para>&lt; reserved (bit:2)</para>
<para>&lt; as7341 intensity of ambient light ha exceeded the maximum integration level for spectral analg circuit when true (bit:3)</para>
<para>&lt; as7341 maximum counter value has been reached when true, dependent of ATIME register (bit:4)</para>
<para>&lt; reserved (bit:5)</para>
<para>&lt; as7341 spectral measurement has been completed when true (bit:6)</para>
<para>&lt; reserved (bit:7)</para>
<para>&lt; reserved (bit:3-0)</para>
<para>&lt; as7341 spectral interrupt asserted when data is below the low threshold (bit:4)</para>
<para>&lt; as7341 spectral interrupt asserted when data is above the high threshold (bit:5)</para>
<para>&lt; reserved (bit:6-7)</para>
<para>&lt; reserved (bit:1-0)</para>
<para>&lt; as7341 SMUX command execution has finished when true (bit:2)</para>
<para>&lt; as7341 FD_STATUS register status has changed when true and if SIEN_FD is enabled (bit:3)</para>
<para>&lt; reserved (bit:4-7)</para>
<para>&lt; as7341 device is initializing when true, wait until cleared (bit:0)</para>
<para>&lt; as7341 device is in sleep due to an interrupt when true (bit:1)</para>
<para>&lt; as7341 timing error when true, WTIME to short for ATIME (bit:2)</para>
<para>&lt; reserved (bit:3)</para>
<para>&lt; as7341 timing error that prevents flicker detect from working correctly (bit:4)</para>
<para>&lt; as7341 device temperature is to high when true (bit:5)</para>
<para>&lt; reserved (bit:6)</para>
<para>&lt; as7341 FIFO buffer overflowed and information is lost when true (bit:7)</para>
<para>&lt; as7341 ambient light source is flickering at 100Hz when true (bit:0)</para>
<para>&lt; as7341 ambient light source is flickering at 120Hz when true (bit:1)</para>
<para>&lt; as7341 100Hz flicker detection calculation is valid when true, write true to clear (bit:2)</para>
<para>&lt; as7341 120Hz flicker detection calculation is valid when true, write true to clear (bit:3)</para>
<para>&lt; as7341 saturation ocurred during the last flicker detection measurement when true,write true to clear (bit:4)</para>
<para>&lt; as7341 flicker detection measurement is complete when true, write true to clear (bit:5)</para>
<para>&lt; reserved (bit:6-7)</para>
<para>&lt; as7341 auxiliary identification (bit:0-3)</para>
<para>&lt; reserved (bit:4-7)</para>
<para>&lt; as7341 revision number identification (bit:0-2)</para>
<para>&lt; reserved (bit:3-7)</para>
<para>&lt; reserved (bit:0-1)</para>
<para>&lt; as7341 device part number identification (bit:2-7)</para>
<para>&lt; reserved (bit:1-0)</para>
<para>&lt; increase te WTIME setting by a factor of 16 when asserted (bit:2)</para>
<para>&lt; reserved (bit:3)</para>
<para>&lt; bit needs to be set to access registers 0x60 to 0x70 (bit:4)</para>
<para>&lt; device will run in a low power modem when asserted (bit:5)</para>
<para>&lt; reserved (bit:6-7)</para>
<para>&lt; spectral sensitivity (bit:4-0)</para>
<para>&lt; reserved (bit:5-7)</para>
<para>&lt; reserved (bit:2-0)</para>
<para>&lt; as7341 SMUX command to execute when smux enabled gets set (bit:3-4)</para>
<para>&lt; reserved (bit:5-7)</para>
<para>&lt; bme680 user can program sequence of up to 10 conversions by setting nb_conv&lt;3:0&gt; (bit:0-3)</para>
<para>&lt; reserved (bit:4)</para>
<para>&lt; bmp680 automatically set to 1 whenever a conversion is running and back to 0 when results transferred to data registers (bit:5)</para>
<para>&lt; bme680 automatically set to 1 during gas measurement and back to 0 when results transferred to data registers (bit:6)</para>
<para>&lt; bme680 measured data are stored into the data registers when true (bit:7)</para>
<para>&lt; bme680 power mode of the device (bit:0-1) <linebreak/>
</para>
<para>&lt; bme680 oversampling of pressure data (bit:2-4)</para>
<para>&lt; bme680 oversampling of temperature data (bit:5-7)</para>
<para>&lt; bme680 oversampling of humidity data (bit:0-2) <linebreak/>
</para>
<para>&lt; bme680 reserved (bit:3-5)</para>
<para>&lt; bme680 3-wire SPI interrupt enabled when true (bit:6) <linebreak/>
</para>
<para>&lt; bme680 reserved (bit:7)</para>
<para>&lt; bme680 (bit:0-3) <linebreak/>
</para>
<para>&lt; bme680 gas conversions are started only appropriate mode when true (bit:4) <linebreak/>
</para>
<para>&lt; bme680 reserved (bit:5-7)</para>
<para>&lt; bme680 (bit:0-2) <linebreak/>
</para>
<para>&lt; bme680 heater is off when true (bit:3) <linebreak/>
</para>
<para>&lt; bme680 reserved (bit:4-7)</para>
<para>&lt; bme680 adc range of measure gas sensor resistance (bit:0-3) <linebreak/>
</para>
<para>&lt; bme680 heater temperature stability for target heater resistance (bit:4) <linebreak/>
</para>
<para>&lt; bme680 gas conversion is valid when true (bit:5) <linebreak/>
</para>
<para>&lt; bme680 gas resistance lsb (bit:6-7)</para>
<para>&lt; bme680 3-wire SPI interface enabled when true (bit:0) <linebreak/>
</para>
<para>&lt; bme680 reserved (bit:1)</para>
<para>&lt; bme680 time constant of the IIR filter (bit:2-4)</para>
<para>&lt; bme680 reserved (bit:5-7)</para>
<para>&lt; bmp280 automatically set to 1 when NVM data are being copied to image registers and back to 0 when done (bit:0) <linebreak/>
</para>
<para>&lt; reserved (bit:1-2)</para>
<para>&lt; bmp280 automatically set to 1 whenever a conversion is running and back to 0 when results transferred to data registers (bit:3)</para>
<para>&lt; reserved (bit:4-7)</para>
<para>&lt; bmp280 power mode of the device (bit:0-1) <linebreak/>
</para>
<para>&lt; bmp280 oversampling of pressure data (bit:2-4)</para>
<para>&lt; bmp280 oversampling of temperature data (bit:5-7)</para>
<para>&lt; bmp280 3-wire SPI interface enabled when true (bit:0) <linebreak/>
</para>
<para>&lt; bmp280 reserved (bit:1)</para>
<para>&lt; bmp280 time constant of the IIR filter (bit:2-4)</para>
<para>&lt; bmp280 inactive duration in normal mode (bit:5-7)</para>
<para>&lt; bmp390 reserved (bit:0-3)</para>
<para>&lt; bmp390 command decoder is ready to accept a new command when true (bit:4)</para>
<para>&lt; bmp390 pressure data ready when true and it is reset when data register is read out (bit:5)</para>
<para>&lt; bmp390 temperature data ready when true and it is reset when data register is read out (bit:6)</para>
<para>&lt; bmp390 reserved (bit:7)</para>
<para>&lt; bmp390 FIFO watermark interrupt, cleared after reading (bit:0)</para>
<para>&lt; bmp390 FIFO full interrupt, cleared after reading (bit:1)</para>
<para>&lt; bmp390 reserved (bit:2)</para>
<para>&lt; bmp390 data ready interrupt, cleared after reading (bit:3)</para>
<para>&lt; bmp390 reserved (bit:4-7)</para>
<para>&lt; bmp390 open-drain (true) or push-pull (false) (bit:0)</para>
<para>&lt; bmp390 active-high (true) or active-low (false) (bit:1)</para>
<para>&lt; bmp390 latching of interrupt pin is enabled when true (bit:2)</para>
<para>&lt; bmp390 (bit:3)</para>
<para>&lt; bmp390 (bit:4)</para>
<para>&lt; bmp390 high (true) or low (false) (bit:5)</para>
<para>&lt; (bit:6)</para>
<para>&lt; bmp390 reserved (bit:7)</para>
<para>&lt; bmp390 pressure sensor enabled when true (bit:0)</para>
<para>&lt; bmp390 temperature sensor enabled when true (bit:1)</para>
<para>&lt; bmp380 reserved (bit:2-3)</para>
<para>&lt; bmp390 power mode of the device (bit:4-5) <linebreak/>
</para>
<para>&lt; bmp390 reserved (bit:6-7)</para>
<para>&lt; bmp390 oversampling of pressure data (bit:0-2)</para>
<para>&lt; bmp390 oversampling of temperature data (bit:3-5)</para>
<para>&lt; bmp390 reserved (bit:6-7)</para>
<para>&lt; bmp390 output data rate (bit:0-4)</para>
<para>&lt; bmp390 reserved (bit:5-7)</para>
<para>&lt; bmp390 reserved (bit:0)</para>
<para>&lt; bmp390 time constant of the IIR filter (bit:1-3)</para>
<para>&lt; bmp390 reserved (bit:4-7)</para>
<para>&lt; error when true (bit:0) <linebreak/>
</para>
<para>&lt; reserved and set to 0 (bit:2-1)</para>
<para>&lt; data ready when true (bit:3) <linebreak/>
</para>
<para>&lt; application firmware passed when true (bit:4) <linebreak/>
</para>
<para>&lt; application verify completed when true (bit:5) <linebreak/>
</para>
<para>&lt; application erase completed when true (bit:6) <linebreak/>
</para>
<para>&lt; firmware mode (bit:7) <linebreak/>
</para>
<para>&lt; represents the 8-bit register parts in bits.</para>
<para>&lt; represents the 8-bit register as <computeroutput>uint8_t</computeroutput></para>
<para>&lt; reserved and set to 0 (bit:1-0)</para>
<para>&lt; threshold interrupt enabled when true (bit:2) <linebreak/>
</para>
<para>&lt; data ready interrupt enabled when true (bit:3) <linebreak/>
</para>
<para>&lt; drive mode (bit:6-4)</para>
<para>&lt; reserved and set to 0 (bit:7) <linebreak/>
</para>
<para>&lt; represents the 8-bit register parts in bits.</para>
<para>&lt; represents the 8-bit register as <computeroutput>uint8_t</computeroutput> <linebreak/>
</para>
<para>&lt; raw adc (bit:)</para>
<para>&lt; current (bit:7) <linebreak/>
</para>
<para>&lt; represents the 16-bit register parts in bits.</para>
<para>&lt; represents the 16-bit register as <computeroutput>uint16_t</computeroutput> <linebreak/>
</para>
<para>&lt; low to medium threshold (1500ppm = 0x05DC default) (bit:7-0) <linebreak/>
</para>
<para>&lt; low to medium threshold (1500ppm = 0x05DC default) (bit:8-15) <linebreak/>
</para>
<para>&lt; represents the 16-bit register parts in bits.</para>
<para>&lt; represents the 16-bit threshold value register as <computeroutput>uint16_t</computeroutput> <linebreak/>
</para>
<para>&lt; major (bit:3-0) <linebreak/>
</para>
<para>&lt; minor (bit:4-7) <linebreak/>
</para>
<para>&lt; trivial (bit:15-8)</para>
<para>&lt; represents the 16-bit version parts in bits.</para>
<para>&lt; represents the 16-bit version as <computeroutput>uint16_t</computeroutput> <linebreak/>
</para>
<para>&lt; write register invalid when tru (bit:0)</para>
<para>&lt; read register invalid when true (bit:1)</para>
<para>&lt; measurement drive mode invalid when true (bit:2)</para>
<para>&lt; maximum resistance exceeded when true (bit:3)</para>
<para>&lt; heater current supply fault when true (bit:4)</para>
<para>&lt; heater voltage supply fault when true (bit:5)</para>
<para>&lt; reserved and set to 0 (bit:6)</para>
<para>&lt; reserved and set to 0 (bit:7)</para>
<para>&lt; represents the 8-bit register parts in bits.</para>
<para>&lt; represents the 8-bit register as <computeroutput>uint8_t</computeroutput> <linebreak/>
</para>
<para>&lt; true indicates new data is available in <computeroutput>GPR_READ</computeroutput> registers (bit:0) <linebreak/>
</para>
<para>&lt; true indicates new data is available in <computeroutput>DATA_x</computeroutput> registers (bit:1) <linebreak/>
</para>
<para>&lt; device status (bit:2-3)</para>
<para>&lt; reserved and set 0 (bit:4-5)</para>
<para>&lt; true indicates an error is detected (bit:6) <linebreak/>
</para>
<para>&lt; true indicates an operating mode is running (bit:7) <linebreak/>
</para>
<para>&lt; represents the 8-bit status register parts in bits. <linebreak/>
</para>
<para>&lt; represents the 8-bit status register as <computeroutput>uint8_t</computeroutput>. <linebreak/>
</para>
<para>&lt; true indicates interrupt pin is enabled (bit:0) <linebreak/>
</para>
<para>&lt; true indicates interrupt pin is asserted when new data is available in <computeroutput>DATA_XXX</computeroutput> registers (bit:1) <linebreak/>
</para>
<para>&lt; reserved and set to 0 (bit:2) <linebreak/>
</para>
<para>&lt; true indicates interrupt pin is asserted when new data is available in general purpose registers (bit:3)</para>
<para>&lt; reserved and set to 0 (bit:4) <linebreak/>
</para>
<para>&lt; interrupt pin driver configuration (bit:5) <linebreak/>
</para>
<para>&lt; interrupt pin polarity configuration (bit:6) <linebreak/>
</para>
<para>&lt; reserved and set to 0 (bit:7) <linebreak/>
</para>
<para>&lt; represents the 8-bit interrupt configuration register parts in bits. <linebreak/>
</para>
<para>&lt; represents the 8-bit interrupt configuration register as <computeroutput>uint8_t</computeroutput>. <linebreak/>
</para>
<para>&lt; air quality index per uba[1..5] (default: 0x01) (bit:0-2) <linebreak/>
</para>
<para>&lt; reserved and set to 0 (bit:3-7) <linebreak/>
</para>
<para>&lt; represents the 8-bit calculated air quality index data register parts in bits. <linebreak/>
</para>
<para>&lt; represents the 8-bit calculated air quality index data register as <computeroutput>uint8_t</computeroutput>. <linebreak/>
</para>
<para>&lt; reserved and set to 0 (bit:0-7)</para>
<para>&lt; humidity measurement resolution (bit:8-9)</para>
<para>&lt; temperature measurement resolution (bit:10)</para>
<para>&lt; battery status (bit:11)</para>
<para>&lt; acquisition mode (bit:12)</para>
<para>&lt; heater enabled when true (bit:13)</para>
<para>&lt; reserved and set to 0 (bit:14)</para>
<para>&lt; software reset when true (bit:15)</para>
<para>&lt; represents the 16-bit configuration register parts in bits.</para>
<para>&lt; represents the 16-bit configuration register as <computeroutput>uint16_t</computeroutput></para>
<para>&lt; reserved and set to 0 (bit:0-1)</para>
<para>&lt; measurement value (bit:2-14)</para>
<para>&lt; represents the 16-bit measurement register parts in bits.</para>
<para>&lt; represents the 16-bit measurement register as <computeroutput>uint16_t</computeroutput></para>
<para>&lt; reserved and set to 0 (bit:0-6) <linebreak/>
</para>
<para>&lt; serial id 0 (bit:7-15) <linebreak/>
</para>
<para>&lt; serial id 1 (bit:16-31)</para>
<para>&lt; serial id 2 (bit:32-47)</para>
<para>&lt; represents the 64-bit measurement register parts in bits.</para>
<para>&lt; represents the 64-bit measurement register as <computeroutput>uint64_t</computeroutput></para>
<para>&lt; measurement configuration, measurement bias (bit:0-1) <linebreak/>
</para>
<para>&lt; data rate at which data is written (bit:2-4) <linebreak/>
</para>
<para>&lt; number of samples averaged (bit:5-6) <linebreak/>
</para>
<para>&lt; reserved and set to 0 (bit:7) <linebreak/>
</para>
<para>&lt; represents the 8-bit configuration 1 register parts in bits. <linebreak/>
</para>
<para>&lt; represents the 8-bit configuration 1 register as <computeroutput>uint8_t</computeroutput>. <linebreak/>
</para>
<para>&lt; reserved and set to 0 (bit:0-4) <linebreak/>
</para>
<para>&lt; gain configuration for all channels (bit:5-7) <linebreak/>
</para>
<para>&lt; represents the 8-bit configuration 2 register parts in bits. <linebreak/>
</para>
<para>&lt; represents the 8-bit configuration 2 register as <computeroutput>uint8_t</computeroutput>. <linebreak/>
</para>
<para>&lt; operation mode (bit:0-1) <linebreak/>
</para>
<para>&lt; set high to enable i2c high speed (3400khz) (bit:2-7) <linebreak/>
</para>
<para>&lt; represents the 8-bit mode register parts in bits. <linebreak/>
</para>
<para>&lt; represents the 8-bit mode register as <computeroutput>uint8_t</computeroutput>. <linebreak/>
</para>
<para>&lt; data is ready when asserted to true (bit:0) <linebreak/>
</para>
<para>&lt; data is locked when asserted to true (bit:1) <linebreak/>
</para>
<para>&lt; reserved (bit:2-7) <linebreak/>
</para>
<para>&lt; represents the 8-bit status register parts in bits. <linebreak/>
</para>
<para>&lt; represents the 8-bit status register as <computeroutput>uint8_t</computeroutput>. <linebreak/>
</para>
<para>&lt; reset state BIT15</para>
<para>&lt; represents the 16-bit control register parts in bits.</para>
<para>&lt; represents the 16-bit control register as <computeroutput>uint16_t</computeroutput></para>
<para>&lt; (bit:0)</para>
<para>&lt; (bit:1)</para>
<para>&lt; (bit:2)</para>
<para>&lt; (bit:3)</para>
<para>&lt; (bit:4)</para>
<para>&lt; (bit:5-9)</para>
<para>&lt; (bit:10)</para>
<para>&lt; (bit:11)</para>
<para>&lt; (bit:12)</para>
<para>&lt; (bit:13)</para>
<para>&lt; (bit:14)</para>
<para>&lt; (bit:15)</para>
<para>&lt; represents the 16-bit mask/enable register parts in bits.</para>
<para>&lt; represents the 16-bit mask/enable register as <computeroutput>uint16_t</computeroutput></para>
<para>&lt; reserved (bit:0) <linebreak/>
</para>
<para>&lt; ltr390uv light sensor (ALS/UVS) standby when false and active when true (bit:1)</para>
<para>&lt; reserved (bit:2) <linebreak/>
</para>
<para>&lt; ltr390uv operation mode (ALS or UVS) (bit:3)</para>
<para>&lt; ltr390uv software reset triggered when true (bit:4)</para>
<para>&lt; reserved (bit:5-7)</para>
<para>&lt; (bit:0-2) <linebreak/>
</para>
<para>&lt; reserved (bit:3)</para>
<para>&lt; ltr390uv (bit:4-6)</para>
<para>&lt; reserved (bit:7)</para>
<para>&lt; ltr390uv (bit:0-2)</para>
<para>&lt; reserved (bit:4-6)</para>
<para>&lt; reserved (bit:0-2) <linebreak/>
</para>
<para>&lt; ltr390uv (bit:3)</para>
<para>&lt; ltr390uv (bit:4)</para>
<para>&lt; ltr390uv (bit:5)</para>
<para>&lt; reserved (bit:6-7)</para>
<para>&lt; reserved (bit:0-1) <linebreak/>
</para>
<para>&lt; ltr390uv (bit:2)</para>
<para>&lt; reserved (bit:3)</para>
<para>&lt; ltr390uv (bit:4-5)</para>
<para>&lt; reserved (bit:6-7)</para>
<para>&lt; max30105 On power-up or after a brownout condition, when the supply voltage VDD transitions from below the undervoltage-lockout (UVLO) voltage to above the UVLO voltage, a power-ready interrupt is triggered to signal that the module is powered-up and ready to collect data. (bit:0) <linebreak/>
</para>
<para>&lt; reserved (bit:1-3)</para>
<para>&lt; max30105 the proximity interrupt is triggered when the proximity threshold is reached, and particle-sensing mode has begun. This lets the host processor know to begin running the particle-sensing algorithm and collect data. The interrupt is cleared by reading the Interrupt Status 1 register (0x00). (bit:4)</para>
<para>&lt; max30105 this interrupt triggers when the ambient light cancellation function of the particle-sensing photodiode has reached its maximum limit, The interrupt is cleared by reading the Interrupt Status 1 register (0x00). (bit:5)</para>
<para>&lt; max30105 in particle-sensing mode, this interrupt triggers when there is a new sample in the data FIFO. The interrupt is cleared by reading the Interrupt Status 1 register (0x00), or by reading the FIFO_DATA register. (bit:6)</para>
<para>&lt; max30105 in particle-sensing mode, this interrupt triggers when the FIFO write pointer has a certain number of free spaces remaining. The interrupt is cleared by reading the Interrupt Status 1 register (0x00). (bit:7)</para>
<para>&lt; reserved (bit:0)</para>
<para>&lt; max30105 when an internal die temperature conversion is finished, this interrupt is triggered so the processor can read the temperature data registers. The interrupt is cleared by reading either the Interrupt Status 2 register (0x01) or the TFRAC register (0x20). (bit:1) <linebreak/>
</para>
<para>&lt; reserved (bit:2-7)</para>
<para>&lt; reserved (bit:0-3)</para>
<para>&lt; max30105 proximity interrupt is asserted when enabled (bit:4)</para>
<para>&lt; max30105 ambient light cancellation interrupt is asserted when enabled (bit:5)</para>
<para>&lt; max30105 data ready interrupt is asserted when enabled (bit:6)</para>
<para>&lt; max30105 interrupt is asserted when enabled (bit:7)</para>
<para>&lt; reserved (bit:0)</para>
<para>&lt; max30105 internal temperature ready interrupt is asserted when enabled (bit:1)</para>
<para>&lt; reserved (bit:2-7)</para>
<para>&lt; max30105 These bits set the operating state of the MAX30105. Changing modes does not change any other setting, nor does it erase any previously stored data inside the data registers. (bit:0-2)</para>
<para>&lt; reserved (bit:5-3)</para>
<para>&lt; max30105 soft-reset is asserted when enabled, When the RESET bit is set to one, all configuration, threshold, and data registers are reset to their power-on-state through a power-on reset. (bit:6)</para>
<para>&lt; max30105 shutdown is asserted when enabled, The part can be put into a power-save mode by setting this bit to one. While in power-save mode, all registers retain their values, and write/read operations function as normal. All interrupts are cleared to zero in this mode. (bit:7)</para>
<para>&lt; max30105 multi-LED mode time slot 1 or 3 (bit:0-2)</para>
<para>&lt; reserved (bit:3)</para>
<para>&lt; max30105 multi-LED mode time slot 2 or 4 (bit:4-6)</para>
<para>&lt; reserved (bit:7)</para>
<para>&lt; max30105 (bit:0-4)</para>
<para>&lt; reserved (bit:5-7)</para>
<para>&lt; max30105 (bit:0-4)</para>
<para>&lt; reserved (bit:5-7)</para>
<para>&lt; max30105 (bit:0-4)</para>
<para>&lt; reserved (bit:5-7)</para>
<para>&lt; max30105 (bit:0-7)</para>
<para>&lt; iir setting (bit:0-2)</para>
<para>&lt; repeat sensor test state (bit:3)</para>
<para>&lt; temperature sensor configuration (bit:4-5)</para>
<para>&lt; ir sensor type (bit:6)</para>
<para>&lt; positive or negative signs of k (bit:7)</para>
<para>&lt; fir setting (bit:8-10)</para>
<para>&lt; gain setting (bit:11-13)</para>
<para>&lt; positive or negative signs of kt2 (bit:14)</para>
<para>&lt; sensor test state (bit:15)</para>
<para>&lt; represents the 16-bit config register parts in bits.</para>
<para>&lt; represents the 16-bit config register as <computeroutput>uint16_t</computeroutput></para>
<para>&lt; PWM mode (bit:0)</para>
<para>&lt; PWM mode state (bit:1)</para>
<para>&lt; SDA pin mode (bit:2)</para>
<para>&lt; thermal mode (bit:3)</para>
<para>&lt; PWM repetition number 0...62 step of 2 (bit:4-8)</para>
<para>&lt; PWM period in ms is 1.024*bits (single PWM mode) or 2.048*bits (extended PWM mode), bits is the multiplier (bit:9-15)</para>
<para>&lt; represents the 16-bit PWM control register parts in bits.</para>
<para>&lt; represents the 16-bit PWM control register as <computeroutput>uint16_t</computeroutput></para>
<para>&lt; PWM period in ms is calculated from <computeroutput>pwm_period_mult</computeroutput> and <computeroutput>pwm_mode</computeroutput>.</para>
<para>&lt; reserved 0 (bit:0-2)</para>
<para>&lt; not implemented (bit:3)</para>
<para>&lt; POR initialization routine is still ongoing. Low active. (bit:4)</para>
<para>&lt; EEPROM double error has occurred. High active (bit:5)</para>
<para>&lt; unused (bit:6)</para>
<para>&lt; the previous write/erase EEPROM access is still in progress. High active (bit:7)</para>
<para>&lt; reserved 0 (bit:8-15)</para>
<para>&lt; represents the 16-bit flags register parts in bits.</para>
<para>&lt; represents the 16-bit flags register as <computeroutput>uint16_t</computeroutput></para>
<para>&lt; reserved and set to 0 (bit:0-3)</para>
<para>&lt; true when otp memory read (bit:4) <linebreak/>
</para>
<para>&lt; false when selftest pass (bit:5) <linebreak/>
</para>
<para>&lt; true when magnetic measurement done and data is ready, reset when any magnetic data register is read (bit:6) <linebreak/>
</para>
<para>&lt; true when temperature measurement done and data is ready, reset when temperature data register is read (bit:7) <linebreak/>
</para>
<para>&lt; represents the 8-bit status 1 register parts in bits. <linebreak/>
</para>
<para>&lt; represents the 8-bit status 1 register as <computeroutput>uint8_t</computeroutput> and has a reset-value of 0x00. <linebreak/>
</para>
<para>&lt; perform magnetic measurement when true and self clears at the end of the measurement (bit:0)</para>
<para>&lt; perform temperature measurement when true and self clears at the end of the measurement (bit:1)</para>
<para>&lt; reserved and set to 0 (bit:2)</para>
<para>&lt; perform set operation when true and self clears at the end of set operation (bit:3)</para>
<para>&lt; perform reset operation when true and self clears at the end of reset operation (bit:4)</para>
<para>&lt; enable automatic periodic set/reset when true (bit:5)</para>
<para>&lt; enable automatic selftest when true and self clears at the end of the operation, set registers 0x1e, 0x1f, and 0x20 beforehand (bit:6)</para>
<para>&lt; enable measurement period calculation when true and self clears once measurement period is calculated (bit:7)</para>
<para>&lt; represents the 8-bit control 0 register parts in bits. <linebreak/>
</para>
<para>&lt; represents the 8-bit control 0 register as <computeroutput>uint8_t</computeroutput> and has a reset-value of 0x00. <linebreak/>
</para>
<para>&lt; measurement time (bit:0-1)</para>
<para>&lt; x channel disabled true (bit:2)</para>
<para>&lt; y channel disabled true (bit:3)</para>
<para>&lt; z channel disabled true (bit:4)</para>
<para>&lt; bring selftest coil dc current when true (bit:5)</para>
<para>&lt; same as st_enp but opposite polarity (bit:6)</para>
<para>&lt; causes software-reset when true (bit:7)</para>
<para>&lt; represents the 8-bit control 1 register parts in bits. <linebreak/>
</para>
<para>&lt; represents the 8-bit control 1 register as <computeroutput>uint8_t</computeroutput> and has a reset-value of 0x00. <linebreak/>
</para>
<para>&lt; number of samples before set is executed, period set and auto set-reset must be enabled (bit:0-2)</para>
<para>&lt; perform periodical set when true (bit:3)</para>
<para>&lt; continuous mode when true, data period (odr) must be non-zero and contineous frequency enabled beforehand (bit:4)</para>
<para>&lt; reserved and set to 0 (bit:5-6)</para>
<para>&lt; achieve 1000Hz odr when true (bit:7)</para>
<para>&lt; represents the 8-bit control 2 register parts in bits. <linebreak/>
</para>
<para>&lt; represents the 8-bit control 2 register as <computeroutput>uint8_t</computeroutput> and has a reset-value of 0x00. <linebreak/>
</para>
<para>&lt; mpu6050 (bit:0-4)</para>
<para>&lt; mpu6050 (bit:5-7)</para>
<para>&lt; mpu6050 (bit:0-1)</para>
<para>&lt; mpu6050 (bit:2-3)</para>
<para>&lt; mpu6050 (bit:4-5)</para>
<para>&lt; reserved and set to 0 (bit:6-7)</para>
<para>&lt; mpu6050 digital low-pass filter configuration (bit:0-2)</para>
<para>&lt; mpu6050 external synchronization setting (bit:3-5)</para>
<para>&lt; mpu6050 reserved and set to 0 (bit:6-7)</para>
<para>&lt; mpu6050 reserved and set to 0 (bit:0-2)</para>
<para>&lt; mpu6050 gyroscope full scale range (bit:3-4)</para>
<para>&lt; mpu6050 z-axis gyroscope performs self-test when enabled (bit:5)</para>
<para>&lt; mpu6050 y-axis gyroscope performs self-test when enabled (bit:6)</para>
<para>&lt; mpu6050 x-axis gyroscope performs self-test when enabled (bit:7)</para>
<para>&lt; mpu6050 reserved and set to 0 (bit:0-2)</para>
<para>&lt; mpu6050 accelerometer full scale range (bit:3-4)</para>
<para>&lt; mpu6050 z-axis accelerometer performs self-test when enabled (bit:5)</para>
<para>&lt; mpu6050 y-axis accelerometer performs self-test when enabled (bit:6)</para>
<para>&lt; mpu6050 x-axis accelerometer performs self-test when enabled (bit:7)</para>
<para>&lt; mpu6050 enables slave 0 to be written into the FIFO buffer (bit:0)</para>
<para>&lt; mpu6050 enables slave 1 to be written into the FIFO buffer (bit:1)</para>
<para>&lt; mpu6050 enables slave 2 to be written into the FIFO buffer (bit:2)</para>
<para>&lt; mpu6050 enables accelerometer (x, y, z) to be written into the FIFO buffer (bit:3)</para>
<para>&lt; mpu6050 enables gyroscope z-axis to be written into the FIFO buffer (bit:4)</para>
<para>&lt; mpu6050 enables gyroscope y-axis to be written into the FIFO buffer (bit:5)</para>
<para>&lt; mpu6050 enables gyroscope x-axis to be written into the FIFO buffer (bit:6)</para>
<para>&lt; mpu6050 enables temperature to be written into the FIFO buffer (bit:7)</para>
<para>&lt; mpu6050 enables data ready interrupt (bit:0)</para>
<para>&lt; mpu6050 reserved and set to 0 (bit:1-2)</para>
<para>&lt; mpu6050 enables i2c master interrupt (bit:3)</para>
<para>&lt; mpu6050 enabled fifo overflow interrupt (bit:4)</para>
<para>&lt; mpu6050 reserved and set to 0 (bit:5-7)</para>
<para>&lt; reserved and set to 0 (bit:0) <linebreak/>
</para>
<para>&lt; (bit:1)</para>
<para>&lt; (bit:2)</para>
<para>&lt; (bit:3)</para>
<para>&lt; (bit:4)</para>
<para>&lt; (bit:5)</para>
<para>&lt; (bit:6)</para>
<para>&lt; (bit:7)</para>
<para>&lt; mpu6050 data is ready true when interrupt is generated (bit:0)</para>
<para>&lt; mpu6050 reserved and set to 0 (bit:1-2)</para>
<para>&lt; mpu6050 i2c master interrupt generated when true (bit:3)</para>
<para>&lt; mpu6050 fifo overflow interrupt generated when true (bit:4)</para>
<para>&lt; mpu6050 reserved and set to 0 (bit:5-7)</para>
<para>&lt; mpu6050 reset temperature analog and digital signal paths when true (bit:0)</para>
<para>&lt; mpu6050 reset accelerometer analog and digital signal paths when true (bit:1)</para>
<para>&lt; mpu6050 reset gyroscope analog and digital signal paths when true (bit:2)</para>
<para>&lt; mpu6050 reserved and set to 0 (bit:3-7)</para>
<para>&lt; mpu6050 resets signal paths for all sensors when true (bit:0)</para>
<para>&lt; mpu6050 resets i2c master when true (bit:1)</para>
<para>&lt; mpu6050 resets fifo buffer when true (bit:2)</para>
<para>&lt; mpu6050 reserved and set to 0 (bit:3)</para>
<para>&lt; mpu6050 disables i2c interface and enables spi interface (bit:4)</para>
<para>&lt; mpu6050 enables i2c master mode (bit:5)</para>
<para>&lt; mpu6050 enables fifo operation (bit:6)</para>
<para>&lt; mpu6050 reserved and set to 0 (bit:7)</para>
<para>&lt; mpu6050 device clock source (bit:0-2)</para>
<para>&lt; mpu6050 disables temperature sensor when true (bit:3)</para>
<para>&lt; mpu6050 reserved and set to 0 (bit:4)</para>
<para>&lt; mpu6050 will cycle between sleep mode to waking up when enabled to take a single smaple of data from active sensors (bit:5)</para>
<para>&lt; mpu6050 puts the device into sleep mode when enabled (bit:6)</para>
<para>&lt; mpu6050 resets all internal registers to default values when enabled (bit:7)</para>
<para>&lt; mpu6050 gyroscope z-axis in stand-by mode when true (bit:0)</para>
<para>&lt; mpu6050 gyroscope y-axis in stand-by mode when true (bit:1)</para>
<para>&lt; mpu6050 gyroscope x-axis in stand-by mode when true (bit:2)</para>
<para>&lt; mpu6050 accelerometer z-axis in stand-by mode when true (bit:3)</para>
<para>&lt; mpu6050 accelerometer y-axis in stand-by mode when true (bit:4)</para>
<para>&lt; mpu6050 accelerometer x-axis in stand-by mode when true (bit:5)</para>
<para>&lt; mpu6050 frequency of wake-ups in low-power mode (bit:6-7)</para>
<para>&lt; reserved and set to 0 (bit:0) <linebreak/>
</para>
<para>&lt; mpu6050 device identifier (default: 0x68) (bit:1-6)</para>
<para>&lt; reserved and set to 0 (bit:7) <linebreak/>
</para>
<para>&lt; one or more tests have failed when true (bit:0) <linebreak/>
</para>
<para>&lt; one or more tests have failed when true (bit:1)</para>
<para>&lt; reserved (bit:2-7)</para>
<para>&lt; channel conversion status (bit:0-1) <linebreak/>
</para>
<para>&lt; frame counter (bit:2-3)</para>
<para>&lt; temperature msb (bit:4-7)</para>
<para>&lt; by lsb (bit:0-3) <linebreak/>
</para>
<para>&lt; bx lsb (bit:4-7)</para>
<para>&lt; bz lsb (bit:0-3) <linebreak/>
</para>
<para>&lt; power-down flag, bx, by, bz and temperature conversion completed when true (bit:4)</para>
<para>&lt; parity fuse flag, fuse setup is okay with true (PT bit must be enabled MOD2) (bit:5)</para>
<para>&lt; test-mode flag, when false the data is valid (bit:6)</para>
<para>&lt; reserved, do not modify (bit:7)</para>
<para>&lt; reserved (bit:0-2) <linebreak/>
</para>
<para>&lt; factory setting - device spefici (bit:3-4) <linebreak/>
</para>
<para>&lt; reserved (bit:5-7)</para>
<para>&lt; factory setting - device spefici (bit:0-7) <linebreak/>
</para>
<para>&lt; factory setting - device spefici (bit:0-4) <linebreak/>
</para>
<para>&lt; reserved (bit:5-7)</para>
<para>&lt; factory setting - device specific 0x00 (reset) (bit:0-7) <linebreak/>
</para>
<para>&lt; low power mode enabled when true (bit:0) <linebreak/>
</para>
<para>&lt; fast mode enabled when true (bit:1)</para>
<para>&lt; interrupt pin assertion when true (bit:2)</para>
<para>&lt; factory setting - device specific 0x07 (bit:3-4)</para>
<para>&lt; defines slave address in bus configuration (bit:5-6)</para>
<para>&lt; parity of configuration map (bit:7)</para>
<para>&lt; factory setting - device specific 0x08 (bit:0-7) <linebreak/>
</para>
<para>&lt; factory setting - device specific 0x09 (bit:0-4) <linebreak/>
</para>
<para>&lt; parity test enabled when true (bit:5)</para>
<para>&lt; low power period, 12ms or 100ms (bit:6)</para>
<para>&lt; temperature measurement is disabled when true (bit:7)</para>
<para>&lt; shut-down when true (bit:0) <linebreak/>
</para>
<para>&lt; mode, auto or manual (bit:1)</para>
<para>&lt; trigger, none or one-time detect cycle (bit:2) <linebreak/>
</para>
<para>&lt; reserved and set to 0 (bit:3) <linebreak/>
</para>
<para>&lt; time to measure (bit:6-4) <linebreak/>
</para>
<para>&lt; reserved and set to 0 (bit:7) <linebreak/>
</para>
<para>&lt; reserved and set to 0 (high byte) (bit:0-7) <linebreak/>
</para>
<para>&lt; als shut-down when true (bit:0) <linebreak/>
</para>
<para>&lt; als interrupt enable when true (bit:1) <linebreak/>
</para>
<para>&lt; reserved and set to 0 (bit:2-3) <linebreak/>
</para>
<para>&lt; sample count before the interrupt triggers (bit:4-5) <linebreak/>
</para>
<para>&lt; time to measure (bit:6-9) <linebreak/>
</para>
<para>&lt; reserved and set to 0 (bit:10) <linebreak/>
</para>
<para>&lt; control the sensitivity (bit:11-12)</para>
<para>&lt; reserved and set to 0 (bit:13-15)</para>
<para>&lt; power saving enabeld when true (bit:0) <linebreak/>
</para>
<para>&lt; power saving mode (bit:1-2) <linebreak/>
</para>
<para>&lt; reserved and set to 0 (bit:3-15)</para>
<para>&lt; reserved and set to 0 (bit:0-13)</para>
<para>&lt; normal unless hi threshold is exceeded (bit:14) <linebreak/>
</para>
<para>&lt; normal unless lo threshold is exceeded (bit:15) <linebreak/>
</para>
<para>&lt; device id code (fixed 0x81) (bit:0-7) <linebreak/>
</para>
<para>&lt; slave address option code (bit:8-15) <linebreak/>
</para>
<para>&lt; reserved and set 1 (bit:0-4)</para>
<para>&lt; temperature resolution (bit:5-6)</para>
<para>&lt; reserved and set 0 (bit:7) <linebreak/>
</para>
<para>&lt; represents the 8-bit configuration register parts in bits. <linebreak/>
</para>
<para>&lt; represents the 8-bit configuration register as <computeroutput>uint8_t</computeroutput>. <linebreak/>
</para>
<para>&lt; lsb of temperature</para>
<para>&lt; msb of temperature</para>
<para>&lt; high trigger alarm threshold</para>
<para>&lt; low trigger alarm threshold</para>
<para>&lt; configuration register</para>
<para>&lt; reserved</para>
<para>&lt; reserved</para>
<para>&lt; reserved</para>
<para>&lt; crc value of scratchpad data</para>
<para>&lt; filter (bit:0) <linebreak/>
</para>
<para>&lt; (bit:1)</para>
<para>&lt; (bit:2-3)</para>
<para>&lt; (bit:4)</para>
<para>&lt; (bit:5)</para>
<para>&lt; (bit:6)</para>
<para>&lt; (bit:7)</para>
<para>&lt; reserved (bit:0-1) <linebreak/>
</para>
<para>&lt; (bit:2)</para>
<para>&lt; (bit:3)</para>
<para>&lt; (bit:4)</para>
<para>&lt; (bit:5)</para>
<para>&lt; (bit:6)</para>
<para>&lt; (bit:7)</para>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ahtxx/include/ahtxx.h" line="1" column="0" bodyfile="components/peripherals/i2c/esp_ahtxx/include/ahtxx.h" bodystart="130" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gafd126b56a8357d0583e1f775ac82eec9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ahtxx_get_status_register</definition>
        <argsstring>(ahtxx_handle_t handle, ahtxx_status_register_t *const reg)</argsstring>
        <name>ahtxx_get_status_register</name>
        <param>
          <type><ref refid="group__drivers_1gab66af7e90e12339f8760c01abf09c759" kindref="member">ahtxx_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>ahtxx_status_register_t *const</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Reads status register from AHTXX. </para>
        </briefdescription>
        <detaileddescription>
<para>public function and subroutine declarations </para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>AHTXX device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>AHTXX status register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ahtxx/include/ahtxx.h" line="178" column="11" bodyfile="components/peripherals/i2c/esp_ahtxx/ahtxx.c" bodystart="315" bodyend="326" declfile="components/peripherals/i2c/esp_ahtxx/include/ahtxx.h" declline="178" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga3a9d6c91fdd6cdc14ea60798524c9c4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ahtxx_init</definition>
        <argsstring>(const i2c_master_bus_handle_t master_handle, const ahtxx_config_t *ahtxx_config, ahtxx_handle_t *const ahtxx_handle)</argsstring>
        <name>ahtxx_init</name>
        <param>
          <type>const i2c_master_bus_handle_t</type>
          <declname>master_handle</declname>
        </param>
        <param>
          <type>const <ref refid="group__drivers_1ga4481478f7508935e24b98cf5027da6dd" kindref="member">ahtxx_config_t</ref> *</type>
          <declname>ahtxx_config</declname>
        </param>
        <param>
          <type><ref refid="group__drivers_1gab66af7e90e12339f8760c01abf09c759" kindref="member">ahtxx_handle_t</ref> *const</type>
          <declname>ahtxx_handle</declname>
        </param>
        <briefdescription>
<para>Initializes an AHTXX device onto the I2C master bus. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">master_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>I2C master bus handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ahtxx_config</parametername>
</parameternamelist>
<parameterdescription>
<para>AHTXX device configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">ahtxx_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>AHTXX device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ahtxx/include/ahtxx.h" line="188" column="11" bodyfile="components/peripherals/i2c/esp_ahtxx/ahtxx.c" bodystart="328" bodyend="381" declfile="components/peripherals/i2c/esp_ahtxx/include/ahtxx.h" declline="188" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gae4440d265f608195e5937336cd3582a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ahtxx_get_measurement</definition>
        <argsstring>(ahtxx_handle_t handle, float *const temperature, float *const humidity)</argsstring>
        <name>ahtxx_get_measurement</name>
        <param>
          <type><ref refid="group__drivers_1gab66af7e90e12339f8760c01abf09c759" kindref="member">ahtxx_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>float *const</type>
          <declname>temperature</declname>
        </param>
        <param>
          <type>float *const</type>
          <declname>humidity</declname>
        </param>
        <briefdescription>
<para>Reads temperature and relative humidity from AHTXX. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>AHTXX device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>temperature</parametername>
</parameternamelist>
<parameterdescription>
<para>Temperature in degree Celsius. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>humidity</parametername>
</parameternamelist>
<parameterdescription>
<para>Relative humidity in percentage. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ahtxx/include/ahtxx.h" line="198" column="11" bodyfile="components/peripherals/i2c/esp_ahtxx/ahtxx.c" bodystart="383" bodyend="446" declfile="components/peripherals/i2c/esp_ahtxx/include/ahtxx.h" declline="198" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gacbd108ca689401c69b12b6ca3b706931" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ahtxx_get_measurements</definition>
        <argsstring>(ahtxx_handle_t handle, float *const temperature, float *const humidity, float *const dewpoint)</argsstring>
        <name>ahtxx_get_measurements</name>
        <param>
          <type><ref refid="group__drivers_1gab66af7e90e12339f8760c01abf09c759" kindref="member">ahtxx_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>float *const</type>
          <declname>temperature</declname>
        </param>
        <param>
          <type>float *const</type>
          <declname>humidity</declname>
        </param>
        <param>
          <type>float *const</type>
          <declname>dewpoint</declname>
        </param>
        <briefdescription>
<para>Similar to <computeroutput>i2c_aht2x_read_measurement</computeroutput> but it includes dewpoint in the results. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>AHTXX device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">temperature</parametername>
</parameternamelist>
<parameterdescription>
<para>Temperature in degree Celsius. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">humidity</parametername>
</parameternamelist>
<parameterdescription>
<para>Relative humidity in percentage. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">dewpoint</parametername>
</parameternamelist>
<parameterdescription>
<para>Calculated dewpoint temperature in degree Celsius. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ahtxx/include/ahtxx.h" line="209" column="11" bodyfile="components/peripherals/i2c/esp_ahtxx/ahtxx.c" bodystart="448" bodyend="459" declfile="components/peripherals/i2c/esp_ahtxx/include/ahtxx.h" declline="209" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gad373f3332ae26a5cd75e454d7ca2ba22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ahtxx_get_busy_status</definition>
        <argsstring>(ahtxx_handle_t handle, bool *const busy)</argsstring>
        <name>ahtxx_get_busy_status</name>
        <param>
          <type><ref refid="group__drivers_1gab66af7e90e12339f8760c01abf09c759" kindref="member">ahtxx_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>bool *const</type>
          <declname>busy</declname>
        </param>
        <briefdescription>
<para>Reads busy status flag from AHTXX. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>AHTXX device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">busy</parametername>
</parameternamelist>
<parameterdescription>
<para>AHTXX is busy when true. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ahtxx/include/ahtxx.h" line="218" column="11" bodyfile="components/peripherals/i2c/esp_ahtxx/ahtxx.c" bodystart="461" bodyend="476" declfile="components/peripherals/i2c/esp_ahtxx/include/ahtxx.h" declline="218" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gad1ce57f1854e8737d28e745f7b0514ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ahtxx_get_calibration_status</definition>
        <argsstring>(ahtxx_handle_t handle, bool *const calibrated)</argsstring>
        <name>ahtxx_get_calibration_status</name>
        <param>
          <type><ref refid="group__drivers_1gab66af7e90e12339f8760c01abf09c759" kindref="member">ahtxx_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>bool *const</type>
          <declname>calibrated</declname>
        </param>
        <briefdescription>
<para>Reads calibration status flag from AHTXX. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>AHTXX device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">calibrated</parametername>
</parameternamelist>
<parameterdescription>
<para>AHTXX is calibrated when true. See <computeroutput>i2c_ahtxx_setup</computeroutput> and datasheet for details. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ahtxx/include/ahtxx.h" line="227" column="11" bodyfile="components/peripherals/i2c/esp_ahtxx/ahtxx.c" bodystart="478" bodyend="491" declfile="components/peripherals/i2c/esp_ahtxx/include/ahtxx.h" declline="227" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gac0d330794d286009a3a6724de57bed1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ahtxx_get_status</definition>
        <argsstring>(ahtxx_handle_t handle, bool *const busy, bool *const calibrated)</argsstring>
        <name>ahtxx_get_status</name>
        <param>
          <type><ref refid="group__drivers_1gab66af7e90e12339f8760c01abf09c759" kindref="member">ahtxx_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>bool *const</type>
          <declname>busy</declname>
        </param>
        <param>
          <type>bool *const</type>
          <declname>calibrated</declname>
        </param>
        <briefdescription>
<para>Reads busy and calibrated status flags from AHTXX. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>AHTXX device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">busy</parametername>
</parameternamelist>
<parameterdescription>
<para>AHTXX is busy when true. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">calibrated</parametername>
</parameternamelist>
<parameterdescription>
<para>AHTXX is calibrated when true. See <computeroutput>i2c_ahtxx_setup</computeroutput> and datasheet for details. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ahtxx/include/ahtxx.h" line="237" column="11" bodyfile="components/peripherals/i2c/esp_ahtxx/ahtxx.c" bodystart="493" bodyend="507" declfile="components/peripherals/i2c/esp_ahtxx/include/ahtxx.h" declline="237" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gad2a97b455e90b2390e26fd31917e1270" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ahtxx_reset</definition>
        <argsstring>(ahtxx_handle_t handle)</argsstring>
        <name>ahtxx_reset</name>
        <param>
          <type><ref refid="group__drivers_1gab66af7e90e12339f8760c01abf09c759" kindref="member">ahtxx_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Issues soft-reset and initializes AHTXX. See datasheet for details. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>AHTXX device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ahtxx/include/ahtxx.h" line="245" column="11" bodyfile="components/peripherals/i2c/esp_ahtxx/ahtxx.c" bodystart="509" bodyend="552" declfile="components/peripherals/i2c/esp_ahtxx/include/ahtxx.h" declline="245" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga53548925117543986f2a6d5a4fea0355" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ahtxx_remove</definition>
        <argsstring>(ahtxx_handle_t handle)</argsstring>
        <name>ahtxx_remove</name>
        <param>
          <type><ref refid="group__drivers_1gab66af7e90e12339f8760c01abf09c759" kindref="member">ahtxx_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Removes an AHTXX device from master bus. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>AHTXX device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ahtxx/include/ahtxx.h" line="253" column="11" bodyfile="components/peripherals/i2c/esp_ahtxx/ahtxx.c" bodystart="554" bodyend="560" declfile="components/peripherals/i2c/esp_ahtxx/include/ahtxx.h" declline="253" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gac24744a484425cf1d9096994bebf0e4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ahtxx_delete</definition>
        <argsstring>(ahtxx_handle_t handle)</argsstring>
        <name>ahtxx_delete</name>
        <param>
          <type><ref refid="group__drivers_1gab66af7e90e12339f8760c01abf09c759" kindref="member">ahtxx_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Removes an AHTXX device from master bus and frees handle. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>AHTXX device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ahtxx/include/ahtxx.h" line="261" column="11" bodyfile="components/peripherals/i2c/esp_ahtxx/ahtxx.c" bodystart="562" bodyend="576" declfile="components/peripherals/i2c/esp_ahtxx/include/ahtxx.h" declline="261" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gaee72d6200c7a90bd870758f2da3be930" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * ahtxx_get_fw_version</definition>
        <argsstring>(void)</argsstring>
        <name>ahtxx_get_fw_version</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Converts AHTXX firmware version numbers (major, minor, patch, build) into a string. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>char* AHTXX firmware version as a string that is formatted as X.X.X (e.g. 4.0.0). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ahtxx/include/ahtxx.h" line="268" column="12" bodyfile="components/peripherals/i2c/esp_ahtxx/ahtxx.c" bodystart="578" bodyend="580" declfile="components/peripherals/i2c/esp_ahtxx/include/ahtxx.h" declline="268" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gaa4618ea6847e9349c1f82c03310818dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t ahtxx_get_fw_version_number</definition>
        <argsstring>(void)</argsstring>
        <name>ahtxx_get_fw_version_number</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Converts AHTXX firmware version numbers (major, minor, patch) into an integer value. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>int32_t AHTXX firmware version number. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ahtxx/include/ahtxx.h" line="275" column="9" bodyfile="components/peripherals/i2c/esp_ahtxx/ahtxx.c" bodystart="582" bodyend="584" declfile="components/peripherals/i2c/esp_ahtxx/include/ahtxx.h" declline="275" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga12da599a35eb44da6b902f2f37ebe273" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ak8975_get_control_register</definition>
        <argsstring>(ak8975_handle_t handle, ak8975_control_register_t *const reg)</argsstring>
        <name>ak8975_get_control_register</name>
        <param>
          <type><ref refid="group__drivers_1ga0210b1c72185499916196ef2f5d77bc7" kindref="member">ak8975_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>ak8975_control_register_t *const</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Reads control register from AK8975. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>AK8975 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ak8975/include/ak8975.h" line="192" column="11" bodyfile="components/peripherals/i2c/esp_ak8975/ak8975.c" bodystart="332" bodyend="343" declfile="components/peripherals/i2c/esp_ak8975/include/ak8975.h" declline="192" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga2c7d6d034b7d06e9aa2e14b4e6fc6dc0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ak8975_set_control_register</definition>
        <argsstring>(ak8975_handle_t handle, const ak8975_control_register_t reg)</argsstring>
        <name>ak8975_set_control_register</name>
        <param>
          <type><ref refid="group__drivers_1ga0210b1c72185499916196ef2f5d77bc7" kindref="member">ak8975_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const ak8975_control_register_t</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Writes control register to AK8975. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>AK8975 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>AK8975 control register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ak8975/include/ak8975.h" line="201" column="11" bodyfile="components/peripherals/i2c/esp_ak8975/ak8975.c" bodystart="345" bodyend="360" declfile="components/peripherals/i2c/esp_ak8975/include/ak8975.h" declline="201" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga86226c1bfc95f774412f55b140f9c2da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ak8975_get_selftest_control_register</definition>
        <argsstring>(ak8975_handle_t handle, ak8975_selftest_control_register_t *const reg)</argsstring>
        <name>ak8975_get_selftest_control_register</name>
        <param>
          <type><ref refid="group__drivers_1ga0210b1c72185499916196ef2f5d77bc7" kindref="member">ak8975_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>ak8975_selftest_control_register_t *const</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Reads self-test control register from AK8975. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>AK8975 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>AK8975 self-test control register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ak8975/include/ak8975.h" line="210" column="11" bodyfile="components/peripherals/i2c/esp_ak8975/ak8975.c" bodystart="362" bodyend="373" declfile="components/peripherals/i2c/esp_ak8975/include/ak8975.h" declline="210" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga85a711ea67335e72f5203a76688327ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ak8975_get_status1_register</definition>
        <argsstring>(ak8975_handle_t handle, ak8975_status1_register_t *const reg)</argsstring>
        <name>ak8975_get_status1_register</name>
        <param>
          <type><ref refid="group__drivers_1ga0210b1c72185499916196ef2f5d77bc7" kindref="member">ak8975_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>ak8975_status1_register_t *const</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Reads status 1 register from AK8975. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>AK8975 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ak8975/include/ak8975.h" line="218" column="11" bodyfile="components/peripherals/i2c/esp_ak8975/ak8975.c" bodystart="375" bodyend="386" declfile="components/peripherals/i2c/esp_ak8975/include/ak8975.h" declline="218" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gafa04bd6a6d409f2325a09e52dafd6902" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ak8975_get_status2_register</definition>
        <argsstring>(ak8975_handle_t handle, ak8975_status2_register_t *const reg)</argsstring>
        <name>ak8975_get_status2_register</name>
        <param>
          <type><ref refid="group__drivers_1ga0210b1c72185499916196ef2f5d77bc7" kindref="member">ak8975_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>ak8975_status2_register_t *const</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Reads status 2 register from AK8975. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>AK8975 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ak8975/include/ak8975.h" line="226" column="11" bodyfile="components/peripherals/i2c/esp_ak8975/ak8975.c" bodystart="388" bodyend="399" declfile="components/peripherals/i2c/esp_ak8975/include/ak8975.h" declline="226" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gab6c812960e8ce3a4063dd229b7e40e1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ak8975_get_asa_registers</definition>
        <argsstring>(ak8975_handle_t handle, uint8_t *const asa_x_reg, uint8_t *const asa_y_reg, uint8_t *const asa_z_reg)</argsstring>
        <name>ak8975_get_asa_registers</name>
        <param>
          <type><ref refid="group__drivers_1ga0210b1c72185499916196ef2f5d77bc7" kindref="member">ak8975_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>uint8_t *const</type>
          <declname>asa_x_reg</declname>
        </param>
        <param>
          <type>uint8_t *const</type>
          <declname>asa_y_reg</declname>
        </param>
        <param>
          <type>uint8_t *const</type>
          <declname>asa_z_reg</declname>
        </param>
        <briefdescription>
<para>Reads ASA (X, Y, Z) registers from AK8975. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>AK8975 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">asa_x_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>X-axis ASA compensation value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">asa_y_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Y-axis ASA compensation value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">asa_z_reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Z-axis ASA compensation value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ak8975/include/ak8975.h" line="237" column="11" bodyfile="components/peripherals/i2c/esp_ak8975/ak8975.c" bodystart="401" bodyend="417" declfile="components/peripherals/i2c/esp_ak8975/include/ak8975.h" declline="237" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga6a81614c7f5afe335df5211c8555af9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float ak8975_convert_to_heading</definition>
        <argsstring>(const ak8975_magnetic_axes_data_t axes_data)</argsstring>
        <name>ak8975_convert_to_heading</name>
        <param>
          <type>const <ref refid="group__drivers_1gae81add8ce1a1a058e64e53db692711b0" kindref="member">ak8975_magnetic_axes_data_t</ref></type>
          <declname>axes_data</declname>
        </param>
        <briefdescription>
<para>Converts heading (0-359 degrees) from magnetic axes. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>float heading in degrees (0-359). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ak8975/include/ak8975.h" line="244" column="7" bodyfile="components/peripherals/i2c/esp_ak8975/ak8975.c" bodystart="419" bodyend="429" declfile="components/peripherals/i2c/esp_ak8975/include/ak8975.h" declline="244" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gaba674ae4afa135da63a0159abe21077b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ak8975_init</definition>
        <argsstring>(i2c_master_bus_handle_t master_handle, const ak8975_config_t *ak8975_config, ak8975_handle_t *ak8975_handle)</argsstring>
        <name>ak8975_init</name>
        <param>
          <type>i2c_master_bus_handle_t</type>
          <declname>master_handle</declname>
        </param>
        <param>
          <type>const <ref refid="group__drivers_1ga357954982de125a621354044159b20be" kindref="member">ak8975_config_t</ref> *</type>
          <declname>ak8975_config</declname>
        </param>
        <param>
          <type><ref refid="group__drivers_1ga0210b1c72185499916196ef2f5d77bc7" kindref="member">ak8975_handle_t</ref> *</type>
          <declname>ak8975_handle</declname>
        </param>
        <briefdescription>
<para>Initializes an AK8975 device onto the I2C master bus. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">master_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>I2C master bus handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ak8975_config</parametername>
</parameternamelist>
<parameterdescription>
<para>AK8975 device configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">ak8975_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>AK8975 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ak8975/include/ak8975.h" line="254" column="11" bodyfile="components/peripherals/i2c/esp_ak8975/ak8975.c" bodystart="431" bodyend="487" declfile="components/peripherals/i2c/esp_ak8975/include/ak8975.h" declline="254" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gad55f2dbf0c7a975cf186f9bc33f37b5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ak8975_get_magnetic_axes</definition>
        <argsstring>(ak8975_handle_t handle, ak8975_magnetic_axes_data_t *const axes_data)</argsstring>
        <name>ak8975_get_magnetic_axes</name>
        <param>
          <type><ref refid="group__drivers_1ga0210b1c72185499916196ef2f5d77bc7" kindref="member">ak8975_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="group__drivers_1gae81add8ce1a1a058e64e53db692711b0" kindref="member">ak8975_magnetic_axes_data_t</ref> *const</type>
          <declname>axes_data</declname>
        </param>
        <briefdescription>
<para>Read magnetic measurement from AK8975. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>AK8975 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">axes_data</parametername>
</parameternamelist>
<parameterdescription>
<para>AK8975 magnetic axes data (X, Y, Z) with sensitivity adjustments applied. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ak8975/include/ak8975.h" line="263" column="11" bodyfile="components/peripherals/i2c/esp_ak8975/ak8975.c" bodystart="489" bodyend="509" declfile="components/peripherals/i2c/esp_ak8975/include/ak8975.h" declline="263" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gaeff4649a4193d33e8b0a973621a4bffe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ak8975_selftest</definition>
        <argsstring>(ak8975_handle_t handle, ak8975_magnetic_axes_data_t *const axes_data)</argsstring>
        <name>ak8975_selftest</name>
        <param>
          <type><ref refid="group__drivers_1ga0210b1c72185499916196ef2f5d77bc7" kindref="member">ak8975_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="group__drivers_1gae81add8ce1a1a058e64e53db692711b0" kindref="member">ak8975_magnetic_axes_data_t</ref> *const</type>
          <declname>axes_data</declname>
        </param>
        <briefdescription>
<para>Self-test judgement of AK8975 to check if sensor is working normally. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Axes data should be within the following ranges: x-axis (-100&lt;=X&lt;=+100), y-axis (-100&lt;=Y&lt;=+100), z-axis (-1000&lt;=Z&lt;=-300)</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>AK8975 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">axes_data</parametername>
</parameternamelist>
<parameterdescription>
<para>AK8975 magnetic axes data (X, Y, Z) with sensitivity adjustments applied. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ak8975/include/ak8975.h" line="274" column="11" bodyfile="components/peripherals/i2c/esp_ak8975/ak8975.c" bodystart="511" bodyend="543" declfile="components/peripherals/i2c/esp_ak8975/include/ak8975.h" declline="274" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga0c7645058971940c9055bbb152cb0662" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ak8975_get_data_status</definition>
        <argsstring>(ak8975_handle_t handle, bool *const ready)</argsstring>
        <name>ak8975_get_data_status</name>
        <param>
          <type><ref refid="group__drivers_1ga0210b1c72185499916196ef2f5d77bc7" kindref="member">ak8975_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>bool *const</type>
          <declname>ready</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ak8975/include/ak8975.h" line="276" column="11" bodyfile="components/peripherals/i2c/esp_ak8975/ak8975.c" bodystart="545" bodyend="557" declfile="components/peripherals/i2c/esp_ak8975/include/ak8975.h" declline="276" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gab13362ebe3f37734253045838d7e0d65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ak8975_get_error_status</definition>
        <argsstring>(ak8975_handle_t handle, bool *const error)</argsstring>
        <name>ak8975_get_error_status</name>
        <param>
          <type><ref refid="group__drivers_1ga0210b1c72185499916196ef2f5d77bc7" kindref="member">ak8975_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>bool *const</type>
          <declname>error</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ak8975/include/ak8975.h" line="278" column="11" bodyfile="components/peripherals/i2c/esp_ak8975/ak8975.c" bodystart="559" bodyend="571" declfile="components/peripherals/i2c/esp_ak8975/include/ak8975.h" declline="278" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga1b3b677fcb4815ff1847aaa950b43d08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ak8975_get_overflow_status</definition>
        <argsstring>(ak8975_handle_t handle, bool *const overflow)</argsstring>
        <name>ak8975_get_overflow_status</name>
        <param>
          <type><ref refid="group__drivers_1ga0210b1c72185499916196ef2f5d77bc7" kindref="member">ak8975_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>bool *const</type>
          <declname>overflow</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ak8975/include/ak8975.h" line="280" column="11" bodyfile="components/peripherals/i2c/esp_ak8975/ak8975.c" bodystart="573" bodyend="585" declfile="components/peripherals/i2c/esp_ak8975/include/ak8975.h" declline="280" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gac4ef488c807aed6d83faedd6a5945eab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ak8975_power_down</definition>
        <argsstring>(ak8975_handle_t handle)</argsstring>
        <name>ak8975_power_down</name>
        <param>
          <type><ref refid="group__drivers_1ga0210b1c72185499916196ef2f5d77bc7" kindref="member">ak8975_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ak8975/include/ak8975.h" line="282" column="11" bodyfile="components/peripherals/i2c/esp_ak8975/ak8975.c" bodystart="587" bodyend="594" declfile="components/peripherals/i2c/esp_ak8975/include/ak8975.h" declline="282" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gaba0f1e560fecb3dc448af0dd816e7ec0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ak8975_remove</definition>
        <argsstring>(ak8975_handle_t handle)</argsstring>
        <name>ak8975_remove</name>
        <param>
          <type><ref refid="group__drivers_1ga0210b1c72185499916196ef2f5d77bc7" kindref="member">ak8975_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Removes an AK8975 device from master I2C bus. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>AK8975 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ak8975/include/ak8975.h" line="290" column="11" bodyfile="components/peripherals/i2c/esp_ak8975/ak8975.c" bodystart="596" bodyend="600" declfile="components/peripherals/i2c/esp_ak8975/include/ak8975.h" declline="290" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga9eddb81530aec426bbe587f7fa10e0d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ak8975_delete</definition>
        <argsstring>(ak8975_handle_t handle)</argsstring>
        <name>ak8975_delete</name>
        <param>
          <type><ref refid="group__drivers_1ga0210b1c72185499916196ef2f5d77bc7" kindref="member">ak8975_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Removes an AK8975 device from master bus and frees handle. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>AK8975 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ak8975/include/ak8975.h" line="298" column="11" bodyfile="components/peripherals/i2c/esp_ak8975/ak8975.c" bodystart="602" bodyend="616" declfile="components/peripherals/i2c/esp_ak8975/include/ak8975.h" declline="298" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gaf701a57ffdd3b1821b3fdf4a8b8c73ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * ak8975_get_fw_version</definition>
        <argsstring>(void)</argsstring>
        <name>ak8975_get_fw_version</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Converts AK8975 firmware version numbers (major, minor, patch, build) into a string. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>char* AK8975 firmware version as a string that is formatted as X.X.X (e.g. 4.0.0). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ak8975/include/ak8975.h" line="305" column="12" declfile="components/peripherals/i2c/esp_ak8975/include/ak8975.h" declline="305" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gaaffd2f4b5fba4019d501d2473991c4ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t ak8975_get_fw_version_number</definition>
        <argsstring>(void)</argsstring>
        <name>ak8975_get_fw_version_number</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Converts AK8975 firmware version numbers (major, minor, patch) into an integer value. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>int32_t AK8975 firmware version number. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ak8975/include/ak8975.h" line="312" column="9" declfile="components/peripherals/i2c/esp_ak8975/include/ak8975.h" declline="312" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga5fc5175128e8f85ddf2d3178e0191012" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ESP_EVENT_DECLARE_BASE</definition>
        <argsstring>(ESP_AS3935_EVENT)</argsstring>
        <name>ESP_EVENT_DECLARE_BASE</name>
        <param>
          <type>ESP_AS3935_EVENT</type>
        </param>
        <briefdescription>
<para>declare of AS3935 monitor event base. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="90" column="1" declfile="components/peripherals/i2c/esp_as3935/include/as3935.h" declline="90" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gafad46afc4709cc67901aef0e43fbedae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t as3935_monitor_init</definition>
        <argsstring>(i2c_master_bus_handle_t master_handle, const as3935_config_t *as3935_config, as3935_monitor_handle_t *monitor_handle)</argsstring>
        <name>as3935_monitor_init</name>
        <param>
          <type>i2c_master_bus_handle_t</type>
          <declname>master_handle</declname>
        </param>
        <param>
          <type>const <ref refid="group__drivers_1ga98b0fd83fb81dd7cbb6c853a260ac02a" kindref="member">as3935_config_t</ref> *</type>
          <declname>as3935_config</declname>
        </param>
        <param>
          <type><ref refid="group__drivers_1gae6862ac911069aff23cf8b3c4a847c4b" kindref="member">as3935_monitor_handle_t</ref> *</type>
          <declname>monitor_handle</declname>
        </param>
        <briefdescription>
<para>initialize AS3935 monitor instance. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">master_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>i2c master bus handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">as3935_config</parametername>
</parameternamelist>
<parameterdescription>
<para>AS3935 configuration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group__drivers_1gae6862ac911069aff23cf8b3c4a847c4b" kindref="member">as3935_monitor_handle_t</ref> AS3935 monitor handle. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="413" column="11" bodyfile="components/peripherals/i2c/esp_as3935/as3935.c" bodystart="268" bodyend="359" declfile="components/peripherals/i2c/esp_as3935/include/as3935.h" declline="413" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gaeeac1bbc5045b1f197a031c3d719fa66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t as3935_monitor_deinit</definition>
        <argsstring>(as3935_monitor_handle_t monitor_handle)</argsstring>
        <name>as3935_monitor_deinit</name>
        <param>
          <type><ref refid="group__drivers_1gae6862ac911069aff23cf8b3c4a847c4b" kindref="member">as3935_monitor_handle_t</ref></type>
          <declname>monitor_handle</declname>
        </param>
        <briefdescription>
<para>de-initialize AS3935 monitor instance. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">monitor_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>AS3935 monitor handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="423" column="11" bodyfile="components/peripherals/i2c/esp_as3935/as3935.c" bodystart="361" bodyend="373" declfile="components/peripherals/i2c/esp_as3935/include/as3935.h" declline="423" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga8957dca4e77b125bbc1113cf08af2e81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t as3935_monitor_add_handler</definition>
        <argsstring>(as3935_monitor_handle_t monitor_handle, esp_event_handler_t event_handler, void *handler_args)</argsstring>
        <name>as3935_monitor_add_handler</name>
        <param>
          <type><ref refid="group__drivers_1gae6862ac911069aff23cf8b3c4a847c4b" kindref="member">as3935_monitor_handle_t</ref></type>
          <declname>monitor_handle</declname>
        </param>
        <param>
          <type>esp_event_handler_t</type>
          <declname>event_handler</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>handler_args</declname>
        </param>
        <briefdescription>
<para>adds user defined event handler for AS3935 monitor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">monitor_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>AS3935 monitor handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event_handler</parametername>
</parameternamelist>
<parameterdescription>
<para>user defined event handler. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">handler_args</parametername>
</parameternamelist>
<parameterdescription>
<para>handler specific arguments. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t<itemizedlist>
<listitem><para>ESP_OK on success.</para>
</listitem><listitem><para>ESP_ERR_NO_MEM when unable to allocate memory for the handler.</para>
</listitem><listitem><para>ESP_ERR_INVALIG_ARG when invalid combination of event base and event id is provided. </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="436" column="11" bodyfile="components/peripherals/i2c/esp_as3935/as3935.c" bodystart="375" bodyend="387" declfile="components/peripherals/i2c/esp_as3935/include/as3935.h" declline="436" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga9f0d9a870178e86041fede8bfbfacb15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t as3935_monitor_remove_handler</definition>
        <argsstring>(as3935_monitor_handle_t monitor_handle, esp_event_handler_t event_handler)</argsstring>
        <name>as3935_monitor_remove_handler</name>
        <param>
          <type><ref refid="group__drivers_1gae6862ac911069aff23cf8b3c4a847c4b" kindref="member">as3935_monitor_handle_t</ref></type>
          <declname>monitor_handle</declname>
        </param>
        <param>
          <type>esp_event_handler_t</type>
          <declname>event_handler</declname>
        </param>
        <briefdescription>
<para>removes user defined event handler for AS3935 monitor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">monitor_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>AS3935 monitor handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">event_handler</parametername>
</parameternamelist>
<parameterdescription>
<para>user defined event handler. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t<itemizedlist>
<listitem><para>ESP_OK on success.</para>
</listitem><listitem><para>ESP_ERR_INVALIG_ARG when invalid combination of event base and event id is provided. </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="447" column="11" bodyfile="components/peripherals/i2c/esp_as3935/as3935.c" bodystart="389" bodyend="397" declfile="components/peripherals/i2c/esp_as3935/include/as3935.h" declline="447" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gab32c24e8ceaa2d86cc8da5c62f113d4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t as3935_get_0x00_register</definition>
        <argsstring>(as3935_handle_t handle, as3935_0x00_register_t *const reg)</argsstring>
        <name>as3935_get_0x00_register</name>
        <param>
          <type><ref refid="group__drivers_1gaf334b3bfc6ce484444d6c68e9830cf15" kindref="member">as3935_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>as3935_0x00_register_t *const</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>gets 0x00 register from AS3935. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>AS3935 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="455" column="11" bodyfile="components/peripherals/i2c/esp_as3935/as3935.c" bodystart="399" bodyend="405" declfile="components/peripherals/i2c/esp_as3935/include/as3935.h" declline="455" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga731c715256dad2e877e4f5d9fb768e68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t as3935_set_0x00_register</definition>
        <argsstring>(as3935_handle_t handle, const as3935_0x00_register_t reg)</argsstring>
        <name>as3935_set_0x00_register</name>
        <param>
          <type><ref refid="group__drivers_1gaf334b3bfc6ce484444d6c68e9830cf15" kindref="member">as3935_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const as3935_0x00_register_t</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>sets 0x00 register on AS3935. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>AS3935 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>AS3935 0x00 register structure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="464" column="11" bodyfile="components/peripherals/i2c/esp_as3935/as3935.c" bodystart="407" bodyend="416" declfile="components/peripherals/i2c/esp_as3935/include/as3935.h" declline="464" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga9e434db1d0462087408862479e7c7c64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t as3935_get_0x01_register</definition>
        <argsstring>(as3935_handle_t handle, as3935_0x01_register_t *const reg)</argsstring>
        <name>as3935_get_0x01_register</name>
        <param>
          <type><ref refid="group__drivers_1gaf334b3bfc6ce484444d6c68e9830cf15" kindref="member">as3935_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>as3935_0x01_register_t *const</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>gets 0x01 register from AS3935. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>AS3935 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>AS3935 0x01 register structure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="473" column="11" bodyfile="components/peripherals/i2c/esp_as3935/as3935.c" bodystart="418" bodyend="424" declfile="components/peripherals/i2c/esp_as3935/include/as3935.h" declline="473" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga4f198c6e45db92e4f08be3e8801b9bab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t as3935_set_0x01_register</definition>
        <argsstring>(as3935_handle_t handle, const as3935_0x01_register_t reg)</argsstring>
        <name>as3935_set_0x01_register</name>
        <param>
          <type><ref refid="group__drivers_1gaf334b3bfc6ce484444d6c68e9830cf15" kindref="member">as3935_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const as3935_0x01_register_t</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>sets 0x01 register on AS3935. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>AS3935 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>AS3935 0x01 register structure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="482" column="11" bodyfile="components/peripherals/i2c/esp_as3935/as3935.c" bodystart="426" bodyend="435" declfile="components/peripherals/i2c/esp_as3935/include/as3935.h" declline="482" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gaec8c0050e097fb618d98d89d016cf798" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t as3935_get_0x02_register</definition>
        <argsstring>(as3935_handle_t handle, as3935_0x02_register_t *const reg)</argsstring>
        <name>as3935_get_0x02_register</name>
        <param>
          <type><ref refid="group__drivers_1gaf334b3bfc6ce484444d6c68e9830cf15" kindref="member">as3935_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>as3935_0x02_register_t *const</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>gets 0x02 register from AS3935. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>AS3935 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>AS3935 0x02 register structure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="491" column="11" bodyfile="components/peripherals/i2c/esp_as3935/as3935.c" bodystart="437" bodyend="443" declfile="components/peripherals/i2c/esp_as3935/include/as3935.h" declline="491" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga4767a3b6eb9f453845d413e135ef6bd8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t as3935_set_0x02_register</definition>
        <argsstring>(as3935_handle_t handle, const as3935_0x02_register_t reg)</argsstring>
        <name>as3935_set_0x02_register</name>
        <param>
          <type><ref refid="group__drivers_1gaf334b3bfc6ce484444d6c68e9830cf15" kindref="member">as3935_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const as3935_0x02_register_t</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>sets 0x02 register on AS3935. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>AS3935 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>AS3935 0x02 register structure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="500" column="11" bodyfile="components/peripherals/i2c/esp_as3935/as3935.c" bodystart="445" bodyend="454" declfile="components/peripherals/i2c/esp_as3935/include/as3935.h" declline="500" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga0c9cad223c96fc423b6a1a4d27fef7a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t as3935_get_0x03_register</definition>
        <argsstring>(as3935_handle_t handle, as3935_0x03_register_t *const reg)</argsstring>
        <name>as3935_get_0x03_register</name>
        <param>
          <type><ref refid="group__drivers_1gaf334b3bfc6ce484444d6c68e9830cf15" kindref="member">as3935_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>as3935_0x03_register_t *const</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>gets 0x03 register from AS3935. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>AS3935 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>AS3935 0x03 register structure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="509" column="11" bodyfile="components/peripherals/i2c/esp_as3935/as3935.c" bodystart="456" bodyend="476" declfile="components/peripherals/i2c/esp_as3935/include/as3935.h" declline="509" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga36acf74740637ff8e399ca17fec7aff6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t as3935_set_0x03_register</definition>
        <argsstring>(as3935_handle_t handle, const as3935_0x03_register_t reg)</argsstring>
        <name>as3935_set_0x03_register</name>
        <param>
          <type><ref refid="group__drivers_1gaf334b3bfc6ce484444d6c68e9830cf15" kindref="member">as3935_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const as3935_0x03_register_t</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>sets 0x03 register on AS3935. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>AS3935 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>AS3935 0x03 register structure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="518" column="11" bodyfile="components/peripherals/i2c/esp_as3935/as3935.c" bodystart="478" bodyend="487" declfile="components/peripherals/i2c/esp_as3935/include/as3935.h" declline="518" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga52babc34222dd0e3ccc5e2f15c7f89ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t as3935_get_0x08_register</definition>
        <argsstring>(as3935_handle_t handle, as3935_0x08_register_t *const reg)</argsstring>
        <name>as3935_get_0x08_register</name>
        <param>
          <type><ref refid="group__drivers_1gaf334b3bfc6ce484444d6c68e9830cf15" kindref="member">as3935_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>as3935_0x08_register_t *const</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>gets 0x08 register from AS3935. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>AS3935 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>AS3935 0x08 register structure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="527" column="11" bodyfile="components/peripherals/i2c/esp_as3935/as3935.c" bodystart="489" bodyend="495" declfile="components/peripherals/i2c/esp_as3935/include/as3935.h" declline="527" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gadd253276514cfad1d16eec6fe41f3e22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t as3935_set_0x08_register</definition>
        <argsstring>(as3935_handle_t handle, const as3935_0x08_register_t reg)</argsstring>
        <name>as3935_set_0x08_register</name>
        <param>
          <type><ref refid="group__drivers_1gaf334b3bfc6ce484444d6c68e9830cf15" kindref="member">as3935_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const as3935_0x08_register_t</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>sets 0x08 register on AS3935. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>AS3935 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>AS3935 0x08 register structure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="536" column="11" bodyfile="components/peripherals/i2c/esp_as3935/as3935.c" bodystart="497" bodyend="506" declfile="components/peripherals/i2c/esp_as3935/include/as3935.h" declline="536" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga8a330abaf4f9c770e5afe7fc20dc042e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t as3935_init</definition>
        <argsstring>(i2c_master_bus_handle_t master_handle, const as3935_config_t *as3935_config, as3935_handle_t *as3935_handle)</argsstring>
        <name>as3935_init</name>
        <param>
          <type>i2c_master_bus_handle_t</type>
          <declname>master_handle</declname>
        </param>
        <param>
          <type>const <ref refid="group__drivers_1ga98b0fd83fb81dd7cbb6c853a260ac02a" kindref="member">as3935_config_t</ref> *</type>
          <declname>as3935_config</declname>
        </param>
        <param>
          <type><ref refid="group__drivers_1gaf334b3bfc6ce484444d6c68e9830cf15" kindref="member">as3935_handle_t</ref> *</type>
          <declname>as3935_handle</declname>
        </param>
        <briefdescription>
<para>initializes an AS3935 device onto the I2C master bus. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">master_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>I2C master bus handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">as3935_config</parametername>
</parameternamelist>
<parameterdescription>
<para>AS3935 device configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">as3935_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>AS3935 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="546" column="11" bodyfile="components/peripherals/i2c/esp_as3935/as3935.c" bodystart="535" bodyend="582" declfile="components/peripherals/i2c/esp_as3935/include/as3935.h" declline="546" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga548db7e19110a6accddd7baec72d7656" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t as3935_register_isr</definition>
        <argsstring>(as3935_handle_t handle, const as3935_isr_t isr)</argsstring>
        <name>as3935_register_isr</name>
        <param>
          <type><ref refid="group__drivers_1gaf334b3bfc6ce484444d6c68e9830cf15" kindref="member">as3935_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const as3935_isr_t</type>
          <declname>isr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="548" column="11" bodyfile="components/peripherals/i2c/esp_as3935/as3935.c" bodystart="584" bodyend="592" declfile="components/peripherals/i2c/esp_as3935/include/as3935.h" declline="548" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga9b94a526b2d38c960b0c55f0406795f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t as3935_reset_to_defaults</definition>
        <argsstring>(as3935_handle_t handle)</argsstring>
        <name>as3935_reset_to_defaults</name>
        <param>
          <type><ref refid="group__drivers_1gaf334b3bfc6ce484444d6c68e9830cf15" kindref="member">as3935_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>resets AS3935 to defaults. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>AS3935 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="556" column="11" bodyfile="components/peripherals/i2c/esp_as3935/as3935.c" bodystart="594" bodyend="600" declfile="components/peripherals/i2c/esp_as3935/include/as3935.h" declline="556" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gaca0008dccae10bd5d82f18ab24e03814" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t as3935_calibrate_rco</definition>
        <argsstring>(as3935_handle_t handle)</argsstring>
        <name>as3935_calibrate_rco</name>
        <param>
          <type><ref refid="group__drivers_1gaf334b3bfc6ce484444d6c68e9830cf15" kindref="member">as3935_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>calibrates AS3935 RC oscillator. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>AS3935 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="564" column="11" bodyfile="components/peripherals/i2c/esp_as3935/as3935.c" bodystart="602" bodyend="613" declfile="components/peripherals/i2c/esp_as3935/include/as3935.h" declline="564" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga01dc8897c11557880e6510beae113642" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t as3935_clear_lightning_statistics</definition>
        <argsstring>(as3935_handle_t handle)</argsstring>
        <name>as3935_clear_lightning_statistics</name>
        <param>
          <type><ref refid="group__drivers_1gaf334b3bfc6ce484444d6c68e9830cf15" kindref="member">as3935_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>clears AS3935 lightning statistics. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>AS3935 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="572" column="11" bodyfile="components/peripherals/i2c/esp_as3935/as3935.c" bodystart="615" bodyend="621" declfile="components/peripherals/i2c/esp_as3935/include/as3935.h" declline="572" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gab7d8ef784a4a55908641e5eef0336884" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t as3935_enable_power</definition>
        <argsstring>(as3935_handle_t handle)</argsstring>
        <name>as3935_enable_power</name>
        <param>
          <type><ref refid="group__drivers_1gaf334b3bfc6ce484444d6c68e9830cf15" kindref="member">as3935_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="574" column="11" bodyfile="components/peripherals/i2c/esp_as3935/as3935.c" bodystart="623" bodyend="638" declfile="components/peripherals/i2c/esp_as3935/include/as3935.h" declline="574" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga191aab1e927986c68f762202001aee13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t as3935_get_analog_frontend</definition>
        <argsstring>(as3935_handle_t handle, as3935_analog_frontends_t *const analog_frontend)</argsstring>
        <name>as3935_get_analog_frontend</name>
        <param>
          <type><ref refid="group__drivers_1gaf334b3bfc6ce484444d6c68e9830cf15" kindref="member">as3935_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="group__drivers_1gafcdd75c9b18aa4151eed84cbae265196" kindref="member">as3935_analog_frontends_t</ref> *const</type>
          <declname>analog_frontend</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="575" column="11" bodyfile="components/peripherals/i2c/esp_as3935/as3935.c" bodystart="640" bodyend="651" declfile="components/peripherals/i2c/esp_as3935/include/as3935.h" declline="575" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga8249b91dccb73b43a301b9cf223304fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t as3935_get_watchdog_threshold</definition>
        <argsstring>(as3935_handle_t handle, as3935_watchdog_thresholds_t *const watchdog_threshold)</argsstring>
        <name>as3935_get_watchdog_threshold</name>
        <param>
          <type><ref refid="group__drivers_1gaf334b3bfc6ce484444d6c68e9830cf15" kindref="member">as3935_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="group__drivers_1gae87eb824861eb634b5833d61b9b7526b" kindref="member">as3935_watchdog_thresholds_t</ref> *const</type>
          <declname>watchdog_threshold</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="576" column="11" bodyfile="components/peripherals/i2c/esp_as3935/as3935.c" bodystart="653" bodyend="664" declfile="components/peripherals/i2c/esp_as3935/include/as3935.h" declline="576" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga18e5ee21cb604a2cd89888ba03b185c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t as3935_get_noise_floor_threshold</definition>
        <argsstring>(as3935_handle_t handle, as3935_noise_levels_t *const noise_level)</argsstring>
        <name>as3935_get_noise_floor_threshold</name>
        <param>
          <type><ref refid="group__drivers_1gaf334b3bfc6ce484444d6c68e9830cf15" kindref="member">as3935_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="group__drivers_1ga64db4a0d5e3024512fe00e5e5038453f" kindref="member">as3935_noise_levels_t</ref> *const</type>
          <declname>noise_level</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="577" column="11" bodyfile="components/peripherals/i2c/esp_as3935/as3935.c" bodystart="666" bodyend="677" declfile="components/peripherals/i2c/esp_as3935/include/as3935.h" declline="577" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga6578364f053c63ae9e6224818e91e42b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t as3935_get_spike_rejection</definition>
        <argsstring>(as3935_handle_t handle, uint8_t *const spike_rejection)</argsstring>
        <name>as3935_get_spike_rejection</name>
        <param>
          <type><ref refid="group__drivers_1gaf334b3bfc6ce484444d6c68e9830cf15" kindref="member">as3935_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>uint8_t *const</type>
          <declname>spike_rejection</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="578" column="11" bodyfile="components/peripherals/i2c/esp_as3935/as3935.c" bodystart="679" bodyend="690" declfile="components/peripherals/i2c/esp_as3935/include/as3935.h" declline="578" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gaba7e254f3f73c4346ab926fdecc8fb88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t as3935_get_minimum_lightnings</definition>
        <argsstring>(as3935_handle_t handle, as3935_minimum_lightnings_t *const min_lightnings)</argsstring>
        <name>as3935_get_minimum_lightnings</name>
        <param>
          <type><ref refid="group__drivers_1gaf334b3bfc6ce484444d6c68e9830cf15" kindref="member">as3935_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="group__drivers_1ga2f7cf5db258dc86f6c91a06ebe1cfc47" kindref="member">as3935_minimum_lightnings_t</ref> *const</type>
          <declname>min_lightnings</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="579" column="11" bodyfile="components/peripherals/i2c/esp_as3935/as3935.c" bodystart="692" bodyend="703" declfile="components/peripherals/i2c/esp_as3935/include/as3935.h" declline="579" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gaa66717adc8c0721b4ba96da8b04f6f30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t as3935_enable_disturber_detection</definition>
        <argsstring>(as3935_handle_t handle)</argsstring>
        <name>as3935_enable_disturber_detection</name>
        <param>
          <type><ref refid="group__drivers_1gaf334b3bfc6ce484444d6c68e9830cf15" kindref="member">as3935_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="580" column="11" bodyfile="components/peripherals/i2c/esp_as3935/as3935.c" bodystart="705" bodyend="721" declfile="components/peripherals/i2c/esp_as3935/include/as3935.h" declline="580" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gabda5101478652c3561384f50b85e3282" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t as3935_get_frequency_division_ratio</definition>
        <argsstring>(as3935_handle_t handle, as3935_frequency_division_ratios_t *const ratio)</argsstring>
        <name>as3935_get_frequency_division_ratio</name>
        <param>
          <type><ref refid="group__drivers_1gaf334b3bfc6ce484444d6c68e9830cf15" kindref="member">as3935_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="group__drivers_1ga8c14ebf450e76a255c518b9d12f1d066" kindref="member">as3935_frequency_division_ratios_t</ref> *const</type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="581" column="11" bodyfile="components/peripherals/i2c/esp_as3935/as3935.c" bodystart="723" bodyend="734" declfile="components/peripherals/i2c/esp_as3935/include/as3935.h" declline="581" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gab4808ef5e6be2b9687b7a1a7e80914c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t as3935_get_display_oscillator_on_irq</definition>
        <argsstring>(as3935_handle_t handle, as3935_oscillator_modes_t oscillator_mode, bool *const enabled)</argsstring>
        <name>as3935_get_display_oscillator_on_irq</name>
        <param>
          <type><ref refid="group__drivers_1gaf334b3bfc6ce484444d6c68e9830cf15" kindref="member">as3935_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="group__drivers_1gab16ed1f5754c2f383f278257cdd03733" kindref="member">as3935_oscillator_modes_t</ref></type>
          <declname>oscillator_mode</declname>
        </param>
        <param>
          <type>bool *const</type>
          <declname>enabled</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="582" column="11" bodyfile="components/peripherals/i2c/esp_as3935/as3935.c" bodystart="736" bodyend="761" declfile="components/peripherals/i2c/esp_as3935/include/as3935.h" declline="582" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gadfc6735b546f68617c0896481d1eac02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t as3935_get_internal_capacitors</definition>
        <argsstring>(as3935_handle_t handle, uint8_t *const value)</argsstring>
        <name>as3935_get_internal_capacitors</name>
        <param>
          <type><ref refid="group__drivers_1gaf334b3bfc6ce484444d6c68e9830cf15" kindref="member">as3935_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>uint8_t *const</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="583" column="11" bodyfile="components/peripherals/i2c/esp_as3935/as3935.c" bodystart="763" bodyend="774" declfile="components/peripherals/i2c/esp_as3935/include/as3935.h" declline="583" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga52d5f49d3906e3480075a57a3af682d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t as3935_disable_power</definition>
        <argsstring>(as3935_handle_t handle)</argsstring>
        <name>as3935_disable_power</name>
        <param>
          <type><ref refid="group__drivers_1gaf334b3bfc6ce484444d6c68e9830cf15" kindref="member">as3935_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="585" column="11" bodyfile="components/peripherals/i2c/esp_as3935/as3935.c" bodystart="776" bodyend="791" declfile="components/peripherals/i2c/esp_as3935/include/as3935.h" declline="585" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga8a615fb9f4b25a4e4943a56188763522" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t as3935_set_analog_frontend</definition>
        <argsstring>(as3935_handle_t handle, const as3935_analog_frontends_t analog_frontend)</argsstring>
        <name>as3935_set_analog_frontend</name>
        <param>
          <type><ref refid="group__drivers_1gaf334b3bfc6ce484444d6c68e9830cf15" kindref="member">as3935_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const <ref refid="group__drivers_1gafcdd75c9b18aa4151eed84cbae265196" kindref="member">as3935_analog_frontends_t</ref></type>
          <declname>analog_frontend</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="586" column="11" bodyfile="components/peripherals/i2c/esp_as3935/as3935.c" bodystart="793" bodyend="808" declfile="components/peripherals/i2c/esp_as3935/include/as3935.h" declline="586" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gad0eda7b99a13ce11eff2e2f36beda588" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t as3935_set_watchdog_threshold</definition>
        <argsstring>(as3935_handle_t handle, const as3935_watchdog_thresholds_t watchdog_threshold)</argsstring>
        <name>as3935_set_watchdog_threshold</name>
        <param>
          <type><ref refid="group__drivers_1gaf334b3bfc6ce484444d6c68e9830cf15" kindref="member">as3935_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const <ref refid="group__drivers_1gae87eb824861eb634b5833d61b9b7526b" kindref="member">as3935_watchdog_thresholds_t</ref></type>
          <declname>watchdog_threshold</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="587" column="11" bodyfile="components/peripherals/i2c/esp_as3935/as3935.c" bodystart="810" bodyend="825" declfile="components/peripherals/i2c/esp_as3935/include/as3935.h" declline="587" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga877749c7c1ece6292f2ef8474d94d7ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t as3935_set_noise_floor_threshold</definition>
        <argsstring>(as3935_handle_t handle, const as3935_noise_levels_t noise_level)</argsstring>
        <name>as3935_set_noise_floor_threshold</name>
        <param>
          <type><ref refid="group__drivers_1gaf334b3bfc6ce484444d6c68e9830cf15" kindref="member">as3935_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const <ref refid="group__drivers_1ga64db4a0d5e3024512fe00e5e5038453f" kindref="member">as3935_noise_levels_t</ref></type>
          <declname>noise_level</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="588" column="11" bodyfile="components/peripherals/i2c/esp_as3935/as3935.c" bodystart="827" bodyend="842" declfile="components/peripherals/i2c/esp_as3935/include/as3935.h" declline="588" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga74cf4901a0d1afa06322e776d5e8a157" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t as3935_set_spike_rejection</definition>
        <argsstring>(as3935_handle_t handle, const uint8_t spike_rejection)</argsstring>
        <name>as3935_set_spike_rejection</name>
        <param>
          <type><ref refid="group__drivers_1gaf334b3bfc6ce484444d6c68e9830cf15" kindref="member">as3935_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>spike_rejection</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="589" column="11" bodyfile="components/peripherals/i2c/esp_as3935/as3935.c" bodystart="844" bodyend="863" declfile="components/peripherals/i2c/esp_as3935/include/as3935.h" declline="589" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gab93c27fc0f9d5368fc8d41472e921b76" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t as3935_set_minimum_lightnings</definition>
        <argsstring>(as3935_handle_t handle, const as3935_minimum_lightnings_t min_lightnings)</argsstring>
        <name>as3935_set_minimum_lightnings</name>
        <param>
          <type><ref refid="group__drivers_1gaf334b3bfc6ce484444d6c68e9830cf15" kindref="member">as3935_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const <ref refid="group__drivers_1ga2f7cf5db258dc86f6c91a06ebe1cfc47" kindref="member">as3935_minimum_lightnings_t</ref></type>
          <declname>min_lightnings</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="590" column="11" bodyfile="components/peripherals/i2c/esp_as3935/as3935.c" bodystart="865" bodyend="880" declfile="components/peripherals/i2c/esp_as3935/include/as3935.h" declline="590" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gac9b833873e7f56cb2d0c9e081fdd0063" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t as3935_disable_disturber_detection</definition>
        <argsstring>(as3935_handle_t handle)</argsstring>
        <name>as3935_disable_disturber_detection</name>
        <param>
          <type><ref refid="group__drivers_1gaf334b3bfc6ce484444d6c68e9830cf15" kindref="member">as3935_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="591" column="11" bodyfile="components/peripherals/i2c/esp_as3935/as3935.c" bodystart="882" bodyend="897" declfile="components/peripherals/i2c/esp_as3935/include/as3935.h" declline="591" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga656cda3886296b4c5efec871102a8b97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t as3935_set_frequency_division_ratio</definition>
        <argsstring>(as3935_handle_t handle, const as3935_frequency_division_ratios_t ratio)</argsstring>
        <name>as3935_set_frequency_division_ratio</name>
        <param>
          <type><ref refid="group__drivers_1gaf334b3bfc6ce484444d6c68e9830cf15" kindref="member">as3935_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const <ref refid="group__drivers_1ga8c14ebf450e76a255c518b9d12f1d066" kindref="member">as3935_frequency_division_ratios_t</ref></type>
          <declname>ratio</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="592" column="11" bodyfile="components/peripherals/i2c/esp_as3935/as3935.c" bodystart="899" bodyend="914" declfile="components/peripherals/i2c/esp_as3935/include/as3935.h" declline="592" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga3f22d6d11c3477c686da1c08d7fd3f71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t as3935_set_display_oscillator_on_irq</definition>
        <argsstring>(as3935_handle_t handle, const as3935_oscillator_modes_t oscillator_mode, const bool enabled)</argsstring>
        <name>as3935_set_display_oscillator_on_irq</name>
        <param>
          <type><ref refid="group__drivers_1gaf334b3bfc6ce484444d6c68e9830cf15" kindref="member">as3935_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const <ref refid="group__drivers_1gab16ed1f5754c2f383f278257cdd03733" kindref="member">as3935_oscillator_modes_t</ref></type>
          <declname>oscillator_mode</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>enabled</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="593" column="11" bodyfile="components/peripherals/i2c/esp_as3935/as3935.c" bodystart="916" bodyend="943" declfile="components/peripherals/i2c/esp_as3935/include/as3935.h" declline="593" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga0c54a96bd31e92fc36d416b4ef48b475" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t as3935_set_internal_capacitors</definition>
        <argsstring>(as3935_handle_t handle, const uint8_t value)</argsstring>
        <name>as3935_set_internal_capacitors</name>
        <param>
          <type><ref refid="group__drivers_1gaf334b3bfc6ce484444d6c68e9830cf15" kindref="member">as3935_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="594" column="11" bodyfile="components/peripherals/i2c/esp_as3935/as3935.c" bodystart="945" bodyend="964" declfile="components/peripherals/i2c/esp_as3935/include/as3935.h" declline="594" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga8b606a0254fe81a80016d56c2d3695eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t as3935_get_interrupt_state</definition>
        <argsstring>(as3935_handle_t handle, as3935_interrupt_states_t *const state)</argsstring>
        <name>as3935_get_interrupt_state</name>
        <param>
          <type><ref refid="group__drivers_1gaf334b3bfc6ce484444d6c68e9830cf15" kindref="member">as3935_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="group__drivers_1ga21f56ccf3843a6c0c746d20dfadcfde5" kindref="member">as3935_interrupt_states_t</ref> *const</type>
          <declname>state</declname>
        </param>
        <briefdescription>
<para>gets interrupt state of AS3935. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>AS3935 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">state</parametername>
</parameternamelist>
<parameterdescription>
<para>interrupt state of AS3935. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="603" column="11" bodyfile="components/peripherals/i2c/esp_as3935/as3935.c" bodystart="966" bodyend="976" declfile="components/peripherals/i2c/esp_as3935/include/as3935.h" declline="603" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga402120ca4b1e2f1c0139b5cedacaf715" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t as3935_get_lightning_energy</definition>
        <argsstring>(as3935_handle_t handle, uint32_t *const energy)</argsstring>
        <name>as3935_get_lightning_energy</name>
        <param>
          <type><ref refid="group__drivers_1gaf334b3bfc6ce484444d6c68e9830cf15" kindref="member">as3935_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>uint32_t *const</type>
          <declname>energy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="604" column="11" bodyfile="components/peripherals/i2c/esp_as3935/as3935.c" bodystart="1000" bodyend="1015" declfile="components/peripherals/i2c/esp_as3935/include/as3935.h" declline="604" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gadea8be6bc674c9ed7bb561fabc850b29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t as3935_get_lightning_distance</definition>
        <argsstring>(as3935_handle_t handle, as3935_lightning_distances_t *const distance)</argsstring>
        <name>as3935_get_lightning_distance</name>
        <param>
          <type><ref refid="group__drivers_1gaf334b3bfc6ce484444d6c68e9830cf15" kindref="member">as3935_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="group__drivers_1ga225a265e70e9df5e37f4675415503e55" kindref="member">as3935_lightning_distances_t</ref> *const</type>
          <declname>distance</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="605" column="11" bodyfile="components/peripherals/i2c/esp_as3935/as3935.c" bodystart="978" bodyend="988" declfile="components/peripherals/i2c/esp_as3935/include/as3935.h" declline="605" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gad3c16a45361802f6a756d18a3c8fe99c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t as3935_get_lightning_distance_km</definition>
        <argsstring>(as3935_handle_t handle, uint8_t *const distance)</argsstring>
        <name>as3935_get_lightning_distance_km</name>
        <param>
          <type><ref refid="group__drivers_1gaf334b3bfc6ce484444d6c68e9830cf15" kindref="member">as3935_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>uint8_t *const</type>
          <declname>distance</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="606" column="11" bodyfile="components/peripherals/i2c/esp_as3935/as3935.c" bodystart="990" bodyend="998" declfile="components/peripherals/i2c/esp_as3935/include/as3935.h" declline="606" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga8f72061ccdd85370071790062d1b7837" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t as3935_get_lightning_event</definition>
        <argsstring>(as3935_handle_t handle, as3935_lightning_distances_t *const distance, uint32_t *const energy)</argsstring>
        <name>as3935_get_lightning_event</name>
        <param>
          <type><ref refid="group__drivers_1gaf334b3bfc6ce484444d6c68e9830cf15" kindref="member">as3935_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="group__drivers_1ga225a265e70e9df5e37f4675415503e55" kindref="member">as3935_lightning_distances_t</ref> *const</type>
          <declname>distance</declname>
        </param>
        <param>
          <type>uint32_t *const</type>
          <declname>energy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="607" column="11" bodyfile="components/peripherals/i2c/esp_as3935/as3935.c" bodystart="1017" bodyend="1025" declfile="components/peripherals/i2c/esp_as3935/include/as3935.h" declline="607" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gad6ad711a2aeff86a5fe5e3e8525df5c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t as3935_remove</definition>
        <argsstring>(as3935_handle_t handle)</argsstring>
        <name>as3935_remove</name>
        <param>
          <type><ref refid="group__drivers_1gaf334b3bfc6ce484444d6c68e9830cf15" kindref="member">as3935_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Removes an AS3935 device from I2C master bus. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>as3935 device handle </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="615" column="11" bodyfile="components/peripherals/i2c/esp_as3935/as3935.c" bodystart="1027" bodyend="1031" declfile="components/peripherals/i2c/esp_as3935/include/as3935.h" declline="615" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga575c55d5e2f3a066f315b6f570892b16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t as3935_delete</definition>
        <argsstring>(as3935_handle_t handle)</argsstring>
        <name>as3935_delete</name>
        <param>
          <type><ref refid="group__drivers_1gaf334b3bfc6ce484444d6c68e9830cf15" kindref="member">as3935_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Removes an AS3935 device from master bus and frees handle. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>AS3935 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="623" column="11" bodyfile="components/peripherals/i2c/esp_as3935/as3935.c" bodystart="1033" bodyend="1047" declfile="components/peripherals/i2c/esp_as3935/include/as3935.h" declline="623" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga65364e682f6809a2fadca7c7648ca061" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * as3935_get_fw_version</definition>
        <argsstring>(void)</argsstring>
        <name>as3935_get_fw_version</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Converts AS3935 firmware version numbers (major, minor, patch, build) into a string. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>char* AS3935 firmware version as a string that is formatted as X.X.X (e.g. 4.0.0). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="630" column="12" bodyfile="components/peripherals/i2c/esp_as3935/as3935.c" bodystart="1049" bodyend="1051" declfile="components/peripherals/i2c/esp_as3935/include/as3935.h" declline="630" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga44a1cc83f99a1df1d4ad417a8f50054a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t as3935_get_fw_version_number</definition>
        <argsstring>(void)</argsstring>
        <name>as3935_get_fw_version_number</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Converts AS3935 firmware version numbers (major, minor, patch) into an integer value. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>int32_t AS3935 firmware version number. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="637" column="9" bodyfile="components/peripherals/i2c/esp_as3935/as3935.c" bodystart="1053" bodyend="1055" declfile="components/peripherals/i2c/esp_as3935/include/as3935.h" declline="637" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga616a619c505b1e305eb93cb5b6649ad5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t as7341_get_led_register</definition>
        <argsstring>(as7341_handle_t handle, as7341_led_register_t *const reg)</argsstring>
        <name>as7341_get_led_register</name>
        <param>
          <type><ref refid="group__drivers_1gaca771a90491a159df8e5eaa1f23cb61f" kindref="member">as7341_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>as7341_led_register_t *const</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Reads LED register (0x74) from AS7341. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>AS7341 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>LED register structure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as7341/include/as7341.h" line="534" column="11" bodyfile="components/peripherals/i2c/esp_as7341/as7341.c" bodystart="452" bodyend="463" declfile="components/peripherals/i2c/esp_as7341/include/as7341.h" declline="534" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga985cd6f80b3360ef5ddb1b3c9333c6ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t as7341_set_led_register</definition>
        <argsstring>(as7341_handle_t handle, const as7341_led_register_t reg)</argsstring>
        <name>as7341_set_led_register</name>
        <param>
          <type><ref refid="group__drivers_1gaca771a90491a159df8e5eaa1f23cb61f" kindref="member">as7341_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const as7341_led_register_t</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Writes LED register (0x74) to AS7341. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>AS7341 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>LED register structure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as7341/include/as7341.h" line="543" column="11" bodyfile="components/peripherals/i2c/esp_as7341/as7341.c" bodystart="465" bodyend="476" declfile="components/peripherals/i2c/esp_as7341/include/as7341.h" declline="543" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga967b930a0c139ab84bdd3b05e17f9a0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t as7341_get_astatus_register</definition>
        <argsstring>(as7341_handle_t handle, as7341_astatus_register_t *const reg)</argsstring>
        <name>as7341_get_astatus_register</name>
        <param>
          <type><ref refid="group__drivers_1gaca771a90491a159df8e5eaa1f23cb61f" kindref="member">as7341_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>as7341_astatus_register_t *const</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Reads ASTATUS register (0x94) from AS7341. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>AS7341 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>ASTATUS register structure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as7341/include/as7341.h" line="552" column="11" bodyfile="components/peripherals/i2c/esp_as7341/as7341.c" bodystart="478" bodyend="489" declfile="components/peripherals/i2c/esp_as7341/include/as7341.h" declline="552" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gae5f745494c5028adb1a6f3f12a9ed1e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t as7341_get_status2_register</definition>
        <argsstring>(as7341_handle_t handle, as7341_status2_register_t *const reg)</argsstring>
        <name>as7341_get_status2_register</name>
        <param>
          <type><ref refid="group__drivers_1gaca771a90491a159df8e5eaa1f23cb61f" kindref="member">as7341_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>as7341_status2_register_t *const</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Reads status 2 register (0xA3) from AS7341. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>AS7341 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Status 2 register structure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as7341/include/as7341.h" line="561" column="11" bodyfile="components/peripherals/i2c/esp_as7341/as7341.c" bodystart="491" bodyend="502" declfile="components/peripherals/i2c/esp_as7341/include/as7341.h" declline="561" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gada15210baef6cc75808814f2b8552dac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t as7341_disable_enable_register</definition>
        <argsstring>(as7341_handle_t handle)</argsstring>
        <name>as7341_disable_enable_register</name>
        <param>
          <type><ref refid="group__drivers_1gaca771a90491a159df8e5eaa1f23cb61f" kindref="member">as7341_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Disables spectral readings, flicker detection, power, etc. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>AS7341 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as7341/include/as7341.h" line="569" column="11" bodyfile="components/peripherals/i2c/esp_as7341/as7341.c" bodystart="504" bodyend="514" declfile="components/peripherals/i2c/esp_as7341/include/as7341.h" declline="569" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga1d4995220569e78a732a6875b86864f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t as7341_get_enable_register</definition>
        <argsstring>(as7341_handle_t handle, as7341_enable_register_t *const reg)</argsstring>
        <name>as7341_get_enable_register</name>
        <param>
          <type><ref refid="group__drivers_1gaca771a90491a159df8e5eaa1f23cb61f" kindref="member">as7341_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>as7341_enable_register_t *const</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Reads enable register (0x80) from AS7341. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>AS7341 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Enable register structure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as7341/include/as7341.h" line="578" column="11" bodyfile="components/peripherals/i2c/esp_as7341/as7341.c" bodystart="516" bodyend="527" declfile="components/peripherals/i2c/esp_as7341/include/as7341.h" declline="578" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gae7759cb5e1b5e888a800c548ace96341" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t as7341_set_enable_register</definition>
        <argsstring>(as7341_handle_t handle, const as7341_enable_register_t reg)</argsstring>
        <name>as7341_set_enable_register</name>
        <param>
          <type><ref refid="group__drivers_1gaca771a90491a159df8e5eaa1f23cb61f" kindref="member">as7341_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const as7341_enable_register_t</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Writes enable register (0x80) to AS7341. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>AS7341 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Enable register structure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as7341/include/as7341.h" line="587" column="11" bodyfile="components/peripherals/i2c/esp_as7341/as7341.c" bodystart="529" bodyend="548" declfile="components/peripherals/i2c/esp_as7341/include/as7341.h" declline="587" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gad68b26538cd1d5fdae7e45d423fadc2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t as7341_get_auxiliary_id_register</definition>
        <argsstring>(as7341_handle_t handle, as7341_auxiliary_id_register_t *const reg)</argsstring>
        <name>as7341_get_auxiliary_id_register</name>
        <param>
          <type><ref refid="group__drivers_1gaca771a90491a159df8e5eaa1f23cb61f" kindref="member">as7341_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>as7341_auxiliary_id_register_t *const</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Reads auxiliary id register (0x90) from AS7341. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>AS7341 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Auxiliary id register structure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as7341/include/as7341.h" line="596" column="11" bodyfile="components/peripherals/i2c/esp_as7341/as7341.c" bodystart="550" bodyend="561" declfile="components/peripherals/i2c/esp_as7341/include/as7341.h" declline="596" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga180d0f2987794ab39fd2a066b22ae824" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t as7341_get_revision_id_register</definition>
        <argsstring>(as7341_handle_t handle, as7341_revision_id_register_t *const reg)</argsstring>
        <name>as7341_get_revision_id_register</name>
        <param>
          <type><ref refid="group__drivers_1gaca771a90491a159df8e5eaa1f23cb61f" kindref="member">as7341_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>as7341_revision_id_register_t *const</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Reads revision id register (0x91) from AS7341. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>AS7341 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Revision id register structure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as7341/include/as7341.h" line="605" column="11" bodyfile="components/peripherals/i2c/esp_as7341/as7341.c" bodystart="563" bodyend="574" declfile="components/peripherals/i2c/esp_as7341/include/as7341.h" declline="605" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga3a7aa8ee00b46e0999a5d6bb54ca6cf2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t as7341_get_part_id_register</definition>
        <argsstring>(as7341_handle_t handle, as7341_part_id_register_t *const reg)</argsstring>
        <name>as7341_get_part_id_register</name>
        <param>
          <type><ref refid="group__drivers_1gaca771a90491a159df8e5eaa1f23cb61f" kindref="member">as7341_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>as7341_part_id_register_t *const</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Reads part id register (0x92) from AS7341. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>AS7341 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Part id register structure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as7341/include/as7341.h" line="614" column="11" bodyfile="components/peripherals/i2c/esp_as7341/as7341.c" bodystart="576" bodyend="588" declfile="components/peripherals/i2c/esp_as7341/include/as7341.h" declline="614" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gaa4a221e2ea84c37bdd475b4e1a29bde4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t as7341_get_config_register</definition>
        <argsstring>(as7341_handle_t handle, as7341_config_register_t *const reg)</argsstring>
        <name>as7341_get_config_register</name>
        <param>
          <type><ref refid="group__drivers_1gaca771a90491a159df8e5eaa1f23cb61f" kindref="member">as7341_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>as7341_config_register_t *const</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Reads configuration register (0x70) from AS7341. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>AS7341 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration register structure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as7341/include/as7341.h" line="623" column="11" bodyfile="components/peripherals/i2c/esp_as7341/as7341.c" bodystart="590" bodyend="601" declfile="components/peripherals/i2c/esp_as7341/include/as7341.h" declline="623" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga55a833169ec9228fb2588afb774cc9fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t as7341_set_config_register</definition>
        <argsstring>(as7341_handle_t handle, const as7341_config_register_t reg)</argsstring>
        <name>as7341_set_config_register</name>
        <param>
          <type><ref refid="group__drivers_1gaca771a90491a159df8e5eaa1f23cb61f" kindref="member">as7341_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const as7341_config_register_t</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Writes configuration register (0x70) from AS7341. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>AS7341 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration register structure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as7341/include/as7341.h" line="632" column="11" bodyfile="components/peripherals/i2c/esp_as7341/as7341.c" bodystart="603" bodyend="620" declfile="components/peripherals/i2c/esp_as7341/include/as7341.h" declline="632" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga2926857d23521a0e765273ecfafce5f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t as7341_get_config0_register</definition>
        <argsstring>(as7341_handle_t handle, as7341_config0_register_t *const reg)</argsstring>
        <name>as7341_get_config0_register</name>
        <param>
          <type><ref refid="group__drivers_1gaca771a90491a159df8e5eaa1f23cb61f" kindref="member">as7341_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>as7341_config0_register_t *const</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Reads configuration 0 register (0xA9) from AS7341. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>AS7341 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration 0 register structure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as7341/include/as7341.h" line="641" column="11" bodyfile="components/peripherals/i2c/esp_as7341/as7341.c" bodystart="622" bodyend="633" declfile="components/peripherals/i2c/esp_as7341/include/as7341.h" declline="641" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga736d79b5349ff251798725e3cec9bce2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t as7341_set_config0_register</definition>
        <argsstring>(as7341_handle_t handle, const as7341_config0_register_t reg)</argsstring>
        <name>as7341_set_config0_register</name>
        <param>
          <type><ref refid="group__drivers_1gaca771a90491a159df8e5eaa1f23cb61f" kindref="member">as7341_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const as7341_config0_register_t</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Writes configuration 0 register (0xA9) from AS7341. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>AS7341 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration 0 register structure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as7341/include/as7341.h" line="650" column="11" bodyfile="components/peripherals/i2c/esp_as7341/as7341.c" bodystart="635" bodyend="654" declfile="components/peripherals/i2c/esp_as7341/include/as7341.h" declline="650" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga5931e4f655418d61a6bb764852dce6fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t as7341_get_config1_register</definition>
        <argsstring>(as7341_handle_t handle, as7341_config1_register_t *const reg)</argsstring>
        <name>as7341_get_config1_register</name>
        <param>
          <type><ref refid="group__drivers_1gaca771a90491a159df8e5eaa1f23cb61f" kindref="member">as7341_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>as7341_config1_register_t *const</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Reads configuration 1 (0xAA) register from AS7341. This register configures the 6 integrated ADC (CH0 to CH5). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>AS7341 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration 1 register structure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as7341/include/as7341.h" line="659" column="11" bodyfile="components/peripherals/i2c/esp_as7341/as7341.c" bodystart="656" bodyend="667" declfile="components/peripherals/i2c/esp_as7341/include/as7341.h" declline="659" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga9188a6aac85800676506fb1b541e22bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t as7341_set_config1_register</definition>
        <argsstring>(as7341_handle_t handle, const as7341_config1_register_t reg)</argsstring>
        <name>as7341_set_config1_register</name>
        <param>
          <type><ref refid="group__drivers_1gaca771a90491a159df8e5eaa1f23cb61f" kindref="member">as7341_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const as7341_config1_register_t</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Writes configuration 1 (0xAA) register to AS7341. This register configures the 6 integrated ADC (CH0 to CH5). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>AS7341 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration 1 register structure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as7341/include/as7341.h" line="668" column="11" bodyfile="components/peripherals/i2c/esp_as7341/as7341.c" bodystart="669" bodyend="686" declfile="components/peripherals/i2c/esp_as7341/include/as7341.h" declline="668" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gae3f997f1c1ade0a7c913637a402d7175" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t as7341_get_config6_register</definition>
        <argsstring>(as7341_handle_t handle, as7341_config6_register_t *const reg)</argsstring>
        <name>as7341_get_config6_register</name>
        <param>
          <type><ref refid="group__drivers_1gaca771a90491a159df8e5eaa1f23cb61f" kindref="member">as7341_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>as7341_config6_register_t *const</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Reads configuration 6 register (0xAF) from AS7341. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>AS7341 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration 6 register structure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as7341/include/as7341.h" line="677" column="11" bodyfile="components/peripherals/i2c/esp_as7341/as7341.c" bodystart="688" bodyend="699" declfile="components/peripherals/i2c/esp_as7341/include/as7341.h" declline="677" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gae0f278fd69005a486fef86c9b7bebf52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t as7341_set_config6_register</definition>
        <argsstring>(as7341_handle_t handle, const as7341_config6_register_t reg)</argsstring>
        <name>as7341_set_config6_register</name>
        <param>
          <type><ref refid="group__drivers_1gaca771a90491a159df8e5eaa1f23cb61f" kindref="member">as7341_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const as7341_config6_register_t</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Writes configuration 6 register (0xAF) to AS7341. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>AS7341 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration 6 register structure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as7341/include/as7341.h" line="686" column="11" bodyfile="components/peripherals/i2c/esp_as7341/as7341.c" bodystart="701" bodyend="719" declfile="components/peripherals/i2c/esp_as7341/include/as7341.h" declline="686" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga9c9e05f39d2f3c031f453ae305648b36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t as7341_get_atime_register</definition>
        <argsstring>(as7341_handle_t handle, uint8_t *const reg)</argsstring>
        <name>as7341_get_atime_register</name>
        <param>
          <type><ref refid="group__drivers_1gaca771a90491a159df8e5eaa1f23cb61f" kindref="member">as7341_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>uint8_t *const</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Reads ATIME (0x81) register from AS7341. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>AS7341 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of integration steps from 1 to 256, a value of 29 is recommended as a starting point, 50ms integration time. ATIME and ASTEP cannot both be zero. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as7341/include/as7341.h" line="695" column="11" bodyfile="components/peripherals/i2c/esp_as7341/as7341.c" bodystart="721" bodyend="732" declfile="components/peripherals/i2c/esp_as7341/include/as7341.h" declline="695" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga661b2e1fd733d3ccf71081e1dae7f97c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t as7341_set_atime_register</definition>
        <argsstring>(as7341_handle_t handle, const uint8_t reg)</argsstring>
        <name>as7341_set_atime_register</name>
        <param>
          <type><ref refid="group__drivers_1gaca771a90491a159df8e5eaa1f23cb61f" kindref="member">as7341_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Writes ATIME (0x81) register to AS7341. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>AS7341 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of integration steps from 1 to 256, a value of 29 is recommended as a starting point, 50ms integration time. ATIME and ASTEP cannot both be zero. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as7341/include/as7341.h" line="704" column="11" bodyfile="components/peripherals/i2c/esp_as7341/as7341.c" bodystart="734" bodyend="745" declfile="components/peripherals/i2c/esp_as7341/include/as7341.h" declline="704" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga13641fbc3ea284fffe6f7c4368aa218a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t as7341_get_astep_register</definition>
        <argsstring>(as7341_handle_t handle, uint16_t *const reg)</argsstring>
        <name>as7341_get_astep_register</name>
        <param>
          <type><ref refid="group__drivers_1gaca771a90491a159df8e5eaa1f23cb61f" kindref="member">as7341_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>uint16_t *const</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Reads ASTEP (0xCA, 0xCB) register from AS7341. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>AS7341 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Integration time step size. Integration time step increment of 2.78us, a value of 599 is recommended as a starting point, 50ms integration time. ATIME and ASTEP cannot both be zero. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as7341/include/as7341.h" line="713" column="11" bodyfile="components/peripherals/i2c/esp_as7341/as7341.c" bodystart="747" bodyend="758" declfile="components/peripherals/i2c/esp_as7341/include/as7341.h" declline="713" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga018d2ed80444158d315800c763a54608" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t as7341_set_astep_register</definition>
        <argsstring>(as7341_handle_t handle, const uint16_t reg)</argsstring>
        <name>as7341_set_astep_register</name>
        <param>
          <type><ref refid="group__drivers_1gaca771a90491a159df8e5eaa1f23cb61f" kindref="member">as7341_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const uint16_t</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Writes ASTEP (0xCA, 0xCB) register to AS7341. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>AS7341 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Integration time step size. Integration time step increment of 2.78us, a value of 599 is recommended as a starting point, 50ms integration time. ATIME and ASTEP cannot both be zero. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as7341/include/as7341.h" line="722" column="11" bodyfile="components/peripherals/i2c/esp_as7341/as7341.c" bodystart="760" bodyend="771" declfile="components/peripherals/i2c/esp_as7341/include/as7341.h" declline="722" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga6f6e63de3091678f72f19d936f24245c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t as7341_get_flicker_detection_status_register</definition>
        <argsstring>(as7341_handle_t handle, as7341_flicker_detection_status_register_t *const reg)</argsstring>
        <name>as7341_get_flicker_detection_status_register</name>
        <param>
          <type><ref refid="group__drivers_1gaca771a90491a159df8e5eaa1f23cb61f" kindref="member">as7341_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>as7341_flicker_detection_status_register_t *const</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Reads flicker detection status (0xDB) register from AS7341. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>AS7341 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Flicker detection status register structure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as7341/include/as7341.h" line="731" column="11" bodyfile="components/peripherals/i2c/esp_as7341/as7341.c" bodystart="773" bodyend="784" declfile="components/peripherals/i2c/esp_as7341/include/as7341.h" declline="731" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga9b094b6dd6806ff45f59a630e9f4d3f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t as7341_set_flicker_detection_status_register</definition>
        <argsstring>(as7341_handle_t handle, const as7341_flicker_detection_status_register_t reg)</argsstring>
        <name>as7341_set_flicker_detection_status_register</name>
        <param>
          <type><ref refid="group__drivers_1gaca771a90491a159df8e5eaa1f23cb61f" kindref="member">as7341_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const as7341_flicker_detection_status_register_t</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Writes flicker detection status (0xDB) register to AS7341. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>AS7341 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Flicker detection status register structure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as7341/include/as7341.h" line="740" column="11" bodyfile="components/peripherals/i2c/esp_as7341/as7341.c" bodystart="786" bodyend="803" declfile="components/peripherals/i2c/esp_as7341/include/as7341.h" declline="740" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gabdd244dad2d26a3af946960952a8eaa9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t as7341_clear_flicker_detection_status_register</definition>
        <argsstring>(as7341_handle_t handle)</argsstring>
        <name>as7341_clear_flicker_detection_status_register</name>
        <param>
          <type><ref refid="group__drivers_1gaca771a90491a159df8e5eaa1f23cb61f" kindref="member">as7341_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Clears flicker detection status (0xDB) register on AS7341. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>AS7341 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as7341/include/as7341.h" line="748" column="11" bodyfile="components/peripherals/i2c/esp_as7341/as7341.c" bodystart="805" bodyend="821" declfile="components/peripherals/i2c/esp_as7341/include/as7341.h" declline="748" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gaaeb8b18f5f952d58b3aaab21ee801e30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t as7341_enable_hi_register_bank</definition>
        <argsstring>(as7341_handle_t handle)</argsstring>
        <name>as7341_enable_hi_register_bank</name>
        <param>
          <type><ref refid="group__drivers_1gaca771a90491a159df8e5eaa1f23cb61f" kindref="member">as7341_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Enables access to the AS7341 high register bank (0x80 to 0xFF). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>AS7341 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as7341/include/as7341.h" line="756" column="11" bodyfile="components/peripherals/i2c/esp_as7341/as7341.c" bodystart="823" bodyend="840" declfile="components/peripherals/i2c/esp_as7341/include/as7341.h" declline="756" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gafab077360e6f7fbbf4b4316e63bae644" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t as7341_enable_lo_register_bank</definition>
        <argsstring>(as7341_handle_t handle)</argsstring>
        <name>as7341_enable_lo_register_bank</name>
        <param>
          <type><ref refid="group__drivers_1gaca771a90491a159df8e5eaa1f23cb61f" kindref="member">as7341_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Enables access to the AS7341 low register bank (0x60 to 0x74). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>AS7341 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as7341/include/as7341.h" line="764" column="11" bodyfile="components/peripherals/i2c/esp_as7341/as7341.c" bodystart="842" bodyend="859" declfile="components/peripherals/i2c/esp_as7341/include/as7341.h" declline="764" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga9eeac4357ce227edd26bf3d3da0d7c2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t as7341_set_smux_command</definition>
        <argsstring>(as7341_handle_t handle, const as7341_smux_commands_t command)</argsstring>
        <name>as7341_set_smux_command</name>
        <param>
          <type><ref refid="group__drivers_1gaca771a90491a159df8e5eaa1f23cb61f" kindref="member">as7341_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const <ref refid="group__drivers_1gacd9eda447520eb4166bc70bf0d2e9f86" kindref="member">as7341_smux_commands_t</ref></type>
          <declname>command</declname>
        </param>
        <briefdescription>
<para>Writes SMUX command to AS7341. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>AS7341 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">command</parametername>
</parameternamelist>
<parameterdescription>
<para>SMUX command. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as7341/include/as7341.h" line="773" column="11" bodyfile="components/peripherals/i2c/esp_as7341/as7341.c" bodystart="861" bodyend="872" declfile="components/peripherals/i2c/esp_as7341/include/as7341.h" declline="773" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gab069ad9220c8849d2b938047e9420af0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t as7341_init</definition>
        <argsstring>(i2c_master_bus_handle_t master_handle, const as7341_config_t *as7341_config, as7341_handle_t *as7341_handle)</argsstring>
        <name>as7341_init</name>
        <param>
          <type>i2c_master_bus_handle_t</type>
          <declname>master_handle</declname>
        </param>
        <param>
          <type>const <ref refid="group__drivers_1ga927515039a6879c9453bd1eda2a49997" kindref="member">as7341_config_t</ref> *</type>
          <declname>as7341_config</declname>
        </param>
        <param>
          <type><ref refid="group__drivers_1gaca771a90491a159df8e5eaa1f23cb61f" kindref="member">as7341_handle_t</ref> *</type>
          <declname>as7341_handle</declname>
        </param>
        <briefdescription>
<para>Initializes an AS7341 device onto the I2C master bus. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">master_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>I2C master bus handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">as7341_config</parametername>
</parameternamelist>
<parameterdescription>
<para>AS7341 device configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">as7341_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>AS7341 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as7341/include/as7341.h" line="783" column="11" bodyfile="components/peripherals/i2c/esp_as7341/as7341.c" bodystart="874" bodyend="948" declfile="components/peripherals/i2c/esp_as7341/include/as7341.h" declline="783" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gacc971a23bd190321d109026f790e6d61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t as7341_get_spectral_measurements</definition>
        <argsstring>(as7341_handle_t handle, as7341_channels_spectral_data_t *const spectral_data)</argsstring>
        <name>as7341_get_spectral_measurements</name>
        <param>
          <type><ref refid="group__drivers_1gaca771a90491a159df8e5eaa1f23cb61f" kindref="member">as7341_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="group__drivers_1ga9102f9187825808d80bcf5f77dbdc426" kindref="member">as7341_channels_spectral_data_t</ref> *const</type>
          <declname>spectral_data</declname>
        </param>
        <briefdescription>
<para>Reads spectral sensors measurements, F1 to F8, Clear and NIR, from AS7341. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>AS7341 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">spectral_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Spectral sensors data from AS7341. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as7341/include/as7341.h" line="792" column="11" bodyfile="components/peripherals/i2c/esp_as7341/as7341.c" bodystart="950" bodyend="1040" declfile="components/peripherals/i2c/esp_as7341/include/as7341.h" declline="792" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gabfdc2f461c3d2caedfcd2ae7af6e1741" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t as7341_get_basic_counts</definition>
        <argsstring>(as7341_handle_t handle, const as7341_channels_spectral_data_t spectral_data, as7341_channels_basic_counts_data_t *const basic_counts_data)</argsstring>
        <name>as7341_get_basic_counts</name>
        <param>
          <type><ref refid="group__drivers_1gaca771a90491a159df8e5eaa1f23cb61f" kindref="member">as7341_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const <ref refid="group__drivers_1ga9102f9187825808d80bcf5f77dbdc426" kindref="member">as7341_channels_spectral_data_t</ref></type>
          <declname>spectral_data</declname>
        </param>
        <param>
          <type><ref refid="group__drivers_1gad0cdfc4fec333ed2019e55fc8e1ebb24" kindref="member">as7341_channels_basic_counts_data_t</ref> *const</type>
          <declname>basic_counts_data</declname>
        </param>
        <briefdescription>
<para>Converts AS7341 spectral sensors measurements to basic counts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>AS7341 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">spectral_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Spectral sensors data from AS7341. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">basic_counts_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Converted basic counts data from spectral sensors data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as7341/include/as7341.h" line="802" column="11" bodyfile="components/peripherals/i2c/esp_as7341/as7341.c" bodystart="1042" bodyend="1071" declfile="components/peripherals/i2c/esp_as7341/include/as7341.h" declline="802" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gaec81d4f54832ea5edd3f95440972c54e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t as7341_get_flicker_detection_status</definition>
        <argsstring>(as7341_handle_t handle, as7341_flicker_detection_states_t *const state)</argsstring>
        <name>as7341_get_flicker_detection_status</name>
        <param>
          <type><ref refid="group__drivers_1gaca771a90491a159df8e5eaa1f23cb61f" kindref="member">as7341_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="group__drivers_1ga820a0faa02578e68ad310882a50af614" kindref="member">as7341_flicker_detection_states_t</ref> *const</type>
          <declname>state</declname>
        </param>
        <briefdescription>
<para>Reads flicker detection status from AS7341. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>AS7341 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">state</parametername>
</parameternamelist>
<parameterdescription>
<para>Flicker detection state, 100Hz, 120Hz or flicker saturation was detected. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success, ESP_ERR_TIMEOUT if operation timed out. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as7341/include/as7341.h" line="811" column="11" bodyfile="components/peripherals/i2c/esp_as7341/as7341.c" bodystart="1073" bodyend="1153" declfile="components/peripherals/i2c/esp_as7341/include/as7341.h" declline="811" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga507581339c88f7b4b985dead6443f6ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t as7341_get_data_status</definition>
        <argsstring>(as7341_handle_t handle, bool *const ready)</argsstring>
        <name>as7341_get_data_status</name>
        <param>
          <type><ref refid="group__drivers_1gaca771a90491a159df8e5eaa1f23cb61f" kindref="member">as7341_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>bool *const</type>
          <declname>ready</declname>
        </param>
        <briefdescription>
<para>Reads data status from AS7341. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>AS7341 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">ready</parametername>
</parameternamelist>
<parameterdescription>
<para>Data is ready when asserted to true. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as7341/include/as7341.h" line="820" column="11" bodyfile="components/peripherals/i2c/esp_as7341/as7341.c" bodystart="1155" bodyend="1168" declfile="components/peripherals/i2c/esp_as7341/include/as7341.h" declline="820" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gaf9eda90f0593c0baafd52b856ceec2c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t as7341_get_atime</definition>
        <argsstring>(as7341_handle_t handle, uint8_t *const atime)</argsstring>
        <name>as7341_get_atime</name>
        <param>
          <type><ref refid="group__drivers_1gaca771a90491a159df8e5eaa1f23cb61f" kindref="member">as7341_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>uint8_t *const</type>
          <declname>atime</declname>
        </param>
        <briefdescription>
<para>Reads the number of integration steps for the ADC integration time from AS7341. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>AS7341 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">atime</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of integration steps from 1 to 256, a value of 29 is recommended as a starting point, 50ms integration time. ATIME and ASTEP cannot both be zero. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as7341/include/as7341.h" line="829" column="11" bodyfile="components/peripherals/i2c/esp_as7341/as7341.c" bodystart="1170" bodyend="1178" declfile="components/peripherals/i2c/esp_as7341/include/as7341.h" declline="829" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga3b7289ee6afbb585bb34cf86b8a78142" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t as7341_set_atime</definition>
        <argsstring>(as7341_handle_t handle, const uint8_t atime)</argsstring>
        <name>as7341_set_atime</name>
        <param>
          <type><ref refid="group__drivers_1gaca771a90491a159df8e5eaa1f23cb61f" kindref="member">as7341_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>atime</declname>
        </param>
        <briefdescription>
<para>Writes the number of integration steps for the ADC integration time to AS7341. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>AS7341 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">atime</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of integration steps from 1 to 256, a value of 29 is recommended as a starting point, 50ms integration time. ATIME and ASTEP cannot both be zero. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as7341/include/as7341.h" line="838" column="11" bodyfile="components/peripherals/i2c/esp_as7341/as7341.c" bodystart="1180" bodyend="1188" declfile="components/peripherals/i2c/esp_as7341/include/as7341.h" declline="838" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gadb90fff059916b771d5ee2b4655d3936" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t as7341_get_astep</definition>
        <argsstring>(as7341_handle_t handle, uint16_t *const astep)</argsstring>
        <name>as7341_get_astep</name>
        <param>
          <type><ref refid="group__drivers_1gaca771a90491a159df8e5eaa1f23cb61f" kindref="member">as7341_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>uint16_t *const</type>
          <declname>astep</declname>
        </param>
        <briefdescription>
<para>Reads the number of integration time steps for the ADC integration time from AS7341. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>AS7341 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">astep</parametername>
</parameternamelist>
<parameterdescription>
<para>Integration time step size. Integration time step increment of 2.78us, a value of 599 is recommended as a starting point, 50ms integration time. ATIME and ASTEP cannot both be zero. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as7341/include/as7341.h" line="847" column="11" bodyfile="components/peripherals/i2c/esp_as7341/as7341.c" bodystart="1190" bodyend="1198" declfile="components/peripherals/i2c/esp_as7341/include/as7341.h" declline="847" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga4a9a9cc330e8120ff9f1c25d91b4f6fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t as7341_set_astep</definition>
        <argsstring>(as7341_handle_t handle, const uint16_t astep)</argsstring>
        <name>as7341_set_astep</name>
        <param>
          <type><ref refid="group__drivers_1gaca771a90491a159df8e5eaa1f23cb61f" kindref="member">as7341_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const uint16_t</type>
          <declname>astep</declname>
        </param>
        <briefdescription>
<para>Writes the number of integration time steps for the ADC integration time to AS7341. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>AS7341 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">astep</parametername>
</parameternamelist>
<parameterdescription>
<para>Integration time step size. Integration time step increment of 2.78us, a value of 599 is recommended as a starting point, 50ms integration time. ATIME and ASTEP cannot both be zero. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as7341/include/as7341.h" line="856" column="11" bodyfile="components/peripherals/i2c/esp_as7341/as7341.c" bodystart="1200" bodyend="1208" declfile="components/peripherals/i2c/esp_as7341/include/as7341.h" declline="856" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga9221fb2c4e5ba27119feab2a05b16b49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t as7341_get_spectral_gain</definition>
        <argsstring>(as7341_handle_t handle, as7341_spectral_gains_t *const gain)</argsstring>
        <name>as7341_get_spectral_gain</name>
        <param>
          <type><ref refid="group__drivers_1gaca771a90491a159df8e5eaa1f23cb61f" kindref="member">as7341_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="group__drivers_1ga27b623acd6c033c0a6ffc1ed0244b502" kindref="member">as7341_spectral_gains_t</ref> *const</type>
          <declname>gain</declname>
        </param>
        <briefdescription>
<para>Reads spectral gain setting from AS7341. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>AS7341 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">gain</parametername>
</parameternamelist>
<parameterdescription>
<para>AS7341 spectral gain setting. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as7341/include/as7341.h" line="865" column="11" bodyfile="components/peripherals/i2c/esp_as7341/as7341.c" bodystart="1210" bodyend="1223" declfile="components/peripherals/i2c/esp_as7341/include/as7341.h" declline="865" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gaba8a8ad4e703c319a2c2c717d3962b40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t as7341_set_spectral_gain</definition>
        <argsstring>(as7341_handle_t handle, const as7341_spectral_gains_t gain)</argsstring>
        <name>as7341_set_spectral_gain</name>
        <param>
          <type><ref refid="group__drivers_1gaca771a90491a159df8e5eaa1f23cb61f" kindref="member">as7341_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const <ref refid="group__drivers_1ga27b623acd6c033c0a6ffc1ed0244b502" kindref="member">as7341_spectral_gains_t</ref></type>
          <declname>gain</declname>
        </param>
        <briefdescription>
<para>Writes spectral gain setting to AS7341. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>AS7341 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">gain</parametername>
</parameternamelist>
<parameterdescription>
<para>AS7341 spectral gain setting. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as7341/include/as7341.h" line="874" column="11" bodyfile="components/peripherals/i2c/esp_as7341/as7341.c" bodystart="1225" bodyend="1241" declfile="components/peripherals/i2c/esp_as7341/include/as7341.h" declline="874" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gaa77f61c92d964558e829958fa90e256d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t as7341_get_ambient_light_sensing_mode</definition>
        <argsstring>(as7341_handle_t handle, as7341_als_modes_t *const mode)</argsstring>
        <name>as7341_get_ambient_light_sensing_mode</name>
        <param>
          <type><ref refid="group__drivers_1gaca771a90491a159df8e5eaa1f23cb61f" kindref="member">as7341_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="group__drivers_1ga22f338d9e4256e61c9cfa261878ea595" kindref="member">as7341_als_modes_t</ref> *const</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Reads ambient light sensing mode from AS7341. SPM mode (spectral measurement), normal mode, is configured by default. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>AS7341 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">mode</parametername>
</parameternamelist>
<parameterdescription>
<para>AS7341 ambient light sensing mode setting. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as7341/include/as7341.h" line="883" column="11" bodyfile="components/peripherals/i2c/esp_as7341/as7341.c" bodystart="1243" bodyend="1262" declfile="components/peripherals/i2c/esp_as7341/include/as7341.h" declline="883" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gaf7e18bf3570fd0f2c93a051ca3516fbf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t as7341_set_ambient_light_sensing_mode</definition>
        <argsstring>(as7341_handle_t handle, const as7341_als_modes_t mode)</argsstring>
        <name>as7341_set_ambient_light_sensing_mode</name>
        <param>
          <type><ref refid="group__drivers_1gaca771a90491a159df8e5eaa1f23cb61f" kindref="member">as7341_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const <ref refid="group__drivers_1ga22f338d9e4256e61c9cfa261878ea595" kindref="member">as7341_als_modes_t</ref></type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Writes ambient light sensing mode to AS7341. SPM mode (spectral measurement), normal mode, is configured by default. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>AS7341 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mode</parametername>
</parameternamelist>
<parameterdescription>
<para>AS7341 ambient light sensing mode setting. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as7341/include/as7341.h" line="892" column="11" bodyfile="components/peripherals/i2c/esp_as7341/as7341.c" bodystart="1264" bodyend="1286" declfile="components/peripherals/i2c/esp_as7341/include/as7341.h" declline="892" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga66320962a6ce241ffc3afac05ea82b7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t as7341_enable_flicker_detection</definition>
        <argsstring>(as7341_handle_t handle)</argsstring>
        <name>as7341_enable_flicker_detection</name>
        <param>
          <type><ref refid="group__drivers_1gaca771a90491a159df8e5eaa1f23cb61f" kindref="member">as7341_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Enables AS7341 flicker detection. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>AS7341 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as7341/include/as7341.h" line="900" column="11" bodyfile="components/peripherals/i2c/esp_as7341/as7341.c" bodystart="1288" bodyend="1304" declfile="components/peripherals/i2c/esp_as7341/include/as7341.h" declline="900" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga433cb2029d0cef547b2549216bd66ae6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t as7341_disable_flicker_detection</definition>
        <argsstring>(as7341_handle_t handle)</argsstring>
        <name>as7341_disable_flicker_detection</name>
        <param>
          <type><ref refid="group__drivers_1gaca771a90491a159df8e5eaa1f23cb61f" kindref="member">as7341_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Disables AS7341 flicker detection. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>AS7341 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as7341/include/as7341.h" line="908" column="11" bodyfile="components/peripherals/i2c/esp_as7341/as7341.c" bodystart="1306" bodyend="1322" declfile="components/peripherals/i2c/esp_as7341/include/as7341.h" declline="908" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gae68c609a68336f84f6ee2b39a3444cb6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t as7341_enable_smux</definition>
        <argsstring>(as7341_handle_t handle)</argsstring>
        <name>as7341_enable_smux</name>
        <param>
          <type><ref refid="group__drivers_1gaca771a90491a159df8e5eaa1f23cb61f" kindref="member">as7341_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Enables AS7341 supper multiplier (SMUX) special interrupt. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>AS7341 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as7341/include/as7341.h" line="916" column="11" bodyfile="components/peripherals/i2c/esp_as7341/as7341.c" bodystart="1324" bodyend="1354" declfile="components/peripherals/i2c/esp_as7341/include/as7341.h" declline="916" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga1b88d568d502616cdc8b242143b1154a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t as7341_enable_wait_time</definition>
        <argsstring>(as7341_handle_t handle)</argsstring>
        <name>as7341_enable_wait_time</name>
        <param>
          <type><ref refid="group__drivers_1gaca771a90491a159df8e5eaa1f23cb61f" kindref="member">as7341_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Enables AS7341 wait time between two consecutive spectral measurements. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>AS7341 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as7341/include/as7341.h" line="924" column="11" declfile="components/peripherals/i2c/esp_as7341/include/as7341.h" declline="924" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gab318d5870f22cfb3cf0d4797f9acb3ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t as7341_disable_wait_time</definition>
        <argsstring>(as7341_handle_t handle)</argsstring>
        <name>as7341_disable_wait_time</name>
        <param>
          <type><ref refid="group__drivers_1gaca771a90491a159df8e5eaa1f23cb61f" kindref="member">as7341_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Disables AS7341 wait time between two consecutive spectral measurements. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>AS7341 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as7341/include/as7341.h" line="932" column="11" declfile="components/peripherals/i2c/esp_as7341/include/as7341.h" declline="932" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gaad1a1c083514ad5485899fae51327b51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t as7341_enable_spectral_measurement</definition>
        <argsstring>(as7341_handle_t handle)</argsstring>
        <name>as7341_enable_spectral_measurement</name>
        <param>
          <type><ref refid="group__drivers_1gaca771a90491a159df8e5eaa1f23cb61f" kindref="member">as7341_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Enables AS7341 spectral measurement. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>AS7341 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as7341/include/as7341.h" line="940" column="11" bodyfile="components/peripherals/i2c/esp_as7341/as7341.c" bodystart="1356" bodyend="1372" declfile="components/peripherals/i2c/esp_as7341/include/as7341.h" declline="940" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gad59d118e1a7f4579c7516a9e09f2d302" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t as7341_disable_spectral_measurement</definition>
        <argsstring>(as7341_handle_t handle)</argsstring>
        <name>as7341_disable_spectral_measurement</name>
        <param>
          <type><ref refid="group__drivers_1gaca771a90491a159df8e5eaa1f23cb61f" kindref="member">as7341_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Disables AS7341 spectral measurement. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>AS7341 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as7341/include/as7341.h" line="948" column="11" bodyfile="components/peripherals/i2c/esp_as7341/as7341.c" bodystart="1374" bodyend="1390" declfile="components/peripherals/i2c/esp_as7341/include/as7341.h" declline="948" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga621d23d292f922d0fb0bb5f1894f564a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t as7341_enable_power</definition>
        <argsstring>(as7341_handle_t handle)</argsstring>
        <name>as7341_enable_power</name>
        <param>
          <type><ref refid="group__drivers_1gaca771a90491a159df8e5eaa1f23cb61f" kindref="member">as7341_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Enables AS7341 power. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>AS7341 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as7341/include/as7341.h" line="956" column="11" bodyfile="components/peripherals/i2c/esp_as7341/as7341.c" bodystart="1392" bodyend="1408" declfile="components/peripherals/i2c/esp_as7341/include/as7341.h" declline="956" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga3a8830ec467e67d084b3a3f66d4b12d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t as7341_disable_power</definition>
        <argsstring>(as7341_handle_t handle)</argsstring>
        <name>as7341_disable_power</name>
        <param>
          <type><ref refid="group__drivers_1gaca771a90491a159df8e5eaa1f23cb61f" kindref="member">as7341_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Disables AS7341 power. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>AS7341 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as7341/include/as7341.h" line="964" column="11" bodyfile="components/peripherals/i2c/esp_as7341/as7341.c" bodystart="1410" bodyend="1426" declfile="components/peripherals/i2c/esp_as7341/include/as7341.h" declline="964" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga066a4742bb09b5e255edebff326d2dc5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t as7341_enable_led</definition>
        <argsstring>(as7341_handle_t handle)</argsstring>
        <name>as7341_enable_led</name>
        <param>
          <type><ref refid="group__drivers_1gaca771a90491a159df8e5eaa1f23cb61f" kindref="member">as7341_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Enables AS7341 onboard LED. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>AS7341 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as7341/include/as7341.h" line="972" column="11" bodyfile="components/peripherals/i2c/esp_as7341/as7341.c" bodystart="1428" bodyend="1458" declfile="components/peripherals/i2c/esp_as7341/include/as7341.h" declline="972" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga035f076f217294c33785c0f85455c729" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t as7341_disable_led</definition>
        <argsstring>(as7341_handle_t handle)</argsstring>
        <name>as7341_disable_led</name>
        <param>
          <type><ref refid="group__drivers_1gaca771a90491a159df8e5eaa1f23cb61f" kindref="member">as7341_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Disables AS7341 onboard LED. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>AS7341 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as7341/include/as7341.h" line="980" column="11" bodyfile="components/peripherals/i2c/esp_as7341/as7341.c" bodystart="1460" bodyend="1490" declfile="components/peripherals/i2c/esp_as7341/include/as7341.h" declline="980" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga67e5f9b57a1f45354fb5140f11bd6071" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t as7341_remove</definition>
        <argsstring>(as7341_handle_t handle)</argsstring>
        <name>as7341_remove</name>
        <param>
          <type><ref refid="group__drivers_1gaca771a90491a159df8e5eaa1f23cb61f" kindref="member">as7341_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Removes an AS7341 device from master bus. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>AS7341 device handle </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as7341/include/as7341.h" line="988" column="11" bodyfile="components/peripherals/i2c/esp_as7341/as7341.c" bodystart="1492" bodyend="1498" declfile="components/peripherals/i2c/esp_as7341/include/as7341.h" declline="988" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gabcff7a6cad0195e4915fa7fa61b7bdb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t as7341_delete</definition>
        <argsstring>(as7341_handle_t handle)</argsstring>
        <name>as7341_delete</name>
        <param>
          <type><ref refid="group__drivers_1gaca771a90491a159df8e5eaa1f23cb61f" kindref="member">as7341_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Removes an AS7341 device from master bus and frees handle. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>AS7341 device handle </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as7341/include/as7341.h" line="996" column="11" bodyfile="components/peripherals/i2c/esp_as7341/as7341.c" bodystart="1500" bodyend="1514" declfile="components/peripherals/i2c/esp_as7341/include/as7341.h" declline="996" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gad6425e71e4be7003ad1ee101dfc4e2eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * as7341_get_fw_version</definition>
        <argsstring>(void)</argsstring>
        <name>as7341_get_fw_version</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Converts AS7341 firmware version numbers (major, minor, patch, build) into a string. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>char* AS7341 firmware version as a string that is formatted as X.X.X (e.g. 4.0.0). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as7341/include/as7341.h" line="1003" column="12" bodyfile="components/peripherals/i2c/esp_as7341/as7341.c" bodystart="1516" bodyend="1518" declfile="components/peripherals/i2c/esp_as7341/include/as7341.h" declline="1003" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga212b77fd2a3d157f629f02f9165f4904" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t as7341_get_fw_version_number</definition>
        <argsstring>(void)</argsstring>
        <name>as7341_get_fw_version_number</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Converts AS7341 firmware version numbers (major, minor, patch) into an integer value. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>int32_t AS7341 firmware version number. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as7341/include/as7341.h" line="1010" column="9" bodyfile="components/peripherals/i2c/esp_as7341/as7341.c" bodystart="1520" bodyend="1522" declfile="components/peripherals/i2c/esp_as7341/include/as7341.h" declline="1010" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga7e476a2704b4a58413b2a7de316ef29d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t bh1750_init</definition>
        <argsstring>(i2c_master_bus_handle_t master_handle, const bh1750_config_t *bh1750_config, bh1750_handle_t *bh1750_handle)</argsstring>
        <name>bh1750_init</name>
        <param>
          <type>i2c_master_bus_handle_t</type>
          <declname>master_handle</declname>
        </param>
        <param>
          <type>const <ref refid="group__drivers_1ga473a8d2e67b27ec75271fdda3b84dbba" kindref="member">bh1750_config_t</ref> *</type>
          <declname>bh1750_config</declname>
        </param>
        <param>
          <type><ref refid="group__drivers_1gaf7d20c4f1eb201955b708b4d81779200" kindref="member">bh1750_handle_t</ref> *</type>
          <declname>bh1750_handle</declname>
        </param>
        <briefdescription>
<para>initializes an BH1750 device onto the I2C master bus. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">master_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>I2C master bus handle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">bh1750_config</parametername>
</parameternamelist>
<parameterdescription>
<para>configuration of BH1750 device </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">bh1750_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>BH1750 device handle </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bh1750/include/bh1750.h" line="128" column="11" bodyfile="components/peripherals/i2c/esp_bh1750/bh1750.c" bodystart="172" bodyend="244" declfile="components/peripherals/i2c/esp_bh1750/include/bh1750.h" declline="128" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gac577dd8a77cf737c5ef25add84188e01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t bh1750_get_ambient_light</definition>
        <argsstring>(bh1750_handle_t handle, float *const ambient_light)</argsstring>
        <name>bh1750_get_ambient_light</name>
        <param>
          <type><ref refid="group__drivers_1gaf7d20c4f1eb201955b708b4d81779200" kindref="member">bh1750_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>float *const</type>
          <declname>ambient_light</declname>
        </param>
        <briefdescription>
<para>measure BH1750 illuminance. BH1750 goes into power-down mode after measurement when one-time measurements are configured. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>BH1750 device handle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">ambient_light</parametername>
</parameternamelist>
<parameterdescription>
<para>BH1750 illuminance measurement </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bh1750/include/bh1750.h" line="137" column="11" bodyfile="components/peripherals/i2c/esp_bh1750/bh1750.c" bodystart="246" bodyend="292" declfile="components/peripherals/i2c/esp_bh1750/include/bh1750.h" declline="137" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga2d4689f3f1c8bbc70b719b38f009c3ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t bh1750_set_measurement_mode</definition>
        <argsstring>(bh1750_handle_t handle, const bh1750_measurement_modes_t mode)</argsstring>
        <name>bh1750_set_measurement_mode</name>
        <param>
          <type><ref refid="group__drivers_1gaf7d20c4f1eb201955b708b4d81779200" kindref="member">bh1750_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const <ref refid="group__drivers_1ga76514573edf401f3839df07163bff37a" kindref="member">bh1750_measurement_modes_t</ref></type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Writes measurement mode to bh1750. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>bh1750 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mode</parametername>
</parameternamelist>
<parameterdescription>
<para>bh1750 measurement mode. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bh1750/include/bh1750.h" line="146" column="11" bodyfile="components/peripherals/i2c/esp_bh1750/bh1750.c" bodystart="294" bodyend="315" declfile="components/peripherals/i2c/esp_bh1750/include/bh1750.h" declline="146" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga4649a73b0eb65849d3e8b2d53d0e586f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t bh1750_set_measurement_time</definition>
        <argsstring>(bh1750_handle_t handle, const uint8_t timespan)</argsstring>
        <name>bh1750_set_measurement_time</name>
        <param>
          <type><ref refid="group__drivers_1gaf7d20c4f1eb201955b708b4d81779200" kindref="member">bh1750_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>timespan</declname>
        </param>
        <briefdescription>
<para>sets bh1750 sensor measurement time. see datasheet for details. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>bh1750 device handle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">timespan</parametername>
</parameternamelist>
<parameterdescription>
<para>bh1750 measurement time duration from 31 to 254 (typical 69) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bh1750/include/bh1750.h" line="155" column="11" bodyfile="components/peripherals/i2c/esp_bh1750/bh1750.c" bodystart="317" bodyend="335" declfile="components/peripherals/i2c/esp_bh1750/include/bh1750.h" declline="155" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gaed00b37e5bfd7819e2c81ef02a04268b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t bh1750_enable_power</definition>
        <argsstring>(bh1750_handle_t handle)</argsstring>
        <name>bh1750_enable_power</name>
        <param>
          <type><ref refid="group__drivers_1gaf7d20c4f1eb201955b708b4d81779200" kindref="member">bh1750_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>power-up BH1750 sensor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>BH1750 device handle </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bh1750/include/bh1750.h" line="163" column="11" bodyfile="components/peripherals/i2c/esp_bh1750/bh1750.c" bodystart="337" bodyend="348" declfile="components/peripherals/i2c/esp_bh1750/include/bh1750.h" declline="163" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga1abd1351a7490b7dccc38ba2bc42dce2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t bh1750_disable_power</definition>
        <argsstring>(bh1750_handle_t handle)</argsstring>
        <name>bh1750_disable_power</name>
        <param>
          <type><ref refid="group__drivers_1gaf7d20c4f1eb201955b708b4d81779200" kindref="member">bh1750_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>power-down BH1750 sensor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>BH1750 device handle </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bh1750/include/bh1750.h" line="171" column="11" bodyfile="components/peripherals/i2c/esp_bh1750/bh1750.c" bodystart="350" bodyend="361" declfile="components/peripherals/i2c/esp_bh1750/include/bh1750.h" declline="171" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga814dc723c84984e588504cab4a1b2552" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t bh1750_reset</definition>
        <argsstring>(bh1750_handle_t handle)</argsstring>
        <name>bh1750_reset</name>
        <param>
          <type><ref refid="group__drivers_1gaf7d20c4f1eb201955b708b4d81779200" kindref="member">bh1750_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>soft-reset BH1750 sensor. Reset command is not acceptable in power-down mode. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>BH1750 device handle </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bh1750/include/bh1750.h" line="179" column="11" bodyfile="components/peripherals/i2c/esp_bh1750/bh1750.c" bodystart="363" bodyend="374" declfile="components/peripherals/i2c/esp_bh1750/include/bh1750.h" declline="179" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gadbed4b29cd5936e8df6767c128fa640f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t bh1750_remove</definition>
        <argsstring>(bh1750_handle_t handle)</argsstring>
        <name>bh1750_remove</name>
        <param>
          <type><ref refid="group__drivers_1gaf7d20c4f1eb201955b708b4d81779200" kindref="member">bh1750_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>removes an BH1750 device from master bus. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>BH1750 device handle </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bh1750/include/bh1750.h" line="187" column="11" bodyfile="components/peripherals/i2c/esp_bh1750/bh1750.c" bodystart="376" bodyend="381" declfile="components/peripherals/i2c/esp_bh1750/include/bh1750.h" declline="187" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga0922b011c6b1d2ce91933e71ea9158f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t bh1750_delete</definition>
        <argsstring>(bh1750_handle_t handle)</argsstring>
        <name>bh1750_delete</name>
        <param>
          <type><ref refid="group__drivers_1gaf7d20c4f1eb201955b708b4d81779200" kindref="member">bh1750_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>removes an BH1750 device from master bus and frees handle. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>BH1750 device handle </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bh1750/include/bh1750.h" line="195" column="11" bodyfile="components/peripherals/i2c/esp_bh1750/bh1750.c" bodystart="383" bodyend="397" declfile="components/peripherals/i2c/esp_bh1750/include/bh1750.h" declline="195" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga30c1494f2d5eb6e99457fae608843b9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * bh1750_get_fw_version</definition>
        <argsstring>(void)</argsstring>
        <name>bh1750_get_fw_version</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Converts BH1750 firmware version numbers (major, minor, patch) into a string. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>char* BH1750 firmware version as a string that is formatted as X.X.X (e.g. 4.0.0). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bh1750/include/bh1750.h" line="202" column="12" declfile="components/peripherals/i2c/esp_bh1750/include/bh1750.h" declline="202" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga4de5312877ad5741597622e5ce03d875" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t bh1750_get_fw_version_number</definition>
        <argsstring>(void)</argsstring>
        <name>bh1750_get_fw_version_number</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Converts BH1750 firmware version numbers (major, minor, patch) into an integer value. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>int32_t BH1750 firmware version number. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bh1750/include/bh1750.h" line="209" column="9" declfile="components/peripherals/i2c/esp_bh1750/include/bh1750.h" declline="209" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga1428013d7162e45e0aa98d692ebe6e6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t bme680_get_chip_id_register</definition>
        <argsstring>(bme680_handle_t handle, uint8_t *const reg)</argsstring>
        <name>bme680_get_chip_id_register</name>
        <param>
          <type><ref refid="group__drivers_1ga613796da4cb6da455381a179729e91f0" kindref="member">bme680_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>uint8_t *const</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Reads chip identification register from BME680. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>BME680 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>BME680 chip identifier. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bme680/include/bme680.h" line="396" column="11" bodyfile="components/peripherals/i2c/esp_bme680/bme680.c" bodystart="714" bodyend="725" declfile="components/peripherals/i2c/esp_bme680/include/bme680.h" declline="396" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga9645bd4e638ebc98c2ecf61195de5776" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t bme680_get_variant_id_register</definition>
        <argsstring>(bme680_handle_t handle, uint8_t *const reg)</argsstring>
        <name>bme680_get_variant_id_register</name>
        <param>
          <type><ref refid="group__drivers_1ga613796da4cb6da455381a179729e91f0" kindref="member">bme680_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>uint8_t *const</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Reads variant identification register from BME680. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>BME680 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>BME680 variant identifier. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bme680/include/bme680.h" line="405" column="11" bodyfile="components/peripherals/i2c/esp_bme680/bme680.c" bodystart="727" bodyend="738" declfile="components/peripherals/i2c/esp_bme680/include/bme680.h" declline="405" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga6c954f3140a0b05f025691007165c466" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t bme680_get_status0_register</definition>
        <argsstring>(bme680_handle_t handle, bme680_status0_register_t *const reg)</argsstring>
        <name>bme680_get_status0_register</name>
        <param>
          <type><ref refid="group__drivers_1ga613796da4cb6da455381a179729e91f0" kindref="member">bme680_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>bme680_status0_register_t *const</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Reads status register from BME680. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>BME680 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Status 0 register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bme680/include/bme680.h" line="414" column="11" bodyfile="components/peripherals/i2c/esp_bme680/bme680.c" bodystart="740" bodyend="751" declfile="components/peripherals/i2c/esp_bme680/include/bme680.h" declline="414" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gac36e4d6c1442349c26e027f8bc0ed54e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t bme680_get_gas_lsb_register</definition>
        <argsstring>(bme680_handle_t handle, bme680_gas_lsb_register_t *const reg)</argsstring>
        <name>bme680_get_gas_lsb_register</name>
        <param>
          <type><ref refid="group__drivers_1ga613796da4cb6da455381a179729e91f0" kindref="member">bme680_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>bme680_gas_lsb_register_t *const</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Reads gas resistance LSB register from BME680. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>BME680 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Gas LSB register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bme680/include/bme680.h" line="423" column="11" bodyfile="components/peripherals/i2c/esp_bme680/bme680.c" bodystart="753" bodyend="764" declfile="components/peripherals/i2c/esp_bme680/include/bme680.h" declline="423" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga5bfb7440dc318d739486c5632d789e13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t bme680_set_gas_lsb_register</definition>
        <argsstring>(bme680_handle_t handle, const bme680_gas_lsb_register_t reg)</argsstring>
        <name>bme680_set_gas_lsb_register</name>
        <param>
          <type><ref refid="group__drivers_1ga613796da4cb6da455381a179729e91f0" kindref="member">bme680_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const bme680_gas_lsb_register_t</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Writes gas resistance LSB register to BME680. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>BME680 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Gas LSB register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bme680/include/bme680.h" line="432" column="11" bodyfile="components/peripherals/i2c/esp_bme680/bme680.c" bodystart="766" bodyend="777" declfile="components/peripherals/i2c/esp_bme680/include/bme680.h" declline="432" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gabfbef4c619fd0ea64e7865014519e06e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t bme680_get_control_measurement_register</definition>
        <argsstring>(bme680_handle_t handle, bme680_control_measurement_register_t *const reg)</argsstring>
        <name>bme680_get_control_measurement_register</name>
        <param>
          <type><ref refid="group__drivers_1ga613796da4cb6da455381a179729e91f0" kindref="member">bme680_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>bme680_control_measurement_register_t *const</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Reads control measurement register from BME680. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>BME680 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Control measurement register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bme680/include/bme680.h" line="441" column="11" bodyfile="components/peripherals/i2c/esp_bme680/bme680.c" bodystart="779" bodyend="790" declfile="components/peripherals/i2c/esp_bme680/include/bme680.h" declline="441" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga0e7ab74cc925aee01a695b997b7ea162" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t bme680_set_control_measurement_register</definition>
        <argsstring>(bme680_handle_t handle, const bme680_control_measurement_register_t reg)</argsstring>
        <name>bme680_set_control_measurement_register</name>
        <param>
          <type><ref refid="group__drivers_1ga613796da4cb6da455381a179729e91f0" kindref="member">bme680_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const bme680_control_measurement_register_t</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Writes control measurement register to BME680. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>BME680 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Control measurement register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bme680/include/bme680.h" line="450" column="11" bodyfile="components/peripherals/i2c/esp_bme680/bme680.c" bodystart="792" bodyend="803" declfile="components/peripherals/i2c/esp_bme680/include/bme680.h" declline="450" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gac9241adfbbf7d21531e5c997f704a348" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t bme680_get_control_humidity_register</definition>
        <argsstring>(bme680_handle_t handle, bme680_control_humidity_register_t *const reg)</argsstring>
        <name>bme680_get_control_humidity_register</name>
        <param>
          <type><ref refid="group__drivers_1ga613796da4cb6da455381a179729e91f0" kindref="member">bme680_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>bme680_control_humidity_register_t *const</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Reads control humidity register from BME680. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>BME680 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Control humidity register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bme680/include/bme680.h" line="459" column="11" bodyfile="components/peripherals/i2c/esp_bme680/bme680.c" bodystart="805" bodyend="816" declfile="components/peripherals/i2c/esp_bme680/include/bme680.h" declline="459" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gafa9c1fab99a1cb32bb82203888173bca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t bme680_set_control_humidity_register</definition>
        <argsstring>(bme680_handle_t handle, const bme680_control_humidity_register_t reg)</argsstring>
        <name>bme680_set_control_humidity_register</name>
        <param>
          <type><ref refid="group__drivers_1ga613796da4cb6da455381a179729e91f0" kindref="member">bme680_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const bme680_control_humidity_register_t</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Writes control humidity register to BME680. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>BME680 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Control humidity register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bme680/include/bme680.h" line="468" column="11" bodyfile="components/peripherals/i2c/esp_bme680/bme680.c" bodystart="818" bodyend="833" declfile="components/peripherals/i2c/esp_bme680/include/bme680.h" declline="468" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gab445e7b178ff65ebd6a729c3df48f762" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t bme680_get_control_gas0_register</definition>
        <argsstring>(bme680_handle_t handle, bme680_control_gas0_register_t *const reg)</argsstring>
        <name>bme680_get_control_gas0_register</name>
        <param>
          <type><ref refid="group__drivers_1ga613796da4cb6da455381a179729e91f0" kindref="member">bme680_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>bme680_control_gas0_register_t *const</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Reads control gas 0 register from BME680. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>BME680 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Control gas 0 register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bme680/include/bme680.h" line="477" column="11" bodyfile="components/peripherals/i2c/esp_bme680/bme680.c" bodystart="835" bodyend="846" declfile="components/peripherals/i2c/esp_bme680/include/bme680.h" declline="477" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga6b1f88599ddbe2aec815577d99ceaccf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t bme680_set_control_gas0_register</definition>
        <argsstring>(bme680_handle_t handle, const bme680_control_gas0_register_t reg)</argsstring>
        <name>bme680_set_control_gas0_register</name>
        <param>
          <type><ref refid="group__drivers_1ga613796da4cb6da455381a179729e91f0" kindref="member">bme680_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const bme680_control_gas0_register_t</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Writes control gas 0 register to BME680. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>BME680 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Control gas 0 register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bme680/include/bme680.h" line="486" column="11" bodyfile="components/peripherals/i2c/esp_bme680/bme680.c" bodystart="848" bodyend="863" declfile="components/peripherals/i2c/esp_bme680/include/bme680.h" declline="486" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga4286bdbfb0299500c38524fb574727b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t bme680_get_control_gas1_register</definition>
        <argsstring>(bme680_handle_t handle, bme680_control_gas1_register_t *const reg)</argsstring>
        <name>bme680_get_control_gas1_register</name>
        <param>
          <type><ref refid="group__drivers_1ga613796da4cb6da455381a179729e91f0" kindref="member">bme680_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>bme680_control_gas1_register_t *const</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Reads control gas 1 register from BME680. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>BME680 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Control gas 1 register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bme680/include/bme680.h" line="495" column="11" bodyfile="components/peripherals/i2c/esp_bme680/bme680.c" bodystart="865" bodyend="876" declfile="components/peripherals/i2c/esp_bme680/include/bme680.h" declline="495" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gac47fa145af66cf63719d286ad72f07e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t bme680_set_control_gas1_register</definition>
        <argsstring>(bme680_handle_t handle, const bme680_control_gas1_register_t reg)</argsstring>
        <name>bme680_set_control_gas1_register</name>
        <param>
          <type><ref refid="group__drivers_1ga613796da4cb6da455381a179729e91f0" kindref="member">bme680_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const bme680_control_gas1_register_t</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Writes control gas 1 register to BME680. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>BME680 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Control gas 1 register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bme680/include/bme680.h" line="504" column="11" bodyfile="components/peripherals/i2c/esp_bme680/bme680.c" bodystart="878" bodyend="892" declfile="components/peripherals/i2c/esp_bme680/include/bme680.h" declline="504" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga5d99d3bd2ca005930e5b735e1d0049d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t bme680_get_configuration_register</definition>
        <argsstring>(bme680_handle_t handle, bme680_config_register_t *const reg)</argsstring>
        <name>bme680_get_configuration_register</name>
        <param>
          <type><ref refid="group__drivers_1ga613796da4cb6da455381a179729e91f0" kindref="member">bme680_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>bme680_config_register_t *const</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Reads configuration register from BME680. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>BME680 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bme680/include/bme680.h" line="513" column="11" bodyfile="components/peripherals/i2c/esp_bme680/bme680.c" bodystart="894" bodyend="905" declfile="components/peripherals/i2c/esp_bme680/include/bme680.h" declline="513" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga244e6a799e41182cbb51d26989edcdf1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t bme680_set_configuration_register</definition>
        <argsstring>(bme680_handle_t handle, const bme680_config_register_t reg)</argsstring>
        <name>bme680_set_configuration_register</name>
        <param>
          <type><ref refid="group__drivers_1ga613796da4cb6da455381a179729e91f0" kindref="member">bme680_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const bme680_config_register_t</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Writes configuration register to BME680. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>BME680 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bme680/include/bme680.h" line="522" column="11" bodyfile="components/peripherals/i2c/esp_bme680/bme680.c" bodystart="907" bodyend="925" declfile="components/peripherals/i2c/esp_bme680/include/bme680.h" declline="522" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga634c8a6901632299925de54d36aa85c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t bme680_init</definition>
        <argsstring>(i2c_master_bus_handle_t master_handle, const bme680_config_t *bme680_config, bme680_handle_t *bme680_handle)</argsstring>
        <name>bme680_init</name>
        <param>
          <type>i2c_master_bus_handle_t</type>
          <declname>master_handle</declname>
        </param>
        <param>
          <type>const <ref refid="group__drivers_1ga754b18e9f8c3f77d4c2738fa59403150" kindref="member">bme680_config_t</ref> *</type>
          <declname>bme680_config</declname>
        </param>
        <param>
          <type><ref refid="group__drivers_1ga613796da4cb6da455381a179729e91f0" kindref="member">bme680_handle_t</ref> *</type>
          <declname>bme680_handle</declname>
        </param>
        <briefdescription>
<para>Initializes an BME680 device onto the master bus. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">master_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>I2C master bus handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">bme680_config</parametername>
</parameternamelist>
<parameterdescription>
<para>BME680 device configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">bme680_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>BME680 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bme680/include/bme680.h" line="532" column="11" bodyfile="components/peripherals/i2c/esp_bme680/bme680.c" bodystart="927" bodyend="989" declfile="components/peripherals/i2c/esp_bme680/include/bme680.h" declline="532" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga36125455be024323f83d41ebf4a261de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t bme680_get_adc_signals</definition>
        <argsstring>(bme680_handle_t handle, bme680_adc_data_t *const data)</argsstring>
        <name>bme680_get_adc_signals</name>
        <param>
          <type><ref refid="group__drivers_1ga613796da4cb6da455381a179729e91f0" kindref="member">bme680_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="group__drivers_1ga9eb84555a3dc9ced6a91394e16736f96" kindref="member">bme680_adc_data_t</ref> *const</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Reads humidity, temperature, and pressure ADC signals from BME680. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>BME680 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">data</parametername>
</parameternamelist>
<parameterdescription>
<para>BME680 ADC data structure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bme680/include/bme680.h" line="541" column="11" bodyfile="components/peripherals/i2c/esp_bme680/bme680.c" bodystart="1000" bodyend="1073" declfile="components/peripherals/i2c/esp_bme680/include/bme680.h" declline="541" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga110830ca8c0c7f369b8e9e694d183c82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t bme680_get_data</definition>
        <argsstring>(bme680_handle_t handle, bme680_data_t *const data)</argsstring>
        <name>bme680_get_data</name>
        <param>
          <type><ref refid="group__drivers_1ga613796da4cb6da455381a179729e91f0" kindref="member">bme680_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="group__drivers_1ga3238b870a3bc18b1c513b52ebb74e125" kindref="member">bme680_data_t</ref> *const</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Reads humidity, temperature, and pressure measurements from BME680. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>BME680 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">data</parametername>
</parameternamelist>
<parameterdescription>
<para>BME680 data structure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bme680/include/bme680.h" line="550" column="11" bodyfile="components/peripherals/i2c/esp_bme680/bme680.c" bodystart="1075" bodyend="1102" declfile="components/peripherals/i2c/esp_bme680/include/bme680.h" declline="550" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga96ab8615b99ad6d0bfb15f2e9674d920" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t bme680_get_data_status</definition>
        <argsstring>(bme680_handle_t handle, bool *const ready)</argsstring>
        <name>bme680_get_data_status</name>
        <param>
          <type><ref refid="group__drivers_1ga613796da4cb6da455381a179729e91f0" kindref="member">bme680_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>bool *const</type>
          <declname>ready</declname>
        </param>
        <briefdescription>
<para>Reads data status of the BME680. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>BME680 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">ready</parametername>
</parameternamelist>
<parameterdescription>
<para>Data is ready when asserted to true. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bme680/include/bme680.h" line="559" column="11" bodyfile="components/peripherals/i2c/esp_bme680/bme680.c" bodystart="1104" bodyend="1117" declfile="components/peripherals/i2c/esp_bme680/include/bme680.h" declline="559" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga3900195ee2d52c50a52336b520ea9862" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t bme680_get_gas_measurement_index</definition>
        <argsstring>(bme680_handle_t handle, uint8_t *const index)</argsstring>
        <name>bme680_get_gas_measurement_index</name>
        <param>
          <type><ref refid="group__drivers_1ga613796da4cb6da455381a179729e91f0" kindref="member">bme680_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>uint8_t *const</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Reads gas measurement index from the BME680. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>BME680 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Gas measurement index (0..9). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bme680/include/bme680.h" line="568" column="11" bodyfile="components/peripherals/i2c/esp_bme680/bme680.c" bodystart="1119" bodyend="1132" declfile="components/peripherals/i2c/esp_bme680/include/bme680.h" declline="568" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga11e221835d68171e4a1500d5210ad2ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t bme680_get_power_mode</definition>
        <argsstring>(bme680_handle_t handle, bme680_power_modes_t *const power_mode)</argsstring>
        <name>bme680_get_power_mode</name>
        <param>
          <type><ref refid="group__drivers_1ga613796da4cb6da455381a179729e91f0" kindref="member">bme680_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="group__drivers_1ga631c33b35db1e3bcdc9dbeb3732e7e21" kindref="member">bme680_power_modes_t</ref> *const</type>
          <declname>power_mode</declname>
        </param>
        <briefdescription>
<para>Reads power mode setting from the BME680. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>BME680 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">power_mode</parametername>
</parameternamelist>
<parameterdescription>
<para>BME680 power mode setting. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bme680/include/bme680.h" line="577" column="11" bodyfile="components/peripherals/i2c/esp_bme680/bme680.c" bodystart="1134" bodyend="1147" declfile="components/peripherals/i2c/esp_bme680/include/bme680.h" declline="577" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga78b2866a9e56e873ec90b39049196fa7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t bme680_set_power_mode</definition>
        <argsstring>(bme680_handle_t handle, const bme680_power_modes_t power_mode)</argsstring>
        <name>bme680_set_power_mode</name>
        <param>
          <type><ref refid="group__drivers_1ga613796da4cb6da455381a179729e91f0" kindref="member">bme680_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const <ref refid="group__drivers_1ga631c33b35db1e3bcdc9dbeb3732e7e21" kindref="member">bme680_power_modes_t</ref></type>
          <declname>power_mode</declname>
        </param>
        <briefdescription>
<para>Writes power mode setting to BME680. See datasheet, section 3.6, table 10. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>BME680 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">power_mode</parametername>
</parameternamelist>
<parameterdescription>
<para>BME680 power mode setting. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bme680/include/bme680.h" line="586" column="11" bodyfile="components/peripherals/i2c/esp_bme680/bme680.c" bodystart="1149" bodyend="1165" declfile="components/peripherals/i2c/esp_bme680/include/bme680.h" declline="586" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gacb2dc88ee8756b1d878642755c578e64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t bme680_get_pressure_oversampling</definition>
        <argsstring>(bme680_handle_t handle, bme680_pressure_oversampling_t *const oversampling)</argsstring>
        <name>bme680_get_pressure_oversampling</name>
        <param>
          <type><ref refid="group__drivers_1ga613796da4cb6da455381a179729e91f0" kindref="member">bme680_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="group__drivers_1ga7b38c1d35a8f7a27af3c264c46f78bbe" kindref="member">bme680_pressure_oversampling_t</ref> *const</type>
          <declname>oversampling</declname>
        </param>
        <briefdescription>
<para>Reads pressure oversampling setting from BME680. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>BME680 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">oversampling</parametername>
</parameternamelist>
<parameterdescription>
<para>BME680 pressure oversampling setting. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bme680/include/bme680.h" line="595" column="11" bodyfile="components/peripherals/i2c/esp_bme680/bme680.c" bodystart="1167" bodyend="1180" declfile="components/peripherals/i2c/esp_bme680/include/bme680.h" declline="595" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gaeaaa875bf00f30d1a8b3a7d0a56765a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t bme680_set_pressure_oversampling</definition>
        <argsstring>(bme680_handle_t handle, const bme680_pressure_oversampling_t oversampling)</argsstring>
        <name>bme680_set_pressure_oversampling</name>
        <param>
          <type><ref refid="group__drivers_1ga613796da4cb6da455381a179729e91f0" kindref="member">bme680_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const <ref refid="group__drivers_1ga7b38c1d35a8f7a27af3c264c46f78bbe" kindref="member">bme680_pressure_oversampling_t</ref></type>
          <declname>oversampling</declname>
        </param>
        <briefdescription>
<para>Writes pressure oversampling setting to BME680. See datasheet, section 3.3.1, table 4. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>BME680 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">oversampling</parametername>
</parameternamelist>
<parameterdescription>
<para>BME680 pressure oversampling setting. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bme680/include/bme680.h" line="604" column="11" bodyfile="components/peripherals/i2c/esp_bme680/bme680.c" bodystart="1182" bodyend="1198" declfile="components/peripherals/i2c/esp_bme680/include/bme680.h" declline="604" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gad929ae529dd3a1ac96d70bbb57677c03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t bme680_get_temperature_oversampling</definition>
        <argsstring>(bme680_handle_t handle, bme680_temperature_oversampling_t *const oversampling)</argsstring>
        <name>bme680_get_temperature_oversampling</name>
        <param>
          <type><ref refid="group__drivers_1ga613796da4cb6da455381a179729e91f0" kindref="member">bme680_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="group__drivers_1ga5be0c6fd6abecc9e2e055f27ec0be79d" kindref="member">bme680_temperature_oversampling_t</ref> *const</type>
          <declname>oversampling</declname>
        </param>
        <briefdescription>
<para>Reads temperature oversampling setting from BME680. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>BME680 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">oversampling</parametername>
</parameternamelist>
<parameterdescription>
<para>BME680 temperature oversampling setting. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bme680/include/bme680.h" line="613" column="11" bodyfile="components/peripherals/i2c/esp_bme680/bme680.c" bodystart="1200" bodyend="1213" declfile="components/peripherals/i2c/esp_bme680/include/bme680.h" declline="613" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga469d38f764c34555d25bd3add78713ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t bme680_set_temperature_oversampling</definition>
        <argsstring>(bme680_handle_t handle, const bme680_temperature_oversampling_t oversampling)</argsstring>
        <name>bme680_set_temperature_oversampling</name>
        <param>
          <type><ref refid="group__drivers_1ga613796da4cb6da455381a179729e91f0" kindref="member">bme680_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const <ref refid="group__drivers_1ga5be0c6fd6abecc9e2e055f27ec0be79d" kindref="member">bme680_temperature_oversampling_t</ref></type>
          <declname>oversampling</declname>
        </param>
        <briefdescription>
<para>Writes temperature oversampling setting to BME680. See datasheet, section 3.3.1, table 4. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>BME680 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">oversampling</parametername>
</parameternamelist>
<parameterdescription>
<para>BME680 temperature oversampling setting. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bme680/include/bme680.h" line="622" column="11" bodyfile="components/peripherals/i2c/esp_bme680/bme680.c" bodystart="1215" bodyend="1231" declfile="components/peripherals/i2c/esp_bme680/include/bme680.h" declline="622" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga824c402878d6a0f4725b29d0a255075b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t bme680_get_humidity_oversampling</definition>
        <argsstring>(bme680_handle_t handle, bme680_humidity_oversampling_t *const oversampling)</argsstring>
        <name>bme680_get_humidity_oversampling</name>
        <param>
          <type><ref refid="group__drivers_1ga613796da4cb6da455381a179729e91f0" kindref="member">bme680_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="group__drivers_1ga36a632407bbbcf95a69386b2240e981d" kindref="member">bme680_humidity_oversampling_t</ref> *const</type>
          <declname>oversampling</declname>
        </param>
        <briefdescription>
<para>Reads humidity oversampling setting from BME680. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>BME680 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">oversampling</parametername>
</parameternamelist>
<parameterdescription>
<para>BME680 humidity oversampling setting. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bme680/include/bme680.h" line="631" column="11" bodyfile="components/peripherals/i2c/esp_bme680/bme680.c" bodystart="1233" bodyend="1246" declfile="components/peripherals/i2c/esp_bme680/include/bme680.h" declline="631" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga1714d1fac241515bc7482e33751b413f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t bme680_set_humidity_oversampling</definition>
        <argsstring>(bme680_handle_t handle, const bme680_humidity_oversampling_t oversampling)</argsstring>
        <name>bme680_set_humidity_oversampling</name>
        <param>
          <type><ref refid="group__drivers_1ga613796da4cb6da455381a179729e91f0" kindref="member">bme680_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const <ref refid="group__drivers_1ga36a632407bbbcf95a69386b2240e981d" kindref="member">bme680_humidity_oversampling_t</ref></type>
          <declname>oversampling</declname>
        </param>
        <briefdescription>
<para>Writes humidity oversampling setting to BME680. See datasheet, section 3.3.1, table 4. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>BME680 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">oversampling</parametername>
</parameternamelist>
<parameterdescription>
<para>BME680 humidity oversampling setting. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bme680/include/bme680.h" line="640" column="11" bodyfile="components/peripherals/i2c/esp_bme680/bme680.c" bodystart="1248" bodyend="1264" declfile="components/peripherals/i2c/esp_bme680/include/bme680.h" declline="640" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gabcbd257633d63e36ceecfe5a3a9cd9ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t bme680_get_iir_filter</definition>
        <argsstring>(bme680_handle_t handle, bme680_iir_filters_t *const iir_filter)</argsstring>
        <name>bme680_get_iir_filter</name>
        <param>
          <type><ref refid="group__drivers_1ga613796da4cb6da455381a179729e91f0" kindref="member">bme680_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="group__drivers_1ga659bc184b62bd53670e369a09e6a315b" kindref="member">bme680_iir_filters_t</ref> *const</type>
          <declname>iir_filter</declname>
        </param>
        <briefdescription>
<para>Reads IIR filter setting from BME680. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>BME680 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">iir_filter</parametername>
</parameternamelist>
<parameterdescription>
<para>BME680 IIR filter setting. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bme680/include/bme680.h" line="649" column="11" bodyfile="components/peripherals/i2c/esp_bme680/bme680.c" bodystart="1266" bodyend="1279" declfile="components/peripherals/i2c/esp_bme680/include/bme680.h" declline="649" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga42d032ca7dca23fe748a5d386db89720" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t bme680_set_iir_filter</definition>
        <argsstring>(bme680_handle_t handle, const bme680_iir_filters_t iir_filter)</argsstring>
        <name>bme680_set_iir_filter</name>
        <param>
          <type><ref refid="group__drivers_1ga613796da4cb6da455381a179729e91f0" kindref="member">bme680_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const <ref refid="group__drivers_1ga659bc184b62bd53670e369a09e6a315b" kindref="member">bme680_iir_filters_t</ref></type>
          <declname>iir_filter</declname>
        </param>
        <briefdescription>
<para>Writes IIR filter setting to BME680. See datasheet, section 3.4, table 7. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>BME680 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">iir_filter</parametername>
</parameternamelist>
<parameterdescription>
<para>BME680 IIR filter setting. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bme680/include/bme680.h" line="658" column="11" bodyfile="components/peripherals/i2c/esp_bme680/bme680.c" bodystart="1281" bodyend="1297" declfile="components/peripherals/i2c/esp_bme680/include/bme680.h" declline="658" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga606c1061cf4c410083cd645dd379f19a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t bme680_reset</definition>
        <argsstring>(bme680_handle_t handle)</argsstring>
        <name>bme680_reset</name>
        <param>
          <type><ref refid="group__drivers_1ga613796da4cb6da455381a179729e91f0" kindref="member">bme680_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Issues soft-reset sensor and initializes registers for BME680. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>BME680 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bme680/include/bme680.h" line="666" column="11" bodyfile="components/peripherals/i2c/esp_bme680/bme680.c" bodystart="1299" bodyend="1317" declfile="components/peripherals/i2c/esp_bme680/include/bme680.h" declline="666" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga1035dfc4e91ae0606e10d9b6298ff96f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * bme680_air_quality_to_string</definition>
        <argsstring>(float iaq_score)</argsstring>
        <name>bme680_air_quality_to_string</name>
        <param>
          <type>float</type>
          <declname>iaq_score</declname>
        </param>
        <briefdescription>
<para>Air quality as a string based on the IAQ score. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iaq_score</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of air quality score. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>char* Air quality as a string. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bme680/include/bme680.h" line="674" column="6" bodyfile="components/peripherals/i2c/esp_bme680/bme680.c" bodystart="991" bodyend="998" declfile="components/peripherals/i2c/esp_bme680/include/bme680.h" declline="674" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga71deded33055c869346bef7d326cb4ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t bme680_remove</definition>
        <argsstring>(bme680_handle_t handle)</argsstring>
        <name>bme680_remove</name>
        <param>
          <type><ref refid="group__drivers_1ga613796da4cb6da455381a179729e91f0" kindref="member">bme680_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Removes an BME680 device from master bus. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>BME680 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bme680/include/bme680.h" line="682" column="11" bodyfile="components/peripherals/i2c/esp_bme680/bme680.c" bodystart="1319" bodyend="1324" declfile="components/peripherals/i2c/esp_bme680/include/bme680.h" declline="682" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga43ca650aa6143976272296a64313fe69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t bme680_delete</definition>
        <argsstring>(bme680_handle_t handle)</argsstring>
        <name>bme680_delete</name>
        <param>
          <type><ref refid="group__drivers_1ga613796da4cb6da455381a179729e91f0" kindref="member">bme680_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Removes an BME680 device from master bus and frees handle. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>BME680 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bme680/include/bme680.h" line="690" column="11" bodyfile="components/peripherals/i2c/esp_bme680/bme680.c" bodystart="1326" bodyend="1340" declfile="components/peripherals/i2c/esp_bme680/include/bme680.h" declline="690" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga71a0175fc3b38bd5fb9530849ab78f94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * bme680_get_fw_version</definition>
        <argsstring>(void)</argsstring>
        <name>bme680_get_fw_version</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Converts BME680 firmware version numbers (major, minor, patch, build) into a string. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>char* BME680 firmware version as a string that is formatted as X.X.X (e.g. 4.0.0). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bme680/include/bme680.h" line="697" column="12" bodyfile="components/peripherals/i2c/esp_bme680/bme680.c" bodystart="1342" bodyend="1344" declfile="components/peripherals/i2c/esp_bme680/include/bme680.h" declline="697" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga0893a15c64ff19d7056a8ce9e9c81ac1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t bme680_get_fw_version_number</definition>
        <argsstring>(void)</argsstring>
        <name>bme680_get_fw_version_number</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Converts BME680 firmware version numbers (major, minor, patch) into an integer value. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>int32_t BME680 firmware version number. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bme680/include/bme680.h" line="704" column="9" bodyfile="components/peripherals/i2c/esp_bme680/bme680.c" bodystart="1346" bodyend="1348" declfile="components/peripherals/i2c/esp_bme680/include/bme680.h" declline="704" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gaf76cc4194a69a3305e80efc3a4a04f67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t bmp280_get_chip_id_register</definition>
        <argsstring>(bmp280_handle_t handle, uint8_t *const reg)</argsstring>
        <name>bmp280_get_chip_id_register</name>
        <param>
          <type><ref refid="group__drivers_1ga4ba5e63f50d3e97eabf7bdb5491420f4" kindref="member">bmp280_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>uint8_t *const</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Reads chip identification register from BMP280. </para>
        </briefdescription>
        <detaileddescription>
<para>public function and subroutine declarations </para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>BMP280 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>BMP280 chip identification register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp280/include/bmp280.h" line="249" column="11" bodyfile="components/peripherals/i2c/esp_bmp280/bmp280.c" bodystart="322" bodyend="333" declfile="components/peripherals/i2c/esp_bmp280/include/bmp280.h" declline="249" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga0f819759aa334f52d78d16fc5bf66973" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t bmp280_get_status_register</definition>
        <argsstring>(bmp280_handle_t handle, bmp280_status_register_t *const reg)</argsstring>
        <name>bmp280_get_status_register</name>
        <param>
          <type><ref refid="group__drivers_1ga4ba5e63f50d3e97eabf7bdb5491420f4" kindref="member">bmp280_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>bmp280_status_register_t *const</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Reads status register from BMP280. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle[in]</parametername>
</parameternamelist>
<parameterdescription>
<para>BMP280 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>BMP280 status register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp280/include/bmp280.h" line="258" column="11" bodyfile="components/peripherals/i2c/esp_bmp280/bmp280.c" bodystart="335" bodyend="346" declfile="components/peripherals/i2c/esp_bmp280/include/bmp280.h" declline="258" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga5ced8f2fb2f2eb30487333c486092f7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t bmp280_get_control_measurement_register</definition>
        <argsstring>(bmp280_handle_t handle, bmp280_control_measurement_register_t *const reg)</argsstring>
        <name>bmp280_get_control_measurement_register</name>
        <param>
          <type><ref refid="group__drivers_1ga4ba5e63f50d3e97eabf7bdb5491420f4" kindref="member">bmp280_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>bmp280_control_measurement_register_t *const</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Reads control measurement register from BMP280. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>BMP280 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>BMP280 control measurement register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp280/include/bmp280.h" line="267" column="11" bodyfile="components/peripherals/i2c/esp_bmp280/bmp280.c" bodystart="348" bodyend="359" declfile="components/peripherals/i2c/esp_bmp280/include/bmp280.h" declline="267" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gaa9f0653ff6fdcb6df91be990e87f4324" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t bmp280_set_control_measurement_register</definition>
        <argsstring>(bmp280_handle_t handle, const bmp280_control_measurement_register_t reg)</argsstring>
        <name>bmp280_set_control_measurement_register</name>
        <param>
          <type><ref refid="group__drivers_1ga4ba5e63f50d3e97eabf7bdb5491420f4" kindref="member">bmp280_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const bmp280_control_measurement_register_t</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Writes control measurement register to BMP280. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>BMP280 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>BMP280 control measurement register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp280/include/bmp280.h" line="276" column="11" bodyfile="components/peripherals/i2c/esp_bmp280/bmp280.c" bodystart="361" bodyend="372" declfile="components/peripherals/i2c/esp_bmp280/include/bmp280.h" declline="276" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga855ad80da01437df61e95e204a8f27a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t bmp280_get_configuration_register</definition>
        <argsstring>(bmp280_handle_t handle, bmp280_configuration_register_t *const reg)</argsstring>
        <name>bmp280_get_configuration_register</name>
        <param>
          <type><ref refid="group__drivers_1ga4ba5e63f50d3e97eabf7bdb5491420f4" kindref="member">bmp280_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>bmp280_configuration_register_t *const</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Reads configuration register from BMP280. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>BMP280 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>BMP280 configuration register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp280/include/bmp280.h" line="285" column="11" bodyfile="components/peripherals/i2c/esp_bmp280/bmp280.c" bodystart="374" bodyend="385" declfile="components/peripherals/i2c/esp_bmp280/include/bmp280.h" declline="285" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gadc04372e8af742e060dd363e7b15b665" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t bmp280_set_configuration_register</definition>
        <argsstring>(bmp280_handle_t handle, const bmp280_configuration_register_t reg)</argsstring>
        <name>bmp280_set_configuration_register</name>
        <param>
          <type><ref refid="group__drivers_1ga4ba5e63f50d3e97eabf7bdb5491420f4" kindref="member">bmp280_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const bmp280_configuration_register_t</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Writes configuration register to BMP280. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>BMP280 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>BMP280 configuration register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp280/include/bmp280.h" line="294" column="11" bodyfile="components/peripherals/i2c/esp_bmp280/bmp280.c" bodystart="387" bodyend="403" declfile="components/peripherals/i2c/esp_bmp280/include/bmp280.h" declline="294" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga0b4e560981ac807923e4943c7288f11b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t bmp280_init</definition>
        <argsstring>(i2c_master_bus_handle_t master_handle, const bmp280_config_t *bmp280_config, bmp280_handle_t *bmp280_handle)</argsstring>
        <name>bmp280_init</name>
        <param>
          <type>i2c_master_bus_handle_t</type>
          <declname>master_handle</declname>
        </param>
        <param>
          <type>const <ref refid="group__drivers_1ga683075794a68e847ac00880f3fbc5a1e" kindref="member">bmp280_config_t</ref> *</type>
          <declname>bmp280_config</declname>
        </param>
        <param>
          <type><ref refid="group__drivers_1ga4ba5e63f50d3e97eabf7bdb5491420f4" kindref="member">bmp280_handle_t</ref> *</type>
          <declname>bmp280_handle</declname>
        </param>
        <briefdescription>
<para>Initializes an BMP280 device onto the master bus. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">master_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>I2C master bus handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">bmp280_config</parametername>
</parameternamelist>
<parameterdescription>
<para>BMP280 device configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">bmp280_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>BMP280 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp280/include/bmp280.h" line="304" column="11" bodyfile="components/peripherals/i2c/esp_bmp280/bmp280.c" bodystart="405" bodyend="467" declfile="components/peripherals/i2c/esp_bmp280/include/bmp280.h" declline="304" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga8b4019ea8a3aa82c3e14b69e311f05bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t bmp280_get_measurements</definition>
        <argsstring>(bmp280_handle_t handle, float *const temperature, float *const pressure)</argsstring>
        <name>bmp280_get_measurements</name>
        <param>
          <type><ref refid="group__drivers_1ga4ba5e63f50d3e97eabf7bdb5491420f4" kindref="member">bmp280_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>float *const</type>
          <declname>temperature</declname>
        </param>
        <param>
          <type>float *const</type>
          <declname>pressure</declname>
        </param>
        <briefdescription>
<para>Reads temperature and pressure measurements from BMP280. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>BMP280 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">temperature</parametername>
</parameternamelist>
<parameterdescription>
<para>Temperature in degree Celsius. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pressure</parametername>
</parameternamelist>
<parameterdescription>
<para>Pressure in pascal. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp280/include/bmp280.h" line="314" column="11" bodyfile="components/peripherals/i2c/esp_bmp280/bmp280.c" bodystart="469" bodyend="509" declfile="components/peripherals/i2c/esp_bmp280/include/bmp280.h" declline="314" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga56e6e621f28b1aaae87ccf078582fc5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t bmp280_get_temperature</definition>
        <argsstring>(bmp280_handle_t handle, float *const temperature)</argsstring>
        <name>bmp280_get_temperature</name>
        <param>
          <type><ref refid="group__drivers_1ga4ba5e63f50d3e97eabf7bdb5491420f4" kindref="member">bmp280_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>float *const</type>
          <declname>temperature</declname>
        </param>
        <briefdescription>
<para>Reads temperature measurement from BMP280. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>BMP280 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">temperature</parametername>
</parameternamelist>
<parameterdescription>
<para>Temperature in degree Celsius. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp280/include/bmp280.h" line="323" column="11" bodyfile="components/peripherals/i2c/esp_bmp280/bmp280.c" bodystart="511" bodyend="521" declfile="components/peripherals/i2c/esp_bmp280/include/bmp280.h" declline="323" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga15c360c34b843e3b827e202dbc64df6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t bmp280_get_pressure</definition>
        <argsstring>(bmp280_handle_t handle, float *const pressure)</argsstring>
        <name>bmp280_get_pressure</name>
        <param>
          <type><ref refid="group__drivers_1ga4ba5e63f50d3e97eabf7bdb5491420f4" kindref="member">bmp280_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>float *const</type>
          <declname>pressure</declname>
        </param>
        <briefdescription>
<para>Reads pressure measurement from BMP280. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>BMP280 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pressure</parametername>
</parameternamelist>
<parameterdescription>
<para>Pressure in pascal. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp280/include/bmp280.h" line="332" column="11" bodyfile="components/peripherals/i2c/esp_bmp280/bmp280.c" bodystart="523" bodyend="533" declfile="components/peripherals/i2c/esp_bmp280/include/bmp280.h" declline="332" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga676b9dec55adbe7be006ec44911e4ded" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t bmp280_get_data_status</definition>
        <argsstring>(bmp280_handle_t handle, bool *const ready)</argsstring>
        <name>bmp280_get_data_status</name>
        <param>
          <type><ref refid="group__drivers_1ga4ba5e63f50d3e97eabf7bdb5491420f4" kindref="member">bmp280_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>bool *const</type>
          <declname>ready</declname>
        </param>
        <briefdescription>
<para>Reads data status from BMP280. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>bmp280 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">ready</parametername>
</parameternamelist>
<parameterdescription>
<para>data is ready when asserted to true. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp280/include/bmp280.h" line="341" column="11" bodyfile="components/peripherals/i2c/esp_bmp280/bmp280.c" bodystart="535" bodyend="552" declfile="components/peripherals/i2c/esp_bmp280/include/bmp280.h" declline="341" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gaa3b1ed5dabfd33fb862a77c362e6916e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t bmp280_get_power_mode</definition>
        <argsstring>(bmp280_handle_t handle, bmp280_power_modes_t *const power_mode)</argsstring>
        <name>bmp280_get_power_mode</name>
        <param>
          <type><ref refid="group__drivers_1ga4ba5e63f50d3e97eabf7bdb5491420f4" kindref="member">bmp280_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="group__drivers_1ga09b778eb79ca4059180c508483dd7426" kindref="member">bmp280_power_modes_t</ref> *const</type>
          <declname>power_mode</declname>
        </param>
        <briefdescription>
<para>Reads power mode setting from BMP280. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>BMP280 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">power_mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Power mode setting. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp280/include/bmp280.h" line="350" column="11" bodyfile="components/peripherals/i2c/esp_bmp280/bmp280.c" bodystart="554" bodyend="567" declfile="components/peripherals/i2c/esp_bmp280/include/bmp280.h" declline="350" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga42d45d4d0bc59f6892359139fab1be1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t bmp280_set_power_mode</definition>
        <argsstring>(bmp280_handle_t handle, const bmp280_power_modes_t power_mode)</argsstring>
        <name>bmp280_set_power_mode</name>
        <param>
          <type><ref refid="group__drivers_1ga4ba5e63f50d3e97eabf7bdb5491420f4" kindref="member">bmp280_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const <ref refid="group__drivers_1ga09b778eb79ca4059180c508483dd7426" kindref="member">bmp280_power_modes_t</ref></type>
          <declname>power_mode</declname>
        </param>
        <briefdescription>
<para>Writes power mode setting to the BMP280. See datasheet, section 3.6, table 10. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>BMP280 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">power_mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Power mode setting. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp280/include/bmp280.h" line="359" column="11" bodyfile="components/peripherals/i2c/esp_bmp280/bmp280.c" bodystart="569" bodyend="585" declfile="components/peripherals/i2c/esp_bmp280/include/bmp280.h" declline="359" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga6bf83bdbd14a94abb9460a8c158a0079" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t bmp280_get_pressure_oversampling</definition>
        <argsstring>(bmp280_handle_t handle, bmp280_pressure_oversampling_t *const oversampling)</argsstring>
        <name>bmp280_get_pressure_oversampling</name>
        <param>
          <type><ref refid="group__drivers_1ga4ba5e63f50d3e97eabf7bdb5491420f4" kindref="member">bmp280_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="group__drivers_1ga21e2402ff8bbe587f1c9564f68de0561" kindref="member">bmp280_pressure_oversampling_t</ref> *const</type>
          <declname>oversampling</declname>
        </param>
        <briefdescription>
<para>Reads pressure oversampling setting from BMP280. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>BMP280 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">oversampling</parametername>
</parameternamelist>
<parameterdescription>
<para>Pressure oversampling setting. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp280/include/bmp280.h" line="368" column="11" bodyfile="components/peripherals/i2c/esp_bmp280/bmp280.c" bodystart="587" bodyend="600" declfile="components/peripherals/i2c/esp_bmp280/include/bmp280.h" declline="368" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga08bd496a9b36a475125232ca3366e481" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t bmp280_set_pressure_oversampling</definition>
        <argsstring>(bmp280_handle_t handle, const bmp280_pressure_oversampling_t oversampling)</argsstring>
        <name>bmp280_set_pressure_oversampling</name>
        <param>
          <type><ref refid="group__drivers_1ga4ba5e63f50d3e97eabf7bdb5491420f4" kindref="member">bmp280_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const <ref refid="group__drivers_1ga21e2402ff8bbe587f1c9564f68de0561" kindref="member">bmp280_pressure_oversampling_t</ref></type>
          <declname>oversampling</declname>
        </param>
        <briefdescription>
<para>Writes pressure oversampling setting to BMP280. See datasheet, section 3.3.1, table 4. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>BMP280 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">oversampling</parametername>
</parameternamelist>
<parameterdescription>
<para>Pressure oversampling setting. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp280/include/bmp280.h" line="377" column="11" bodyfile="components/peripherals/i2c/esp_bmp280/bmp280.c" bodystart="602" bodyend="618" declfile="components/peripherals/i2c/esp_bmp280/include/bmp280.h" declline="377" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gaeac31c3392f59747e6b59af99d4d141b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t bmp280_get_temperature_oversampling</definition>
        <argsstring>(bmp280_handle_t handle, bmp280_temperature_oversampling_t *const oversampling)</argsstring>
        <name>bmp280_get_temperature_oversampling</name>
        <param>
          <type><ref refid="group__drivers_1ga4ba5e63f50d3e97eabf7bdb5491420f4" kindref="member">bmp280_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="group__drivers_1ga5cfc950126ecbc2ac018615da7ed9448" kindref="member">bmp280_temperature_oversampling_t</ref> *const</type>
          <declname>oversampling</declname>
        </param>
        <briefdescription>
<para>Reads temperature oversampling setting from BMP280. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>BMP280 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">oversampling</parametername>
</parameternamelist>
<parameterdescription>
<para>Temperature oversampling setting. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp280/include/bmp280.h" line="386" column="11" bodyfile="components/peripherals/i2c/esp_bmp280/bmp280.c" bodystart="620" bodyend="632" declfile="components/peripherals/i2c/esp_bmp280/include/bmp280.h" declline="386" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga9bbfcf39651d3b9b6bc07bf426cd2ecc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t bmp280_set_temperature_oversampling</definition>
        <argsstring>(bmp280_handle_t handle, const bmp280_temperature_oversampling_t oversampling)</argsstring>
        <name>bmp280_set_temperature_oversampling</name>
        <param>
          <type><ref refid="group__drivers_1ga4ba5e63f50d3e97eabf7bdb5491420f4" kindref="member">bmp280_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const <ref refid="group__drivers_1ga5cfc950126ecbc2ac018615da7ed9448" kindref="member">bmp280_temperature_oversampling_t</ref></type>
          <declname>oversampling</declname>
        </param>
        <briefdescription>
<para>Writes temperature oversampling setting to BMP280. See datasheet, section 3.3.1, table 4. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>BMP280 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">oversampling</parametername>
</parameternamelist>
<parameterdescription>
<para>Temperature oversampling setting. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp280/include/bmp280.h" line="395" column="11" bodyfile="components/peripherals/i2c/esp_bmp280/bmp280.c" bodystart="634" bodyend="650" declfile="components/peripherals/i2c/esp_bmp280/include/bmp280.h" declline="395" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga41810e5f04fe34b3d6b6d7a2f0ed6090" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t bmp280_get_standby_time</definition>
        <argsstring>(bmp280_handle_t handle, bmp280_standby_times_t *const standby_time)</argsstring>
        <name>bmp280_get_standby_time</name>
        <param>
          <type><ref refid="group__drivers_1ga4ba5e63f50d3e97eabf7bdb5491420f4" kindref="member">bmp280_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="group__drivers_1gaa9766737a9535054ecb73ff34d467dbd" kindref="member">bmp280_standby_times_t</ref> *const</type>
          <declname>standby_time</declname>
        </param>
        <briefdescription>
<para>Reads stand-by time setting from BMP280. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>BMP280 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">standby_time</parametername>
</parameternamelist>
<parameterdescription>
<para>Stand-by time setting. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp280/include/bmp280.h" line="404" column="11" bodyfile="components/peripherals/i2c/esp_bmp280/bmp280.c" bodystart="652" bodyend="665" declfile="components/peripherals/i2c/esp_bmp280/include/bmp280.h" declline="404" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga0d7567352da5f0d2ae94a8975838733a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t bmp280_set_standby_time</definition>
        <argsstring>(bmp280_handle_t handle, const bmp280_standby_times_t standby_time)</argsstring>
        <name>bmp280_set_standby_time</name>
        <param>
          <type><ref refid="group__drivers_1ga4ba5e63f50d3e97eabf7bdb5491420f4" kindref="member">bmp280_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const <ref refid="group__drivers_1gaa9766737a9535054ecb73ff34d467dbd" kindref="member">bmp280_standby_times_t</ref></type>
          <declname>standby_time</declname>
        </param>
        <briefdescription>
<para>Writes stand-by time setting to BMP280. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>BMP280 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">standby_time</parametername>
</parameternamelist>
<parameterdescription>
<para>Stand-by time setting. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp280/include/bmp280.h" line="413" column="11" bodyfile="components/peripherals/i2c/esp_bmp280/bmp280.c" bodystart="667" bodyend="683" declfile="components/peripherals/i2c/esp_bmp280/include/bmp280.h" declline="413" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gaf3d52e45780f2336048c4fa6906a8972" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t bmp280_get_iir_filter</definition>
        <argsstring>(bmp280_handle_t handle, bmp280_iir_filters_t *const iir_filter)</argsstring>
        <name>bmp280_get_iir_filter</name>
        <param>
          <type><ref refid="group__drivers_1ga4ba5e63f50d3e97eabf7bdb5491420f4" kindref="member">bmp280_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="group__drivers_1ga6f4e9c7fd7225c16ee96a6f9df8b9719" kindref="member">bmp280_iir_filters_t</ref> *const</type>
          <declname>iir_filter</declname>
        </param>
        <briefdescription>
<para>Reads IIR filter setting to BMP280. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>BMP280 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">iir_filter</parametername>
</parameternamelist>
<parameterdescription>
<para>IIR filter setting. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp280/include/bmp280.h" line="422" column="11" bodyfile="components/peripherals/i2c/esp_bmp280/bmp280.c" bodystart="685" bodyend="698" declfile="components/peripherals/i2c/esp_bmp280/include/bmp280.h" declline="422" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga49d702e3251bd23cfb8b5122cfe95a20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t bmp280_set_iir_filter</definition>
        <argsstring>(bmp280_handle_t handle, const bmp280_iir_filters_t iir_filter)</argsstring>
        <name>bmp280_set_iir_filter</name>
        <param>
          <type><ref refid="group__drivers_1ga4ba5e63f50d3e97eabf7bdb5491420f4" kindref="member">bmp280_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const <ref refid="group__drivers_1ga6f4e9c7fd7225c16ee96a6f9df8b9719" kindref="member">bmp280_iir_filters_t</ref></type>
          <declname>iir_filter</declname>
        </param>
        <briefdescription>
<para>Writes IIR filter setting to BMP280. See datasheet, section 3.4, table 7. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>BMP280 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">iir_filter</parametername>
</parameternamelist>
<parameterdescription>
<para>IIR filter setting. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp280/include/bmp280.h" line="431" column="11" bodyfile="components/peripherals/i2c/esp_bmp280/bmp280.c" bodystart="700" bodyend="716" declfile="components/peripherals/i2c/esp_bmp280/include/bmp280.h" declline="431" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga4cc4d2e4cc06abc7b1b56788e3526b86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t bmp280_reset</definition>
        <argsstring>(bmp280_handle_t handle)</argsstring>
        <name>bmp280_reset</name>
        <param>
          <type><ref refid="group__drivers_1ga4ba5e63f50d3e97eabf7bdb5491420f4" kindref="member">bmp280_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Issues soft-reset sensor and initializes BMP280. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>BMP280 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp280/include/bmp280.h" line="439" column="11" bodyfile="components/peripherals/i2c/esp_bmp280/bmp280.c" bodystart="718" bodyend="733" declfile="components/peripherals/i2c/esp_bmp280/include/bmp280.h" declline="439" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga29361ec23d39ce227eee5cbf49902160" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t bmp280_remove</definition>
        <argsstring>(bmp280_handle_t handle)</argsstring>
        <name>bmp280_remove</name>
        <param>
          <type><ref refid="group__drivers_1ga4ba5e63f50d3e97eabf7bdb5491420f4" kindref="member">bmp280_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Removes an BMP280 device from master bus. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>BMP280 device handle </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp280/include/bmp280.h" line="447" column="11" bodyfile="components/peripherals/i2c/esp_bmp280/bmp280.c" bodystart="735" bodyend="740" declfile="components/peripherals/i2c/esp_bmp280/include/bmp280.h" declline="447" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga56d41e7e1d5e629206877e97cb556ccc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t bmp280_delete</definition>
        <argsstring>(bmp280_handle_t handle)</argsstring>
        <name>bmp280_delete</name>
        <param>
          <type><ref refid="group__drivers_1ga4ba5e63f50d3e97eabf7bdb5491420f4" kindref="member">bmp280_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Removes an BMP280 device from master bus and frees handle. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>BMP280 device handle </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp280/include/bmp280.h" line="455" column="11" bodyfile="components/peripherals/i2c/esp_bmp280/bmp280.c" bodystart="742" bodyend="759" declfile="components/peripherals/i2c/esp_bmp280/include/bmp280.h" declline="455" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga987b258a57f3c4a4384e6aa865b326c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * bmp280_get_fw_version</definition>
        <argsstring>(void)</argsstring>
        <name>bmp280_get_fw_version</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Converts BMP280 firmware version numbers (major, minor, patch) into a string. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>char* BMP280 firmware version as a string that is formatted as X.X.X (e.g. 4.0.0). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp280/include/bmp280.h" line="462" column="12" bodyfile="components/peripherals/i2c/esp_bmp280/bmp280.c" bodystart="761" bodyend="763" declfile="components/peripherals/i2c/esp_bmp280/include/bmp280.h" declline="462" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga18945c7c6b94a2aa4187dfef889f7da8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t bmp280_get_fw_version_number</definition>
        <argsstring>(void)</argsstring>
        <name>bmp280_get_fw_version_number</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Converts BMP280 firmware version numbers (major, minor, patch) into an integer value. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>int32_t BMP280 firmware version number. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp280/include/bmp280.h" line="469" column="9" bodyfile="components/peripherals/i2c/esp_bmp280/bmp280.c" bodystart="765" bodyend="767" declfile="components/peripherals/i2c/esp_bmp280/include/bmp280.h" declline="469" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gad47a9bbe06e48b2fac00e4c7d06be799" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t bmp390_get_chip_id_register</definition>
        <argsstring>(bmp390_handle_t handle, uint8_t *const reg)</argsstring>
        <name>bmp390_get_chip_id_register</name>
        <param>
          <type><ref refid="group__drivers_1ga527bfd427c1d151b37b9f728b8378b70" kindref="member">bmp390_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>uint8_t *const</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Reads chip identification register from BMP390. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>BMP390 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>BMP390 chip identification register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp390/include/bmp390.h" line="322" column="11" bodyfile="components/peripherals/i2c/esp_bmp390/bmp390.c" bodystart="292" bodyend="303" declfile="components/peripherals/i2c/esp_bmp390/include/bmp390.h" declline="322" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gad0dc872a9883f39d82af45650290dafa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t bmp390_get_status_register</definition>
        <argsstring>(bmp390_handle_t handle, bmp390_status_register_t *const reg)</argsstring>
        <name>bmp390_get_status_register</name>
        <param>
          <type><ref refid="group__drivers_1ga527bfd427c1d151b37b9f728b8378b70" kindref="member">bmp390_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>bmp390_status_register_t *const</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Reads status register from BMP390. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>BMP390 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>BMP390 status register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp390/include/bmp390.h" line="331" column="11" bodyfile="components/peripherals/i2c/esp_bmp390/bmp390.c" bodystart="305" bodyend="316" declfile="components/peripherals/i2c/esp_bmp390/include/bmp390.h" declline="331" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga391b545fad5ef41216f1a82f26ee8d0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t bmp390_get_interrupt_status_register</definition>
        <argsstring>(bmp390_handle_t handle, bmp390_interrupt_status_register_t *const reg)</argsstring>
        <name>bmp390_get_interrupt_status_register</name>
        <param>
          <type><ref refid="group__drivers_1ga527bfd427c1d151b37b9f728b8378b70" kindref="member">bmp390_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>bmp390_interrupt_status_register_t *const</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Reads interrupt control register from BMP390. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>BMP390 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>BMP390 interrupt status register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp390/include/bmp390.h" line="340" column="11" bodyfile="components/peripherals/i2c/esp_bmp390/bmp390.c" bodystart="318" bodyend="329" declfile="components/peripherals/i2c/esp_bmp390/include/bmp390.h" declline="340" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga5859171d7008a7a9f4b7991bd664b2f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t bmp390_get_interrupt_control_register</definition>
        <argsstring>(bmp390_handle_t handle, bmp390_interrupt_control_register_t *const reg)</argsstring>
        <name>bmp390_get_interrupt_control_register</name>
        <param>
          <type><ref refid="group__drivers_1ga527bfd427c1d151b37b9f728b8378b70" kindref="member">bmp390_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>bmp390_interrupt_control_register_t *const</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Reads interrupt control register from BMP390. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>BMP390 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>BMP390 interrupt control register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp390/include/bmp390.h" line="349" column="11" bodyfile="components/peripherals/i2c/esp_bmp390/bmp390.c" bodystart="331" bodyend="342" declfile="components/peripherals/i2c/esp_bmp390/include/bmp390.h" declline="349" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gaaa97e5c50a343fc24f191276ce36e96d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t bmp390_set_interrupt_control_register</definition>
        <argsstring>(bmp390_handle_t handle, const bmp390_interrupt_control_register_t reg)</argsstring>
        <name>bmp390_set_interrupt_control_register</name>
        <param>
          <type><ref refid="group__drivers_1ga527bfd427c1d151b37b9f728b8378b70" kindref="member">bmp390_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const bmp390_interrupt_control_register_t</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Writes interrupt control register to BMP390. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>BMP390 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>BMP390 interrupt control register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp390/include/bmp390.h" line="358" column="11" bodyfile="components/peripherals/i2c/esp_bmp390/bmp390.c" bodystart="344" bodyend="361" declfile="components/peripherals/i2c/esp_bmp390/include/bmp390.h" declline="358" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga1f76c890b547c3b9cfd77a94ded9f691" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t bmp390_get_power_control_register</definition>
        <argsstring>(bmp390_handle_t handle, bmp390_power_control_register_t *const reg)</argsstring>
        <name>bmp390_get_power_control_register</name>
        <param>
          <type><ref refid="group__drivers_1ga527bfd427c1d151b37b9f728b8378b70" kindref="member">bmp390_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>bmp390_power_control_register_t *const</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Reads power control register from BMP390. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>BMP390 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>BMP390 power control register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp390/include/bmp390.h" line="367" column="11" bodyfile="components/peripherals/i2c/esp_bmp390/bmp390.c" bodystart="363" bodyend="374" declfile="components/peripherals/i2c/esp_bmp390/include/bmp390.h" declline="367" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gaac6399848c970354dbc41edf0c1f8128" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t bmp390_set_power_control_register</definition>
        <argsstring>(bmp390_handle_t handle, const bmp390_power_control_register_t reg)</argsstring>
        <name>bmp390_set_power_control_register</name>
        <param>
          <type><ref refid="group__drivers_1ga527bfd427c1d151b37b9f728b8378b70" kindref="member">bmp390_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const bmp390_power_control_register_t</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Writes power control register to BMP390. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>BMP390 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>BMP390 power control register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp390/include/bmp390.h" line="376" column="11" bodyfile="components/peripherals/i2c/esp_bmp390/bmp390.c" bodystart="376" bodyend="394" declfile="components/peripherals/i2c/esp_bmp390/include/bmp390.h" declline="376" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga17dc1f46fd1454f5753e4113ef90df5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t bmp390_get_output_data_rate_register</definition>
        <argsstring>(bmp390_handle_t handle, bmp390_output_data_rate_register_t *const reg)</argsstring>
        <name>bmp390_get_output_data_rate_register</name>
        <param>
          <type><ref refid="group__drivers_1ga527bfd427c1d151b37b9f728b8378b70" kindref="member">bmp390_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>bmp390_output_data_rate_register_t *const</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Reads output data rate register from BMP390. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>BMP390 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>BMP390 output data rate register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp390/include/bmp390.h" line="385" column="11" bodyfile="components/peripherals/i2c/esp_bmp390/bmp390.c" bodystart="396" bodyend="407" declfile="components/peripherals/i2c/esp_bmp390/include/bmp390.h" declline="385" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gab14120cdaa878c078be0ea224fda9a81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t bmp390_set_output_data_rate_register</definition>
        <argsstring>(bmp390_handle_t handle, const bmp390_output_data_rate_register_t reg)</argsstring>
        <name>bmp390_set_output_data_rate_register</name>
        <param>
          <type><ref refid="group__drivers_1ga527bfd427c1d151b37b9f728b8378b70" kindref="member">bmp390_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const bmp390_output_data_rate_register_t</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Writes output data rate register to BMP390. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>BMP390 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>BMP390 output data rate register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp390/include/bmp390.h" line="394" column="11" bodyfile="components/peripherals/i2c/esp_bmp390/bmp390.c" bodystart="409" bodyend="426" declfile="components/peripherals/i2c/esp_bmp390/include/bmp390.h" declline="394" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gadb6f610efba976719b108ed21661b021" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t bmp390_get_oversampling_register</definition>
        <argsstring>(bmp390_handle_t handle, bmp390_oversampling_register_t *const reg)</argsstring>
        <name>bmp390_get_oversampling_register</name>
        <param>
          <type><ref refid="group__drivers_1ga527bfd427c1d151b37b9f728b8378b70" kindref="member">bmp390_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>bmp390_oversampling_register_t *const</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Reads oversampling register from BMP390. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>BMP390 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>BMP390 oversampling register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp390/include/bmp390.h" line="403" column="11" bodyfile="components/peripherals/i2c/esp_bmp390/bmp390.c" bodystart="428" bodyend="439" declfile="components/peripherals/i2c/esp_bmp390/include/bmp390.h" declline="403" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gab80989d249b724b20d14036e1d03b2d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t bmp390_set_oversampling_register</definition>
        <argsstring>(bmp390_handle_t handle, const bmp390_oversampling_register_t reg)</argsstring>
        <name>bmp390_set_oversampling_register</name>
        <param>
          <type><ref refid="group__drivers_1ga527bfd427c1d151b37b9f728b8378b70" kindref="member">bmp390_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const bmp390_oversampling_register_t</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Writes oversampling register to BMP390. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>BMP390 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>BMP390 oversampling register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp390/include/bmp390.h" line="412" column="11" bodyfile="components/peripherals/i2c/esp_bmp390/bmp390.c" bodystart="441" bodyend="458" declfile="components/peripherals/i2c/esp_bmp390/include/bmp390.h" declline="412" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga26aa82173911154896b13e39ee308609" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t bmp390_get_configuration_register</definition>
        <argsstring>(bmp390_handle_t handle, bmp390_configuration_register_t *const reg)</argsstring>
        <name>bmp390_get_configuration_register</name>
        <param>
          <type><ref refid="group__drivers_1ga527bfd427c1d151b37b9f728b8378b70" kindref="member">bmp390_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>bmp390_configuration_register_t *const</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Reads configuration register from BMP390. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>BMP390 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>BMP390 configuration register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp390/include/bmp390.h" line="421" column="11" bodyfile="components/peripherals/i2c/esp_bmp390/bmp390.c" bodystart="460" bodyend="471" declfile="components/peripherals/i2c/esp_bmp390/include/bmp390.h" declline="421" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gae31de21dc7ce5dcd75474740a28e7b1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t bmp390_set_configuration_register</definition>
        <argsstring>(bmp390_handle_t handle, const bmp390_configuration_register_t reg)</argsstring>
        <name>bmp390_set_configuration_register</name>
        <param>
          <type><ref refid="group__drivers_1ga527bfd427c1d151b37b9f728b8378b70" kindref="member">bmp390_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const bmp390_configuration_register_t</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Writes configuration register to BMP390. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>BMP390 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>BMP390 configuration register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp390/include/bmp390.h" line="430" column="11" bodyfile="components/peripherals/i2c/esp_bmp390/bmp390.c" bodystart="473" bodyend="491" declfile="components/peripherals/i2c/esp_bmp390/include/bmp390.h" declline="430" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gabef86fd7af583c50bfc0e0ba734fc34d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t bmp390_init</definition>
        <argsstring>(i2c_master_bus_handle_t master_handle, const bmp390_config_t *bmp390_config, bmp390_handle_t *bmp280_handle)</argsstring>
        <name>bmp390_init</name>
        <param>
          <type>i2c_master_bus_handle_t</type>
          <declname>master_handle</declname>
        </param>
        <param>
          <type>const <ref refid="group__drivers_1ga20d02eb65a21261e5d01ade14b047d92" kindref="member">bmp390_config_t</ref> *</type>
          <declname>bmp390_config</declname>
        </param>
        <param>
          <type><ref refid="group__drivers_1ga527bfd427c1d151b37b9f728b8378b70" kindref="member">bmp390_handle_t</ref> *</type>
          <declname>bmp280_handle</declname>
        </param>
        <briefdescription>
<para>Initializes an BMP390 device onto the master bus. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">master_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>I2C master bus handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">bmp390_config</parametername>
</parameternamelist>
<parameterdescription>
<para>BMP390 device configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">bmp390_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>BMP390 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp390/include/bmp390.h" line="440" column="11" bodyfile="components/peripherals/i2c/esp_bmp390/bmp390.c" bodystart="550" bodyend="617" declfile="components/peripherals/i2c/esp_bmp390/include/bmp390.h" declline="440" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gad218500e005b0b6a1f9f43c062c8b3c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t bmp390_get_measurements</definition>
        <argsstring>(bmp390_handle_t handle, float *const temperature, float *const pressure)</argsstring>
        <name>bmp390_get_measurements</name>
        <param>
          <type><ref refid="group__drivers_1ga527bfd427c1d151b37b9f728b8378b70" kindref="member">bmp390_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>float *const</type>
          <declname>temperature</declname>
        </param>
        <param>
          <type>float *const</type>
          <declname>pressure</declname>
        </param>
        <briefdescription>
<para>Reads high-level measurements (temperature &amp; pressure) from BMP390. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>BMP390 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">temperature</parametername>
</parameternamelist>
<parameterdescription>
<para>Temperature in degree Celsius. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pressure</parametername>
</parameternamelist>
<parameterdescription>
<para>Pressure in pascal. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp390/include/bmp390.h" line="450" column="11" bodyfile="components/peripherals/i2c/esp_bmp390/bmp390.c" bodystart="619" bodyend="674" declfile="components/peripherals/i2c/esp_bmp390/include/bmp390.h" declline="450" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gaf6f67daaf0d1e0549a7487fff13516d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t bmp390_get_status</definition>
        <argsstring>(bmp390_handle_t handle, bool *const temperature_ready, bool *const pressure_ready, bool *const command_ready)</argsstring>
        <name>bmp390_get_status</name>
        <param>
          <type><ref refid="group__drivers_1ga527bfd427c1d151b37b9f728b8378b70" kindref="member">bmp390_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>bool *const</type>
          <declname>temperature_ready</declname>
        </param>
        <param>
          <type>bool *const</type>
          <declname>pressure_ready</declname>
        </param>
        <param>
          <type>bool *const</type>
          <declname>command_ready</declname>
        </param>
        <briefdescription>
<para>Reads status of the BMP390. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>BMP390 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">temperature_ready</parametername>
</parameternamelist>
<parameterdescription>
<para>Temperature data is ready when asserted to true. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pressure_ready</parametername>
</parameternamelist>
<parameterdescription>
<para>Pressure data is ready when asserted to true. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">command_ready</parametername>
</parameternamelist>
<parameterdescription>
<para>Command is ready when asserted to true. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp390/include/bmp390.h" line="461" column="11" bodyfile="components/peripherals/i2c/esp_bmp390/bmp390.c" bodystart="676" bodyend="691" declfile="components/peripherals/i2c/esp_bmp390/include/bmp390.h" declline="461" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga29d755cad687598995d4cd07feaa943a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t bmp390_get_data_status</definition>
        <argsstring>(bmp390_handle_t handle, bool *const temperature_ready, bool *const pressure_ready)</argsstring>
        <name>bmp390_get_data_status</name>
        <param>
          <type><ref refid="group__drivers_1ga527bfd427c1d151b37b9f728b8378b70" kindref="member">bmp390_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>bool *const</type>
          <declname>temperature_ready</declname>
        </param>
        <param>
          <type>bool *const</type>
          <declname>pressure_ready</declname>
        </param>
        <briefdescription>
<para>Reads data status of the BMP390. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>BMP390 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">temperature_ready</parametername>
</parameternamelist>
<parameterdescription>
<para>Temperature data is ready when asserted to true. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pressure_ready</parametername>
</parameternamelist>
<parameterdescription>
<para>Pressure data is ready when asserted to true. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp390/include/bmp390.h" line="471" column="11" bodyfile="components/peripherals/i2c/esp_bmp390/bmp390.c" bodystart="693" bodyend="707" declfile="components/peripherals/i2c/esp_bmp390/include/bmp390.h" declline="471" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga495ca39272065b9611944140ee0360e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t bmp390_get_power_mode</definition>
        <argsstring>(bmp390_handle_t handle, bmp390_power_modes_t *const power_mode)</argsstring>
        <name>bmp390_get_power_mode</name>
        <param>
          <type><ref refid="group__drivers_1ga527bfd427c1d151b37b9f728b8378b70" kindref="member">bmp390_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="group__drivers_1ga4df194ff4b85bf00f7402a426a3edcf9" kindref="member">bmp390_power_modes_t</ref> *const</type>
          <declname>power_mode</declname>
        </param>
        <briefdescription>
<para>Reads power mode setting from the BMP390. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>BMP390 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">power_mode</parametername>
</parameternamelist>
<parameterdescription>
<para>BMP390 power mode setting. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp390/include/bmp390.h" line="480" column="11" bodyfile="components/peripherals/i2c/esp_bmp390/bmp390.c" bodystart="709" bodyend="722" declfile="components/peripherals/i2c/esp_bmp390/include/bmp390.h" declline="480" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga734365aa30d08300212d170abc1a7ad7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t bmp390_set_power_mode</definition>
        <argsstring>(bmp390_handle_t handle, const bmp390_power_modes_t power_mode)</argsstring>
        <name>bmp390_set_power_mode</name>
        <param>
          <type><ref refid="group__drivers_1ga527bfd427c1d151b37b9f728b8378b70" kindref="member">bmp390_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const <ref refid="group__drivers_1ga4df194ff4b85bf00f7402a426a3edcf9" kindref="member">bmp390_power_modes_t</ref></type>
          <declname>power_mode</declname>
        </param>
        <briefdescription>
<para>Writes power mode setting to the BMP390. See datasheet, section 3.6, table 10. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>BMP390 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">power_mode</parametername>
</parameternamelist>
<parameterdescription>
<para>BMP390 power mode setting. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp390/include/bmp390.h" line="489" column="11" bodyfile="components/peripherals/i2c/esp_bmp390/bmp390.c" bodystart="724" bodyend="743" declfile="components/peripherals/i2c/esp_bmp390/include/bmp390.h" declline="489" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga9be8bc55e9abca30f195ca6f64896dd4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t bmp390_get_pressure_oversampling</definition>
        <argsstring>(bmp390_handle_t handle, bmp390_pressure_oversampling_t *const oversampling)</argsstring>
        <name>bmp390_get_pressure_oversampling</name>
        <param>
          <type><ref refid="group__drivers_1ga527bfd427c1d151b37b9f728b8378b70" kindref="member">bmp390_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="group__drivers_1ga9d5fc1770bbe5e33b017e920cdb24511" kindref="member">bmp390_pressure_oversampling_t</ref> *const</type>
          <declname>oversampling</declname>
        </param>
        <briefdescription>
<para>Reads pressure oversampling setting from BMP390. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>BMP390 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">oversampling</parametername>
</parameternamelist>
<parameterdescription>
<para>BMP390 pressure oversampling setting. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp390/include/bmp390.h" line="498" column="11" bodyfile="components/peripherals/i2c/esp_bmp390/bmp390.c" bodystart="745" bodyend="758" declfile="components/peripherals/i2c/esp_bmp390/include/bmp390.h" declline="498" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gad8b2f7aecd630a0636983c6ceec7e4b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t bmp390_set_pressure_oversampling</definition>
        <argsstring>(bmp390_handle_t handle, const bmp390_pressure_oversampling_t oversampling)</argsstring>
        <name>bmp390_set_pressure_oversampling</name>
        <param>
          <type><ref refid="group__drivers_1ga527bfd427c1d151b37b9f728b8378b70" kindref="member">bmp390_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const <ref refid="group__drivers_1ga9d5fc1770bbe5e33b017e920cdb24511" kindref="member">bmp390_pressure_oversampling_t</ref></type>
          <declname>oversampling</declname>
        </param>
        <briefdescription>
<para>Writes pressure oversampling setting to BMP390. See datasheet, section 3.3.1, table 4. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>BMP390 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">oversampling</parametername>
</parameternamelist>
<parameterdescription>
<para>BMP390 pressure oversampling setting. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp390/include/bmp390.h" line="507" column="11" bodyfile="components/peripherals/i2c/esp_bmp390/bmp390.c" bodystart="760" bodyend="779" declfile="components/peripherals/i2c/esp_bmp390/include/bmp390.h" declline="507" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga37f56d9316fc21c9488ceb5d575cab4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t bmp390_get_temperature_oversampling</definition>
        <argsstring>(bmp390_handle_t handle, bmp390_temperature_oversampling_t *const oversampling)</argsstring>
        <name>bmp390_get_temperature_oversampling</name>
        <param>
          <type><ref refid="group__drivers_1ga527bfd427c1d151b37b9f728b8378b70" kindref="member">bmp390_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="group__drivers_1ga5d10f7b42daa4f054964fc57567a2f55" kindref="member">bmp390_temperature_oversampling_t</ref> *const</type>
          <declname>oversampling</declname>
        </param>
        <briefdescription>
<para>Reads temperature oversampling setting from BMP390. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>BMP390 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">oversampling</parametername>
</parameternamelist>
<parameterdescription>
<para>BMP390 temperature oversampling setting. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp390/include/bmp390.h" line="516" column="11" bodyfile="components/peripherals/i2c/esp_bmp390/bmp390.c" bodystart="781" bodyend="794" declfile="components/peripherals/i2c/esp_bmp390/include/bmp390.h" declline="516" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gafb52faf02d603cb021efa5767a2fae05" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t bmp390_set_temperature_oversampling</definition>
        <argsstring>(bmp390_handle_t handle, const bmp390_temperature_oversampling_t oversampling)</argsstring>
        <name>bmp390_set_temperature_oversampling</name>
        <param>
          <type><ref refid="group__drivers_1ga527bfd427c1d151b37b9f728b8378b70" kindref="member">bmp390_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const <ref refid="group__drivers_1ga5d10f7b42daa4f054964fc57567a2f55" kindref="member">bmp390_temperature_oversampling_t</ref></type>
          <declname>oversampling</declname>
        </param>
        <briefdescription>
<para>Writes temperature oversampling setting to BMP390. See datasheet, section 3.3.1, table 4. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>BMP390 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">oversampling</parametername>
</parameternamelist>
<parameterdescription>
<para>BMP390 temperature oversampling setting. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp390/include/bmp390.h" line="525" column="11" bodyfile="components/peripherals/i2c/esp_bmp390/bmp390.c" bodystart="796" bodyend="815" declfile="components/peripherals/i2c/esp_bmp390/include/bmp390.h" declline="525" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gadecfa0983e0d62e37f134ce96f2bcbbe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t bmp390_get_output_data_rate</definition>
        <argsstring>(bmp390_handle_t handle, bmp390_output_data_rates_t *const output_data_rate)</argsstring>
        <name>bmp390_get_output_data_rate</name>
        <param>
          <type><ref refid="group__drivers_1ga527bfd427c1d151b37b9f728b8378b70" kindref="member">bmp390_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="group__drivers_1ga58ee132e8b4fa817a9829f66c51aaa50" kindref="member">bmp390_output_data_rates_t</ref> *const</type>
          <declname>output_data_rate</declname>
        </param>
        <briefdescription>
<para>Reads output data rate setting from BMP390. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>BMP390 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">output_data_rate</parametername>
</parameternamelist>
<parameterdescription>
<para>BMP390 output data rate setting. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp390/include/bmp390.h" line="534" column="11" declfile="components/peripherals/i2c/esp_bmp390/include/bmp390.h" declline="534" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga472dc0ca02431f06bf2be4694a43a9de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t bmp390_set_output_data_rate</definition>
        <argsstring>(bmp390_handle_t handle, const bmp390_output_data_rates_t output_data_rate)</argsstring>
        <name>bmp390_set_output_data_rate</name>
        <param>
          <type><ref refid="group__drivers_1ga527bfd427c1d151b37b9f728b8378b70" kindref="member">bmp390_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const <ref refid="group__drivers_1ga58ee132e8b4fa817a9829f66c51aaa50" kindref="member">bmp390_output_data_rates_t</ref></type>
          <declname>output_data_rate</declname>
        </param>
        <briefdescription>
<para>writes output data rate setting to bmp390. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>BMP390 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">output_data_rate</parametername>
</parameternamelist>
<parameterdescription>
<para>BMP390 output data rate setting. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp390/include/bmp390.h" line="543" column="11" declfile="components/peripherals/i2c/esp_bmp390/include/bmp390.h" declline="543" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga32d4da3a743d4caa6b1e2b8cb1257356" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t bmp390_get_iir_filter</definition>
        <argsstring>(bmp390_handle_t handle, bmp390_iir_filters_t *const iir_filter)</argsstring>
        <name>bmp390_get_iir_filter</name>
        <param>
          <type><ref refid="group__drivers_1ga527bfd427c1d151b37b9f728b8378b70" kindref="member">bmp390_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="group__drivers_1gab4a8dfad87b98ad3cc0c4da8f082104e" kindref="member">bmp390_iir_filters_t</ref> *const</type>
          <declname>iir_filter</declname>
        </param>
        <briefdescription>
<para>Reads IIR filter setting to BMP390. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>BMP390 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">iir_filter</parametername>
</parameternamelist>
<parameterdescription>
<para>BMP390 IIR filter setting. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp390/include/bmp390.h" line="552" column="11" bodyfile="components/peripherals/i2c/esp_bmp390/bmp390.c" bodystart="853" bodyend="866" declfile="components/peripherals/i2c/esp_bmp390/include/bmp390.h" declline="552" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga6d7a3886c0ddc8896b9bf2edff2b3778" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t bmp390_set_iir_filter</definition>
        <argsstring>(bmp390_handle_t handle, const bmp390_iir_filters_t iir_filter)</argsstring>
        <name>bmp390_set_iir_filter</name>
        <param>
          <type><ref refid="group__drivers_1ga527bfd427c1d151b37b9f728b8378b70" kindref="member">bmp390_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const <ref refid="group__drivers_1gab4a8dfad87b98ad3cc0c4da8f082104e" kindref="member">bmp390_iir_filters_t</ref></type>
          <declname>iir_filter</declname>
        </param>
        <briefdescription>
<para>Writes IIR filter setting from BMP390. See datasheet, section 3.4, table 7. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>BMP390 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">iir_filter</parametername>
</parameternamelist>
<parameterdescription>
<para>BMP390 IIR filter setting. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp390/include/bmp390.h" line="561" column="11" bodyfile="components/peripherals/i2c/esp_bmp390/bmp390.c" bodystart="868" bodyend="887" declfile="components/peripherals/i2c/esp_bmp390/include/bmp390.h" declline="561" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gae0433a2c4da8ac8c58a4fe92cc9929f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t bmp390_reset</definition>
        <argsstring>(bmp390_handle_t handle)</argsstring>
        <name>bmp390_reset</name>
        <param>
          <type><ref refid="group__drivers_1ga527bfd427c1d151b37b9f728b8378b70" kindref="member">bmp390_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Issues soft-reset sensor and initializes registers for BMP390. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>BMP390 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp390/include/bmp390.h" line="569" column="11" bodyfile="components/peripherals/i2c/esp_bmp390/bmp390.c" bodystart="889" bodyend="904" declfile="components/peripherals/i2c/esp_bmp390/include/bmp390.h" declline="569" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga1cda3165d60e78e78de5f407eca25f1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t bmp390_remove</definition>
        <argsstring>(bmp390_handle_t handle)</argsstring>
        <name>bmp390_remove</name>
        <param>
          <type><ref refid="group__drivers_1ga527bfd427c1d151b37b9f728b8378b70" kindref="member">bmp390_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>removes an BMP390 device from master bus. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>BMP390 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp390/include/bmp390.h" line="577" column="11" bodyfile="components/peripherals/i2c/esp_bmp390/bmp390.c" bodystart="906" bodyend="911" declfile="components/peripherals/i2c/esp_bmp390/include/bmp390.h" declline="577" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gacd7d12fcc1eb01f30d4baaf2ed050b19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t bmp390_delete</definition>
        <argsstring>(bmp390_handle_t handle)</argsstring>
        <name>bmp390_delete</name>
        <param>
          <type><ref refid="group__drivers_1ga527bfd427c1d151b37b9f728b8378b70" kindref="member">bmp390_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Removes an BMP390 device from master I2C bus and delete the handle. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>BMP390 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp390/include/bmp390.h" line="585" column="11" bodyfile="components/peripherals/i2c/esp_bmp390/bmp390.c" bodystart="913" bodyend="927" declfile="components/peripherals/i2c/esp_bmp390/include/bmp390.h" declline="585" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gacfb4d73ab0d54fe38ffa90f434e8e617" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * bmp390_get_fw_version</definition>
        <argsstring>(void)</argsstring>
        <name>bmp390_get_fw_version</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Converts BMP390 firmware version numbers (major, minor, patch) into a string. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>char* BMP390 firmware version as a string that is formatted as X.X.X (e.g. 4.0.0). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp390/include/bmp390.h" line="592" column="12" bodyfile="components/peripherals/i2c/esp_bmp390/bmp390.c" bodystart="929" bodyend="931" declfile="components/peripherals/i2c/esp_bmp390/include/bmp390.h" declline="592" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga6d7c13184276bfe4d87299bee751e0a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t bmp390_get_fw_version_number</definition>
        <argsstring>(void)</argsstring>
        <name>bmp390_get_fw_version_number</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Converts BMP390 firmware version numbers (major, minor, patch) into an integer value. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>int32_t BMP390 firmware version number. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp390/include/bmp390.h" line="599" column="9" bodyfile="components/peripherals/i2c/esp_bmp390/bmp390.c" bodystart="933" bodyend="935" declfile="components/peripherals/i2c/esp_bmp390/include/bmp390.h" declline="599" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga0bff976989ba5bf0eaa1ca9e38e9d3af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ccs811_get_status_register</definition>
        <argsstring>(ccs811_handle_t handle, ccs811_status_register_t *const reg)</argsstring>
        <name>ccs811_get_status_register</name>
        <param>
          <type><ref refid="group__drivers_1ga93f5ff3bbfd6b970a656de57f9ab5621" kindref="member">ccs811_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>ccs811_status_register_t *const</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Reads status register from CCS811. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>CCS811 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>CCS811 status register structure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ccs811/include/ccs811.h" line="267" column="11" bodyfile="components/peripherals/i2c/esp_ccs811/ccs811.c" bodystart="322" bodyend="330" declfile="components/peripherals/i2c/esp_ccs811/include/ccs811.h" declline="267" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gad2a11eca0777e7719a0a1e9e566576de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ccs811_get_measure_mode_register</definition>
        <argsstring>(ccs811_handle_t handle, ccs811_measure_mode_register_t *const reg)</argsstring>
        <name>ccs811_get_measure_mode_register</name>
        <param>
          <type><ref refid="group__drivers_1ga93f5ff3bbfd6b970a656de57f9ab5621" kindref="member">ccs811_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>ccs811_measure_mode_register_t *const</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Reads measure mode register from CCS811. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>CCS811 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>CCS811 measure mode register structure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ccs811/include/ccs811.h" line="276" column="11" bodyfile="components/peripherals/i2c/esp_ccs811/ccs811.c" bodystart="332" bodyend="340" declfile="components/peripherals/i2c/esp_ccs811/include/ccs811.h" declline="276" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gad3b44884f844b3777372970af4145217" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ccs811_set_measure_mode_register</definition>
        <argsstring>(ccs811_handle_t handle, const ccs811_measure_mode_register_t reg)</argsstring>
        <name>ccs811_set_measure_mode_register</name>
        <param>
          <type><ref refid="group__drivers_1ga93f5ff3bbfd6b970a656de57f9ab5621" kindref="member">ccs811_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const ccs811_measure_mode_register_t</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Writes measure mode register to CCS811. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>CCS811 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>CCS811 measure mode register structure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ccs811/include/ccs811.h" line="285" column="11" bodyfile="components/peripherals/i2c/esp_ccs811/ccs811.c" bodystart="342" bodyend="355" declfile="components/peripherals/i2c/esp_ccs811/include/ccs811.h" declline="285" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga61b35f4a71f4b97d0012f77d411375c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ccs811_get_error_register</definition>
        <argsstring>(ccs811_handle_t handle, ccs811_error_code_register_t *const reg)</argsstring>
        <name>ccs811_get_error_register</name>
        <param>
          <type><ref refid="group__drivers_1ga93f5ff3bbfd6b970a656de57f9ab5621" kindref="member">ccs811_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>ccs811_error_code_register_t *const</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Reads error register from CCS811. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>CCS811 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>CCS811 error register structure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ccs811/include/ccs811.h" line="294" column="11" bodyfile="components/peripherals/i2c/esp_ccs811/ccs811.c" bodystart="357" bodyend="365" declfile="components/peripherals/i2c/esp_ccs811/include/ccs811.h" declline="294" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga3376d27746958386be2ab4a5bbfc398d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ccs811_set_environmental_data_register</definition>
        <argsstring>(ccs811_handle_t handle, const float temperature, const float humidity)</argsstring>
        <name>ccs811_set_environmental_data_register</name>
        <param>
          <type><ref refid="group__drivers_1ga93f5ff3bbfd6b970a656de57f9ab5621" kindref="member">ccs811_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>temperature</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>humidity</declname>
        </param>
        <briefdescription>
<para>Writes environmental compensation factors data to CCS811 register. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>CCS811 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">temperature</parametername>
</parameternamelist>
<parameterdescription>
<para>temperature compensation in degrees Celsius (default: 25 C). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">humidity</parametername>
</parameternamelist>
<parameterdescription>
<para>relative humidity compensation in percentage (default: 50 %). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ccs811/include/ccs811.h" line="304" column="11" bodyfile="components/peripherals/i2c/esp_ccs811/ccs811.c" bodystart="367" bodyend="405" declfile="components/peripherals/i2c/esp_ccs811/include/ccs811.h" declline="304" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga25478eadc453cd81afe79e8be0bc0389" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ccs811_set_thresholds_register</definition>
        <argsstring>(ccs811_handle_t handle, const uint16_t low_to_med, const uint16_t med_to_high, const uint8_t hysteresis)</argsstring>
        <name>ccs811_set_thresholds_register</name>
        <param>
          <type><ref refid="group__drivers_1ga93f5ff3bbfd6b970a656de57f9ab5621" kindref="member">ccs811_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const uint16_t</type>
          <declname>low_to_med</declname>
        </param>
        <param>
          <type>const uint16_t</type>
          <declname>med_to_high</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>hysteresis</declname>
        </param>
        <briefdescription>
<para>Writes eCO2 thresholds to CCS811 register. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>CCS811 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">low_to_med</parametername>
</parameternamelist>
<parameterdescription>
<para>Low to medium threshold within a range of 400 to 32768 ppm (1500 ppm). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">med_to_high</parametername>
</parameternamelist>
<parameterdescription>
<para>Medium to high threshold within a range of 400 to 32768 ppm (2500 ppm). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">hysteresis</parametername>
</parameternamelist>
<parameterdescription>
<para>Variance for thresholds in ppm (default: 50 ppm). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ccs811/include/ccs811.h" line="315" column="11" bodyfile="components/peripherals/i2c/esp_ccs811/ccs811.c" bodystart="407" bodyend="434" declfile="components/peripherals/i2c/esp_ccs811/include/ccs811.h" declline="315" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gaffafc27a7d92e5fa6c5c523e7b3473ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ccs811_get_baseline_register</definition>
        <argsstring>(ccs811_handle_t handle, uint16_t *const reg)</argsstring>
        <name>ccs811_get_baseline_register</name>
        <param>
          <type><ref refid="group__drivers_1ga93f5ff3bbfd6b970a656de57f9ab5621" kindref="member">ccs811_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>uint16_t *const</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Reads encoded version of the current baseline register from CCS811. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>CCS811 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>CCS811 encoded version of the baseline register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ccs811/include/ccs811.h" line="324" column="11" bodyfile="components/peripherals/i2c/esp_ccs811/ccs811.c" bodystart="436" bodyend="444" declfile="components/peripherals/i2c/esp_ccs811/include/ccs811.h" declline="324" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga4f9290f72d94b19f5f9cca0e2ed43c63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ccs811_set_baseline_register</definition>
        <argsstring>(ccs811_handle_t handle, const uint16_t reg)</argsstring>
        <name>ccs811_set_baseline_register</name>
        <param>
          <type><ref refid="group__drivers_1ga93f5ff3bbfd6b970a656de57f9ab5621" kindref="member">ccs811_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const uint16_t</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Writes encoded version to the CCS811 baseline register. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>CCS811 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>CCS811 encoded version of the baseline register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ccs811/include/ccs811.h" line="333" column="11" bodyfile="components/peripherals/i2c/esp_ccs811/ccs811.c" bodystart="446" bodyend="454" declfile="components/peripherals/i2c/esp_ccs811/include/ccs811.h" declline="333" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gaeeedd12bb1ac608249d2ced247383657" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ccs811_get_hardware_identifier_register</definition>
        <argsstring>(ccs811_handle_t handle, uint8_t *const reg)</argsstring>
        <name>ccs811_get_hardware_identifier_register</name>
        <param>
          <type><ref refid="group__drivers_1ga93f5ff3bbfd6b970a656de57f9ab5621" kindref="member">ccs811_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>uint8_t *const</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Reads hardware identifier register from CCS811. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>CCS811 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>CCS811 hardware identifier register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ccs811/include/ccs811.h" line="342" column="11" bodyfile="components/peripherals/i2c/esp_ccs811/ccs811.c" bodystart="456" bodyend="464" declfile="components/peripherals/i2c/esp_ccs811/include/ccs811.h" declline="342" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga5a5c0f26a73196ef7f8b3a86a7151133" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ccs811_get_hardware_version_register</definition>
        <argsstring>(ccs811_handle_t handle, uint8_t *const reg)</argsstring>
        <name>ccs811_get_hardware_version_register</name>
        <param>
          <type><ref refid="group__drivers_1ga93f5ff3bbfd6b970a656de57f9ab5621" kindref="member">ccs811_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>uint8_t *const</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Reads hardware version register from CCS811. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>CCS811 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>CCS811 hardware version register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ccs811/include/ccs811.h" line="351" column="11" bodyfile="components/peripherals/i2c/esp_ccs811/ccs811.c" bodystart="466" bodyend="474" declfile="components/peripherals/i2c/esp_ccs811/include/ccs811.h" declline="351" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gaacddf12a1b0fa04e95f4f425fce71483" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ccs811_start_application</definition>
        <argsstring>(ccs811_handle_t handle)</argsstring>
        <name>ccs811_start_application</name>
        <param>
          <type><ref refid="group__drivers_1ga93f5ff3bbfd6b970a656de57f9ab5621" kindref="member">ccs811_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Starts the CCS811 application. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>CCS811 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ccs811/include/ccs811.h" line="359" column="11" bodyfile="components/peripherals/i2c/esp_ccs811/ccs811.c" bodystart="476" bodyend="484" declfile="components/peripherals/i2c/esp_ccs811/include/ccs811.h" declline="359" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gafb2476c99e169fab5776d8795fb2bfe7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ccs811_init</definition>
        <argsstring>(i2c_master_bus_handle_t master_handle, const ccs811_config_t *ccs811_config, ccs811_handle_t *ccs811_handle)</argsstring>
        <name>ccs811_init</name>
        <param>
          <type>i2c_master_bus_handle_t</type>
          <declname>master_handle</declname>
        </param>
        <param>
          <type>const <ref refid="structccs811__config__t" kindref="compound">ccs811_config_t</ref> *</type>
          <declname>ccs811_config</declname>
        </param>
        <param>
          <type><ref refid="group__drivers_1ga93f5ff3bbfd6b970a656de57f9ab5621" kindref="member">ccs811_handle_t</ref> *</type>
          <declname>ccs811_handle</declname>
        </param>
        <briefdescription>
<para>Initializes a CCS811 device onto the I2C master bus. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">master_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>I2C master bus handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ccs811_config</parametername>
</parameternamelist>
<parameterdescription>
<para>CCS811 device configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">ccs811_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>CCS811 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ccs811/include/ccs811.h" line="369" column="11" bodyfile="components/peripherals/i2c/esp_ccs811/ccs811.c" bodystart="617" bodyend="673" declfile="components/peripherals/i2c/esp_ccs811/include/ccs811.h" declline="369" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gaa02485dd45552bcdab58c102c0df56e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ccs811_get_measurement</definition>
        <argsstring>(ccs811_handle_t handle, uint16_t *eco2, uint16_t *etvoc)</argsstring>
        <name>ccs811_get_measurement</name>
        <param>
          <type><ref refid="group__drivers_1ga93f5ff3bbfd6b970a656de57f9ab5621" kindref="member">ccs811_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>uint16_t *</type>
          <declname>eco2</declname>
        </param>
        <param>
          <type>uint16_t *</type>
          <declname>etvoc</declname>
        </param>
        <briefdescription>
<para>Reads air quality measurement from CCS811. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>CCS811 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">eco2</parametername>
</parameternamelist>
<parameterdescription>
<para>Equivalent CO2 in ppm (range is from 400 to 32768 ppm). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">etvoc</parametername>
</parameternamelist>
<parameterdescription>
<para>Equivalent Total Volatile Oragnic Compound (TVOC) in ppb (range is from 0 to 29206 ppb). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ccs811/include/ccs811.h" line="379" column="11" bodyfile="components/peripherals/i2c/esp_ccs811/ccs811.c" bodystart="675" bodyend="731" declfile="components/peripherals/i2c/esp_ccs811/include/ccs811.h" declline="379" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga72d5edd9419a160994e6efd2fb4c5dd8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ccs811_set_environmental_data</definition>
        <argsstring>(ccs811_handle_t handle, const float temperature, const float humidity)</argsstring>
        <name>ccs811_set_environmental_data</name>
        <param>
          <type><ref refid="group__drivers_1ga93f5ff3bbfd6b970a656de57f9ab5621" kindref="member">ccs811_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>temperature</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>humidity</declname>
        </param>
        <briefdescription>
<para>Writes environmental compensation factors data to CCS811 register. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>CCS811 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">temperature</parametername>
</parameternamelist>
<parameterdescription>
<para>Temperature compensation in degrees Celsius (default: 25 C). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">humidity</parametername>
</parameternamelist>
<parameterdescription>
<para>Relative humidity compensation in percentage (default: 50 %). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ccs811/include/ccs811.h" line="389" column="11" bodyfile="components/peripherals/i2c/esp_ccs811/ccs811.c" bodystart="733" bodyend="741" declfile="components/peripherals/i2c/esp_ccs811/include/ccs811.h" declline="389" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gae958fb94ab668f974903ba290fbdace4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ccs811_set_thresholds</definition>
        <argsstring>(ccs811_handle_t handle, const uint16_t low_to_med, const uint16_t med_to_high, const uint8_t hysteresis)</argsstring>
        <name>ccs811_set_thresholds</name>
        <param>
          <type><ref refid="group__drivers_1ga93f5ff3bbfd6b970a656de57f9ab5621" kindref="member">ccs811_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const uint16_t</type>
          <declname>low_to_med</declname>
        </param>
        <param>
          <type>const uint16_t</type>
          <declname>med_to_high</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>hysteresis</declname>
        </param>
        <briefdescription>
<para>Writes eCO2 thresholds to CCS811 register. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>CCS811 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">low_to_med</parametername>
</parameternamelist>
<parameterdescription>
<para>Low to medium threshold within a range of 400 to 32768 ppm (1500 ppm). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">med_to_high</parametername>
</parameternamelist>
<parameterdescription>
<para>Medium to high threshold within a range of 400 to 32768 ppm (2500 ppm). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">hysteresis</parametername>
</parameternamelist>
<parameterdescription>
<para>Variance for thresholds in ppm (default: 50 ppm). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ccs811/include/ccs811.h" line="400" column="11" bodyfile="components/peripherals/i2c/esp_ccs811/ccs811.c" bodystart="743" bodyend="751" declfile="components/peripherals/i2c/esp_ccs811/include/ccs811.h" declline="400" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gae4a67a7a46ce69f0b857b79f9b8c2376" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ccs811_get_drive_mode</definition>
        <argsstring>(ccs811_handle_t handle, ccs811_drive_modes_t *const mode)</argsstring>
        <name>ccs811_get_drive_mode</name>
        <param>
          <type><ref refid="group__drivers_1ga93f5ff3bbfd6b970a656de57f9ab5621" kindref="member">ccs811_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="group__drivers_1gad91c6a3379cef0d15d8465d67c1479fa" kindref="member">ccs811_drive_modes_t</ref> *const</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Reads drive mode from CCS811. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>CCS811 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">mode</parametername>
</parameternamelist>
<parameterdescription>
<para>CCS811 measurement drive mode setting. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ccs811/include/ccs811.h" line="409" column="11" bodyfile="components/peripherals/i2c/esp_ccs811/ccs811.c" bodystart="753" bodyend="766" declfile="components/peripherals/i2c/esp_ccs811/include/ccs811.h" declline="409" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gacdddac5cd9dae68712edb710148f1b11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ccs811_set_drive_mode</definition>
        <argsstring>(ccs811_handle_t handle, const ccs811_drive_modes_t mode)</argsstring>
        <name>ccs811_set_drive_mode</name>
        <param>
          <type><ref refid="group__drivers_1ga93f5ff3bbfd6b970a656de57f9ab5621" kindref="member">ccs811_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const <ref refid="group__drivers_1gad91c6a3379cef0d15d8465d67c1479fa" kindref="member">ccs811_drive_modes_t</ref></type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Writes drive mode to CCS811. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>CCS811 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mode</parametername>
</parameternamelist>
<parameterdescription>
<para>CCS811 measurement drive mode setting. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ccs811/include/ccs811.h" line="418" column="11" bodyfile="components/peripherals/i2c/esp_ccs811/ccs811.c" bodystart="768" bodyend="784" declfile="components/peripherals/i2c/esp_ccs811/include/ccs811.h" declline="418" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga024130f529315f52acbe65121df34581" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ccs811_get_firmware_mode</definition>
        <argsstring>(ccs811_handle_t handle, ccs811_firmware_modes_t *const mode)</argsstring>
        <name>ccs811_get_firmware_mode</name>
        <param>
          <type><ref refid="group__drivers_1ga93f5ff3bbfd6b970a656de57f9ab5621" kindref="member">ccs811_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="group__drivers_1gadcc6aa53d50a1deb71f652886244b5b0" kindref="member">ccs811_firmware_modes_t</ref> *const</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Reads firmware mode from CCS811. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>CCS811 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">mode</parametername>
</parameternamelist>
<parameterdescription>
<para>CCS811 firmware mode setting. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ccs811/include/ccs811.h" line="427" column="11" bodyfile="components/peripherals/i2c/esp_ccs811/ccs811.c" bodystart="786" bodyend="799" declfile="components/peripherals/i2c/esp_ccs811/include/ccs811.h" declline="427" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga320ffdba546b10f2327379aa76a0deed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ccs811_get_ntc_resistance</definition>
        <argsstring>(ccs811_handle_t handle, const uint32_t r_ref, uint32_t *const resistance)</argsstring>
        <name>ccs811_get_ntc_resistance</name>
        <param>
          <type><ref refid="group__drivers_1ga93f5ff3bbfd6b970a656de57f9ab5621" kindref="member">ccs811_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>r_ref</declname>
        </param>
        <param>
          <type>uint32_t *const</type>
          <declname>resistance</declname>
        </param>
        <briefdescription>
<para>Reads NTC resistance connected to CCS811 per AMS application note AN000372. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>CCS811 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>r_ref</parametername>
</parameternamelist>
<parameterdescription>
<para>CCS811 resistance reference value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>resistance</parametername>
</parameternamelist>
<parameterdescription>
<para>CCS811 NTC resistance value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ccs811/include/ccs811.h" line="437" column="11" bodyfile="components/peripherals/i2c/esp_ccs811/ccs811.c" bodystart="801" bodyend="816" declfile="components/peripherals/i2c/esp_ccs811/include/ccs811.h" declline="437" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gaea36b6c9e450ae85fcf0e89c51f2a4ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ccs811_get_data_status</definition>
        <argsstring>(ccs811_handle_t handle, bool *const ready)</argsstring>
        <name>ccs811_get_data_status</name>
        <param>
          <type><ref refid="group__drivers_1ga93f5ff3bbfd6b970a656de57f9ab5621" kindref="member">ccs811_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>bool *const</type>
          <declname>ready</declname>
        </param>
        <briefdescription>
<para>Reads data ready status from CCS811. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>CCS811 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">ready</parametername>
</parameternamelist>
<parameterdescription>
<para>CCS811 data is ready when true. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ccs811/include/ccs811.h" line="446" column="11" bodyfile="components/peripherals/i2c/esp_ccs811/ccs811.c" bodystart="818" bodyend="831" declfile="components/peripherals/i2c/esp_ccs811/include/ccs811.h" declline="446" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gaf0b5cc8ab33a370424bbe905ed7a1c76" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ccs811_get_error_status</definition>
        <argsstring>(ccs811_handle_t handle, bool *const error)</argsstring>
        <name>ccs811_get_error_status</name>
        <param>
          <type><ref refid="group__drivers_1ga93f5ff3bbfd6b970a656de57f9ab5621" kindref="member">ccs811_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>bool *const</type>
          <declname>error</declname>
        </param>
        <briefdescription>
<para>Reads error status from CCS811. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>CCS811 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">error</parametername>
</parameternamelist>
<parameterdescription>
<para>CCS811 error is present when true. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ccs811/include/ccs811.h" line="455" column="11" bodyfile="components/peripherals/i2c/esp_ccs811/ccs811.c" bodystart="833" bodyend="846" declfile="components/peripherals/i2c/esp_ccs811/include/ccs811.h" declline="455" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gaa5141a128d613111e1a3f5b5b189f49b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ccs811_reset</definition>
        <argsstring>(ccs811_handle_t handle)</argsstring>
        <name>ccs811_reset</name>
        <param>
          <type><ref refid="group__drivers_1ga93f5ff3bbfd6b970a656de57f9ab5621" kindref="member">ccs811_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Issues soft-reset to CCS811. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>CCS811 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ccs811/include/ccs811.h" line="463" column="11" bodyfile="components/peripherals/i2c/esp_ccs811/ccs811.c" bodystart="848" bodyend="873" declfile="components/peripherals/i2c/esp_ccs811/include/ccs811.h" declline="463" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga53ca5f2dc25d5785c6d05ddb711a2f26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ccs811_io_wake</definition>
        <argsstring>(ccs811_handle_t handle)</argsstring>
        <name>ccs811_io_wake</name>
        <param>
          <type><ref refid="group__drivers_1ga93f5ff3bbfd6b970a656de57f9ab5621" kindref="member">ccs811_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Wakes the CCS811 through the configured wake GPIO pin number. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>CCS811 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ccs811/include/ccs811.h" line="471" column="11" bodyfile="components/peripherals/i2c/esp_ccs811/ccs811.c" bodystart="875" bodyend="889" declfile="components/peripherals/i2c/esp_ccs811/include/ccs811.h" declline="471" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga585652bc7c427d8c3f1745aa1d6fdf06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ccs811_io_sleep</definition>
        <argsstring>(ccs811_handle_t handle)</argsstring>
        <name>ccs811_io_sleep</name>
        <param>
          <type><ref refid="group__drivers_1ga93f5ff3bbfd6b970a656de57f9ab5621" kindref="member">ccs811_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Puts the CCS811 a sleep through the configured wake GPIO pin number. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>CCS811 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ccs811/include/ccs811.h" line="479" column="11" bodyfile="components/peripherals/i2c/esp_ccs811/ccs811.c" bodystart="891" bodyend="902" declfile="components/peripherals/i2c/esp_ccs811/include/ccs811.h" declline="479" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga8f5338c785855e5a7fff79194aa4cb9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ccs811_io_reset</definition>
        <argsstring>(ccs811_handle_t handle)</argsstring>
        <name>ccs811_io_reset</name>
        <param>
          <type><ref refid="group__drivers_1ga93f5ff3bbfd6b970a656de57f9ab5621" kindref="member">ccs811_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Resets the CCS811 through the configured reset GPIO pin number. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>CCS811 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ccs811/include/ccs811.h" line="487" column="11" bodyfile="components/peripherals/i2c/esp_ccs811/ccs811.c" bodystart="904" bodyend="921" declfile="components/peripherals/i2c/esp_ccs811/include/ccs811.h" declline="487" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga94d2bde4433eccabe0971f3646a8c581" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ccs811_remove</definition>
        <argsstring>(ccs811_handle_t handle)</argsstring>
        <name>ccs811_remove</name>
        <param>
          <type><ref refid="group__drivers_1ga93f5ff3bbfd6b970a656de57f9ab5621" kindref="member">ccs811_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Removes a CCS811 device from master bus. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>CCS811 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ccs811/include/ccs811.h" line="495" column="11" bodyfile="components/peripherals/i2c/esp_ccs811/ccs811.c" bodystart="923" bodyend="929" declfile="components/peripherals/i2c/esp_ccs811/include/ccs811.h" declline="495" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga411b556cedc994f96c23259453c55d27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ccs811_delete</definition>
        <argsstring>(ccs811_handle_t handle)</argsstring>
        <name>ccs811_delete</name>
        <param>
          <type><ref refid="group__drivers_1ga93f5ff3bbfd6b970a656de57f9ab5621" kindref="member">ccs811_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Removes an CCS811 device from master I2C bus and delete the handle. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>CCS811 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ccs811/include/ccs811.h" line="503" column="11" bodyfile="components/peripherals/i2c/esp_ccs811/ccs811.c" bodystart="931" bodyend="945" declfile="components/peripherals/i2c/esp_ccs811/include/ccs811.h" declline="503" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gae1a3cb157ee35d3a706afea61c4c85e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * ccs811_err_to_message</definition>
        <argsstring>(const ccs811_error_code_register_t error_reg)</argsstring>
        <name>ccs811_err_to_message</name>
        <param>
          <type>const ccs811_error_code_register_t</type>
          <declname>error_reg</declname>
        </param>
        <briefdescription>
<para>Decodes CCS811 device error to a textual message representation. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">code</parametername>
</parameternamelist>
<parameterdescription>
<para>CCS811 I2C register error. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>char textual representation of error message on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ccs811/include/ccs811.h" line="511" column="12" bodyfile="components/peripherals/i2c/esp_ccs811/ccs811.c" bodystart="947" bodyend="957" declfile="components/peripherals/i2c/esp_ccs811/include/ccs811.h" declline="511" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gad3c6b76aefc8ee97bf3d646d57e99a75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * ccs811_err_to_code</definition>
        <argsstring>(const ccs811_error_code_register_t error_reg)</argsstring>
        <name>ccs811_err_to_code</name>
        <param>
          <type>const ccs811_error_code_register_t</type>
          <declname>error_reg</declname>
        </param>
        <briefdescription>
<para>Decodes CCS811 device error to a textual code representation. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">code</parametername>
</parameternamelist>
<parameterdescription>
<para>CCS811 I2C register error. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>char textual representation of error code on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ccs811/include/ccs811.h" line="519" column="12" bodyfile="components/peripherals/i2c/esp_ccs811/ccs811.c" bodystart="959" bodyend="969" declfile="components/peripherals/i2c/esp_ccs811/include/ccs811.h" declline="519" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga6549ec2730d45f8316474755e09f6a04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * ccs811_measure_mode_description</definition>
        <argsstring>(const ccs811_drive_modes_t mode)</argsstring>
        <name>ccs811_measure_mode_description</name>
        <param>
          <type>const <ref refid="group__drivers_1gad91c6a3379cef0d15d8465d67c1479fa" kindref="member">ccs811_drive_modes_t</ref></type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Decodes enumerated drive mode to a textual descriptive representation. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">mode</parametername>
</parameternamelist>
<parameterdescription>
<para>measurement drive mode. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>char textual representation of measure mode on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ccs811/include/ccs811.h" line="527" column="12" bodyfile="components/peripherals/i2c/esp_ccs811/ccs811.c" bodystart="971" bodyend="980" declfile="components/peripherals/i2c/esp_ccs811/include/ccs811.h" declline="527" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gae2118089810b70ab33694f634ec10262" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * ccs811_get_fw_version</definition>
        <argsstring>(void)</argsstring>
        <name>ccs811_get_fw_version</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Converts CCS811 firmware version numbers (major, minor, patch) into a string. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>char* CCS811 firmware version as a string that is formatted as X.X.X (e.g. 4.0.0). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ccs811/include/ccs811.h" line="534" column="12" bodyfile="components/peripherals/i2c/esp_ccs811/ccs811.c" bodystart="982" bodyend="984" declfile="components/peripherals/i2c/esp_ccs811/include/ccs811.h" declline="534" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga241483f7879eb78e0c440d0a95def97d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t ccs811_get_fw_version_number</definition>
        <argsstring>(void)</argsstring>
        <name>ccs811_get_fw_version_number</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Converts CCS811 firmware version numbers (major, minor, patch) into an integer value. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>int32_t CCS811 firmware version number. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ccs811/include/ccs811.h" line="541" column="9" bodyfile="components/peripherals/i2c/esp_ccs811/ccs811.c" bodystart="986" bodyend="988" declfile="components/peripherals/i2c/esp_ccs811/include/ccs811.h" declline="541" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga8a0c563398abbbd945a5811cf9f71d7f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ens160_get_interrupt_config_register</definition>
        <argsstring>(ens160_handle_t handle, ens160_interrupt_config_register_t *const reg)</argsstring>
        <name>ens160_get_interrupt_config_register</name>
        <param>
          <type><ref refid="group__drivers_1gafdcb747a70da714654218fbcd1d1e2c9" kindref="member">ens160_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>ens160_interrupt_config_register_t *const</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Reads interrupt configuration register from ENS160. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>ENS160 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>ENS160 interrupt configuration register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ens160/include/ens160.h" line="288" column="11" bodyfile="components/peripherals/i2c/esp_ens160/ens160.c" bodystart="363" bodyend="374" declfile="components/peripherals/i2c/esp_ens160/include/ens160.h" declline="288" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gad526a912dd144b02c82afc98f1dcb718" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ens160_set_interrupt_config_register</definition>
        <argsstring>(ens160_handle_t handle, const ens160_interrupt_config_register_t reg)</argsstring>
        <name>ens160_set_interrupt_config_register</name>
        <param>
          <type><ref refid="group__drivers_1gafdcb747a70da714654218fbcd1d1e2c9" kindref="member">ens160_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const ens160_interrupt_config_register_t</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Writes interrupt configuration register to ENS160. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>ENS160 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>ENS160 interrupt configuration register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ens160/include/ens160.h" line="297" column="11" bodyfile="components/peripherals/i2c/esp_ens160/ens160.c" bodystart="376" bodyend="393" declfile="components/peripherals/i2c/esp_ens160/include/ens160.h" declline="297" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gad75c8c18e1e7e453d24a55a648636bd6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ens160_get_status_register</definition>
        <argsstring>(ens160_handle_t handle, ens160_status_register_t *const reg)</argsstring>
        <name>ens160_get_status_register</name>
        <param>
          <type><ref refid="group__drivers_1gafdcb747a70da714654218fbcd1d1e2c9" kindref="member">ens160_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>ens160_status_register_t *const</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Reads status register from ENS160. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>ENS160 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>ENS160 status configuration register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ens160/include/ens160.h" line="306" column="11" bodyfile="components/peripherals/i2c/esp_ens160/ens160.c" bodystart="395" bodyend="406" declfile="components/peripherals/i2c/esp_ens160/include/ens160.h" declline="306" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga37fcec04ff84eccc9f809c9c4307dc78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ens160_clear_command_register</definition>
        <argsstring>(ens160_handle_t handle)</argsstring>
        <name>ens160_clear_command_register</name>
        <param>
          <type><ref refid="group__drivers_1gafdcb747a70da714654218fbcd1d1e2c9" kindref="member">ens160_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Resets command to operate normal and clears general purpose registers on ENS160. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>ENS160 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ens160/include/ens160.h" line="314" column="11" declfile="components/peripherals/i2c/esp_ens160/include/ens160.h" declline="314" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga15e778babf2f9768c9ce64cae25d66a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ens160_get_compensation_registers</definition>
        <argsstring>(ens160_handle_t handle, float *const temperature, float *const humidity)</argsstring>
        <name>ens160_get_compensation_registers</name>
        <param>
          <type><ref refid="group__drivers_1gafdcb747a70da714654218fbcd1d1e2c9" kindref="member">ens160_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>float *const</type>
          <declname>temperature</declname>
        </param>
        <param>
          <type>float *const</type>
          <declname>humidity</declname>
        </param>
        <briefdescription>
<para>Reads temperature and humidity compensation registers from ENS160. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>ENS160 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">temperature</parametername>
</parameternamelist>
<parameterdescription>
<para>temperature compensation in degree Celsius. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">humidity</parametername>
</parameternamelist>
<parameterdescription>
<para>humidity compensation in percentage. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ens160/include/ens160.h" line="324" column="11" bodyfile="components/peripherals/i2c/esp_ens160/ens160.c" bodystart="427" bodyend="445" declfile="components/peripherals/i2c/esp_ens160/include/ens160.h" declline="324" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gafbc9dd389a2bea26048557c654df8834" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ens160_set_compensation_registers</definition>
        <argsstring>(ens160_handle_t handle, const float temperature, const float humidity)</argsstring>
        <name>ens160_set_compensation_registers</name>
        <param>
          <type><ref refid="group__drivers_1gafdcb747a70da714654218fbcd1d1e2c9" kindref="member">ens160_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>temperature</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>humidity</declname>
        </param>
        <briefdescription>
<para>Writes temperature and humidity compensation registers to ENS160. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>ENS160 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">temperature</parametername>
</parameternamelist>
<parameterdescription>
<para>temperature compensation in degree Celsius. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">humidity</parametername>
</parameternamelist>
<parameterdescription>
<para>humidity compensation in percentage. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ens160/include/ens160.h" line="334" column="11" bodyfile="components/peripherals/i2c/esp_ens160/ens160.c" bodystart="447" bodyend="473" declfile="components/peripherals/i2c/esp_ens160/include/ens160.h" declline="334" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gafb9e5b096480b989c878d9063e4734ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ens160_get_part_id_register</definition>
        <argsstring>(ens160_handle_t handle, uint16_t *const reg)</argsstring>
        <name>ens160_get_part_id_register</name>
        <param>
          <type><ref refid="group__drivers_1gafdcb747a70da714654218fbcd1d1e2c9" kindref="member">ens160_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>uint16_t *const</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Reads part identifier register from ENS160. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>ENS160 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Part id register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ens160/include/ens160.h" line="343" column="11" bodyfile="components/peripherals/i2c/esp_ens160/ens160.c" bodystart="475" bodyend="486" declfile="components/peripherals/i2c/esp_ens160/include/ens160.h" declline="343" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gac139f3a1dd540b59f58adcf7ef5770ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ens160_init</definition>
        <argsstring>(i2c_master_bus_handle_t master_handle, const ens160_config_t *ens160_config, ens160_handle_t *ens160_handle)</argsstring>
        <name>ens160_init</name>
        <param>
          <type>i2c_master_bus_handle_t</type>
          <declname>master_handle</declname>
        </param>
        <param>
          <type>const <ref refid="group__drivers_1gadcf19e4502c842b6dbc749ed6e19ab96" kindref="member">ens160_config_t</ref> *</type>
          <declname>ens160_config</declname>
        </param>
        <param>
          <type><ref refid="group__drivers_1gafdcb747a70da714654218fbcd1d1e2c9" kindref="member">ens160_handle_t</ref> *</type>
          <declname>ens160_handle</declname>
        </param>
        <briefdescription>
<para>Initializes an ENS160 device onto the I2C master bus. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">master_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>I2C master bus handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ens160_config</parametername>
</parameternamelist>
<parameterdescription>
<para>ENS160 device configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">ens160_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>ENS160 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ens160/include/ens160.h" line="353" column="11" bodyfile="components/peripherals/i2c/esp_ens160/ens160.c" bodystart="488" bodyend="543" declfile="components/peripherals/i2c/esp_ens160/include/ens160.h" declline="353" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga6b3e7bd873aa221d7fa868356da85bc4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ens160_get_measurement</definition>
        <argsstring>(ens160_handle_t handle, ens160_air_quality_data_t *const data)</argsstring>
        <name>ens160_get_measurement</name>
        <param>
          <type><ref refid="group__drivers_1gafdcb747a70da714654218fbcd1d1e2c9" kindref="member">ens160_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="group__drivers_1ga9bf81e9124e5c07b24ebebc2dd141904" kindref="member">ens160_air_quality_data_t</ref> *const</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Reads calculated air quality measurements from ENS160. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>ENS160 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">data</parametername>
</parameternamelist>
<parameterdescription>
<para>ENS160 air quality data structure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ens160/include/ens160.h" line="362" column="11" bodyfile="components/peripherals/i2c/esp_ens160/ens160.c" bodystart="545" bodyend="592" declfile="components/peripherals/i2c/esp_ens160/include/ens160.h" declline="362" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga1dd2b9036a23da1e0ca670bb48c70760" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ens160_get_raw_measurement</definition>
        <argsstring>(ens160_handle_t handle, ens160_air_quality_raw_data_t *const data)</argsstring>
        <name>ens160_get_raw_measurement</name>
        <param>
          <type><ref refid="group__drivers_1gafdcb747a70da714654218fbcd1d1e2c9" kindref="member">ens160_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="group__drivers_1gaff8f3f610bc3439129f39f314c4e4616" kindref="member">ens160_air_quality_raw_data_t</ref> *const</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Reads raw air quality measurements from ENS160. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>ENS160 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">data</parametername>
</parameternamelist>
<parameterdescription>
<para>ENS160 air quality raw data structure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ens160/include/ens160.h" line="371" column="11" bodyfile="components/peripherals/i2c/esp_ens160/ens160.c" bodystart="594" bodyend="650" declfile="components/peripherals/i2c/esp_ens160/include/ens160.h" declline="371" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gaf391757408cbb0d1a6405665c8946480" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ens160_get_data_status</definition>
        <argsstring>(ens160_handle_t handle, bool *const ready)</argsstring>
        <name>ens160_get_data_status</name>
        <param>
          <type><ref refid="group__drivers_1gafdcb747a70da714654218fbcd1d1e2c9" kindref="member">ens160_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>bool *const</type>
          <declname>ready</declname>
        </param>
        <briefdescription>
<para>Reads data ready status from ENS160. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>ENS160 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">ready</parametername>
</parameternamelist>
<parameterdescription>
<para>ENS160 data ready status. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ens160/include/ens160.h" line="380" column="11" bodyfile="components/peripherals/i2c/esp_ens160/ens160.c" bodystart="652" bodyend="665" declfile="components/peripherals/i2c/esp_ens160/include/ens160.h" declline="380" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga52ea3a75e26bf293045237fd418e7ebb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ens160_get_gpr_data_status</definition>
        <argsstring>(ens160_handle_t handle, bool *const ready)</argsstring>
        <name>ens160_get_gpr_data_status</name>
        <param>
          <type><ref refid="group__drivers_1gafdcb747a70da714654218fbcd1d1e2c9" kindref="member">ens160_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>bool *const</type>
          <declname>ready</declname>
        </param>
        <briefdescription>
<para>Reads general purpose registers data ready status from ENS160. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>ENS160 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">ready</parametername>
</parameternamelist>
<parameterdescription>
<para>ENS160 general purpose registers data ready status. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ens160/include/ens160.h" line="389" column="11" bodyfile="components/peripherals/i2c/esp_ens160/ens160.c" bodystart="667" bodyend="680" declfile="components/peripherals/i2c/esp_ens160/include/ens160.h" declline="389" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga159fd485dba74a5fc090875de79ad53f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ens160_get_validity_status</definition>
        <argsstring>(ens160_handle_t handle, ens160_validity_flags_t *const state)</argsstring>
        <name>ens160_get_validity_status</name>
        <param>
          <type><ref refid="group__drivers_1gafdcb747a70da714654218fbcd1d1e2c9" kindref="member">ens160_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="group__drivers_1gac81c26d5b704c609e33b6f4ba7057201" kindref="member">ens160_validity_flags_t</ref> *const</type>
          <declname>state</declname>
        </param>
        <briefdescription>
<para>Read validity flag status, device status and signal rating, from ENS160. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>ENS160 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">state</parametername>
</parameternamelist>
<parameterdescription>
<para>ENS160 validity flag status. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ens160/include/ens160.h" line="398" column="11" bodyfile="components/peripherals/i2c/esp_ens160/ens160.c" bodystart="682" bodyend="695" declfile="components/peripherals/i2c/esp_ens160/include/ens160.h" declline="398" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gab84c4ef88ae9937d2efc4f7469b39b87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ens160_get_error_status</definition>
        <argsstring>(ens160_handle_t handle, bool *const error)</argsstring>
        <name>ens160_get_error_status</name>
        <param>
          <type><ref refid="group__drivers_1gafdcb747a70da714654218fbcd1d1e2c9" kindref="member">ens160_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>bool *const</type>
          <declname>error</declname>
        </param>
        <briefdescription>
<para>Read error status from ENS160. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>ENS160 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">error</parametername>
</parameternamelist>
<parameterdescription>
<para>ENS160 error status, true indicates an error. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ens160/include/ens160.h" line="407" column="11" bodyfile="components/peripherals/i2c/esp_ens160/ens160.c" bodystart="697" bodyend="710" declfile="components/peripherals/i2c/esp_ens160/include/ens160.h" declline="407" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga7a8c95d5dd4643a64269fc03f9462651" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ens160_get_mode_status</definition>
        <argsstring>(ens160_handle_t handle, bool *const mode)</argsstring>
        <name>ens160_get_mode_status</name>
        <param>
          <type><ref refid="group__drivers_1gafdcb747a70da714654218fbcd1d1e2c9" kindref="member">ens160_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>bool *const</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Read operating mode status from ENS160. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>ENS160 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">mode</parametername>
</parameternamelist>
<parameterdescription>
<para>ENS160 operating mode status, true indicates an operating mode is running. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ens160/include/ens160.h" line="416" column="11" bodyfile="components/peripherals/i2c/esp_ens160/ens160.c" bodystart="712" bodyend="725" declfile="components/peripherals/i2c/esp_ens160/include/ens160.h" declline="416" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga540f3af9bfb6c3742f775de124efee09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ens160_get_status</definition>
        <argsstring>(ens160_handle_t handle, bool *const data_ready, bool *const gpr_data_ready, ens160_validity_flags_t *const state, bool *const error, bool *const mode)</argsstring>
        <name>ens160_get_status</name>
        <param>
          <type><ref refid="group__drivers_1gafdcb747a70da714654218fbcd1d1e2c9" kindref="member">ens160_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>bool *const</type>
          <declname>data_ready</declname>
        </param>
        <param>
          <type>bool *const</type>
          <declname>gpr_data_ready</declname>
        </param>
        <param>
          <type><ref refid="group__drivers_1gac81c26d5b704c609e33b6f4ba7057201" kindref="member">ens160_validity_flags_t</ref> *const</type>
          <declname>state</declname>
        </param>
        <param>
          <type>bool *const</type>
          <declname>error</declname>
        </param>
        <param>
          <type>bool *const</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Reads data ready, general purpose registers data ready, validity flag, and error status from ENS160. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>ENS160 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">data_ready</parametername>
</parameternamelist>
<parameterdescription>
<para>ENS160 data ready status. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">gpr_data_ready</parametername>
</parameternamelist>
<parameterdescription>
<para>ENS160 general purpose registers data ready status. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">state</parametername>
</parameternamelist>
<parameterdescription>
<para>ENS160 validity flag status. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">error</parametername>
</parameternamelist>
<parameterdescription>
<para>ENS160 error status. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">mode</parametername>
</parameternamelist>
<parameterdescription>
<para>ENS160 operating mode status. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ens160/include/ens160.h" line="429" column="11" bodyfile="components/peripherals/i2c/esp_ens160/ens160.c" bodystart="727" bodyend="744" declfile="components/peripherals/i2c/esp_ens160/include/ens160.h" declline="429" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gaf21d5703c00867c1eb297503d0518735" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ens160_get_compensation_factors</definition>
        <argsstring>(ens160_handle_t handle, float *const temperature, float *const humidity)</argsstring>
        <name>ens160_get_compensation_factors</name>
        <param>
          <type><ref refid="group__drivers_1gafdcb747a70da714654218fbcd1d1e2c9" kindref="member">ens160_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>float *const</type>
          <declname>temperature</declname>
        </param>
        <param>
          <type>float *const</type>
          <declname>humidity</declname>
        </param>
        <briefdescription>
<para>Reads temperature and humidity compensation factors from ENS160. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>ENS160 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>temperature</parametername>
</parameternamelist>
<parameterdescription>
<para>ENS160 temperature compensation in degrees celsius. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>humidity</parametername>
</parameternamelist>
<parameterdescription>
<para>ENS160 humidity compensation in percentage. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ens160/include/ens160.h" line="439" column="11" bodyfile="components/peripherals/i2c/esp_ens160/ens160.c" bodystart="746" bodyend="754" declfile="components/peripherals/i2c/esp_ens160/include/ens160.h" declline="439" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga252a99917dc015a7644c71fd217c4517" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ens160_set_compensation_factors</definition>
        <argsstring>(ens160_handle_t handle, const float temperature, const float humidity)</argsstring>
        <name>ens160_set_compensation_factors</name>
        <param>
          <type><ref refid="group__drivers_1gafdcb747a70da714654218fbcd1d1e2c9" kindref="member">ens160_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>temperature</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>humidity</declname>
        </param>
        <briefdescription>
<para>Writes temperature and humidity compensation factors to ENS160. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>ENS160 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>temperature</parametername>
</parameternamelist>
<parameterdescription>
<para>ENS160 temperature compensation in degrees celsius. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>humidity</parametername>
</parameternamelist>
<parameterdescription>
<para>ENS160 humidity compensation in percentage. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ens160/include/ens160.h" line="449" column="11" bodyfile="components/peripherals/i2c/esp_ens160/ens160.c" bodystart="756" bodyend="764" declfile="components/peripherals/i2c/esp_ens160/include/ens160.h" declline="449" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gab98f3065fa594a8fb14b0cd348b9b604" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ens160_enable_standard_mode</definition>
        <argsstring>(ens160_handle_t handle)</argsstring>
        <name>ens160_enable_standard_mode</name>
        <param>
          <type><ref refid="group__drivers_1gafdcb747a70da714654218fbcd1d1e2c9" kindref="member">ens160_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Enables standard operating mode to ENS160 to operate as a gas sensor and respond to commands. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>ENS160 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ens160/include/ens160.h" line="457" column="11" bodyfile="components/peripherals/i2c/esp_ens160/ens160.c" bodystart="766" bodyend="774" declfile="components/peripherals/i2c/esp_ens160/include/ens160.h" declline="457" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gad641eb06f6dd6361c18371143ae2048d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ens160_enable_idle_mode</definition>
        <argsstring>(ens160_handle_t handle)</argsstring>
        <name>ens160_enable_idle_mode</name>
        <param>
          <type><ref refid="group__drivers_1gafdcb747a70da714654218fbcd1d1e2c9" kindref="member">ens160_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Enables idle operating mode to ENS160 to respond to commands. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>ENS160 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ens160/include/ens160.h" line="465" column="11" bodyfile="components/peripherals/i2c/esp_ens160/ens160.c" bodystart="776" bodyend="784" declfile="components/peripherals/i2c/esp_ens160/include/ens160.h" declline="465" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga99ce58785ce63a71409c90def02c46be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ens160_enable_deep_sleep_mode</definition>
        <argsstring>(ens160_handle_t handle)</argsstring>
        <name>ens160_enable_deep_sleep_mode</name>
        <param>
          <type><ref refid="group__drivers_1gafdcb747a70da714654218fbcd1d1e2c9" kindref="member">ens160_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Enables deep sleep operating mode to ENS160. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The ENS160 will not respond to commands unless it is placed in idle or operational mode.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>ENS160 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ens160/include/ens160.h" line="475" column="11" bodyfile="components/peripherals/i2c/esp_ens160/ens160.c" bodystart="786" bodyend="794" declfile="components/peripherals/i2c/esp_ens160/include/ens160.h" declline="475" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga5442321bbbbc8b7288f72a07c01ba8b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ens160_reset</definition>
        <argsstring>(ens160_handle_t handle)</argsstring>
        <name>ens160_reset</name>
        <param>
          <type><ref refid="group__drivers_1gafdcb747a70da714654218fbcd1d1e2c9" kindref="member">ens160_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Issues soft-reset and initializes ENS160 to idle mode. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>ENS160 I2C device handle registers are initialized.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>ENS160 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ens160/include/ens160.h" line="485" column="11" bodyfile="components/peripherals/i2c/esp_ens160/ens160.c" bodystart="796" bodyend="831" declfile="components/peripherals/i2c/esp_ens160/include/ens160.h" declline="485" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga37a6760bf7c1f54d04ab1adfbcc1146c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ens160_remove</definition>
        <argsstring>(ens160_handle_t handle)</argsstring>
        <name>ens160_remove</name>
        <param>
          <type><ref refid="group__drivers_1gafdcb747a70da714654218fbcd1d1e2c9" kindref="member">ens160_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Removes an ENS160 device from master I2C bus. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>ENS160 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ens160/include/ens160.h" line="493" column="11" bodyfile="components/peripherals/i2c/esp_ens160/ens160.c" bodystart="833" bodyend="839" declfile="components/peripherals/i2c/esp_ens160/include/ens160.h" declline="493" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga40c349fa1fce998b90de2a9e14ed701d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ens160_delete</definition>
        <argsstring>(ens160_handle_t handle)</argsstring>
        <name>ens160_delete</name>
        <param>
          <type><ref refid="group__drivers_1gafdcb747a70da714654218fbcd1d1e2c9" kindref="member">ens160_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Removes an ENS160 device from master bus and frees handle. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>ENS160 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ens160/include/ens160.h" line="501" column="11" bodyfile="components/peripherals/i2c/esp_ens160/ens160.c" bodystart="841" bodyend="855" declfile="components/peripherals/i2c/esp_ens160/include/ens160.h" declline="501" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga4d2de4eb0b2febd66f4abd03c3d853ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__drivers_1ga160c5dbdb5e259518d2e997c49566e2b" kindref="member">ens160_aqi_uba_row_t</ref></type>
        <definition>ens160_aqi_uba_row_t ens160_aqi_index_to_definition</definition>
        <argsstring>(const ens160_aqi_uba_indexes_t index)</argsstring>
        <name>ens160_aqi_index_to_definition</name>
        <param>
          <type>const <ref refid="group__drivers_1ga60912896ba51c5b7836e2e6705362d87" kindref="member">ens160_aqi_uba_indexes_t</ref></type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Decodes ENS160 air quality index to a uba definition row. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">index</parametername>
</parameternamelist>
<parameterdescription>
<para>ENS160 air quality index of the uba. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>i2c_ens160_aqi_uba_row_t air quality index of the uba definition row on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ens160/include/ens160.h" line="509" column="22" bodyfile="components/peripherals/i2c/esp_ens160/ens160.c" bodystart="857" bodyend="866" declfile="components/peripherals/i2c/esp_ens160/include/ens160.h" declline="509" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga0b117eabf6020f6022f158f40a986828" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * ens160_get_fw_version</definition>
        <argsstring>(void)</argsstring>
        <name>ens160_get_fw_version</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Converts ENS160 firmware version numbers (major, minor, patch, build) into a string. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>char* ENS160 firmware version as a string that is formatted as X.X.X (e.g. 4.0.0). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ens160/include/ens160.h" line="516" column="12" bodyfile="components/peripherals/i2c/esp_ens160/ens160.c" bodystart="868" bodyend="870" declfile="components/peripherals/i2c/esp_ens160/include/ens160.h" declline="516" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gabdc061a1dd5fc67a400eee28aa92991c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t ens160_get_fw_version_number</definition>
        <argsstring>(void)</argsstring>
        <name>ens160_get_fw_version_number</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Converts ENS160 firmware version numbers (major, minor, patch) into an integer value. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>int32_t ENS160 firmware version number. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ens160/include/ens160.h" line="523" column="9" bodyfile="components/peripherals/i2c/esp_ens160/ens160.c" bodystart="872" bodyend="874" declfile="components/peripherals/i2c/esp_ens160/include/ens160.h" declline="523" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga598773982b5b95887427e6ebf25fadc1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t hdc1080_get_serial_number_register</definition>
        <argsstring>(hdc1080_handle_t handle, uint64_t *const reg)</argsstring>
        <name>hdc1080_get_serial_number_register</name>
        <param>
          <type><ref refid="group__drivers_1gae7a6c4d039c3dca434589908c50186da" kindref="member">hdc1080_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>uint64_t *const</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Reads unique serial number register from HDC1080. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>HDC1080 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>HDC1080 serial number register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_hdc1080/include/hdc1080.h" line="193" column="11" bodyfile="components/peripherals/i2c/esp_hdc1080/hdc1080.c" bodystart="306" bodyend="318" declfile="components/peripherals/i2c/esp_hdc1080/include/hdc1080.h" declline="193" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gae0190c50b172c2215d2b69e8c6b31f9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t hdc1080_get_manufacturer_id_register</definition>
        <argsstring>(hdc1080_handle_t handle, uint16_t *const reg)</argsstring>
        <name>hdc1080_get_manufacturer_id_register</name>
        <param>
          <type><ref refid="group__drivers_1gae7a6c4d039c3dca434589908c50186da" kindref="member">hdc1080_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>uint16_t *const</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Reads manufacturer identifier register from HDC1080. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>HDC1080 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>HDC1080 manufacturer identifier register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_hdc1080/include/hdc1080.h" line="202" column="11" bodyfile="components/peripherals/i2c/esp_hdc1080/hdc1080.c" bodystart="320" bodyend="331" declfile="components/peripherals/i2c/esp_hdc1080/include/hdc1080.h" declline="202" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga0c580fea8f1a1557092369441b93657d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t hdc1080_get_device_id_register</definition>
        <argsstring>(hdc1080_handle_t handle, uint16_t *const reg)</argsstring>
        <name>hdc1080_get_device_id_register</name>
        <param>
          <type><ref refid="group__drivers_1gae7a6c4d039c3dca434589908c50186da" kindref="member">hdc1080_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>uint16_t *const</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Reads device identifier register from HDC1080. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>HDC1080 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>HDC1080 device identifier register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_hdc1080/include/hdc1080.h" line="211" column="11" bodyfile="components/peripherals/i2c/esp_hdc1080/hdc1080.c" bodystart="333" bodyend="344" declfile="components/peripherals/i2c/esp_hdc1080/include/hdc1080.h" declline="211" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gaf2dfc58fb1171d3d61f3d40ef43b4da2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t hdc1080_get_configuration_register</definition>
        <argsstring>(hdc1080_handle_t handle, hdc1080_configuration_register_t *const reg)</argsstring>
        <name>hdc1080_get_configuration_register</name>
        <param>
          <type><ref refid="group__drivers_1gae7a6c4d039c3dca434589908c50186da" kindref="member">hdc1080_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>hdc1080_configuration_register_t *const</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Reads configuration register from HDC1080. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>HDC1080 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>HDC1080 configuration register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_hdc1080/include/hdc1080.h" line="220" column="11" bodyfile="components/peripherals/i2c/esp_hdc1080/hdc1080.c" bodystart="346" bodyend="361" declfile="components/peripherals/i2c/esp_hdc1080/include/hdc1080.h" declline="220" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga960f5f63a539b9a280ba06f6049848cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t hdc1080_set_configuration_register</definition>
        <argsstring>(hdc1080_handle_t handle, const hdc1080_configuration_register_t reg)</argsstring>
        <name>hdc1080_set_configuration_register</name>
        <param>
          <type><ref refid="group__drivers_1gae7a6c4d039c3dca434589908c50186da" kindref="member">hdc1080_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const hdc1080_configuration_register_t</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Writes configuration register to HDC1080. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>HDC1080 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>HDC1080 configuration register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_hdc1080/include/hdc1080.h" line="229" column="11" bodyfile="components/peripherals/i2c/esp_hdc1080/hdc1080.c" bodystart="363" bodyend="381" declfile="components/peripherals/i2c/esp_hdc1080/include/hdc1080.h" declline="229" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga6a5911a91a065762df68d13b3eb9280f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t hdc1080_init</definition>
        <argsstring>(i2c_master_bus_handle_t master_handle, const hdc1080_config_t *hdc1080_config, hdc1080_handle_t *hdc1080_handle)</argsstring>
        <name>hdc1080_init</name>
        <param>
          <type>i2c_master_bus_handle_t</type>
          <declname>master_handle</declname>
        </param>
        <param>
          <type>const <ref refid="group__drivers_1ga7eaba97c9208eb971d02ddb6e51edf44" kindref="member">hdc1080_config_t</ref> *</type>
          <declname>hdc1080_config</declname>
        </param>
        <param>
          <type><ref refid="group__drivers_1gae7a6c4d039c3dca434589908c50186da" kindref="member">hdc1080_handle_t</ref> *</type>
          <declname>hdc1080_handle</declname>
        </param>
        <briefdescription>
<para>Initializes an HDC1080 device onto the I2C master bus. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">master_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>I2C master bus handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">hdc1080_config</parametername>
</parameternamelist>
<parameterdescription>
<para>HDC1080 device configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">hdc1080_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>HDC1080 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_hdc1080/include/hdc1080.h" line="239" column="11" bodyfile="components/peripherals/i2c/esp_hdc1080/hdc1080.c" bodystart="383" bodyend="440" declfile="components/peripherals/i2c/esp_hdc1080/include/hdc1080.h" declline="239" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga166fa70a9efe0894a6b035aab66dc0b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t hdc1080_get_measurement</definition>
        <argsstring>(hdc1080_handle_t handle, float *const temperature, float *const humidity)</argsstring>
        <name>hdc1080_get_measurement</name>
        <param>
          <type><ref refid="group__drivers_1gae7a6c4d039c3dca434589908c50186da" kindref="member">hdc1080_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>float *const</type>
          <declname>temperature</declname>
        </param>
        <param>
          <type>float *const</type>
          <declname>humidity</declname>
        </param>
        <briefdescription>
<para>Reads temperature and relative humidity from HDC1080. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>HDC1080 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">temperature</parametername>
</parameternamelist>
<parameterdescription>
<para>Temperature measurement in degrees Celsius. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">humidity</parametername>
</parameternamelist>
<parameterdescription>
<para>Relative humidity measurement in percentage. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_hdc1080/include/hdc1080.h" line="249" column="11" bodyfile="components/peripherals/i2c/esp_hdc1080/hdc1080.c" bodystart="442" bodyend="501" declfile="components/peripherals/i2c/esp_hdc1080/include/hdc1080.h" declline="249" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga21935580fd6cb5932eb5e26ba3902027" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t hdc1080_get_measurements</definition>
        <argsstring>(hdc1080_handle_t handle, float *const temperature, float *const humidity, float *const dewpoint)</argsstring>
        <name>hdc1080_get_measurements</name>
        <param>
          <type><ref refid="group__drivers_1gae7a6c4d039c3dca434589908c50186da" kindref="member">hdc1080_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>float *const</type>
          <declname>temperature</declname>
        </param>
        <param>
          <type>float *const</type>
          <declname>humidity</declname>
        </param>
        <param>
          <type>float *const</type>
          <declname>dewpoint</declname>
        </param>
        <briefdescription>
<para>Reads temperature, relative humidity, and dew-point from HDC1080. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>HDC1080 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">temperature</parametername>
</parameternamelist>
<parameterdescription>
<para>Temperature measurement in degrees Celsius. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">humidity</parametername>
</parameternamelist>
<parameterdescription>
<para>Relative humidity measurement in percentage. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">dewpoint</parametername>
</parameternamelist>
<parameterdescription>
<para>Calculated dewpoint in degrees Celsius. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_hdc1080/include/hdc1080.h" line="260" column="11" bodyfile="components/peripherals/i2c/esp_hdc1080/hdc1080.c" bodystart="503" bodyend="514" declfile="components/peripherals/i2c/esp_hdc1080/include/hdc1080.h" declline="260" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gaefa457fda281744e300573dc2f8432fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t hdc1080_enable_heater</definition>
        <argsstring>(hdc1080_handle_t handle)</argsstring>
        <name>hdc1080_enable_heater</name>
        <param>
          <type><ref refid="group__drivers_1gae7a6c4d039c3dca434589908c50186da" kindref="member">hdc1080_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Enables HDC1080 heater. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>HDC1080 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_hdc1080/include/hdc1080.h" line="268" column="11" bodyfile="components/peripherals/i2c/esp_hdc1080/hdc1080.c" bodystart="516" bodyend="532" declfile="components/peripherals/i2c/esp_hdc1080/include/hdc1080.h" declline="268" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga4e10cb9cebcf138c6fbc0a594833a314" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t hdc1080_disable_heater</definition>
        <argsstring>(hdc1080_handle_t handle)</argsstring>
        <name>hdc1080_disable_heater</name>
        <param>
          <type><ref refid="group__drivers_1gae7a6c4d039c3dca434589908c50186da" kindref="member">hdc1080_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Disables HDC1080 heater. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>HDC1080 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_hdc1080/include/hdc1080.h" line="276" column="11" bodyfile="components/peripherals/i2c/esp_hdc1080/hdc1080.c" bodystart="534" bodyend="550" declfile="components/peripherals/i2c/esp_hdc1080/include/hdc1080.h" declline="276" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga25b2ca82a8ce6cb8a7c57110e72129a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t hdc1080_get_temperature_resolution</definition>
        <argsstring>(hdc1080_handle_t handle, hdc1080_temperature_resolutions_t *const resolution)</argsstring>
        <name>hdc1080_get_temperature_resolution</name>
        <param>
          <type><ref refid="group__drivers_1gae7a6c4d039c3dca434589908c50186da" kindref="member">hdc1080_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="group__drivers_1ga778ae16b2d80f624217c3a1a9fa94cc8" kindref="member">hdc1080_temperature_resolutions_t</ref> *const</type>
          <declname>resolution</declname>
        </param>
        <briefdescription>
<para>Reads temperature measurement resolution from HDC1080. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>HDC1080 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">resolution</parametername>
</parameternamelist>
<parameterdescription>
<para>HDC1080 temperature measurement resolution setting. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_hdc1080/include/hdc1080.h" line="285" column="11" bodyfile="components/peripherals/i2c/esp_hdc1080/hdc1080.c" bodystart="552" bodyend="565" declfile="components/peripherals/i2c/esp_hdc1080/include/hdc1080.h" declline="285" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga654f37c4e3fcfeb443c361a27f99ad19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t hdc1080_set_temperature_resolution</definition>
        <argsstring>(hdc1080_handle_t handle, const hdc1080_temperature_resolutions_t resolution)</argsstring>
        <name>hdc1080_set_temperature_resolution</name>
        <param>
          <type><ref refid="group__drivers_1gae7a6c4d039c3dca434589908c50186da" kindref="member">hdc1080_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const <ref refid="group__drivers_1ga778ae16b2d80f624217c3a1a9fa94cc8" kindref="member">hdc1080_temperature_resolutions_t</ref></type>
          <declname>resolution</declname>
        </param>
        <briefdescription>
<para>Writes temperature measurement resolution to HDC1080. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>HDC1080 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">resolution</parametername>
</parameternamelist>
<parameterdescription>
<para>HDC1080 temperature measurement resolution setting. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_hdc1080/include/hdc1080.h" line="294" column="11" bodyfile="components/peripherals/i2c/esp_hdc1080/hdc1080.c" bodystart="567" bodyend="583" declfile="components/peripherals/i2c/esp_hdc1080/include/hdc1080.h" declline="294" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gae1b15dab767c8e06b0364a1c257366c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t hdc1080_get_humidity_resolution</definition>
        <argsstring>(hdc1080_handle_t handle, hdc1080_humidity_resolutions_t *const resolution)</argsstring>
        <name>hdc1080_get_humidity_resolution</name>
        <param>
          <type><ref refid="group__drivers_1gae7a6c4d039c3dca434589908c50186da" kindref="member">hdc1080_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="group__drivers_1gae67808de49aceb774fa76ef6f6277c5d" kindref="member">hdc1080_humidity_resolutions_t</ref> *const</type>
          <declname>resolution</declname>
        </param>
        <briefdescription>
<para>Reads relative humidity measurement resolution from HDC1080. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>HDC1080 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">resolution</parametername>
</parameternamelist>
<parameterdescription>
<para>HDC1080 relative humidity measurement resolution setting. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_hdc1080/include/hdc1080.h" line="303" column="11" bodyfile="components/peripherals/i2c/esp_hdc1080/hdc1080.c" bodystart="585" bodyend="598" declfile="components/peripherals/i2c/esp_hdc1080/include/hdc1080.h" declline="303" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga429a9d726fa78bbd9aa353a09dd9b0ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t hdc1080_set_humidity_resolution</definition>
        <argsstring>(hdc1080_handle_t handle, const hdc1080_humidity_resolutions_t resolution)</argsstring>
        <name>hdc1080_set_humidity_resolution</name>
        <param>
          <type><ref refid="group__drivers_1gae7a6c4d039c3dca434589908c50186da" kindref="member">hdc1080_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const <ref refid="group__drivers_1gae67808de49aceb774fa76ef6f6277c5d" kindref="member">hdc1080_humidity_resolutions_t</ref></type>
          <declname>resolution</declname>
        </param>
        <briefdescription>
<para>Writes relative humidity measurement resolution to HDC1080. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>HDC1080 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">resolution</parametername>
</parameternamelist>
<parameterdescription>
<para>HDC1080 relative humidity measurement resolution setting. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_hdc1080/include/hdc1080.h" line="312" column="11" bodyfile="components/peripherals/i2c/esp_hdc1080/hdc1080.c" bodystart="600" bodyend="616" declfile="components/peripherals/i2c/esp_hdc1080/include/hdc1080.h" declline="312" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga92ae9bbe2ebea4f9cf9be1bb44daaf97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t hdc1080_reset</definition>
        <argsstring>(hdc1080_handle_t handle)</argsstring>
        <name>hdc1080_reset</name>
        <param>
          <type><ref refid="group__drivers_1gae7a6c4d039c3dca434589908c50186da" kindref="member">hdc1080_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Issues soft-reset to HDC1080. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>HDC1080 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_hdc1080/include/hdc1080.h" line="320" column="11" bodyfile="components/peripherals/i2c/esp_hdc1080/hdc1080.c" bodystart="618" bodyend="640" declfile="components/peripherals/i2c/esp_hdc1080/include/hdc1080.h" declline="320" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga5207bde071a956af28f94cec74af246e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t hdc1080_remove</definition>
        <argsstring>(hdc1080_handle_t handle)</argsstring>
        <name>hdc1080_remove</name>
        <param>
          <type><ref refid="group__drivers_1gae7a6c4d039c3dca434589908c50186da" kindref="member">hdc1080_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Removes an HDC1080 device from master I2C bus. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>HDC1080 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_hdc1080/include/hdc1080.h" line="328" column="11" bodyfile="components/peripherals/i2c/esp_hdc1080/hdc1080.c" bodystart="642" bodyend="647" declfile="components/peripherals/i2c/esp_hdc1080/include/hdc1080.h" declline="328" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga77348c1804725d85c11559113fe8f984" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t hdc1080_delete</definition>
        <argsstring>(hdc1080_handle_t handle)</argsstring>
        <name>hdc1080_delete</name>
        <param>
          <type><ref refid="group__drivers_1gae7a6c4d039c3dca434589908c50186da" kindref="member">hdc1080_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Removes an HDC1080 device from master bus and frees handle. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>HDC1080 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_hdc1080/include/hdc1080.h" line="336" column="11" bodyfile="components/peripherals/i2c/esp_hdc1080/hdc1080.c" bodystart="649" bodyend="663" declfile="components/peripherals/i2c/esp_hdc1080/include/hdc1080.h" declline="336" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga5c7f0e308b22e2b0478e40200dd965f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * hdc1080_get_fw_version</definition>
        <argsstring>(void)</argsstring>
        <name>hdc1080_get_fw_version</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Converts HDC1080 firmware version numbers (major, minor, patch) into a string. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>char* HDC1080 firmware version as a string that is formatted as X.X.X (e.g. 4.0.0). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_hdc1080/include/hdc1080.h" line="343" column="12" bodyfile="components/peripherals/i2c/esp_hdc1080/hdc1080.c" bodystart="665" bodyend="667" declfile="components/peripherals/i2c/esp_hdc1080/include/hdc1080.h" declline="343" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gad4e28434f1ab602f3a07c5372fa07594" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t hdc1080_get_fw_version_number</definition>
        <argsstring>(void)</argsstring>
        <name>hdc1080_get_fw_version_number</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Converts HDC1080 firmware version numbers (major, minor, patch) into an integer value. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>int32_t HDC1080 firmware version number. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_hdc1080/include/hdc1080.h" line="350" column="9" bodyfile="components/peripherals/i2c/esp_hdc1080/hdc1080.c" bodystart="669" bodyend="671" declfile="components/peripherals/i2c/esp_hdc1080/include/hdc1080.h" declline="350" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga713f54b9cbdadd2feb2b2a9746fe196b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t hmc5883l_get_configuration1_register</definition>
        <argsstring>(hmc5883l_handle_t handle, hmc5883l_configuration1_register_t *const reg)</argsstring>
        <name>hmc5883l_get_configuration1_register</name>
        <param>
          <type><ref refid="group__drivers_1gaf0841944691d27c897f212f90ebc9cb0" kindref="member">hmc5883l_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>hmc5883l_configuration1_register_t *const</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Reads configuration 1 register from HMC5883L. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>HMC5883L device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>HMC5883L configuration 1 register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_hmc5883l/include/hmc5883l.h" line="270" column="11" bodyfile="components/peripherals/i2c/esp_hmc5883l/hmc5883l.c" bodystart="188" bodyend="199" declfile="components/peripherals/i2c/esp_hmc5883l/include/hmc5883l.h" declline="270" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga2bd83c7ceee144c89eb2427fd5c3a9cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t hmc5883l_set_configuration1_register</definition>
        <argsstring>(hmc5883l_handle_t handle, const hmc5883l_configuration1_register_t reg)</argsstring>
        <name>hmc5883l_set_configuration1_register</name>
        <param>
          <type><ref refid="group__drivers_1gaf0841944691d27c897f212f90ebc9cb0" kindref="member">hmc5883l_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const hmc5883l_configuration1_register_t</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Writes configuration 1 register to HMC5883L. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>HMC5883L device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>HMC5883L configuration 1 register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_hmc5883l/include/hmc5883l.h" line="279" column="11" bodyfile="components/peripherals/i2c/esp_hmc5883l/hmc5883l.c" bodystart="201" bodyend="218" declfile="components/peripherals/i2c/esp_hmc5883l/include/hmc5883l.h" declline="279" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gafea2b4918336d1f6e644948fc84143fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t hmc5883l_get_configuration2_register</definition>
        <argsstring>(hmc5883l_handle_t handle, hmc5883l_configuration2_register_t *const reg)</argsstring>
        <name>hmc5883l_get_configuration2_register</name>
        <param>
          <type><ref refid="group__drivers_1gaf0841944691d27c897f212f90ebc9cb0" kindref="member">hmc5883l_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>hmc5883l_configuration2_register_t *const</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Reads configuration 2 register from HMC5883L. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>HMC5883L device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>HMC5883L configuration 2 register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_hmc5883l/include/hmc5883l.h" line="288" column="11" bodyfile="components/peripherals/i2c/esp_hmc5883l/hmc5883l.c" bodystart="220" bodyend="231" declfile="components/peripherals/i2c/esp_hmc5883l/include/hmc5883l.h" declline="288" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga27f2f1cca3fdb54735a86e41d2fb8ff2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t hmc5883l_set_configuration2_register</definition>
        <argsstring>(hmc5883l_handle_t handle, const hmc5883l_configuration2_register_t reg)</argsstring>
        <name>hmc5883l_set_configuration2_register</name>
        <param>
          <type><ref refid="group__drivers_1gaf0841944691d27c897f212f90ebc9cb0" kindref="member">hmc5883l_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const hmc5883l_configuration2_register_t</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Writes configuration 2 register to HMC5883L. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>HMC5883L device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>HMC5883L configuration 2 register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_hmc5883l/include/hmc5883l.h" line="297" column="11" bodyfile="components/peripherals/i2c/esp_hmc5883l/hmc5883l.c" bodystart="233" bodyend="250" declfile="components/peripherals/i2c/esp_hmc5883l/include/hmc5883l.h" declline="297" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga618765a90a170c921b3c889b280d3e82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t hmc5883l_get_mode_register</definition>
        <argsstring>(hmc5883l_handle_t handle, hmc5883l_mode_register_t *const reg)</argsstring>
        <name>hmc5883l_get_mode_register</name>
        <param>
          <type><ref refid="group__drivers_1gaf0841944691d27c897f212f90ebc9cb0" kindref="member">hmc5883l_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>hmc5883l_mode_register_t *const</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Reads mode register from HMC5883L. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>HMC5883L device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>HMC5883L mode register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_hmc5883l/include/hmc5883l.h" line="306" column="11" bodyfile="components/peripherals/i2c/esp_hmc5883l/hmc5883l.c" bodystart="252" bodyend="263" declfile="components/peripherals/i2c/esp_hmc5883l/include/hmc5883l.h" declline="306" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gae4451b280bd7f5f547866cd50bec0aab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t hmc5883l_set_mode_register</definition>
        <argsstring>(hmc5883l_handle_t handle, const hmc5883l_mode_register_t reg)</argsstring>
        <name>hmc5883l_set_mode_register</name>
        <param>
          <type><ref refid="group__drivers_1gaf0841944691d27c897f212f90ebc9cb0" kindref="member">hmc5883l_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const hmc5883l_mode_register_t</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Writes mode register to HMC5883L. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>HMC5883L device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>HMC5883L mode register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_hmc5883l/include/hmc5883l.h" line="315" column="11" bodyfile="components/peripherals/i2c/esp_hmc5883l/hmc5883l.c" bodystart="265" bodyend="279" declfile="components/peripherals/i2c/esp_hmc5883l/include/hmc5883l.h" declline="315" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gace3b5584b483339935245bb5aae9611b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t hmc5883l_get_status_register</definition>
        <argsstring>(hmc5883l_handle_t handle, hmc5883l_status_register_t *const reg)</argsstring>
        <name>hmc5883l_get_status_register</name>
        <param>
          <type><ref refid="group__drivers_1gaf0841944691d27c897f212f90ebc9cb0" kindref="member">hmc5883l_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>hmc5883l_status_register_t *const</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Reads status register from HMC5883L. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>HMC5883L device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>HMC5883L status register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_hmc5883l/include/hmc5883l.h" line="324" column="11" bodyfile="components/peripherals/i2c/esp_hmc5883l/hmc5883l.c" bodystart="281" bodyend="292" declfile="components/peripherals/i2c/esp_hmc5883l/include/hmc5883l.h" declline="324" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gab64e2db861e2d8fa17c72a5c75864a6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t hmc5883l_init</definition>
        <argsstring>(i2c_master_bus_handle_t master_handle, const hmc5883l_config_t *hmc5883l_config, hmc5883l_handle_t *hmc5883l_handle)</argsstring>
        <name>hmc5883l_init</name>
        <param>
          <type>i2c_master_bus_handle_t</type>
          <declname>master_handle</declname>
        </param>
        <param>
          <type>const <ref refid="group__drivers_1ga8f35b67fc189ae7fc9aeb20cb5736dc8" kindref="member">hmc5883l_config_t</ref> *</type>
          <declname>hmc5883l_config</declname>
        </param>
        <param>
          <type><ref refid="group__drivers_1gaf0841944691d27c897f212f90ebc9cb0" kindref="member">hmc5883l_handle_t</ref> *</type>
          <declname>hmc5883l_handle</declname>
        </param>
        <briefdescription>
<para>Initializes an HMC5883L device onto the I2C master bus. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">master_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>I2C master bus handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">hmc5883l_config</parametername>
</parameternamelist>
<parameterdescription>
<para>HMC5883L device configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">hmc5883l_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>HMC5883L device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_hmc5883l/include/hmc5883l.h" line="334" column="11" bodyfile="components/peripherals/i2c/esp_hmc5883l/hmc5883l.c" bodystart="294" bodyend="379" declfile="components/peripherals/i2c/esp_hmc5883l/include/hmc5883l.h" declline="334" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga15975e0d220e55d8046b081572dc1182" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t hmc5883l_get_fixed_magnetic_axes</definition>
        <argsstring>(hmc5883l_handle_t handle, hmc5883l_axes_data_t *const axes_data)</argsstring>
        <name>hmc5883l_get_fixed_magnetic_axes</name>
        <param>
          <type><ref refid="group__drivers_1gaf0841944691d27c897f212f90ebc9cb0" kindref="member">hmc5883l_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="group__drivers_1ga735831537ec6082a7ebdf2333153d5c0" kindref="member">hmc5883l_axes_data_t</ref> *const</type>
          <declname>axes_data</declname>
        </param>
        <briefdescription>
<para>Reads uncompensated axes measurements from HMC5883L. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>HMC5883L device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>axes_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Uncompensated axes measurements (x, y, and z axes). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_hmc5883l/include/hmc5883l.h" line="343" column="11" bodyfile="components/peripherals/i2c/esp_hmc5883l/hmc5883l.c" bodystart="381" bodyend="420" declfile="components/peripherals/i2c/esp_hmc5883l/include/hmc5883l.h" declline="343" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga3c8adfcc5acd2dc42b379ea3bc36c3e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t hmc5883l_get_magnetic_axes</definition>
        <argsstring>(hmc5883l_handle_t handle, hmc5883l_magnetic_axes_data_t *const axes_data)</argsstring>
        <name>hmc5883l_get_magnetic_axes</name>
        <param>
          <type><ref refid="group__drivers_1gaf0841944691d27c897f212f90ebc9cb0" kindref="member">hmc5883l_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="group__drivers_1ga350add29bf7765c4323eb78a9a42cbfe" kindref="member">hmc5883l_magnetic_axes_data_t</ref> *const</type>
          <declname>axes_data</declname>
        </param>
        <briefdescription>
<para>Reads compensated magnetic axes measurements from HMC5883L. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>HMC5883L device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>axes_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Compensated magnetic axes measurements (x, y, and z axes). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_hmc5883l/include/hmc5883l.h" line="352" column="11" bodyfile="components/peripherals/i2c/esp_hmc5883l/hmc5883l.c" bodystart="422" bodyend="468" declfile="components/peripherals/i2c/esp_hmc5883l/include/hmc5883l.h" declline="352" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gaa9768ccda3b330e94d35f3b93de52b96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t hmc5883l_get_calibrated_offsets</definition>
        <argsstring>(hmc5883l_handle_t handle, const hmc5883l_calibration_options_t option)</argsstring>
        <name>hmc5883l_get_calibrated_offsets</name>
        <param>
          <type><ref refid="group__drivers_1gaf0841944691d27c897f212f90ebc9cb0" kindref="member">hmc5883l_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const <ref refid="group__drivers_1gaefa61370e32ccb29c52f64cf90d66568" kindref="member">hmc5883l_calibration_options_t</ref></type>
          <declname>option</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_hmc5883l/include/hmc5883l.h" line="357" column="11" bodyfile="components/peripherals/i2c/esp_hmc5883l/hmc5883l.c" bodystart="472" bodyend="657" declfile="components/peripherals/i2c/esp_hmc5883l/include/hmc5883l.h" declline="357" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga6f007b04073e182970429d360634a788" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t hmc5883l_get_data_status</definition>
        <argsstring>(hmc5883l_handle_t handle, bool *const ready, bool *const locked)</argsstring>
        <name>hmc5883l_get_data_status</name>
        <param>
          <type><ref refid="group__drivers_1gaf0841944691d27c897f212f90ebc9cb0" kindref="member">hmc5883l_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>bool *const</type>
          <declname>ready</declname>
        </param>
        <param>
          <type>bool *const</type>
          <declname>locked</declname>
        </param>
        <briefdescription>
<para>Reads data status from HMC5883L. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>HMC5883L device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ready</parametername>
</parameternamelist>
<parameterdescription>
<para>HMC5883L data is ready. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>locked</parametername>
</parameternamelist>
<parameterdescription>
<para>HMC5883L data is locked. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_hmc5883l/include/hmc5883l.h" line="368" column="11" bodyfile="components/peripherals/i2c/esp_hmc5883l/hmc5883l.c" bodystart="661" bodyend="675" declfile="components/peripherals/i2c/esp_hmc5883l/include/hmc5883l.h" declline="368" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gaa7b69f2df4dacc367ad0bfc905a90fdc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t hmc5883l_get_mode</definition>
        <argsstring>(hmc5883l_handle_t handle, hmc5883l_modes_t *const mode)</argsstring>
        <name>hmc5883l_get_mode</name>
        <param>
          <type><ref refid="group__drivers_1gaf0841944691d27c897f212f90ebc9cb0" kindref="member">hmc5883l_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="group__drivers_1ga227eea47f9b9be8f323edf19cbd31cc3" kindref="member">hmc5883l_modes_t</ref> *const</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Reads operating mode setting from HMC5883L. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>HMC5883L device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>HMC5883L operating mode setting. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_hmc5883l/include/hmc5883l.h" line="378" column="11" bodyfile="components/peripherals/i2c/esp_hmc5883l/hmc5883l.c" bodystart="677" bodyend="690" declfile="components/peripherals/i2c/esp_hmc5883l/include/hmc5883l.h" declline="378" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gab3e81fd90d8fbfef290d18636dfcecc7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t hmc5883l_set_mode</definition>
        <argsstring>(hmc5883l_handle_t handle, const hmc5883l_modes_t mode)</argsstring>
        <name>hmc5883l_set_mode</name>
        <param>
          <type><ref refid="group__drivers_1gaf0841944691d27c897f212f90ebc9cb0" kindref="member">hmc5883l_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const <ref refid="group__drivers_1ga227eea47f9b9be8f323edf19cbd31cc3" kindref="member">hmc5883l_modes_t</ref></type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Writes operating mode setting to HMC5883L. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>HMC5883L device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>HMC5883L operating mode setting. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_hmc5883l/include/hmc5883l.h" line="386" column="11" bodyfile="components/peripherals/i2c/esp_hmc5883l/hmc5883l.c" bodystart="692" bodyend="708" declfile="components/peripherals/i2c/esp_hmc5883l/include/hmc5883l.h" declline="386" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gab1e00f8b1c41cd5e51ea27b237565b90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t hmc5883l_get_samples_averaged</definition>
        <argsstring>(hmc5883l_handle_t handle, hmc5883l_sample_averages_t *const sample)</argsstring>
        <name>hmc5883l_get_samples_averaged</name>
        <param>
          <type><ref refid="group__drivers_1gaf0841944691d27c897f212f90ebc9cb0" kindref="member">hmc5883l_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="group__drivers_1ga3a8535b0ae0bbcd4791d1ea82b2c7d95" kindref="member">hmc5883l_sample_averages_t</ref> *const</type>
          <declname>sample</declname>
        </param>
        <briefdescription>
<para>Reads samples averaged setting from HMC5883L. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>HMC5883L device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sample</parametername>
</parameternamelist>
<parameterdescription>
<para>HMC5883L samples averaged setting. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_hmc5883l/include/hmc5883l.h" line="395" column="11" bodyfile="components/peripherals/i2c/esp_hmc5883l/hmc5883l.c" bodystart="710" bodyend="723" declfile="components/peripherals/i2c/esp_hmc5883l/include/hmc5883l.h" declline="395" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga161bf8f4f20408788ad69df0d45f442b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t hmc5883l_set_samples_averaged</definition>
        <argsstring>(hmc5883l_handle_t handle, const hmc5883l_sample_averages_t sample)</argsstring>
        <name>hmc5883l_set_samples_averaged</name>
        <param>
          <type><ref refid="group__drivers_1gaf0841944691d27c897f212f90ebc9cb0" kindref="member">hmc5883l_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const <ref refid="group__drivers_1ga3a8535b0ae0bbcd4791d1ea82b2c7d95" kindref="member">hmc5883l_sample_averages_t</ref></type>
          <declname>sample</declname>
        </param>
        <briefdescription>
<para>Writes samples averaged setting to HMC5883L. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>HMC5883L device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sample</parametername>
</parameternamelist>
<parameterdescription>
<para>HMC5883L samples averaged setting. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_hmc5883l/include/hmc5883l.h" line="404" column="11" bodyfile="components/peripherals/i2c/esp_hmc5883l/hmc5883l.c" bodystart="725" bodyend="741" declfile="components/peripherals/i2c/esp_hmc5883l/include/hmc5883l.h" declline="404" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gab5131a11b9f9e12f6929e02932a00f22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t hmc5883l_get_data_rate</definition>
        <argsstring>(hmc5883l_handle_t handle, hmc5883l_data_rates_t *const rate)</argsstring>
        <name>hmc5883l_get_data_rate</name>
        <param>
          <type><ref refid="group__drivers_1gaf0841944691d27c897f212f90ebc9cb0" kindref="member">hmc5883l_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="group__drivers_1ga599171517024a28b3792e0fd83ca90b6" kindref="member">hmc5883l_data_rates_t</ref> *const</type>
          <declname>rate</declname>
        </param>
        <briefdescription>
<para>Reads data rate setting from HMC5883L. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>HMC5883L device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rate</parametername>
</parameternamelist>
<parameterdescription>
<para>HMC5883L data rate setting. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_hmc5883l/include/hmc5883l.h" line="413" column="11" bodyfile="components/peripherals/i2c/esp_hmc5883l/hmc5883l.c" bodystart="743" bodyend="756" declfile="components/peripherals/i2c/esp_hmc5883l/include/hmc5883l.h" declline="413" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gac707eaa52efffa364e05024f2088fd53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t hmc5883l_set_data_rate</definition>
        <argsstring>(hmc5883l_handle_t handle, const hmc5883l_data_rates_t rate)</argsstring>
        <name>hmc5883l_set_data_rate</name>
        <param>
          <type><ref refid="group__drivers_1gaf0841944691d27c897f212f90ebc9cb0" kindref="member">hmc5883l_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const <ref refid="group__drivers_1ga599171517024a28b3792e0fd83ca90b6" kindref="member">hmc5883l_data_rates_t</ref></type>
          <declname>rate</declname>
        </param>
        <briefdescription>
<para>Writes data rate setting to HMC5883L. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>HMC5883L device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rate</parametername>
</parameternamelist>
<parameterdescription>
<para>HMC5883L data rate setting. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_hmc5883l/include/hmc5883l.h" line="422" column="11" bodyfile="components/peripherals/i2c/esp_hmc5883l/hmc5883l.c" bodystart="758" bodyend="774" declfile="components/peripherals/i2c/esp_hmc5883l/include/hmc5883l.h" declline="422" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga63fbd882f5b97ef208f7fcbfa18df1dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t hmc5883l_get_bias</definition>
        <argsstring>(hmc5883l_handle_t handle, hmc5883l_biases_t *const bias)</argsstring>
        <name>hmc5883l_get_bias</name>
        <param>
          <type><ref refid="group__drivers_1gaf0841944691d27c897f212f90ebc9cb0" kindref="member">hmc5883l_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="group__drivers_1gad941291c3f369dcacd94d21562a79264" kindref="member">hmc5883l_biases_t</ref> *const</type>
          <declname>bias</declname>
        </param>
        <briefdescription>
<para>Reads measurement mode bias setting from HMC5883L. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>HMC5883L device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bias</parametername>
</parameternamelist>
<parameterdescription>
<para>HMC5883L measurement mode bias setting. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_hmc5883l/include/hmc5883l.h" line="431" column="11" bodyfile="components/peripherals/i2c/esp_hmc5883l/hmc5883l.c" bodystart="776" bodyend="789" declfile="components/peripherals/i2c/esp_hmc5883l/include/hmc5883l.h" declline="431" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gace4d5447e31fb068d09b48c3781515e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t hmc5883l_set_bias</definition>
        <argsstring>(hmc5883l_handle_t handle, const hmc5883l_biases_t bias)</argsstring>
        <name>hmc5883l_set_bias</name>
        <param>
          <type><ref refid="group__drivers_1gaf0841944691d27c897f212f90ebc9cb0" kindref="member">hmc5883l_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const <ref refid="group__drivers_1gad941291c3f369dcacd94d21562a79264" kindref="member">hmc5883l_biases_t</ref></type>
          <declname>bias</declname>
        </param>
        <briefdescription>
<para>Writes measurement mode bias setting to HMC5883L. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>HMC5883L device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bias</parametername>
</parameternamelist>
<parameterdescription>
<para>HMC5883L measurement mode bias setting. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_hmc5883l/include/hmc5883l.h" line="440" column="11" bodyfile="components/peripherals/i2c/esp_hmc5883l/hmc5883l.c" bodystart="791" bodyend="807" declfile="components/peripherals/i2c/esp_hmc5883l/include/hmc5883l.h" declline="440" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga79c3f7b76e44c32e900a5cf7439ecfd1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t hmc5883l_get_gain</definition>
        <argsstring>(hmc5883l_handle_t handle, hmc5883l_gains_t *const gain)</argsstring>
        <name>hmc5883l_get_gain</name>
        <param>
          <type><ref refid="group__drivers_1gaf0841944691d27c897f212f90ebc9cb0" kindref="member">hmc5883l_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="group__drivers_1ga3cc0b9a961b1f08dde6a46499afb1235" kindref="member">hmc5883l_gains_t</ref> *const</type>
          <declname>gain</declname>
        </param>
        <briefdescription>
<para>Reads gain setting from HMC5883L. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>HMC5883L device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gain</parametername>
</parameternamelist>
<parameterdescription>
<para>HMC5883L gain setting. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_hmc5883l/include/hmc5883l.h" line="449" column="11" bodyfile="components/peripherals/i2c/esp_hmc5883l/hmc5883l.c" bodystart="809" bodyend="822" declfile="components/peripherals/i2c/esp_hmc5883l/include/hmc5883l.h" declline="449" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gaee5583e67bbf4ff99b3f7ba7f80cf458" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t hmc5883l_set_gain</definition>
        <argsstring>(hmc5883l_handle_t handle, const hmc5883l_gains_t gain)</argsstring>
        <name>hmc5883l_set_gain</name>
        <param>
          <type><ref refid="group__drivers_1gaf0841944691d27c897f212f90ebc9cb0" kindref="member">hmc5883l_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const <ref refid="group__drivers_1ga3cc0b9a961b1f08dde6a46499afb1235" kindref="member">hmc5883l_gains_t</ref></type>
          <declname>gain</declname>
        </param>
        <briefdescription>
<para>Writes gain setting to HMC5883L. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>HMC5883L device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gain</parametername>
</parameternamelist>
<parameterdescription>
<para>HMC5883L gain setting. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_hmc5883l/include/hmc5883l.h" line="458" column="11" bodyfile="components/peripherals/i2c/esp_hmc5883l/hmc5883l.c" bodystart="824" bodyend="840" declfile="components/peripherals/i2c/esp_hmc5883l/include/hmc5883l.h" declline="458" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga5f459d0268b75e02c6a4ddd2aa4d80f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t hmc5883l_get_gain_sensitivity</definition>
        <argsstring>(hmc5883l_handle_t handle, float *const sensitivity)</argsstring>
        <name>hmc5883l_get_gain_sensitivity</name>
        <param>
          <type><ref refid="group__drivers_1gaf0841944691d27c897f212f90ebc9cb0" kindref="member">hmc5883l_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>float *const</type>
          <declname>sensitivity</declname>
        </param>
        <briefdescription>
<para>Reads gain sensitivity setting from HMC5883L. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>HMC5883L device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sensitivity</parametername>
</parameternamelist>
<parameterdescription>
<para>HMC5883L gain sensitivity setting. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_hmc5883l/include/hmc5883l.h" line="467" column="11" bodyfile="components/peripherals/i2c/esp_hmc5883l/hmc5883l.c" bodystart="842" bodyend="855" declfile="components/peripherals/i2c/esp_hmc5883l/include/hmc5883l.h" declline="467" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gac8f3908f11fa7d40e65cfd233f58a3d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t hmc5883l_remove</definition>
        <argsstring>(hmc5883l_handle_t handle)</argsstring>
        <name>hmc5883l_remove</name>
        <param>
          <type><ref refid="group__drivers_1gaf0841944691d27c897f212f90ebc9cb0" kindref="member">hmc5883l_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Removes an HMC5883L device from master bus. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>HMC5883L device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_hmc5883l/include/hmc5883l.h" line="475" column="11" bodyfile="components/peripherals/i2c/esp_hmc5883l/hmc5883l.c" bodystart="857" bodyend="862" declfile="components/peripherals/i2c/esp_hmc5883l/include/hmc5883l.h" declline="475" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga5843169d9ec7c6f48fae55240a563644" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t hmc5883l_delete</definition>
        <argsstring>(hmc5883l_handle_t handle)</argsstring>
        <name>hmc5883l_delete</name>
        <param>
          <type><ref refid="group__drivers_1gaf0841944691d27c897f212f90ebc9cb0" kindref="member">hmc5883l_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Removes an HMC5883L device from master bus and frees handle. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>HMC5883L device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_hmc5883l/include/hmc5883l.h" line="483" column="11" bodyfile="components/peripherals/i2c/esp_hmc5883l/hmc5883l.c" bodystart="864" bodyend="878" declfile="components/peripherals/i2c/esp_hmc5883l/include/hmc5883l.h" declline="483" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga2fd6c304896972c9be20325b8e518dd9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * hmc5883l_get_fw_version</definition>
        <argsstring>(void)</argsstring>
        <name>hmc5883l_get_fw_version</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Converts HMC5883L firmware version numbers (major, minor, patch, build) into a string. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>char* HMC5883L firmware version as a string that is formatted as X.X.X (e.g. 4.0.0). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_hmc5883l/include/hmc5883l.h" line="490" column="12" bodyfile="components/peripherals/i2c/esp_hmc5883l/hmc5883l.c" bodystart="880" bodyend="882" declfile="components/peripherals/i2c/esp_hmc5883l/include/hmc5883l.h" declline="490" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga179c8bb8c757bfa843836d05abde1b7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t hmc5883l_get_fw_version_number</definition>
        <argsstring>(void)</argsstring>
        <name>hmc5883l_get_fw_version_number</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Converts HMC5883L firmware version numbers (major, minor, patch) into an integer value. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>int32_t HMC5883L firmware version number. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_hmc5883l/include/hmc5883l.h" line="497" column="9" bodyfile="components/peripherals/i2c/esp_hmc5883l/hmc5883l.c" bodystart="884" bodyend="886" declfile="components/peripherals/i2c/esp_hmc5883l/include/hmc5883l.h" declline="497" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga874bf54050809918410d24a7716ab49d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ina226_get_configuration_register</definition>
        <argsstring>(ina226_handle_t handle, ina226_config_register_t *const reg)</argsstring>
        <name>ina226_get_configuration_register</name>
        <param>
          <type><ref refid="group__drivers_1ga3901c989e3581b1e9aec926f6c1a6bcc" kindref="member">ina226_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>ina226_config_register_t *const</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Reads the configuration register from the INA226. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>INA226 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reg</parametername>
</parameternamelist>
<parameterdescription>
<para>INA226 configuration register </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ina226/include/ina226.h" line="239" column="11" bodyfile="components/peripherals/i2c/esp_ina226/ina226.c" bodystart="134" bodyend="149" declfile="components/peripherals/i2c/esp_ina226/include/ina226.h" declline="239" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gae437da62262dfe72003a49af0837fca3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ina226_set_configuration_register</definition>
        <argsstring>(ina226_handle_t handle, const ina226_config_register_t reg)</argsstring>
        <name>ina226_set_configuration_register</name>
        <param>
          <type><ref refid="group__drivers_1ga3901c989e3581b1e9aec926f6c1a6bcc" kindref="member">ina226_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const ina226_config_register_t</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Writes the configuration register to the INA226. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>INA226 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reg</parametername>
</parameternamelist>
<parameterdescription>
<para>INA226 configuration register </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ina226/include/ina226.h" line="248" column="11" bodyfile="components/peripherals/i2c/esp_ina226/ina226.c" bodystart="151" bodyend="166" declfile="components/peripherals/i2c/esp_ina226/include/ina226.h" declline="248" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga87e0c6dc6bcf9fb3630f3eb072290ead" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ina226_get_calibration_register</definition>
        <argsstring>(ina226_handle_t handle, uint16_t *const reg)</argsstring>
        <name>ina226_get_calibration_register</name>
        <param>
          <type><ref refid="group__drivers_1ga3901c989e3581b1e9aec926f6c1a6bcc" kindref="member">ina226_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>uint16_t *const</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Reads the calibration register from the INA226. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>INA226 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reg</parametername>
</parameternamelist>
<parameterdescription>
<para>INA226 calibration register </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ina226/include/ina226.h" line="257" column="11" bodyfile="components/peripherals/i2c/esp_ina226/ina226.c" bodystart="168" bodyend="179" declfile="components/peripherals/i2c/esp_ina226/include/ina226.h" declline="257" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga15fbf992c0198f0796a94feb34ba27d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ina226_set_calibration_register</definition>
        <argsstring>(ina226_handle_t handle, const uint16_t reg)</argsstring>
        <name>ina226_set_calibration_register</name>
        <param>
          <type><ref refid="group__drivers_1ga3901c989e3581b1e9aec926f6c1a6bcc" kindref="member">ina226_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const uint16_t</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Writes the calibration register to the INA226. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>INA226 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reg</parametername>
</parameternamelist>
<parameterdescription>
<para>INA226 calibration register </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ina226/include/ina226.h" line="266" column="11" bodyfile="components/peripherals/i2c/esp_ina226/ina226.c" bodystart="181" bodyend="192" declfile="components/peripherals/i2c/esp_ina226/include/ina226.h" declline="266" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gab5a69559c93404d72986fea90cddd5ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ina226_get_mask_enable_register</definition>
        <argsstring>(ina226_handle_t handle, ina226_mask_enable_register_t *const reg)</argsstring>
        <name>ina226_get_mask_enable_register</name>
        <param>
          <type><ref refid="group__drivers_1ga3901c989e3581b1e9aec926f6c1a6bcc" kindref="member">ina226_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>ina226_mask_enable_register_t *const</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Reads the mask/enable register from the INA226. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>INA226 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reg</parametername>
</parameternamelist>
<parameterdescription>
<para>INA226 mask/enable register </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ina226/include/ina226.h" line="275" column="11" bodyfile="components/peripherals/i2c/esp_ina226/ina226.c" bodystart="194" bodyend="209" declfile="components/peripherals/i2c/esp_ina226/include/ina226.h" declline="275" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga8fa5583edc47339a2d2e11da22f37ede" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ina226_init</definition>
        <argsstring>(i2c_master_bus_handle_t master_handle, const ina226_config_t *ina226_config, ina226_handle_t *ina226_handle)</argsstring>
        <name>ina226_init</name>
        <param>
          <type>i2c_master_bus_handle_t</type>
          <declname>master_handle</declname>
        </param>
        <param>
          <type>const <ref refid="group__drivers_1ga0f70616e438f7c5550604e0d4d0e5079" kindref="member">ina226_config_t</ref> *</type>
          <declname>ina226_config</declname>
        </param>
        <param>
          <type><ref refid="group__drivers_1ga3901c989e3581b1e9aec926f6c1a6bcc" kindref="member">ina226_handle_t</ref> *</type>
          <declname>ina226_handle</declname>
        </param>
        <briefdescription>
<para>initializes an INA226 device onto the I2C master bus. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">master_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>I2C master bus handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ina226_config</parametername>
</parameternamelist>
<parameterdescription>
<para>INA226 device configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">ina226_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>INA226 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ina226/include/ina226.h" line="285" column="11" bodyfile="components/peripherals/i2c/esp_ina226/ina226.c" bodystart="211" bodyend="263" declfile="components/peripherals/i2c/esp_ina226/include/ina226.h" declline="285" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga8eea27ae0382d61f7c80bb4774c0c50c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ina226_calibrate</definition>
        <argsstring>(ina226_handle_t handle, const float max_current, const float shunt_resistance)</argsstring>
        <name>ina226_calibrate</name>
        <param>
          <type><ref refid="group__drivers_1ga3901c989e3581b1e9aec926f6c1a6bcc" kindref="member">ina226_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>max_current</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>shunt_resistance</declname>
        </param>
        <briefdescription>
<para>Calibrates the INA266. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>INA226 device handle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">max_current</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum expected current, A </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">shunt_resistance</parametername>
</parameternamelist>
<parameterdescription>
<para>Shunt resistance, Ohm </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ina226/include/ina226.h" line="295" column="11" bodyfile="components/peripherals/i2c/esp_ina226/ina226.c" bodystart="265" bodyend="287" declfile="components/peripherals/i2c/esp_ina226/include/ina226.h" declline="295" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga1032dce6b1672ba3fc96c7101215d5b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ina226_get_bus_voltage</definition>
        <argsstring>(ina226_handle_t handle, float *const voltage)</argsstring>
        <name>ina226_get_bus_voltage</name>
        <param>
          <type><ref refid="group__drivers_1ga3901c989e3581b1e9aec926f6c1a6bcc" kindref="member">ina226_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>float *const</type>
          <declname>voltage</declname>
        </param>
        <briefdescription>
<para>Reads bus voltage (V) from INA226. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>INA226 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">voltage</parametername>
</parameternamelist>
<parameterdescription>
<para>INA226 bus voltage, V. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ina226/include/ina226.h" line="304" column="11" bodyfile="components/peripherals/i2c/esp_ina226/ina226.c" bodystart="349" bodyend="364" declfile="components/peripherals/i2c/esp_ina226/include/ina226.h" declline="304" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gab0cd7952b9db1d15f522b1931ddbb9c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ina226_get_triggered_bus_voltage</definition>
        <argsstring>(ina226_handle_t handle, float *const voltage)</argsstring>
        <name>ina226_get_triggered_bus_voltage</name>
        <param>
          <type><ref refid="group__drivers_1ga3901c989e3581b1e9aec926f6c1a6bcc" kindref="member">ina226_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>float *const</type>
          <declname>voltage</declname>
        </param>
        <briefdescription>
<para>Triggers and reads bus voltage (V) from INA226. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>INA226 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">voltage</parametername>
</parameternamelist>
<parameterdescription>
<para>INA226 bus voltage, V. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ina226/include/ina226.h" line="313" column="11" bodyfile="components/peripherals/i2c/esp_ina226/ina226.c" bodystart="366" bodyend="407" declfile="components/peripherals/i2c/esp_ina226/include/ina226.h" declline="313" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga3a3b0b1318c633222c93cecb44264d63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ina226_get_shunt_voltage</definition>
        <argsstring>(ina226_handle_t handle, float *const voltage)</argsstring>
        <name>ina226_get_shunt_voltage</name>
        <param>
          <type><ref refid="group__drivers_1ga3901c989e3581b1e9aec926f6c1a6bcc" kindref="member">ina226_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>float *const</type>
          <declname>voltage</declname>
        </param>
        <briefdescription>
<para>Reads shunt voltage (V) from INA226. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>INA226 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">voltage</parametername>
</parameternamelist>
<parameterdescription>
<para>INA226 shunt voltage, V. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ina226/include/ina226.h" line="322" column="11" bodyfile="components/peripherals/i2c/esp_ina226/ina226.c" bodystart="289" bodyend="304" declfile="components/peripherals/i2c/esp_ina226/include/ina226.h" declline="322" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga68f7fcc45f14c1bf03185b8499ba3226" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ina226_get_triggered_shunt_voltage</definition>
        <argsstring>(ina226_handle_t handle, float *const voltage)</argsstring>
        <name>ina226_get_triggered_shunt_voltage</name>
        <param>
          <type><ref refid="group__drivers_1ga3901c989e3581b1e9aec926f6c1a6bcc" kindref="member">ina226_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>float *const</type>
          <declname>voltage</declname>
        </param>
        <briefdescription>
<para>Triggers and reads shunt voltage (V) from INA226. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>INA226 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">voltage</parametername>
</parameternamelist>
<parameterdescription>
<para>INA226 shunt voltage, V. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ina226/include/ina226.h" line="331" column="11" bodyfile="components/peripherals/i2c/esp_ina226/ina226.c" bodystart="306" bodyend="347" declfile="components/peripherals/i2c/esp_ina226/include/ina226.h" declline="331" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gaab786a59b9cf01076a4e4cc5a508a52f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ina226_get_current</definition>
        <argsstring>(ina226_handle_t handle, float *const current)</argsstring>
        <name>ina226_get_current</name>
        <param>
          <type><ref refid="group__drivers_1ga3901c989e3581b1e9aec926f6c1a6bcc" kindref="member">ina226_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>float *const</type>
          <declname>current</declname>
        </param>
        <briefdescription>
<para>Reads current (A) from INA226. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function works properly only after calibration.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>INA226 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">current</parametername>
</parameternamelist>
<parameterdescription>
<para>INA226 current, A. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ina226/include/ina226.h" line="342" column="11" bodyfile="components/peripherals/i2c/esp_ina226/ina226.c" bodystart="409" bodyend="424" declfile="components/peripherals/i2c/esp_ina226/include/ina226.h" declline="342" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga9ad8e8e43146aac88c11ec453d8627be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ina226_get_triggered_current</definition>
        <argsstring>(ina226_handle_t handle, float *const current)</argsstring>
        <name>ina226_get_triggered_current</name>
        <param>
          <type><ref refid="group__drivers_1ga3901c989e3581b1e9aec926f6c1a6bcc" kindref="member">ina226_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>float *const</type>
          <declname>current</declname>
        </param>
        <briefdescription>
<para>Triggers and reads current (A) from INA226. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function works properly only after calibration.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>INA226 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">current</parametername>
</parameternamelist>
<parameterdescription>
<para>INA226 current, A. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ina226/include/ina226.h" line="353" column="11" bodyfile="components/peripherals/i2c/esp_ina226/ina226.c" bodystart="426" bodyend="467" declfile="components/peripherals/i2c/esp_ina226/include/ina226.h" declline="353" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gafe669e8a9ae6777cb8d428f41139f078" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ina226_get_power</definition>
        <argsstring>(ina226_handle_t handle, float *const power)</argsstring>
        <name>ina226_get_power</name>
        <param>
          <type><ref refid="group__drivers_1ga3901c989e3581b1e9aec926f6c1a6bcc" kindref="member">ina226_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>float *const</type>
          <declname>power</declname>
        </param>
        <briefdescription>
<para>Reads power (W) from INA226. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function works properly only after calibration.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>INA226 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">power</parametername>
</parameternamelist>
<parameterdescription>
<para>INA226 power, W. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ina226/include/ina226.h" line="364" column="11" bodyfile="components/peripherals/i2c/esp_ina226/ina226.c" bodystart="469" bodyend="484" declfile="components/peripherals/i2c/esp_ina226/include/ina226.h" declline="364" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga3ae82d3e28d0e392fff54eea45091192" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ina226_get_operating_mode</definition>
        <argsstring>(ina226_handle_t handle, ina226_operating_modes_t *const mode)</argsstring>
        <name>ina226_get_operating_mode</name>
        <param>
          <type><ref refid="group__drivers_1ga3901c989e3581b1e9aec926f6c1a6bcc" kindref="member">ina226_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="group__drivers_1ga18ff6bf61fd3856f69c1d767fcae6595" kindref="member">ina226_operating_modes_t</ref> *const</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Reads operating mode from the INA226. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>INA226 device handle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Operating mode setting. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ina226/include/ina226.h" line="373" column="11" declfile="components/peripherals/i2c/esp_ina226/include/ina226.h" declline="373" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga4a98bd42626927a32be826d7f18dd7f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ina226_set_operating_mode</definition>
        <argsstring>(ina226_handle_t handle, const ina226_operating_modes_t mode)</argsstring>
        <name>ina226_set_operating_mode</name>
        <param>
          <type><ref refid="group__drivers_1ga3901c989e3581b1e9aec926f6c1a6bcc" kindref="member">ina226_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const <ref refid="group__drivers_1ga18ff6bf61fd3856f69c1d767fcae6595" kindref="member">ina226_operating_modes_t</ref></type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Writes operating mode to the INA226. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>INA226 device handle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Operating mode setting. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ina226/include/ina226.h" line="382" column="11" declfile="components/peripherals/i2c/esp_ina226/include/ina226.h" declline="382" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga9a754e2bd5b2f770dd76d43d4919cac3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ina226_get_averaging_mode</definition>
        <argsstring>(ina226_handle_t handle, ina226_averaging_modes_t *const mode)</argsstring>
        <name>ina226_get_averaging_mode</name>
        <param>
          <type><ref refid="group__drivers_1ga3901c989e3581b1e9aec926f6c1a6bcc" kindref="member">ina226_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="group__drivers_1ga963e4501c0e67fbf3fdd7949d502bc07" kindref="member">ina226_averaging_modes_t</ref> *const</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ina226/include/ina226.h" line="384" column="11" declfile="components/peripherals/i2c/esp_ina226/include/ina226.h" declline="384" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga563c8c8a46c5c108bbc04cdc90c435ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ina226_set_averaging_mode</definition>
        <argsstring>(ina226_handle_t handle, const ina226_averaging_modes_t mode)</argsstring>
        <name>ina226_set_averaging_mode</name>
        <param>
          <type><ref refid="group__drivers_1ga3901c989e3581b1e9aec926f6c1a6bcc" kindref="member">ina226_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const <ref refid="group__drivers_1ga963e4501c0e67fbf3fdd7949d502bc07" kindref="member">ina226_averaging_modes_t</ref></type>
          <declname>mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ina226/include/ina226.h" line="386" column="11" declfile="components/peripherals/i2c/esp_ina226/include/ina226.h" declline="386" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gaf5cbf9e61c46b5b9039b31d19ebc85bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ina226_get_bus_volt_conv_time</definition>
        <argsstring>(ina226_handle_t handle, ina226_volt_conv_times_t *const conv_time)</argsstring>
        <name>ina226_get_bus_volt_conv_time</name>
        <param>
          <type><ref refid="group__drivers_1ga3901c989e3581b1e9aec926f6c1a6bcc" kindref="member">ina226_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="group__drivers_1ga6473ec6acaf13b36c0fb1ca22c000a69" kindref="member">ina226_volt_conv_times_t</ref> *const</type>
          <declname>conv_time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ina226/include/ina226.h" line="388" column="11" declfile="components/peripherals/i2c/esp_ina226/include/ina226.h" declline="388" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga5539b5599f53dc67f95588100f37c890" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ina226_set_bus_volt_conv_time</definition>
        <argsstring>(ina226_handle_t handle, ina226_volt_conv_times_t *const conv_time)</argsstring>
        <name>ina226_set_bus_volt_conv_time</name>
        <param>
          <type><ref refid="group__drivers_1ga3901c989e3581b1e9aec926f6c1a6bcc" kindref="member">ina226_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="group__drivers_1ga6473ec6acaf13b36c0fb1ca22c000a69" kindref="member">ina226_volt_conv_times_t</ref> *const</type>
          <declname>conv_time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ina226/include/ina226.h" line="390" column="11" declfile="components/peripherals/i2c/esp_ina226/include/ina226.h" declline="390" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga8714dfa1c1a9af9df59da2485532f030" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ina226_get_shunt_volt_conv_time</definition>
        <argsstring>(ina226_handle_t handle, ina226_volt_conv_times_t *const conv_time)</argsstring>
        <name>ina226_get_shunt_volt_conv_time</name>
        <param>
          <type><ref refid="group__drivers_1ga3901c989e3581b1e9aec926f6c1a6bcc" kindref="member">ina226_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="group__drivers_1ga6473ec6acaf13b36c0fb1ca22c000a69" kindref="member">ina226_volt_conv_times_t</ref> *const</type>
          <declname>conv_time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ina226/include/ina226.h" line="392" column="11" declfile="components/peripherals/i2c/esp_ina226/include/ina226.h" declline="392" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga91077c3eb7316bdbd5cb956bcc93ac7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ina226_set_shunt_volt_conv_time</definition>
        <argsstring>(ina226_handle_t handle, ina226_volt_conv_times_t *const conv_time)</argsstring>
        <name>ina226_set_shunt_volt_conv_time</name>
        <param>
          <type><ref refid="group__drivers_1ga3901c989e3581b1e9aec926f6c1a6bcc" kindref="member">ina226_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="group__drivers_1ga6473ec6acaf13b36c0fb1ca22c000a69" kindref="member">ina226_volt_conv_times_t</ref> *const</type>
          <declname>conv_time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ina226/include/ina226.h" line="394" column="11" declfile="components/peripherals/i2c/esp_ina226/include/ina226.h" declline="394" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga411af4609160753897a5a58f29028c52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ina226_reset</definition>
        <argsstring>(ina226_handle_t handle)</argsstring>
        <name>ina226_reset</name>
        <param>
          <type><ref refid="group__drivers_1ga3901c989e3581b1e9aec926f6c1a6bcc" kindref="member">ina226_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Resets the INA226. </para>
        </briefdescription>
        <detaileddescription>
<para>Same as power-on reset. Resets all registers to default values. Calibration is conducted automatically after reset.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>INA226 device handle </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ina226/include/ina226.h" line="405" column="11" bodyfile="components/peripherals/i2c/esp_ina226/ina226.c" bodystart="519" bodyend="547" declfile="components/peripherals/i2c/esp_ina226/include/ina226.h" declline="405" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gadbb4cf932d249b9addb0a4d775c75222" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ina226_remove</definition>
        <argsstring>(ina226_handle_t handle)</argsstring>
        <name>ina226_remove</name>
        <param>
          <type><ref refid="group__drivers_1ga3901c989e3581b1e9aec926f6c1a6bcc" kindref="member">ina226_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Removes an INA226 device from master bus. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>INA226 device handle </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ina226/include/ina226.h" line="413" column="11" bodyfile="components/peripherals/i2c/esp_ina226/ina226.c" bodystart="549" bodyend="555" declfile="components/peripherals/i2c/esp_ina226/include/ina226.h" declline="413" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga4340968df777a40e1055e7fd696a5473" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ina226_delete</definition>
        <argsstring>(ina226_handle_t handle)</argsstring>
        <name>ina226_delete</name>
        <param>
          <type><ref refid="group__drivers_1ga3901c989e3581b1e9aec926f6c1a6bcc" kindref="member">ina226_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Removes an INA226 device from master bus and frees handle. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>INA226 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ina226/include/ina226.h" line="421" column="11" bodyfile="components/peripherals/i2c/esp_ina226/ina226.c" bodystart="557" bodyend="571" declfile="components/peripherals/i2c/esp_ina226/include/ina226.h" declline="421" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga1d811627c85d6ec2b884ebad0eeb62e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * ina226_get_fw_version</definition>
        <argsstring>(void)</argsstring>
        <name>ina226_get_fw_version</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Converts INA226 firmware version numbers (major, minor, patch) into a string. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>char* INA226 firmware version as a string that is formatted as X.X.X (e.g. 4.0.0). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ina226/include/ina226.h" line="428" column="12" bodyfile="components/peripherals/i2c/esp_ina226/ina226.c" bodystart="573" bodyend="575" declfile="components/peripherals/i2c/esp_ina226/include/ina226.h" declline="428" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gab02fa33d34919a5ef63b93b492f10e6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t ina226_get_fw_version_number</definition>
        <argsstring>(void)</argsstring>
        <name>ina226_get_fw_version_number</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Converts INA226 firmware version numbers (major, minor, patch) into an integer value. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>int32_t INA226 firmware version number. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ina226/include/ina226.h" line="435" column="9" bodyfile="components/peripherals/i2c/esp_ina226/ina226.c" bodystart="577" bodyend="579" declfile="components/peripherals/i2c/esp_ina226/include/ina226.h" declline="435" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gad612f2f8f8c797f9d002b6e3dc8a54dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ltr390uv_get_control_register</definition>
        <argsstring>(ltr390uv_handle_t handle, ltr390uv_control_register_t *const reg)</argsstring>
        <name>ltr390uv_get_control_register</name>
        <param>
          <type><ref refid="group__drivers_1ga4360ca0586c82540265c60066087511e" kindref="member">ltr390uv_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>ltr390uv_control_register_t *const</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Reads control register from LTR390UV. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>LTR390UV device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>LTR390UV control register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" line="253" column="11" bodyfile="components/peripherals/i2c/esp_ltr390uv/ltr390uv.c" bodystart="390" bodyend="401" declfile="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" declline="253" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gac0494e267ae62a0c3948d245b345b303" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ltr390uv_set_control_register</definition>
        <argsstring>(ltr390uv_handle_t handle, const ltr390uv_control_register_t reg)</argsstring>
        <name>ltr390uv_set_control_register</name>
        <param>
          <type><ref refid="group__drivers_1ga4360ca0586c82540265c60066087511e" kindref="member">ltr390uv_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const ltr390uv_control_register_t</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Writes control register to LTR390UV. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>LTR390UV device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reg</parametername>
</parameternamelist>
<parameterdescription>
<para>LTR390UV control register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" line="262" column="11" bodyfile="components/peripherals/i2c/esp_ltr390uv/ltr390uv.c" bodystart="403" bodyend="420" declfile="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" declline="262" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gacc958f4ef325bd874f9702ca6c893cdb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ltr390uv_get_measure_register</definition>
        <argsstring>(ltr390uv_handle_t handle, ltr390uv_measure_register_t *const reg)</argsstring>
        <name>ltr390uv_get_measure_register</name>
        <param>
          <type><ref refid="group__drivers_1ga4360ca0586c82540265c60066087511e" kindref="member">ltr390uv_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>ltr390uv_measure_register_t *const</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Reads ALS UVS measure register from LTR390UV. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>LTR390UV device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>LTR390UV ALS UVS measure register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" line="271" column="11" bodyfile="components/peripherals/i2c/esp_ltr390uv/ltr390uv.c" bodystart="422" bodyend="433" declfile="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" declline="271" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga47bfc017c50af702d0ff0e22ef19d7c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ltr390uv_set_measure_register</definition>
        <argsstring>(ltr390uv_handle_t handle, const ltr390uv_measure_register_t reg)</argsstring>
        <name>ltr390uv_set_measure_register</name>
        <param>
          <type><ref refid="group__drivers_1ga4360ca0586c82540265c60066087511e" kindref="member">ltr390uv_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const ltr390uv_measure_register_t</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Writes ALS UVS measure register to LTR390UV. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>LTR390UV device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reg</parametername>
</parameternamelist>
<parameterdescription>
<para>LTR390UV ALS UVS measure register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" line="280" column="11" bodyfile="components/peripherals/i2c/esp_ltr390uv/ltr390uv.c" bodystart="435" bodyend="451" declfile="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" declline="280" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga5c593c30d2be1fcdc4b0193b18efddd5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ltr390uv_get_gain_register</definition>
        <argsstring>(ltr390uv_handle_t handle, ltr390uv_gain_register_t *const reg)</argsstring>
        <name>ltr390uv_get_gain_register</name>
        <param>
          <type><ref refid="group__drivers_1ga4360ca0586c82540265c60066087511e" kindref="member">ltr390uv_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>ltr390uv_gain_register_t *const</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Reads ALS UVS gain register from LTR390UV. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>LTR390UV device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>LTR390UV ALS UVS gain register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" line="289" column="11" bodyfile="components/peripherals/i2c/esp_ltr390uv/ltr390uv.c" bodystart="453" bodyend="464" declfile="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" declline="289" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga7227b636c5307b20783c53f0efdc9706" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ltr390uv_set_gain_register</definition>
        <argsstring>(ltr390uv_handle_t handle, const ltr390uv_gain_register_t reg)</argsstring>
        <name>ltr390uv_set_gain_register</name>
        <param>
          <type><ref refid="group__drivers_1ga4360ca0586c82540265c60066087511e" kindref="member">ltr390uv_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const ltr390uv_gain_register_t</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Writes ALS UVS gain register to LTR390UV. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>LTR390UV device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reg</parametername>
</parameternamelist>
<parameterdescription>
<para>LTR390UV ALS UVS gain register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" line="298" column="11" bodyfile="components/peripherals/i2c/esp_ltr390uv/ltr390uv.c" bodystart="466" bodyend="481" declfile="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" declline="298" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga10311c032bccc9a49abc6f049fe3464d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ltr390uv_get_interrupt_config_register</definition>
        <argsstring>(ltr390uv_handle_t handle, ltr390uv_interrupt_config_register_t *const reg)</argsstring>
        <name>ltr390uv_get_interrupt_config_register</name>
        <param>
          <type><ref refid="group__drivers_1ga4360ca0586c82540265c60066087511e" kindref="member">ltr390uv_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>ltr390uv_interrupt_config_register_t *const</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Reads interrupt configuration register from LTR390UV. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>LTR390UV device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>LTR390UV interrupt configuration register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" line="307" column="11" bodyfile="components/peripherals/i2c/esp_ltr390uv/ltr390uv.c" bodystart="483" bodyend="494" declfile="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" declline="307" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gaa965f69c97d6c971a1b3510216932d8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ltr390uv_set_interrupt_config_register</definition>
        <argsstring>(ltr390uv_handle_t handle, const ltr390uv_interrupt_config_register_t reg)</argsstring>
        <name>ltr390uv_set_interrupt_config_register</name>
        <param>
          <type><ref refid="group__drivers_1ga4360ca0586c82540265c60066087511e" kindref="member">ltr390uv_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const ltr390uv_interrupt_config_register_t</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Writes interrupt configuration register to LTR390UV. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>LTR390UV device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reg</parametername>
</parameternamelist>
<parameterdescription>
<para>LTR390UV interrupt configuration register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" line="316" column="11" bodyfile="components/peripherals/i2c/esp_ltr390uv/ltr390uv.c" bodystart="496" bodyend="513" declfile="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" declline="316" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga601627edb8862d78f23b4684b7d65a96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ltr390uv_get_status_register</definition>
        <argsstring>(ltr390uv_handle_t handle, ltr390uv_status_register_t *const reg)</argsstring>
        <name>ltr390uv_get_status_register</name>
        <param>
          <type><ref refid="group__drivers_1ga4360ca0586c82540265c60066087511e" kindref="member">ltr390uv_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>ltr390uv_status_register_t *const</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Reads status register from LTR390UV. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>LTR390UV device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" line="324" column="11" bodyfile="components/peripherals/i2c/esp_ltr390uv/ltr390uv.c" bodystart="515" bodyend="526" declfile="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" declline="324" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gaca0f1260d725e30226bd641e95c5380d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ltr390uv_init</definition>
        <argsstring>(i2c_master_bus_handle_t master_handle, const ltr390uv_config_t *ltr390uv_config, ltr390uv_handle_t *ltr390uv_handle)</argsstring>
        <name>ltr390uv_init</name>
        <param>
          <type>i2c_master_bus_handle_t</type>
          <declname>master_handle</declname>
        </param>
        <param>
          <type>const <ref refid="group__drivers_1gaf416c36c716812bdd1e7270f706cb3b9" kindref="member">ltr390uv_config_t</ref> *</type>
          <declname>ltr390uv_config</declname>
        </param>
        <param>
          <type><ref refid="group__drivers_1ga4360ca0586c82540265c60066087511e" kindref="member">ltr390uv_handle_t</ref> *</type>
          <declname>ltr390uv_handle</declname>
        </param>
        <briefdescription>
<para>Initializes an LTR390UV device onto the I2C master bus. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">master_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>I2C master bus handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ltr390uv_config</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration of LTR390UV device. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">ltr390uv_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>LTR390UV device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" line="334" column="11" bodyfile="components/peripherals/i2c/esp_ltr390uv/ltr390uv.c" bodystart="528" bodyend="581" declfile="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" declline="334" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga6be0f845cc58c39af3a5dc8b72d0e9c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ltr390uv_get_ambient_light</definition>
        <argsstring>(ltr390uv_handle_t handle, float *const ambient_light)</argsstring>
        <name>ltr390uv_get_ambient_light</name>
        <param>
          <type><ref refid="group__drivers_1ga4360ca0586c82540265c60066087511e" kindref="member">ltr390uv_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>float *const</type>
          <declname>ambient_light</declname>
        </param>
        <briefdescription>
<para>Reads ambient light from LTR390UV. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>LTR390UV device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ambient_light</parametername>
</parameternamelist>
<parameterdescription>
<para>Ambient light in lux. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" line="343" column="11" bodyfile="components/peripherals/i2c/esp_ltr390uv/ltr390uv.c" bodystart="583" bodyend="609" declfile="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" declline="343" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga4b7c910399e3431019b597fd0d45cf30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ltr390uv_get_als</definition>
        <argsstring>(ltr390uv_handle_t handle, uint32_t *const sensor_counts)</argsstring>
        <name>ltr390uv_get_als</name>
        <param>
          <type><ref refid="group__drivers_1ga4360ca0586c82540265c60066087511e" kindref="member">ltr390uv_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>uint32_t *const</type>
          <declname>sensor_counts</declname>
        </param>
        <briefdescription>
<para>Reads ALS sensor counts from LTR390UV. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>LTR390UV device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sensor_counts</parametername>
</parameternamelist>
<parameterdescription>
<para>Light. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" line="352" column="11" bodyfile="components/peripherals/i2c/esp_ltr390uv/ltr390uv.c" bodystart="611" bodyend="630" declfile="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" declline="352" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga37cfe17d6ce9b51cef382487f7503591" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ltr390uv_get_ultraviolet_index</definition>
        <argsstring>(ltr390uv_handle_t handle, float *const ultraviolet_index)</argsstring>
        <name>ltr390uv_get_ultraviolet_index</name>
        <param>
          <type><ref refid="group__drivers_1ga4360ca0586c82540265c60066087511e" kindref="member">ltr390uv_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>float *const</type>
          <declname>ultraviolet_index</declname>
        </param>
        <briefdescription>
<para>Reads ultraviolet index (UVI) from LTR390UV. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>LTR390UV device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ultraviolet_index</parametername>
</parameternamelist>
<parameterdescription>
<para>Ultraviolet index (UVI). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" line="361" column="11" bodyfile="components/peripherals/i2c/esp_ltr390uv/ltr390uv.c" bodystart="632" bodyend="655" declfile="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" declline="361" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga3e70b7975863bf9a5e294cc490b1d37e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ltr390uv_get_uvs</definition>
        <argsstring>(ltr390uv_handle_t handle, uint32_t *const sensor_counts)</argsstring>
        <name>ltr390uv_get_uvs</name>
        <param>
          <type><ref refid="group__drivers_1ga4360ca0586c82540265c60066087511e" kindref="member">ltr390uv_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>uint32_t *const</type>
          <declname>sensor_counts</declname>
        </param>
        <briefdescription>
<para>Reads UVS sensor counts from LTR390UV. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>LTR390UV device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sensor_counts</parametername>
</parameternamelist>
<parameterdescription>
<para>Ultraviolet light in mW/cm^2. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" line="370" column="11" bodyfile="components/peripherals/i2c/esp_ltr390uv/ltr390uv.c" bodystart="657" bodyend="676" declfile="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" declline="370" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gaaff5001d256a0c6d80f239ba8233b0c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ltr390uv_get_data_status</definition>
        <argsstring>(ltr390uv_handle_t handle, bool *const ready)</argsstring>
        <name>ltr390uv_get_data_status</name>
        <param>
          <type><ref refid="group__drivers_1ga4360ca0586c82540265c60066087511e" kindref="member">ltr390uv_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>bool *const</type>
          <declname>ready</declname>
        </param>
        <briefdescription>
<para>Reads data ready status flag from LTR390UV. This flag is cleared after the register is read. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>LTR390UV device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">ready</parametername>
</parameternamelist>
<parameterdescription>
<para>LTR390UV data is new and ready to read when true. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" line="380" column="11" bodyfile="components/peripherals/i2c/esp_ltr390uv/ltr390uv.c" bodystart="678" bodyend="691" declfile="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" declline="380" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga2ade1d3649967582c92e13e6637356dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ltr390uv_get_power_status</definition>
        <argsstring>(ltr390uv_handle_t handle, bool *const power_on)</argsstring>
        <name>ltr390uv_get_power_status</name>
        <param>
          <type><ref refid="group__drivers_1ga4360ca0586c82540265c60066087511e" kindref="member">ltr390uv_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>bool *const</type>
          <declname>power_on</declname>
        </param>
        <briefdescription>
<para>Reads power status flag from LTR390UV. This flag is cleared after the register is read. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>LTR390UV device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">power_on</parametername>
</parameternamelist>
<parameterdescription>
<para>LTR390UV is power on event when true and all interrupt threshold settings in the registers have been reset to power on default state. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" line="389" column="11" bodyfile="components/peripherals/i2c/esp_ltr390uv/ltr390uv.c" bodystart="693" bodyend="706" declfile="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" declline="389" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga5aa449f0c1fb00d41c6ad0818898f1cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ltr390uv_get_interrupt_status</definition>
        <argsstring>(ltr390uv_handle_t handle, bool *const interrupt)</argsstring>
        <name>ltr390uv_get_interrupt_status</name>
        <param>
          <type><ref refid="group__drivers_1ga4360ca0586c82540265c60066087511e" kindref="member">ltr390uv_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>bool *const</type>
          <declname>interrupt</declname>
        </param>
        <briefdescription>
<para>Reads interrupt status flag from LTR390UV. This flag is cleared after the register is read. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>LTR390UV device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">interrupt</parametername>
</parameternamelist>
<parameterdescription>
<para>LTR390UV interrupt is active when true. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" line="398" column="11" bodyfile="components/peripherals/i2c/esp_ltr390uv/ltr390uv.c" bodystart="708" bodyend="721" declfile="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" declline="398" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga98d8f937cb1a1e5298ecab25d3ac0595" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ltr390uv_get_status</definition>
        <argsstring>(ltr390uv_handle_t handle, bool *const data_ready, bool *const power_on, bool *const interrupt)</argsstring>
        <name>ltr390uv_get_status</name>
        <param>
          <type><ref refid="group__drivers_1ga4360ca0586c82540265c60066087511e" kindref="member">ltr390uv_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>bool *const</type>
          <declname>data_ready</declname>
        </param>
        <param>
          <type>bool *const</type>
          <declname>power_on</declname>
        </param>
        <param>
          <type>bool *const</type>
          <declname>interrupt</declname>
        </param>
        <briefdescription>
<para>Reads interrupt status flags from LTR390UV. The flags are cleared after the register is read. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>LTR390UV device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data_ready</parametername>
</parameternamelist>
<parameterdescription>
<para>LTR390UV data is new and ready to read when true. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>power_on</parametername>
</parameternamelist>
<parameterdescription>
<para>LTR390UV is power on event when true and all interrupt threshold settings in the registers have been reset to power on default state. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>interrupt</parametername>
</parameternamelist>
<parameterdescription>
<para>LTR390UV interrupt is active when true. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" line="409" column="11" bodyfile="components/peripherals/i2c/esp_ltr390uv/ltr390uv.c" bodystart="723" bodyend="738" declfile="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" declline="409" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gaaaeffb67586571b4e99fdabd13694687" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ltr390uv_get_thresholds</definition>
        <argsstring>(ltr390uv_handle_t handle, uint32_t *const lower_threshold, uint32_t *const upper_threshold)</argsstring>
        <name>ltr390uv_get_thresholds</name>
        <param>
          <type><ref refid="group__drivers_1ga4360ca0586c82540265c60066087511e" kindref="member">ltr390uv_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>uint32_t *const</type>
          <declname>lower_threshold</declname>
        </param>
        <param>
          <type>uint32_t *const</type>
          <declname>upper_threshold</declname>
        </param>
        <briefdescription>
<para>Reads UVS/ALS lower and upper thresholds from LTR390UV. The thresholds are used to trigger an interrupt when the light level exceeds the upper threshold or falls below the lower threshold. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>LTR390UV device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lower_threshold</parametername>
</parameternamelist>
<parameterdescription>
<para>LTR390UV lower threshold in lux or mW/cm^2 setting. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>upper_threshold</parametername>
</parameternamelist>
<parameterdescription>
<para>LTR390UV upper threshold in lux or mW/cm^2 setting. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" line="419" column="11" bodyfile="components/peripherals/i2c/esp_ltr390uv/ltr390uv.c" bodystart="740" bodyend="755" declfile="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" declline="419" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga43ea13bbde83424a4aa5b4cb07a2936a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ltr390uv_set_thresholds</definition>
        <argsstring>(ltr390uv_handle_t handle, const uint32_t lower_threshold, const uint32_t upper_threshold)</argsstring>
        <name>ltr390uv_set_thresholds</name>
        <param>
          <type><ref refid="group__drivers_1ga4360ca0586c82540265c60066087511e" kindref="member">ltr390uv_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>lower_threshold</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>upper_threshold</declname>
        </param>
        <briefdescription>
<para>Writes UVS/ALS lower and upper thresholds to LTR390UV. The thresholds are used to trigger an interrupt when the light level exceeds the upper threshold or falls below the lower threshold. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>LTR390UV device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lower_threshold</parametername>
</parameternamelist>
<parameterdescription>
<para>Lower threshold in lux or mW/cm^2 setting. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>upper_threshold</parametername>
</parameternamelist>
<parameterdescription>
<para>Upper threshold in lux or mW/cm^2 setting. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" line="429" column="11" bodyfile="components/peripherals/i2c/esp_ltr390uv/ltr390uv.c" bodystart="757" bodyend="777" declfile="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" declline="429" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gad4cbfed1efbfb51fc251c268ba5eaacf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ltr390uv_get_mode</definition>
        <argsstring>(ltr390uv_handle_t handle, ltr390uv_operation_modes_t *const mode)</argsstring>
        <name>ltr390uv_get_mode</name>
        <param>
          <type><ref refid="group__drivers_1ga4360ca0586c82540265c60066087511e" kindref="member">ltr390uv_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="group__drivers_1ga6e86bca5a4b2cc0f14a16764864b3210" kindref="member">ltr390uv_operation_modes_t</ref> *const</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Reads operation mode from LTR390UV. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>LTR390UV device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>LTR390UV operation mode setting. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" line="438" column="11" bodyfile="components/peripherals/i2c/esp_ltr390uv/ltr390uv.c" bodystart="779" bodyend="792" declfile="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" declline="438" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gaa01aab8f256f1b2fc5af7d34c5740301" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ltr390uv_set_mode</definition>
        <argsstring>(ltr390uv_handle_t handle, const ltr390uv_operation_modes_t mode)</argsstring>
        <name>ltr390uv_set_mode</name>
        <param>
          <type><ref refid="group__drivers_1ga4360ca0586c82540265c60066087511e" kindref="member">ltr390uv_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const <ref refid="group__drivers_1ga6e86bca5a4b2cc0f14a16764864b3210" kindref="member">ltr390uv_operation_modes_t</ref></type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Writes operation mode to LTR390UV. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>LTR390UV device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>LTR390UV operation mode setting. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" line="447" column="11" bodyfile="components/peripherals/i2c/esp_ltr390uv/ltr390uv.c" bodystart="794" bodyend="832" declfile="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" declline="447" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gac68b5ed78cf318911dcdf0b026527303" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ltr390uv_get_resolution</definition>
        <argsstring>(ltr390uv_handle_t handle, ltr390uv_sensor_resolutions_t *const resolution)</argsstring>
        <name>ltr390uv_get_resolution</name>
        <param>
          <type><ref refid="group__drivers_1ga4360ca0586c82540265c60066087511e" kindref="member">ltr390uv_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="group__drivers_1gaa32e4995981a20b7d75b408afb944741" kindref="member">ltr390uv_sensor_resolutions_t</ref> *const</type>
          <declname>resolution</declname>
        </param>
        <briefdescription>
<para>Reads sensor resolution from LTR390UV. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>LTR390UV device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>resolution</parametername>
</parameternamelist>
<parameterdescription>
<para>LTR390UV sensor resolution setting. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" line="456" column="11" bodyfile="components/peripherals/i2c/esp_ltr390uv/ltr390uv.c" bodystart="834" bodyend="847" declfile="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" declline="456" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gaef083847dd589e9f296a76e59ef4bdd7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ltr390uv_set_resolution</definition>
        <argsstring>(ltr390uv_handle_t handle, const ltr390uv_sensor_resolutions_t resolution)</argsstring>
        <name>ltr390uv_set_resolution</name>
        <param>
          <type><ref refid="group__drivers_1ga4360ca0586c82540265c60066087511e" kindref="member">ltr390uv_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const <ref refid="group__drivers_1gaa32e4995981a20b7d75b408afb944741" kindref="member">ltr390uv_sensor_resolutions_t</ref></type>
          <declname>resolution</declname>
        </param>
        <briefdescription>
<para>Writes sensor resolution to LTR390UV. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>LTR390UV device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>resolution</parametername>
</parameternamelist>
<parameterdescription>
<para>LTR390UV sensor resolution setting. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" line="465" column="11" bodyfile="components/peripherals/i2c/esp_ltr390uv/ltr390uv.c" bodystart="849" bodyend="865" declfile="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" declline="465" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga3af2d48c617b9d417d474d28e4d3d82d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ltr390uv_get_gain</definition>
        <argsstring>(ltr390uv_handle_t handle, ltr390uv_measurement_gains_t *const gain)</argsstring>
        <name>ltr390uv_get_gain</name>
        <param>
          <type><ref refid="group__drivers_1ga4360ca0586c82540265c60066087511e" kindref="member">ltr390uv_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="group__drivers_1ga7827e02d5538c097a4df71803ebd364d" kindref="member">ltr390uv_measurement_gains_t</ref> *const</type>
          <declname>gain</declname>
        </param>
        <briefdescription>
<para>Reads measurement gain from LTR390UV. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>LTR390UV device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gain</parametername>
</parameternamelist>
<parameterdescription>
<para>LTR390UV measurement gain setting. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" line="474" column="11" bodyfile="components/peripherals/i2c/esp_ltr390uv/ltr390uv.c" bodystart="867" bodyend="880" declfile="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" declline="474" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gab51515783d70dda13e498cea6e4fd768" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ltr390uv_set_gain</definition>
        <argsstring>(ltr390uv_handle_t handle, const ltr390uv_measurement_gains_t gain)</argsstring>
        <name>ltr390uv_set_gain</name>
        <param>
          <type><ref refid="group__drivers_1ga4360ca0586c82540265c60066087511e" kindref="member">ltr390uv_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const <ref refid="group__drivers_1ga7827e02d5538c097a4df71803ebd364d" kindref="member">ltr390uv_measurement_gains_t</ref></type>
          <declname>gain</declname>
        </param>
        <briefdescription>
<para>Writes measurement gain to LTR390UV. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>LTR390UV device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gain</parametername>
</parameternamelist>
<parameterdescription>
<para>LTR390UV measurement gain setting. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" line="483" column="11" bodyfile="components/peripherals/i2c/esp_ltr390uv/ltr390uv.c" bodystart="882" bodyend="898" declfile="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" declline="483" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga8b3edb42cfb4fab8bff820816444be68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ltr390uv_get_rate</definition>
        <argsstring>(ltr390uv_handle_t handle, ltr390uv_measurement_rates_t *const rate)</argsstring>
        <name>ltr390uv_get_rate</name>
        <param>
          <type><ref refid="group__drivers_1ga4360ca0586c82540265c60066087511e" kindref="member">ltr390uv_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="group__drivers_1ga42a99fe430350963604a513012dcc091" kindref="member">ltr390uv_measurement_rates_t</ref> *const</type>
          <declname>rate</declname>
        </param>
        <briefdescription>
<para>Reads measurement rate from LTR390UV. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>LTR390UV device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rate</parametername>
</parameternamelist>
<parameterdescription>
<para>LTR390UV measurement rate setting. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" line="492" column="11" bodyfile="components/peripherals/i2c/esp_ltr390uv/ltr390uv.c" bodystart="900" bodyend="913" declfile="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" declline="492" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga9458fd633e88bc596d01ba14aa05fe2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ltr390uv_set_rate</definition>
        <argsstring>(ltr390uv_handle_t handle, const ltr390uv_measurement_rates_t rate)</argsstring>
        <name>ltr390uv_set_rate</name>
        <param>
          <type><ref refid="group__drivers_1ga4360ca0586c82540265c60066087511e" kindref="member">ltr390uv_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const <ref refid="group__drivers_1ga42a99fe430350963604a513012dcc091" kindref="member">ltr390uv_measurement_rates_t</ref></type>
          <declname>rate</declname>
        </param>
        <briefdescription>
<para>Writes measurement rate to LTR390UV. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>LTR390UV device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rate</parametername>
</parameternamelist>
<parameterdescription>
<para>LTR390UV measurement rate setting. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" line="501" column="11" bodyfile="components/peripherals/i2c/esp_ltr390uv/ltr390uv.c" bodystart="915" bodyend="931" declfile="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" declline="501" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga2f664dd2c6ae4e8f8431e6a7f8d42c2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ltr390uv_enable_interrupt</definition>
        <argsstring>(ltr390uv_handle_t handle, const ltr390uv_ls_interrupts_t light_source)</argsstring>
        <name>ltr390uv_enable_interrupt</name>
        <param>
          <type><ref refid="group__drivers_1ga4360ca0586c82540265c60066087511e" kindref="member">ltr390uv_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const <ref refid="group__drivers_1gac6c810ae7af3a884575208f8cacdcd63" kindref="member">ltr390uv_ls_interrupts_t</ref></type>
          <declname>light_source</declname>
        </param>
        <briefdescription>
<para>Enables LTR390UV interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>LTR390UV device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>light_source</parametername>
</parameternamelist>
<parameterdescription>
<para>LTR390UV interrupt light source (e.g. ALS or UVS). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" line="510" column="11" bodyfile="components/peripherals/i2c/esp_ltr390uv/ltr390uv.c" bodystart="933" bodyend="950" declfile="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" declline="510" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gaa0d7c3bf19ec61e3025eafd54faf5a47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ltr390uv_disable_interrupt</definition>
        <argsstring>(ltr390uv_handle_t handle)</argsstring>
        <name>ltr390uv_disable_interrupt</name>
        <param>
          <type><ref refid="group__drivers_1ga4360ca0586c82540265c60066087511e" kindref="member">ltr390uv_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Disables LTR390UV interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>LTR390UV device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" line="518" column="11" bodyfile="components/peripherals/i2c/esp_ltr390uv/ltr390uv.c" bodystart="952" bodyend="968" declfile="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" declline="518" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gae8d762d3f6c054d85033e74bbc46cdbd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ltr390uv_enable</definition>
        <argsstring>(ltr390uv_handle_t handle)</argsstring>
        <name>ltr390uv_enable</name>
        <param>
          <type><ref refid="group__drivers_1ga4360ca0586c82540265c60066087511e" kindref="member">ltr390uv_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Activates LTR390UV for measurements. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>LTR390UV device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" line="526" column="11" bodyfile="components/peripherals/i2c/esp_ltr390uv/ltr390uv.c" bodystart="970" bodyend="989" declfile="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" declline="526" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga5c02d80cbbe7ad19c6fea392c817d97b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ltr390uv_disable</definition>
        <argsstring>(ltr390uv_handle_t handle)</argsstring>
        <name>ltr390uv_disable</name>
        <param>
          <type><ref refid="group__drivers_1ga4360ca0586c82540265c60066087511e" kindref="member">ltr390uv_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Places LTR390UV on standby (default). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>LTR390UV device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" line="534" column="11" bodyfile="components/peripherals/i2c/esp_ltr390uv/ltr390uv.c" bodystart="991" bodyend="1007" declfile="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" declline="534" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gafdffb7c442c06c3b88e65e0349e97bf4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ltr390uv_reset</definition>
        <argsstring>(ltr390uv_handle_t handle)</argsstring>
        <name>ltr390uv_reset</name>
        <param>
          <type><ref refid="group__drivers_1ga4360ca0586c82540265c60066087511e" kindref="member">ltr390uv_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Issues soft-reset and initializes LTR390UV. See datasheet for details. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>LTR390UV device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" line="542" column="11" bodyfile="components/peripherals/i2c/esp_ltr390uv/ltr390uv.c" bodystart="1009" bodyend="1060" declfile="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" declline="542" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga06fc74abcee2dbd2f8404b62753671a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ltr390uv_remove</definition>
        <argsstring>(ltr390uv_handle_t handle)</argsstring>
        <name>ltr390uv_remove</name>
        <param>
          <type><ref refid="group__drivers_1ga4360ca0586c82540265c60066087511e" kindref="member">ltr390uv_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Removes an LTR390UV device from master bus. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>LTR390UV device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" line="550" column="11" bodyfile="components/peripherals/i2c/esp_ltr390uv/ltr390uv.c" bodystart="1062" bodyend="1067" declfile="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" declline="550" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gaad93eb9b72715bcfa3801b3dab58bcab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ltr390uv_delete</definition>
        <argsstring>(ltr390uv_handle_t handle)</argsstring>
        <name>ltr390uv_delete</name>
        <param>
          <type><ref refid="group__drivers_1ga4360ca0586c82540265c60066087511e" kindref="member">ltr390uv_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Removes an LTR390UV device from master bus and frees handle. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>LTR390UV device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" line="558" column="11" bodyfile="components/peripherals/i2c/esp_ltr390uv/ltr390uv.c" bodystart="1069" bodyend="1083" declfile="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" declline="558" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga072565b4ede742acda6d59c82c0b2a72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * ltr390uv_get_fw_version</definition>
        <argsstring>(void)</argsstring>
        <name>ltr390uv_get_fw_version</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Converts LTR390UV firmware version numbers (major, minor, patch) into a string. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>char* LTR390UV firmware version as a string that is formatted as X.X.X (e.g. 4.0.0). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" line="565" column="12" bodyfile="components/peripherals/i2c/esp_ltr390uv/ltr390uv.c" bodystart="1085" bodyend="1087" declfile="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" declline="565" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga363ae299a852f2f82dc5141a88a37fc9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t ltr390uv_get_fw_version_number</definition>
        <argsstring>(void)</argsstring>
        <name>ltr390uv_get_fw_version_number</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Converts LTR390UV firmware version numbers (major, minor, patch) into an integer value. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>int32_t LTR390UV firmware version number. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" line="572" column="9" bodyfile="components/peripherals/i2c/esp_ltr390uv/ltr390uv.c" bodystart="1089" bodyend="1091" declfile="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" declline="572" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gaabc9f71c22edd8f86e30f4c8f272f3ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t max30105_get_interrupt_status1_register</definition>
        <argsstring>(max30105_handle_t handle, max30105_interrupt_status1_register_t *const reg)</argsstring>
        <name>max30105_get_interrupt_status1_register</name>
        <param>
          <type><ref refid="group__drivers_1ga871d59246e5c9f84ce0edb737276caab" kindref="member">max30105_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>max30105_interrupt_status1_register_t *const</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Reads interrupt status 1 register from MAX30105. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MAX30105 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_max30105/include/max30105.h" line="305" column="11" bodyfile="components/peripherals/i2c/esp_max30105/max30105.c" bodystart="154" bodyend="165" declfile="components/peripherals/i2c/esp_max30105/include/max30105.h" declline="305" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gaa7d230779617843339697177a2e9539a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t max30105_get_interrupt_status2_register</definition>
        <argsstring>(max30105_handle_t handle, max30105_interrupt_status2_register_t *const reg)</argsstring>
        <name>max30105_get_interrupt_status2_register</name>
        <param>
          <type><ref refid="group__drivers_1ga871d59246e5c9f84ce0edb737276caab" kindref="member">max30105_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>max30105_interrupt_status2_register_t *const</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Reads interrupt status 2 register from MAX30105. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MAX30105 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_max30105/include/max30105.h" line="313" column="11" bodyfile="components/peripherals/i2c/esp_max30105/max30105.c" bodystart="167" bodyend="178" declfile="components/peripherals/i2c/esp_max30105/include/max30105.h" declline="313" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gad7d0f67365ce70618b141ed3fd6dc420" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t max30105_get_interrupt_enable1_register</definition>
        <argsstring>(max30105_handle_t handle, max30105_interrupt_enable1_register_t *const reg)</argsstring>
        <name>max30105_get_interrupt_enable1_register</name>
        <param>
          <type><ref refid="group__drivers_1ga871d59246e5c9f84ce0edb737276caab" kindref="member">max30105_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>max30105_interrupt_enable1_register_t *const</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Reads interrupt enable 1 register from MAX30105. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MAX30105 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_max30105/include/max30105.h" line="321" column="11" bodyfile="components/peripherals/i2c/esp_max30105/max30105.c" bodystart="180" bodyend="191" declfile="components/peripherals/i2c/esp_max30105/include/max30105.h" declline="321" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga5c4b439eb292fd8a1a27dca8e64cac24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t max30105_set_interrupt_enable1_register</definition>
        <argsstring>(max30105_handle_t handle, const max30105_interrupt_enable1_register_t reg)</argsstring>
        <name>max30105_set_interrupt_enable1_register</name>
        <param>
          <type><ref refid="group__drivers_1ga871d59246e5c9f84ce0edb737276caab" kindref="member">max30105_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const max30105_interrupt_enable1_register_t</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Writes interrupt enable 1 register to MAX30105. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MAX30105 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Interrupt enable 1 register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_max30105/include/max30105.h" line="330" column="11" bodyfile="components/peripherals/i2c/esp_max30105/max30105.c" bodystart="193" bodyend="210" declfile="components/peripherals/i2c/esp_max30105/include/max30105.h" declline="330" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gacdf531a20c00a19f39f46e49ed4b5195" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t max30105_get_interrupt_enable2_register</definition>
        <argsstring>(max30105_handle_t handle, max30105_interrupt_enable2_register_t *const reg)</argsstring>
        <name>max30105_get_interrupt_enable2_register</name>
        <param>
          <type><ref refid="group__drivers_1ga871d59246e5c9f84ce0edb737276caab" kindref="member">max30105_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>max30105_interrupt_enable2_register_t *const</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Reads interrupt enable 2 register from MAX30105. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MAX30105 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_max30105/include/max30105.h" line="338" column="11" bodyfile="components/peripherals/i2c/esp_max30105/max30105.c" bodystart="212" bodyend="223" declfile="components/peripherals/i2c/esp_max30105/include/max30105.h" declline="338" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga8e9655185febb88a4922f6d36ff5286e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t max30105_set_interrupt_enable2_register</definition>
        <argsstring>(max30105_handle_t handle, const max30105_interrupt_enable2_register_t reg)</argsstring>
        <name>max30105_set_interrupt_enable2_register</name>
        <param>
          <type><ref refid="group__drivers_1ga871d59246e5c9f84ce0edb737276caab" kindref="member">max30105_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const max30105_interrupt_enable2_register_t</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Writes interrupt enable 2 register to MAX30105. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MAX30105 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Interrupt enable 2 register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_max30105/include/max30105.h" line="347" column="11" bodyfile="components/peripherals/i2c/esp_max30105/max30105.c" bodystart="225" bodyend="243" declfile="components/peripherals/i2c/esp_max30105/include/max30105.h" declline="347" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga825dd4dccb365826ec6a5dc4a8a4b2b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t max30105_get_mode_configuration_register</definition>
        <argsstring>(max30105_handle_t handle, max30105_mode_configuration_register_t *const reg)</argsstring>
        <name>max30105_get_mode_configuration_register</name>
        <param>
          <type><ref refid="group__drivers_1ga871d59246e5c9f84ce0edb737276caab" kindref="member">max30105_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>max30105_mode_configuration_register_t *const</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Reads mode configuration register from MAX30105. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MAX30105 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_max30105/include/max30105.h" line="355" column="11" bodyfile="components/peripherals/i2c/esp_max30105/max30105.c" bodystart="245" bodyend="256" declfile="components/peripherals/i2c/esp_max30105/include/max30105.h" declline="355" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gad8b44bbc555adccc623edb3b23fa1ea9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t max30105_set_mode_configuration_register</definition>
        <argsstring>(max30105_handle_t handle, const max30105_mode_configuration_register_t reg)</argsstring>
        <name>max30105_set_mode_configuration_register</name>
        <param>
          <type><ref refid="group__drivers_1ga871d59246e5c9f84ce0edb737276caab" kindref="member">max30105_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const max30105_mode_configuration_register_t</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Writes mode configuration register to MAX30105. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MAX30105 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reg</parametername>
</parameternamelist>
<parameterdescription>
<para>Mode configuration register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_max30105/include/max30105.h" line="364" column="11" bodyfile="components/peripherals/i2c/esp_max30105/max30105.c" bodystart="258" bodyend="275" declfile="components/peripherals/i2c/esp_max30105/include/max30105.h" declline="364" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga3528f8e9cdfe960abf96013bbde6889e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t max30105_init</definition>
        <argsstring>(i2c_master_bus_handle_t master_handle, const max30105_config_t *max30105_config, max30105_handle_t *max30105_handle)</argsstring>
        <name>max30105_init</name>
        <param>
          <type>i2c_master_bus_handle_t</type>
          <declname>master_handle</declname>
        </param>
        <param>
          <type>const <ref refid="group__drivers_1ga4c7293592ca99025e76fc2e23044deb9" kindref="member">max30105_config_t</ref> *</type>
          <declname>max30105_config</declname>
        </param>
        <param>
          <type><ref refid="group__drivers_1ga871d59246e5c9f84ce0edb737276caab" kindref="member">max30105_handle_t</ref> *</type>
          <declname>max30105_handle</declname>
        </param>
        <briefdescription>
<para>Initializes an MAX30105 device onto the I2C master bus. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">master_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>I2C master bus handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">max30105_config</parametername>
</parameternamelist>
<parameterdescription>
<para>MAX30105 device configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">max30105_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MAX30105 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_max30105/include/max30105.h" line="374" column="11" declfile="components/peripherals/i2c/esp_max30105/include/max30105.h" declline="374" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga7b5e70ace64d9d8e770f0d695e482aee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t max30105_get_optical_counts</definition>
        <argsstring>(max30105_handle_t handle, float *const red_count, float *const ir_count, float *const green_count)</argsstring>
        <name>max30105_get_optical_counts</name>
        <param>
          <type><ref refid="group__drivers_1ga871d59246e5c9f84ce0edb737276caab" kindref="member">max30105_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>float *const</type>
          <declname>red_count</declname>
        </param>
        <param>
          <type>float *const</type>
          <declname>ir_count</declname>
        </param>
        <param>
          <type>float *const</type>
          <declname>green_count</declname>
        </param>
        <briefdescription>
<para>Reads red, IR, and green LED ADC counts from MAX30105. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MAX30105 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>red_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Red LED ADC count. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ir_count</parametername>
</parameternamelist>
<parameterdescription>
<para>IR LED ADC count. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>green_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Green LED ADC count. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_max30105/include/max30105.h" line="385" column="11" declfile="components/peripherals/i2c/esp_max30105/include/max30105.h" declline="385" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga8252e18dfc51a11a7ae20c34b9b15569" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t max30105_get_data_status</definition>
        <argsstring>(max30105_handle_t handle, bool *const ready)</argsstring>
        <name>max30105_get_data_status</name>
        <param>
          <type><ref refid="group__drivers_1ga871d59246e5c9f84ce0edb737276caab" kindref="member">max30105_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>bool *const</type>
          <declname>ready</declname>
        </param>
        <briefdescription>
<para>Reads data status from MAX30105. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MAX30105 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">ready</parametername>
</parameternamelist>
<parameterdescription>
<para>MAX30105 data is ready when true. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_max30105/include/max30105.h" line="394" column="11" declfile="components/peripherals/i2c/esp_max30105/include/max30105.h" declline="394" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga0dba28e603b862b5f22728677adbb638" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t max30105_get_control_mode</definition>
        <argsstring>(max30105_handle_t handle, max30105_control_modes_t *const control_mode)</argsstring>
        <name>max30105_get_control_mode</name>
        <param>
          <type><ref refid="group__drivers_1ga871d59246e5c9f84ce0edb737276caab" kindref="member">max30105_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="group__drivers_1ga6b290cee329e4df021ed1672555998b0" kindref="member">max30105_control_modes_t</ref> *const</type>
          <declname>control_mode</declname>
        </param>
        <briefdescription>
<para>Reads control mode setting from MAX30105. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MAX30105 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>control_mode</parametername>
</parameternamelist>
<parameterdescription>
<para>MAX30105 control mode setting. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_max30105/include/max30105.h" line="403" column="11" declfile="components/peripherals/i2c/esp_max30105/include/max30105.h" declline="403" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga1ef26a5ecf32e21555d465ca229db89a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t max30105_set_control_mode</definition>
        <argsstring>(max30105_handle_t handle, const max30105_control_modes_t control_mode)</argsstring>
        <name>max30105_set_control_mode</name>
        <param>
          <type><ref refid="group__drivers_1ga871d59246e5c9f84ce0edb737276caab" kindref="member">max30105_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const <ref refid="group__drivers_1ga6b290cee329e4df021ed1672555998b0" kindref="member">max30105_control_modes_t</ref></type>
          <declname>control_mode</declname>
        </param>
        <briefdescription>
<para>Writes control mode setting to MAX30105. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MAX30105 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>control_mode</parametername>
</parameternamelist>
<parameterdescription>
<para>MAX30105 control mode setting. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_max30105/include/max30105.h" line="412" column="11" declfile="components/peripherals/i2c/esp_max30105/include/max30105.h" declline="412" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gaa0018e4145cc859d754c5a0ee4e74d55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t max30105_remove</definition>
        <argsstring>(max30105_handle_t handle)</argsstring>
        <name>max30105_remove</name>
        <param>
          <type><ref refid="group__drivers_1ga871d59246e5c9f84ce0edb737276caab" kindref="member">max30105_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Removes an MAX30105 device from master bus. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MAX30105 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_max30105/include/max30105.h" line="420" column="11" declfile="components/peripherals/i2c/esp_max30105/include/max30105.h" declline="420" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gae40192a97f0b0f979803d1aed0ff4160" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t max30105_delete</definition>
        <argsstring>(max30105_handle_t handle)</argsstring>
        <name>max30105_delete</name>
        <param>
          <type><ref refid="group__drivers_1ga871d59246e5c9f84ce0edb737276caab" kindref="member">max30105_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Removes an MAX30105 device from master bus and frees handle. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MAX30105 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_max30105/include/max30105.h" line="428" column="11" declfile="components/peripherals/i2c/esp_max30105/include/max30105.h" declline="428" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga1f5fea0ebb6e2221eae5fe7bc111be2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * max30105_get_fw_version</definition>
        <argsstring>(void)</argsstring>
        <name>max30105_get_fw_version</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Converts MAX30105 firmware version numbers (major, minor, patch, build) into a string. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>char* MAX30105 firmware version as a string that is formatted as X.X.X (e.g. 4.0.0). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_max30105/include/max30105.h" line="435" column="12" declfile="components/peripherals/i2c/esp_max30105/include/max30105.h" declline="435" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gafe981f8324a0dc170718bfdd77fa89d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t max30105_get_fw_version_number</definition>
        <argsstring>(void)</argsstring>
        <name>max30105_get_fw_version_number</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Converts MAX30105 firmware version numbers (major, minor, patch) into an integer value. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>int32_t MAX30105 firmware version number. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_max30105/include/max30105.h" line="442" column="9" declfile="components/peripherals/i2c/esp_max30105/include/max30105.h" declline="442" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gae6c00386c02dc6fd22b98c05aefc6aaf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t mlx90614_get_config_register</definition>
        <argsstring>(mlx90614_handle_t handle, mlx90614_config_register_t *const reg)</argsstring>
        <name>mlx90614_get_config_register</name>
        <param>
          <type><ref refid="group__drivers_1ga5cb6e6c62eec0b78a6e74bc7d9a0c186" kindref="member">mlx90614_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>mlx90614_config_register_t *const</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Reads configuration register from MLX90614. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MLX90614 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>MLX90614 configuration register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" line="242" column="11" bodyfile="components/peripherals/i2c/esp_mlx90614/mlx90614.c" bodystart="312" bodyend="323" declfile="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" declline="242" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gac3ee11d9d16b30bac90034bf9ecd7f39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t mlx90614_set_config_register</definition>
        <argsstring>(mlx90614_handle_t handle, const mlx90614_config_register_t reg)</argsstring>
        <name>mlx90614_set_config_register</name>
        <param>
          <type><ref refid="group__drivers_1ga5cb6e6c62eec0b78a6e74bc7d9a0c186" kindref="member">mlx90614_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const mlx90614_config_register_t</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Writes configuration register to MLX90614. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MLX90614 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>MLX90614 configuration register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" line="251" column="11" bodyfile="components/peripherals/i2c/esp_mlx90614/mlx90614.c" bodystart="325" bodyend="332" declfile="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" declline="251" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gaf1f2b115bc0503fb641fa762e993c192" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t mlx90614_get_pwmctrl_register</definition>
        <argsstring>(mlx90614_handle_t handle, mlx90614_pwmctrl_register_t *const reg)</argsstring>
        <name>mlx90614_get_pwmctrl_register</name>
        <param>
          <type><ref refid="group__drivers_1ga5cb6e6c62eec0b78a6e74bc7d9a0c186" kindref="member">mlx90614_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>mlx90614_pwmctrl_register_t *const</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Reads PWM control register from MLX90614. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MLX90614 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>MLX90614 PWM control register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" line="260" column="11" bodyfile="components/peripherals/i2c/esp_mlx90614/mlx90614.c" bodystart="334" bodyend="351" declfile="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" declline="260" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gafb9ca0c03095af27fbeeb39efe5a39fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t mlx90614_set_pwmctrl_register</definition>
        <argsstring>(mlx90614_handle_t handle, const mlx90614_pwmctrl_register_t reg)</argsstring>
        <name>mlx90614_set_pwmctrl_register</name>
        <param>
          <type><ref refid="group__drivers_1ga5cb6e6c62eec0b78a6e74bc7d9a0c186" kindref="member">mlx90614_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const mlx90614_pwmctrl_register_t</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Writes PWM control register to MLX90614. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MLX90614 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>MLX90614 PWM control register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" line="269" column="11" bodyfile="components/peripherals/i2c/esp_mlx90614/mlx90614.c" bodystart="353" bodyend="360" declfile="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" declline="269" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga8e56470ea2abd177657bf997bab22a6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t mlx90614_get_flags_register</definition>
        <argsstring>(mlx90614_handle_t handle, mlx90614_flags_register_t *const reg)</argsstring>
        <name>mlx90614_get_flags_register</name>
        <param>
          <type><ref refid="group__drivers_1ga5cb6e6c62eec0b78a6e74bc7d9a0c186" kindref="member">mlx90614_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>mlx90614_flags_register_t *const</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Reads flags register from MLX90614. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MLX90614 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>MLX90614 flags register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" line="278" column="11" bodyfile="components/peripherals/i2c/esp_mlx90614/mlx90614.c" bodystart="362" bodyend="373" declfile="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" declline="278" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gaa9533b016553667f1a3bc24657888623" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t mlx90614_init</definition>
        <argsstring>(i2c_master_bus_handle_t master_handle, const mlx90614_config_t *mlx90614_config, mlx90614_handle_t *mlx90614_handle)</argsstring>
        <name>mlx90614_init</name>
        <param>
          <type>i2c_master_bus_handle_t</type>
          <declname>master_handle</declname>
        </param>
        <param>
          <type>const <ref refid="group__drivers_1ga3b89cb540f8756eaa8561b0803944261" kindref="member">mlx90614_config_t</ref> *</type>
          <declname>mlx90614_config</declname>
        </param>
        <param>
          <type><ref refid="group__drivers_1ga5cb6e6c62eec0b78a6e74bc7d9a0c186" kindref="member">mlx90614_handle_t</ref> *</type>
          <declname>mlx90614_handle</declname>
        </param>
        <briefdescription>
<para>Initializes an MLX90614 device onto the master bus. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">master_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>I2C master bus handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mlx90614_config</parametername>
</parameternamelist>
<parameterdescription>
<para>MLX90614 device configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">mlx90614_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MLX90614 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" line="288" column="11" bodyfile="components/peripherals/i2c/esp_mlx90614/mlx90614.c" bodystart="375" bodyend="427" declfile="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" declline="288" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga2ed8901aaa44892d12a3d3ddb491a5a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t mlx90614_get_temperatures</definition>
        <argsstring>(mlx90614_handle_t handle, float *const ambient_temperature, float *const object1_temperature, float *const object2_temperature)</argsstring>
        <name>mlx90614_get_temperatures</name>
        <param>
          <type><ref refid="group__drivers_1ga5cb6e6c62eec0b78a6e74bc7d9a0c186" kindref="member">mlx90614_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>float *const</type>
          <declname>ambient_temperature</declname>
        </param>
        <param>
          <type>float *const</type>
          <declname>object1_temperature</declname>
        </param>
        <param>
          <type>float *const</type>
          <declname>object2_temperature</declname>
        </param>
        <briefdescription>
<para>Reads all three temperatures (ambient, object 1 and object 2) from the MLX90614. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MLX90614 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">ambient_temperature</parametername>
</parameternamelist>
<parameterdescription>
<para>Ambient temperature in degrees celsius. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">object1_temperature</parametername>
</parameternamelist>
<parameterdescription>
<para>Object 1 temperature in degrees celsius. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">object2_temperature</parametername>
</parameternamelist>
<parameterdescription>
<para>Object 2 temperature in degrees celsius. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" line="299" column="11" bodyfile="components/peripherals/i2c/esp_mlx90614/mlx90614.c" bodystart="429" bodyend="438" declfile="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" declline="299" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gaa53b297cab26b1204884f542d2cd13e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t mlx90614_get_ambient_temperature</definition>
        <argsstring>(mlx90614_handle_t handle, float *const ambient_temperature)</argsstring>
        <name>mlx90614_get_ambient_temperature</name>
        <param>
          <type><ref refid="group__drivers_1ga5cb6e6c62eec0b78a6e74bc7d9a0c186" kindref="member">mlx90614_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>float *const</type>
          <declname>ambient_temperature</declname>
        </param>
        <briefdescription>
<para>Reads the ambient temperature from MLX90614. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MLX90614 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">ambient_temperature</parametername>
</parameternamelist>
<parameterdescription>
<para>Ambient temperature in degrees celsius. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" line="308" column="11" bodyfile="components/peripherals/i2c/esp_mlx90614/mlx90614.c" bodystart="440" bodyend="453" declfile="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" declline="308" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga9adc8ce95a84866b6d5eb783f400750f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t mlx90614_get_object1_temperature</definition>
        <argsstring>(mlx90614_handle_t handle, float *const object1_temperature)</argsstring>
        <name>mlx90614_get_object1_temperature</name>
        <param>
          <type><ref refid="group__drivers_1ga5cb6e6c62eec0b78a6e74bc7d9a0c186" kindref="member">mlx90614_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>float *const</type>
          <declname>object1_temperature</declname>
        </param>
        <briefdescription>
<para>Reads object 1 temperature from mlx90614. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MLX90614 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">object1_temperature</parametername>
</parameternamelist>
<parameterdescription>
<para>Object 1 temperature in degrees celsius. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" line="317" column="11" bodyfile="components/peripherals/i2c/esp_mlx90614/mlx90614.c" bodystart="455" bodyend="468" declfile="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" declline="317" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga3fa1330f26dc797efba1165c1c1b3c89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t mlx90614_get_object2_temperature</definition>
        <argsstring>(mlx90614_handle_t handle, float *const object2_temperature)</argsstring>
        <name>mlx90614_get_object2_temperature</name>
        <param>
          <type><ref refid="group__drivers_1ga5cb6e6c62eec0b78a6e74bc7d9a0c186" kindref="member">mlx90614_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>float *const</type>
          <declname>object2_temperature</declname>
        </param>
        <briefdescription>
<para>Reads object 2 temperature from MLX90614. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MLX90614 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">object2_temperature</parametername>
</parameternamelist>
<parameterdescription>
<para>Object 2 temperature in degrees celsius. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" line="326" column="11" bodyfile="components/peripherals/i2c/esp_mlx90614/mlx90614.c" bodystart="470" bodyend="483" declfile="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" declline="326" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga29c2f952a2c5456614c69444bbb6b761" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t mlx90614_get_ir_channel1</definition>
        <argsstring>(mlx90614_handle_t handle, int16_t *const ir_channel1)</argsstring>
        <name>mlx90614_get_ir_channel1</name>
        <param>
          <type><ref refid="group__drivers_1ga5cb6e6c62eec0b78a6e74bc7d9a0c186" kindref="member">mlx90614_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>int16_t *const</type>
          <declname>ir_channel1</declname>
        </param>
        <briefdescription>
<para>Reads IR channel 1 from MLX90614. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MLX90614 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ir_channel1</parametername>
</parameternamelist>
<parameterdescription>
<para>IR channel 1. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" line="335" column="11" bodyfile="components/peripherals/i2c/esp_mlx90614/mlx90614.c" bodystart="485" bodyend="495" declfile="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" declline="335" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gaf68ce13d1a00f65eeca56ed12c8b168c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t mlx90614_get_ir_channel2</definition>
        <argsstring>(mlx90614_handle_t handle, int16_t *const ir_channel2)</argsstring>
        <name>mlx90614_get_ir_channel2</name>
        <param>
          <type><ref refid="group__drivers_1ga5cb6e6c62eec0b78a6e74bc7d9a0c186" kindref="member">mlx90614_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>int16_t *const</type>
          <declname>ir_channel2</declname>
        </param>
        <briefdescription>
<para>Reads IR channel 2 from MLX90614. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MLX90614 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ir_channel1</parametername>
</parameternamelist>
<parameterdescription>
<para>IR channel 2. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" line="344" column="11" bodyfile="components/peripherals/i2c/esp_mlx90614/mlx90614.c" bodystart="497" bodyend="507" declfile="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" declline="344" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gae9e9b5674e87016d3ab86924f14e18a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t mlx90614_get_ambient_temperature_range</definition>
        <argsstring>(mlx90614_handle_t handle, float *const ambient_temperature_range)</argsstring>
        <name>mlx90614_get_ambient_temperature_range</name>
        <param>
          <type><ref refid="group__drivers_1ga5cb6e6c62eec0b78a6e74bc7d9a0c186" kindref="member">mlx90614_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>float *const</type>
          <declname>ambient_temperature_range</declname>
        </param>
        <briefdescription>
<para>Reads ambient temperature range from MLX90614. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MLX90614 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ambient_temperature_range</parametername>
</parameternamelist>
<parameterdescription>
<para>Ambient temperature range. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" line="353" column="11" bodyfile="components/peripherals/i2c/esp_mlx90614/mlx90614.c" bodystart="509" bodyend="522" declfile="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" declline="353" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga7bbd918f23b1fd6a743e00617b743761" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t mlx90614_get_emissivity</definition>
        <argsstring>(mlx90614_handle_t handle, float *const coefficient)</argsstring>
        <name>mlx90614_get_emissivity</name>
        <param>
          <type><ref refid="group__drivers_1ga5cb6e6c62eec0b78a6e74bc7d9a0c186" kindref="member">mlx90614_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>float *const</type>
          <declname>coefficient</declname>
        </param>
        <briefdescription>
<para>Reads emissivity coefficient (0.1 to 1.0) setting from MLX90614. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MLX90614 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>emissivity</parametername>
</parameternamelist>
<parameterdescription>
<para>MLX90614 emissivity coefficient (0.1 to 1.0) setting. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" line="362" column="11" bodyfile="components/peripherals/i2c/esp_mlx90614/mlx90614.c" bodystart="524" bodyend="537" declfile="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" declline="362" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gabc92065ed27424a5f72c9fbbb1843221" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t mlx90614_set_emissivity</definition>
        <argsstring>(mlx90614_handle_t handle, const float coefficient)</argsstring>
        <name>mlx90614_set_emissivity</name>
        <param>
          <type><ref refid="group__drivers_1ga5cb6e6c62eec0b78a6e74bc7d9a0c186" kindref="member">mlx90614_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>coefficient</declname>
        </param>
        <briefdescription>
<para>Writes emissivity coefficient (0.1 to 1.0) setting to MLX90614. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MLX90614 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>emissivity</parametername>
</parameternamelist>
<parameterdescription>
<para>MLX90614 emissivity coefficient (0.1 to 1.0) setting. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" line="371" column="11" bodyfile="components/peripherals/i2c/esp_mlx90614/mlx90614.c" bodystart="539" bodyend="552" declfile="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" declline="371" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga198317e5b867179de548f3fcb2c87906" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t mlx90614_get_object_maximum_temperature</definition>
        <argsstring>(mlx90614_handle_t handle, float *const temperature)</argsstring>
        <name>mlx90614_get_object_maximum_temperature</name>
        <param>
          <type><ref refid="group__drivers_1ga5cb6e6c62eec0b78a6e74bc7d9a0c186" kindref="member">mlx90614_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>float *const</type>
          <declname>temperature</declname>
        </param>
        <briefdescription>
<para>Reads maximum object temperature setting from MLX90614. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MLX90614 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>temperature</parametername>
</parameternamelist>
<parameterdescription>
<para>MLX90614 maximum object temperature setting in degrees Celsius. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" line="380" column="11" bodyfile="components/peripherals/i2c/esp_mlx90614/mlx90614.c" bodystart="555" bodyend="566" declfile="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" declline="380" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gafe59944841793f6ec6dec8bdfbf6c06f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t mlx90614_set_object_maximum_temperature</definition>
        <argsstring>(mlx90614_handle_t handle, const float temperature)</argsstring>
        <name>mlx90614_set_object_maximum_temperature</name>
        <param>
          <type><ref refid="group__drivers_1ga5cb6e6c62eec0b78a6e74bc7d9a0c186" kindref="member">mlx90614_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>temperature</declname>
        </param>
        <briefdescription>
<para>Writes maximum object temperature setting to MLX90614. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MLX90614 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>temperature</parametername>
</parameternamelist>
<parameterdescription>
<para>MLX90614 maximum object temperature setting in degrees Celsius. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" line="389" column="11" bodyfile="components/peripherals/i2c/esp_mlx90614/mlx90614.c" bodystart="568" bodyend="577" declfile="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" declline="389" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga2409170ee5b22a5f6f464d55a45e485d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t mlx90614_get_object_minimum_temperature</definition>
        <argsstring>(mlx90614_handle_t handle, float *const temperature)</argsstring>
        <name>mlx90614_get_object_minimum_temperature</name>
        <param>
          <type><ref refid="group__drivers_1ga5cb6e6c62eec0b78a6e74bc7d9a0c186" kindref="member">mlx90614_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>float *const</type>
          <declname>temperature</declname>
        </param>
        <briefdescription>
<para>Reads minimum object temperature setting from MLX90614. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MLX90614 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>temperature</parametername>
</parameternamelist>
<parameterdescription>
<para>MLX90614 minimum object temperature setting in degrees Celsius. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" line="398" column="11" bodyfile="components/peripherals/i2c/esp_mlx90614/mlx90614.c" bodystart="579" bodyend="590" declfile="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" declline="398" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gaad3c280185e3590a17b088cb183131d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t mlx90614_set_object_minimum_temperature</definition>
        <argsstring>(mlx90614_handle_t handle, const float temperature)</argsstring>
        <name>mlx90614_set_object_minimum_temperature</name>
        <param>
          <type><ref refid="group__drivers_1ga5cb6e6c62eec0b78a6e74bc7d9a0c186" kindref="member">mlx90614_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>temperature</declname>
        </param>
        <briefdescription>
<para>Writes minimum object temperature setting to MLX90614. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MLX90614 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>temperature</parametername>
</parameternamelist>
<parameterdescription>
<para>MLX90614 minimum object temperature setting in degrees Celsius. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" line="407" column="11" bodyfile="components/peripherals/i2c/esp_mlx90614/mlx90614.c" bodystart="592" bodyend="601" declfile="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" declline="407" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gaaa6cba838ea2747ce873eb89bd1b8c2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t mlx90614_get_address</definition>
        <argsstring>(mlx90614_handle_t handle, uint8_t *const address)</argsstring>
        <name>mlx90614_get_address</name>
        <param>
          <type><ref refid="group__drivers_1ga5cb6e6c62eec0b78a6e74bc7d9a0c186" kindref="member">mlx90614_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>uint8_t *const</type>
          <declname>address</declname>
        </param>
        <briefdescription>
<para>Reads I2C address setting from MLX90614. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MLX90614 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>address</parametername>
</parameternamelist>
<parameterdescription>
<para>MLX90614 I2C address setting. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" line="416" column="11" bodyfile="components/peripherals/i2c/esp_mlx90614/mlx90614.c" bodystart="603" bodyend="614" declfile="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" declline="416" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga9d62fd88b1a133af4c6849e0b6affb90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t mlx90614_set_address</definition>
        <argsstring>(mlx90614_handle_t handle, const uint8_t address)</argsstring>
        <name>mlx90614_set_address</name>
        <param>
          <type><ref refid="group__drivers_1ga5cb6e6c62eec0b78a6e74bc7d9a0c186" kindref="member">mlx90614_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>address</declname>
        </param>
        <briefdescription>
<para>Writes I2C address setting to MLX90614. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>MLX90614 device handle must be reinitialized when I2C address is changed.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MLX90614 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>address</parametername>
</parameternamelist>
<parameterdescription>
<para>MLX90614 I2C address setting. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" line="427" column="11" bodyfile="components/peripherals/i2c/esp_mlx90614/mlx90614.c" bodystart="616" bodyend="635" declfile="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" declline="427" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga5bd6555a149d3542970c66fe7dbd9aa6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t mlx90614_sleep</definition>
        <argsstring>(mlx90614_handle_t handle)</argsstring>
        <name>mlx90614_sleep</name>
        <param>
          <type><ref refid="group__drivers_1ga5cb6e6c62eec0b78a6e74bc7d9a0c186" kindref="member">mlx90614_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Puts the MLX90614 into sleep mode. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MLX90614 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" line="435" column="11" bodyfile="components/peripherals/i2c/esp_mlx90614/mlx90614.c" bodystart="637" bodyend="642" declfile="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" declline="435" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga6084ae9316aa34a499c35607caad73e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t mlx90614_wakeup</definition>
        <argsstring>(mlx90614_handle_t handle)</argsstring>
        <name>mlx90614_wakeup</name>
        <param>
          <type><ref refid="group__drivers_1ga5cb6e6c62eec0b78a6e74bc7d9a0c186" kindref="member">mlx90614_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Wakes-up the MLX90614 from sleep mode. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MLX90614 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" line="443" column="11" bodyfile="components/peripherals/i2c/esp_mlx90614/mlx90614.c" bodystart="644" bodyend="649" declfile="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" declline="443" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga538c2e4ce54941d0276df342a5ff3c16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t mlx90614_remove</definition>
        <argsstring>(mlx90614_handle_t handle)</argsstring>
        <name>mlx90614_remove</name>
        <param>
          <type><ref refid="group__drivers_1ga5cb6e6c62eec0b78a6e74bc7d9a0c186" kindref="member">mlx90614_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Removes an MLX90614 device from master bus. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MLX90614 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" line="451" column="11" bodyfile="components/peripherals/i2c/esp_mlx90614/mlx90614.c" bodystart="651" bodyend="656" declfile="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" declline="451" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga14e6bf68c0f1ec63183ec07978cba91f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t mlx90614_delete</definition>
        <argsstring>(mlx90614_handle_t handle)</argsstring>
        <name>mlx90614_delete</name>
        <param>
          <type><ref refid="group__drivers_1ga5cb6e6c62eec0b78a6e74bc7d9a0c186" kindref="member">mlx90614_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Removes an MLX90614 device from master bus and frees handle. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MLX90614 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" line="459" column="11" bodyfile="components/peripherals/i2c/esp_mlx90614/mlx90614.c" bodystart="658" bodyend="672" declfile="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" declline="459" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gae95f6be3a0ece48094e6752fa798248c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * mlx90614_get_fw_version</definition>
        <argsstring>(void)</argsstring>
        <name>mlx90614_get_fw_version</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Converts MLX90614 firmware version numbers (major, minor, patch, build) into a string. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>char* MLX90614 firmware version as a string that is formatted as X.X.X (e.g. 4.0.0). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" line="466" column="12" bodyfile="components/peripherals/i2c/esp_mlx90614/mlx90614.c" bodystart="674" bodyend="676" declfile="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" declline="466" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gaf441a9689a95cb859df7035940e009f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t mlx90614_get_fw_version_number</definition>
        <argsstring>(void)</argsstring>
        <name>mlx90614_get_fw_version_number</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Converts MLX90614 firmware version numbers (major, minor, patch) into an integer value. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>int32_t MLX90614 firmware version number. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" line="473" column="9" bodyfile="components/peripherals/i2c/esp_mlx90614/mlx90614.c" bodystart="678" bodyend="680" declfile="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" declline="473" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga95b426b6a4a1eee47247f74923ba0d31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t mmc56x3_get_status_register</definition>
        <argsstring>(mmc56x3_handle_t handle, mmc56x3_status_register_t *const reg)</argsstring>
        <name>mmc56x3_get_status_register</name>
        <param>
          <type><ref refid="group__drivers_1gad7010c389e7821d1ed37ec2be5341039" kindref="member">mmc56x3_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>mmc56x3_status_register_t *const</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Reads status register from MMC56X3. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MMC56X3 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>MMC56X3 status register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mmc56x3/include/mmc56x3.h" line="220" column="11" bodyfile="components/peripherals/i2c/esp_mmc56x3/mmc56x3.c" bodystart="163" bodyend="174" declfile="components/peripherals/i2c/esp_mmc56x3/include/mmc56x3.h" declline="220" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga08666e92f36f0f6e78be2862a918fe4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t mmc56x3_set_control0_register</definition>
        <argsstring>(mmc56x3_handle_t handle, const mmc56x3_control0_register_t reg)</argsstring>
        <name>mmc56x3_set_control0_register</name>
        <param>
          <type><ref refid="group__drivers_1gad7010c389e7821d1ed37ec2be5341039" kindref="member">mmc56x3_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const mmc56x3_control0_register_t</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Writes control 0 register to MMC56X3. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MMC56X3 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reg</parametername>
</parameternamelist>
<parameterdescription>
<para>MMC56X3 control 0 register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mmc56x3/include/mmc56x3.h" line="229" column="11" bodyfile="components/peripherals/i2c/esp_mmc56x3/mmc56x3.c" bodystart="176" bodyend="191" declfile="components/peripherals/i2c/esp_mmc56x3/include/mmc56x3.h" declline="229" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga31aaa5bbe130a6163869667a60fb5301" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t mmc56x3_set_control1_register</definition>
        <argsstring>(mmc56x3_handle_t handle, const mmc56x3_control1_register_t reg)</argsstring>
        <name>mmc56x3_set_control1_register</name>
        <param>
          <type><ref refid="group__drivers_1gad7010c389e7821d1ed37ec2be5341039" kindref="member">mmc56x3_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const mmc56x3_control1_register_t</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Writes control 1 register to MMC56X3. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MMC56X3 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reg</parametername>
</parameternamelist>
<parameterdescription>
<para>MMC56X3 control 1 register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mmc56x3/include/mmc56x3.h" line="238" column="11" bodyfile="components/peripherals/i2c/esp_mmc56x3/mmc56x3.c" bodystart="193" bodyend="206" declfile="components/peripherals/i2c/esp_mmc56x3/include/mmc56x3.h" declline="238" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga3a0d8f3ad1db51aa0da6ff9223204a85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t mmc56x3_set_control2_register</definition>
        <argsstring>(mmc56x3_handle_t handle, const mmc56x3_control2_register_t reg)</argsstring>
        <name>mmc56x3_set_control2_register</name>
        <param>
          <type><ref refid="group__drivers_1gad7010c389e7821d1ed37ec2be5341039" kindref="member">mmc56x3_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const mmc56x3_control2_register_t</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Writes control 2 register to MMC56X3. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MMC56X3 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reg</parametername>
</parameternamelist>
<parameterdescription>
<para>MMC56X3 control 2 register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mmc56x3/include/mmc56x3.h" line="247" column="11" bodyfile="components/peripherals/i2c/esp_mmc56x3/mmc56x3.c" bodystart="208" bodyend="223" declfile="components/peripherals/i2c/esp_mmc56x3/include/mmc56x3.h" declline="247" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gabdaf66829842997beb2ab5f424bc812f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t mmc56x3_get_product_id_register</definition>
        <argsstring>(mmc56x3_handle_t handle, uint8_t *const reg)</argsstring>
        <name>mmc56x3_get_product_id_register</name>
        <param>
          <type><ref refid="group__drivers_1gad7010c389e7821d1ed37ec2be5341039" kindref="member">mmc56x3_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>uint8_t *const</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Reads product identifier register from MMC56X3. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MMC56X3 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reg</parametername>
</parameternamelist>
<parameterdescription>
<para>MMC56X3 product id register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mmc56x3/include/mmc56x3.h" line="256" column="11" bodyfile="components/peripherals/i2c/esp_mmc56x3/mmc56x3.c" bodystart="225" bodyend="236" declfile="components/peripherals/i2c/esp_mmc56x3/include/mmc56x3.h" declline="256" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga5a09995eaf74096e065a6c6a39dc80dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t mmc56x3_init</definition>
        <argsstring>(i2c_master_bus_handle_t master_handle, const mmc56x3_config_t *mmc56x3_config, mmc56x3_handle_t *mmc56x3_handle)</argsstring>
        <name>mmc56x3_init</name>
        <param>
          <type>i2c_master_bus_handle_t</type>
          <declname>master_handle</declname>
        </param>
        <param>
          <type>const <ref refid="group__drivers_1gace8f7bf433f0bfc89754ddbfb7a7d2d3" kindref="member">mmc56x3_config_t</ref> *</type>
          <declname>mmc56x3_config</declname>
        </param>
        <param>
          <type><ref refid="group__drivers_1gad7010c389e7821d1ed37ec2be5341039" kindref="member">mmc56x3_handle_t</ref> *</type>
          <declname>mmc56x3_handle</declname>
        </param>
        <briefdescription>
<para>Initializes an MMC56X3 device onto the I2C master bus. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">master_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>I2C master bus handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mmc56x3_config</parametername>
</parameternamelist>
<parameterdescription>
<para>MMC56X3 device configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">mmc56x3_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MMC56X3 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mmc56x3/include/mmc56x3.h" line="266" column="11" bodyfile="components/peripherals/i2c/esp_mmc56x3/mmc56x3.c" bodystart="238" bodyend="295" declfile="components/peripherals/i2c/esp_mmc56x3/include/mmc56x3.h" declline="266" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga7b84f50c19f98870bb3882bd985897c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t mmc56x3_get_temperature</definition>
        <argsstring>(mmc56x3_handle_t handle, float *const temperature)</argsstring>
        <name>mmc56x3_get_temperature</name>
        <param>
          <type><ref refid="group__drivers_1gad7010c389e7821d1ed37ec2be5341039" kindref="member">mmc56x3_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>float *const</type>
          <declname>temperature</declname>
        </param>
        <briefdescription>
<para>Reads temperature from MMC56X3. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MMC56X3 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>temperature</parametername>
</parameternamelist>
<parameterdescription>
<para>Temperature in degrees celsius. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mmc56x3/include/mmc56x3.h" line="275" column="11" bodyfile="components/peripherals/i2c/esp_mmc56x3/mmc56x3.c" bodystart="297" bodyend="348" declfile="components/peripherals/i2c/esp_mmc56x3/include/mmc56x3.h" declline="275" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gab38f0a15f1b7b3fb06d56ea38848faf1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t mmc56x3_get_magnetic_axes</definition>
        <argsstring>(mmc56x3_handle_t handle, mmc56x3_magnetic_axes_data_t *const axes_data)</argsstring>
        <name>mmc56x3_get_magnetic_axes</name>
        <param>
          <type><ref refid="group__drivers_1gad7010c389e7821d1ed37ec2be5341039" kindref="member">mmc56x3_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="group__drivers_1ga4f12cc6fde28c182e28c53d82ebbddbb" kindref="member">mmc56x3_magnetic_axes_data_t</ref> *const</type>
          <declname>axes_data</declname>
        </param>
        <briefdescription>
<para>Reads magnetic axes (x, y, z axes) from MMC56X3. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MMC56X3 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>axes_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Magnetic axes data (x, y, z axes) in mG. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mmc56x3/include/mmc56x3.h" line="284" column="11" bodyfile="components/peripherals/i2c/esp_mmc56x3/mmc56x3.c" bodystart="350" bodyend="405" declfile="components/peripherals/i2c/esp_mmc56x3/include/mmc56x3.h" declline="284" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gae8cb97b4b73bdffb4039f0c8e5696336" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t mmc56x3_get_temperature_data_status</definition>
        <argsstring>(mmc56x3_handle_t handle, bool *const ready)</argsstring>
        <name>mmc56x3_get_temperature_data_status</name>
        <param>
          <type><ref refid="group__drivers_1gad7010c389e7821d1ed37ec2be5341039" kindref="member">mmc56x3_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>bool *const</type>
          <declname>ready</declname>
        </param>
        <briefdescription>
<para>Reads temperature data status from MMC56X3. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MMC56X3 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ready</parametername>
</parameternamelist>
<parameterdescription>
<para>Temperature data is ready when true. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mmc56x3/include/mmc56x3.h" line="293" column="11" bodyfile="components/peripherals/i2c/esp_mmc56x3/mmc56x3.c" bodystart="422" bodyend="435" declfile="components/peripherals/i2c/esp_mmc56x3/include/mmc56x3.h" declline="293" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga01592af2fb75a9bc6e8b7c1950614d7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t mmc56x3_get_magnetic_data_status</definition>
        <argsstring>(mmc56x3_handle_t handle, bool *const ready)</argsstring>
        <name>mmc56x3_get_magnetic_data_status</name>
        <param>
          <type><ref refid="group__drivers_1gad7010c389e7821d1ed37ec2be5341039" kindref="member">mmc56x3_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>bool *const</type>
          <declname>ready</declname>
        </param>
        <briefdescription>
<para>Reads magnetic data status from MMC56X3. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MMC56X3 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ready</parametername>
</parameternamelist>
<parameterdescription>
<para>Magnetic data is ready when true. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mmc56x3/include/mmc56x3.h" line="302" column="11" bodyfile="components/peripherals/i2c/esp_mmc56x3/mmc56x3.c" bodystart="407" bodyend="420" declfile="components/peripherals/i2c/esp_mmc56x3/include/mmc56x3.h" declline="302" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga8dbb902d661c9a70ecf82d879ed4a347" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t mmc56x3_get_data_status</definition>
        <argsstring>(mmc56x3_handle_t handle, bool *const magnetic_ready, bool *const temperature_ready)</argsstring>
        <name>mmc56x3_get_data_status</name>
        <param>
          <type><ref refid="group__drivers_1gad7010c389e7821d1ed37ec2be5341039" kindref="member">mmc56x3_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>bool *const</type>
          <declname>magnetic_ready</declname>
        </param>
        <param>
          <type>bool *const</type>
          <declname>temperature_ready</declname>
        </param>
        <briefdescription>
<para>Reads magnetic and temperature data status from MMC56X3. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MMC56X3 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>magnetic_ready</parametername>
</parameternamelist>
<parameterdescription>
<para>Magnetic data is ready when true. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>temperature_ready</parametername>
</parameternamelist>
<parameterdescription>
<para>Temperature data is ready when true. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mmc56x3/include/mmc56x3.h" line="312" column="11" bodyfile="components/peripherals/i2c/esp_mmc56x3/mmc56x3.c" bodystart="437" bodyend="451" declfile="components/peripherals/i2c/esp_mmc56x3/include/mmc56x3.h" declline="312" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga5bc08a2ff58554dbd8c3a2d4be7c4425" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t mmc56x3_set_measure_mode</definition>
        <argsstring>(mmc56x3_handle_t handle, const bool continuous)</argsstring>
        <name>mmc56x3_set_measure_mode</name>
        <param>
          <type><ref refid="group__drivers_1gad7010c389e7821d1ed37ec2be5341039" kindref="member">mmc56x3_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>continuous</declname>
        </param>
        <briefdescription>
<para>Writes measurement mode to MMC56X3. The data rate must be configured to a non-zero value before enabling continuous measurements. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MMC56X3 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>continuous</parametername>
</parameternamelist>
<parameterdescription>
<para>Measurement mode is continuous when true. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mmc56x3/include/mmc56x3.h" line="321" column="11" bodyfile="components/peripherals/i2c/esp_mmc56x3/mmc56x3.c" bodystart="453" bodyend="485" declfile="components/peripherals/i2c/esp_mmc56x3/include/mmc56x3.h" declline="321" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gafbdbe7f46092beec4d619ed26b39e977" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t mmc56x3_set_data_rate</definition>
        <argsstring>(mmc56x3_handle_t handle, const uint16_t rate)</argsstring>
        <name>mmc56x3_set_data_rate</name>
        <param>
          <type><ref refid="group__drivers_1gad7010c389e7821d1ed37ec2be5341039" kindref="member">mmc56x3_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const uint16_t</type>
          <declname>rate</declname>
        </param>
        <briefdescription>
<para>Writes data rate to MMC56X3. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MMC56X3 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rate</parametername>
</parameternamelist>
<parameterdescription>
<para>MMC56X3 data rate setting. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mmc56x3/include/mmc56x3.h" line="330" column="11" bodyfile="components/peripherals/i2c/esp_mmc56x3/mmc56x3.c" bodystart="487" bodyend="530" declfile="components/peripherals/i2c/esp_mmc56x3/include/mmc56x3.h" declline="330" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga2fd05ad31f960373b8c910767f6a2509" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t mmc56x3_set_measure_bandwidth</definition>
        <argsstring>(mmc56x3_handle_t handle, const mmc56x3_measurement_times_t bandwidth)</argsstring>
        <name>mmc56x3_set_measure_bandwidth</name>
        <param>
          <type><ref refid="group__drivers_1gad7010c389e7821d1ed37ec2be5341039" kindref="member">mmc56x3_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const <ref refid="group__drivers_1ga04eb0a8975116163a7527e4a3710d90d" kindref="member">mmc56x3_measurement_times_t</ref></type>
          <declname>bandwidth</declname>
        </param>
        <briefdescription>
<para>Writes measurement bandwidth to MMC56X3. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MMC56X3 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bandwith</parametername>
</parameternamelist>
<parameterdescription>
<para>MMC56X3 measurement bandwidth setting. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mmc56x3/include/mmc56x3.h" line="339" column="11" bodyfile="components/peripherals/i2c/esp_mmc56x3/mmc56x3.c" bodystart="532" bodyend="546" declfile="components/peripherals/i2c/esp_mmc56x3/include/mmc56x3.h" declline="339" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gae937947ec4d01f005121f209fd4be69b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t mmc56x3_enable_periodical_set</definition>
        <argsstring>(mmc56x3_handle_t handle, const mmc56x3_measurement_samples_t samples)</argsstring>
        <name>mmc56x3_enable_periodical_set</name>
        <param>
          <type><ref refid="group__drivers_1gad7010c389e7821d1ed37ec2be5341039" kindref="member">mmc56x3_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const <ref refid="group__drivers_1ga6a8e469cb5a690f8bcb7a6163f01b490" kindref="member">mmc56x3_measurement_samples_t</ref></type>
          <declname>samples</declname>
        </param>
        <briefdescription>
<para>Enables MMC56X3 periodical set when the number of samples threshold is met. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MMC56X3 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>samples</parametername>
</parameternamelist>
<parameterdescription>
<para>MMC56X3 measurement samples setting. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mmc56x3/include/mmc56x3.h" line="348" column="11" bodyfile="components/peripherals/i2c/esp_mmc56x3/mmc56x3.c" bodystart="548" bodyend="567" declfile="components/peripherals/i2c/esp_mmc56x3/include/mmc56x3.h" declline="348" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gac62ab6cc87a701845290de9c018624d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t mmc56x3_disable_periodical_set</definition>
        <argsstring>(mmc56x3_handle_t handle)</argsstring>
        <name>mmc56x3_disable_periodical_set</name>
        <param>
          <type><ref refid="group__drivers_1gad7010c389e7821d1ed37ec2be5341039" kindref="member">mmc56x3_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Disables MMC56X3 periodical set. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MMC56X3 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mmc56x3/include/mmc56x3.h" line="356" column="11" bodyfile="components/peripherals/i2c/esp_mmc56x3/mmc56x3.c" bodystart="569" bodyend="592" declfile="components/peripherals/i2c/esp_mmc56x3/include/mmc56x3.h" declline="356" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga25ffeac2e62c1c699b18cb23f26f5738" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t mmc56x3_set_selftest_thresholds</definition>
        <argsstring>(mmc56x3_handle_t handle, const mmc56x3_selftest_axes_data_t axes_data)</argsstring>
        <name>mmc56x3_set_selftest_thresholds</name>
        <param>
          <type><ref refid="group__drivers_1gad7010c389e7821d1ed37ec2be5341039" kindref="member">mmc56x3_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const <ref refid="group__drivers_1ga6d0ea50e620e218d585d9a966d012eb2" kindref="member">mmc56x3_selftest_axes_data_t</ref></type>
          <declname>axes_data</declname>
        </param>
        <briefdescription>
<para>Writes axes configuration to MMC56X3 to enable or disable axes (x, y, z), axes are enabled by default. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MMC56X3 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x_axis_disabled</parametername>
</parameternamelist>
<parameterdescription>
<para>X-axis is enabled by default, set to true to disable x-axis. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y_axis_disabled</parametername>
</parameternamelist>
<parameterdescription>
<para>Y-axis is enabled by default, set to true to disable y-axis. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>z_axis_disabled</parametername>
</parameternamelist>
<parameterdescription>
<para>Y-axis is enabled by default, set to true to disable z-axis. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success.</para>
</simplesect>
Writes self-test axes data thresholds to MMC56X3.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MMC56X3 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>axes_data</parametername>
</parameternamelist>
<parameterdescription>
<para>MMC56X3 axes data thresholds setting. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mmc56x3/include/mmc56x3.h" line="376" column="11" bodyfile="components/peripherals/i2c/esp_mmc56x3/mmc56x3.c" bodystart="612" bodyend="625" declfile="components/peripherals/i2c/esp_mmc56x3/include/mmc56x3.h" declline="376" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga29e31e967c1c0c97a030c37a99f9d5a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t mmc56x3_get_selftest_set_values</definition>
        <argsstring>(mmc56x3_handle_t handle, mmc56x3_selftest_axes_data_t *const axes_data)</argsstring>
        <name>mmc56x3_get_selftest_set_values</name>
        <param>
          <type><ref refid="group__drivers_1gad7010c389e7821d1ed37ec2be5341039" kindref="member">mmc56x3_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="group__drivers_1ga6d0ea50e620e218d585d9a966d012eb2" kindref="member">mmc56x3_selftest_axes_data_t</ref> *const</type>
          <declname>axes_data</declname>
        </param>
        <briefdescription>
<para>Reads self-test axes data set-values from MMC56X3. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MMC56X3 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>axes_data</parametername>
</parameternamelist>
<parameterdescription>
<para>MMC56X3 axes data set-values setting. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mmc56x3/include/mmc56x3.h" line="385" column="11" bodyfile="components/peripherals/i2c/esp_mmc56x3/mmc56x3.c" bodystart="627" bodyend="640" declfile="components/peripherals/i2c/esp_mmc56x3/include/mmc56x3.h" declline="385" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gaad5b583f33c13a5758f47d7af49f140a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t mmc56x3_set_selftest_set_values</definition>
        <argsstring>(mmc56x3_handle_t handle, const mmc56x3_selftest_axes_data_t axes_data)</argsstring>
        <name>mmc56x3_set_selftest_set_values</name>
        <param>
          <type><ref refid="group__drivers_1gad7010c389e7821d1ed37ec2be5341039" kindref="member">mmc56x3_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const <ref refid="group__drivers_1ga6d0ea50e620e218d585d9a966d012eb2" kindref="member">mmc56x3_selftest_axes_data_t</ref></type>
          <declname>axes_data</declname>
        </param>
        <briefdescription>
<para>Writes self-test axes data set-values to MMC56X3. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MMC56X3 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>axes_data</parametername>
</parameternamelist>
<parameterdescription>
<para>MMC56X3 axes data set-values setting. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mmc56x3/include/mmc56x3.h" line="394" column="11" bodyfile="components/peripherals/i2c/esp_mmc56x3/mmc56x3.c" bodystart="642" bodyend="655" declfile="components/peripherals/i2c/esp_mmc56x3/include/mmc56x3.h" declline="394" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga185f6a5fad7af2805cc348c9080a1d1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t mmc56x3_magnetic_set_reset</definition>
        <argsstring>(mmc56x3_handle_t handle)</argsstring>
        <name>mmc56x3_magnetic_set_reset</name>
        <param>
          <type><ref refid="group__drivers_1gad7010c389e7821d1ed37ec2be5341039" kindref="member">mmc56x3_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Pulses large currents through the sense coils to clear any offset. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MMC56X3 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mmc56x3/include/mmc56x3.h" line="402" column="11" bodyfile="components/peripherals/i2c/esp_mmc56x3/mmc56x3.c" bodystart="594" bodyend="610" declfile="components/peripherals/i2c/esp_mmc56x3/include/mmc56x3.h" declline="402" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gaabd21a2191ea0580ebab958771176f0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t mmc56x3_reset</definition>
        <argsstring>(mmc56x3_handle_t handle)</argsstring>
        <name>mmc56x3_reset</name>
        <param>
          <type><ref refid="group__drivers_1gad7010c389e7821d1ed37ec2be5341039" kindref="member">mmc56x3_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Issues soft-reset to MMC56X3. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MMC56X3 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mmc56x3/include/mmc56x3.h" line="410" column="11" bodyfile="components/peripherals/i2c/esp_mmc56x3/mmc56x3.c" bodystart="657" bodyend="682" declfile="components/peripherals/i2c/esp_mmc56x3/include/mmc56x3.h" declline="410" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga0ffa7e19030a3f3dbda3976917e8bb9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t mmc56x3_remove</definition>
        <argsstring>(mmc56x3_handle_t handle)</argsstring>
        <name>mmc56x3_remove</name>
        <param>
          <type><ref refid="group__drivers_1gad7010c389e7821d1ed37ec2be5341039" kindref="member">mmc56x3_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Removes an MMC56X3 device from master I2C bus. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MMC56X3 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mmc56x3/include/mmc56x3.h" line="418" column="11" bodyfile="components/peripherals/i2c/esp_mmc56x3/mmc56x3.c" bodystart="684" bodyend="690" declfile="components/peripherals/i2c/esp_mmc56x3/include/mmc56x3.h" declline="418" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gaefb47ac2a1fc3f36261564629968afe8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t mmc56x3_delete</definition>
        <argsstring>(mmc56x3_handle_t handle)</argsstring>
        <name>mmc56x3_delete</name>
        <param>
          <type><ref refid="group__drivers_1gad7010c389e7821d1ed37ec2be5341039" kindref="member">mmc56x3_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Removes an MMC56X3 device from master I2C bus and delete the handle. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MMC56X3 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mmc56x3/include/mmc56x3.h" line="426" column="11" bodyfile="components/peripherals/i2c/esp_mmc56x3/mmc56x3.c" bodystart="692" bodyend="706" declfile="components/peripherals/i2c/esp_mmc56x3/include/mmc56x3.h" declline="426" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga9d3fb9eeea0d3e1d7adc40d5b6869012" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float mmc56x3_convert_to_heading</definition>
        <argsstring>(const mmc56x3_magnetic_axes_data_t axes_data)</argsstring>
        <name>mmc56x3_convert_to_heading</name>
        <param>
          <type>const <ref refid="group__drivers_1ga4f12cc6fde28c182e28c53d82ebbddbb" kindref="member">mmc56x3_magnetic_axes_data_t</ref></type>
          <declname>axes_data</declname>
        </param>
        <briefdescription>
<para>Converts magnetic axes data to a heading. See Honeywell application note AN-203 for details. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>axes_data</parametername>
</parameternamelist>
<parameterdescription>
<para>MMC56X3 magnetic axes data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>float Heading in degrees. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mmc56x3/include/mmc56x3.h" line="434" column="7" bodyfile="components/peripherals/i2c/esp_mmc56x3/mmc56x3.c" bodystart="708" bodyend="718" declfile="components/peripherals/i2c/esp_mmc56x3/include/mmc56x3.h" declline="434" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga739d5135d3a55245ee3913ef5f50786b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float mmc56x3_convert_to_true_heading</definition>
        <argsstring>(const float declination, const mmc56x3_magnetic_axes_data_t axes_data)</argsstring>
        <name>mmc56x3_convert_to_true_heading</name>
        <param>
          <type>const float</type>
          <declname>declination</declname>
        </param>
        <param>
          <type>const <ref refid="group__drivers_1ga4f12cc6fde28c182e28c53d82ebbddbb" kindref="member">mmc56x3_magnetic_axes_data_t</ref></type>
          <declname>axes_data</declname>
        </param>
        <briefdescription>
<para>Converts magnetic axes data with magnetic declination to a true heading. See Honeywell application note AN-203 for details. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>declination</parametername>
</parameternamelist>
<parameterdescription>
<para>MMC56X3 magnetic declination angle in degrees (<ulink url="http://www.magnetic-declination.com/">http://www.magnetic-declination.com/</ulink>) setting. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>axes_data</parametername>
</parameternamelist>
<parameterdescription>
<para>MMC56X3 magnetic axes data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>float True heading in degrees. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mmc56x3/include/mmc56x3.h" line="443" column="7" bodyfile="components/peripherals/i2c/esp_mmc56x3/mmc56x3.c" bodystart="720" bodyend="730" declfile="components/peripherals/i2c/esp_mmc56x3/include/mmc56x3.h" declline="443" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gadd1eb86a2cff452be43a3a0b4ea821c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * mmc56x3_get_fw_version</definition>
        <argsstring>(void)</argsstring>
        <name>mmc56x3_get_fw_version</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Converts MMC56X3 firmware version numbers (major, minor, patch) into a string. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>char* MMC56X3 firmware version as a string that is formatted as X.X.X (e.g. 4.0.0). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mmc56x3/include/mmc56x3.h" line="450" column="12" declfile="components/peripherals/i2c/esp_mmc56x3/include/mmc56x3.h" declline="450" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga001f3587d6aaa24e5e2e18444f980a4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t mmc56x3_get_fw_version_number</definition>
        <argsstring>(void)</argsstring>
        <name>mmc56x3_get_fw_version_number</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Converts MMC56X3 firmware version numbers (major, minor, patch) into an integer value. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>int32_t MMC56X3 firmware version number. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mmc56x3/include/mmc56x3.h" line="457" column="9" declfile="components/peripherals/i2c/esp_mmc56x3/include/mmc56x3.h" declline="457" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga4ab7443c20db1d997577ea9a1f190810" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t mpu6050_get_sample_rate_divider_register</definition>
        <argsstring>(mpu6050_handle_t handle, uint8_t *const reg)</argsstring>
        <name>mpu6050_get_sample_rate_divider_register</name>
        <param>
          <type><ref refid="group__drivers_1ga3f041319af2d0918869a8e0895f074a1" kindref="member">mpu6050_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>uint8_t *const</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Reads sample rate divider register from MPU6050. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MPU6050 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>MPU6050 sample rate divider value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" line="454" column="11" bodyfile="components/peripherals/i2c/esp_mpu6050/mpu6050.c" bodystart="221" bodyend="232" declfile="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" declline="454" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga74d46e13b3667734869b340ff532074e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t mpu6050_set_sample_rate_divider_register</definition>
        <argsstring>(mpu6050_handle_t handle, const uint8_t reg)</argsstring>
        <name>mpu6050_set_sample_rate_divider_register</name>
        <param>
          <type><ref refid="group__drivers_1ga3f041319af2d0918869a8e0895f074a1" kindref="member">mpu6050_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Writes sample rate divider register to MPU6050. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The Sample Rate is generated by dividing the gyroscope output rate by SMPLRT_DIV: <linebreak/>
 Sample Rate = Gyroscope Output Rate / (1 + SMPLRT_DIV) where Gyroscope Output Rate = 8kHz when the DLPF is disabled (DLPF_CFG = 0 or 7), and 1kHz when the DLPF is enabled (see Register 26).</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MPU6050 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>MPU6050 sample rate divider value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success.</para>
</simplesect>
sample rate = gyroscope output rate / (1 + sample rate divider) 8khz or 1khz </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" line="468" column="11" bodyfile="components/peripherals/i2c/esp_mpu6050/mpu6050.c" bodystart="238" bodyend="249" declfile="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" declline="468" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga23f5c00212d18a99015457407f5812dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t mpu6050_get_config_register</definition>
        <argsstring>(mpu6050_handle_t handle, mpu6050_config_register_t *const reg)</argsstring>
        <name>mpu6050_get_config_register</name>
        <param>
          <type><ref refid="group__drivers_1ga3f041319af2d0918869a8e0895f074a1" kindref="member">mpu6050_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>mpu6050_config_register_t *const</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Reads configuration register from MPU6050. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MPU6050 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>MPU6050 configuration register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" line="477" column="11" bodyfile="components/peripherals/i2c/esp_mpu6050/mpu6050.c" bodystart="251" bodyend="262" declfile="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" declline="477" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gac103520edf49a641ccb0c0374a780b97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t mpu6050_set_config_register</definition>
        <argsstring>(mpu6050_handle_t handle, const mpu6050_config_register_t reg)</argsstring>
        <name>mpu6050_set_config_register</name>
        <param>
          <type><ref refid="group__drivers_1ga3f041319af2d0918869a8e0895f074a1" kindref="member">mpu6050_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const mpu6050_config_register_t</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Writes configuration register to MPU6050. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MPU6050 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>MPU6050 configuration register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" line="486" column="11" bodyfile="components/peripherals/i2c/esp_mpu6050/mpu6050.c" bodystart="264" bodyend="279" declfile="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" declline="486" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga4fb8c2a6e61119991871c5d14b96c342" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t mpu6050_get_gyro_config_register</definition>
        <argsstring>(mpu6050_handle_t handle, mpu6050_gyro_config_register_t *const reg)</argsstring>
        <name>mpu6050_get_gyro_config_register</name>
        <param>
          <type><ref refid="group__drivers_1ga3f041319af2d0918869a8e0895f074a1" kindref="member">mpu6050_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>mpu6050_gyro_config_register_t *const</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Reads gyroscope configuration register from MPU6050. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MPU6050 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>MPU6050 gyroscope configuration register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" line="495" column="11" bodyfile="components/peripherals/i2c/esp_mpu6050/mpu6050.c" bodystart="281" bodyend="292" declfile="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" declline="495" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga7c5e882201fb02e488fa06607b3d322d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t mpu6050_set_gyro_config_register</definition>
        <argsstring>(mpu6050_handle_t handle, const mpu6050_gyro_config_register_t reg)</argsstring>
        <name>mpu6050_set_gyro_config_register</name>
        <param>
          <type><ref refid="group__drivers_1ga3f041319af2d0918869a8e0895f074a1" kindref="member">mpu6050_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const mpu6050_gyro_config_register_t</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Writes gyroscope configuration register to MPU6050. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MPU6050 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>MPU6050 gyroscope configuration register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" line="504" column="11" bodyfile="components/peripherals/i2c/esp_mpu6050/mpu6050.c" bodystart="294" bodyend="312" declfile="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" declline="504" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga9365601a647144f8afe1e042dabd5b8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t mpu6050_get_accel_config_register</definition>
        <argsstring>(mpu6050_handle_t handle, mpu6050_accel_config_register_t *const reg)</argsstring>
        <name>mpu6050_get_accel_config_register</name>
        <param>
          <type><ref refid="group__drivers_1ga3f041319af2d0918869a8e0895f074a1" kindref="member">mpu6050_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>mpu6050_accel_config_register_t *const</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Reads accelerometer configuration register from MPU6050. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MPU6050 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>MPU6050 accelerometer configuration register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" line="513" column="11" bodyfile="components/peripherals/i2c/esp_mpu6050/mpu6050.c" bodystart="314" bodyend="325" declfile="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" declline="513" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gae75debf8d75b7ec0dcabcbad6ee1d148" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t mpu6050_set_accel_config_register</definition>
        <argsstring>(mpu6050_handle_t handle, const mpu6050_accel_config_register_t reg)</argsstring>
        <name>mpu6050_set_accel_config_register</name>
        <param>
          <type><ref refid="group__drivers_1ga3f041319af2d0918869a8e0895f074a1" kindref="member">mpu6050_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const mpu6050_accel_config_register_t</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Writes accelerometer configuration register to MPU6050. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MPU6050 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>MPU6050 accelerometer configuration register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" line="522" column="11" bodyfile="components/peripherals/i2c/esp_mpu6050/mpu6050.c" bodystart="327" bodyend="345" declfile="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" declline="522" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga2caa2243d03d75e9c0e3b0050f63cb08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t mpu6050_get_interrupt_enable_register</definition>
        <argsstring>(mpu6050_handle_t handle, mpu6050_interrupt_enable_register_t *const reg)</argsstring>
        <name>mpu6050_get_interrupt_enable_register</name>
        <param>
          <type><ref refid="group__drivers_1ga3f041319af2d0918869a8e0895f074a1" kindref="member">mpu6050_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>mpu6050_interrupt_enable_register_t *const</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Reads interrupt enable register from MPU6050. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MPU6050 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>MPU6050 interrupt enable register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" line="531" column="11" bodyfile="components/peripherals/i2c/esp_mpu6050/mpu6050.c" bodystart="347" bodyend="358" declfile="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" declline="531" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga390a832a66d1340da2d03b29445c523d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t mpu6050_set_interrupt_enable_register</definition>
        <argsstring>(mpu6050_handle_t handle, const mpu6050_interrupt_enable_register_t reg)</argsstring>
        <name>mpu6050_set_interrupt_enable_register</name>
        <param>
          <type><ref refid="group__drivers_1ga3f041319af2d0918869a8e0895f074a1" kindref="member">mpu6050_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const mpu6050_interrupt_enable_register_t</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Writes interrupt enable register to MPU6050. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MPU6050 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>MPU6050 interrupt enable register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" line="540" column="11" bodyfile="components/peripherals/i2c/esp_mpu6050/mpu6050.c" bodystart="360" bodyend="375" declfile="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" declline="540" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga961f425b37fb0eb4086649b9fbe66278" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t mpu6050_get_interrupt_pin_config_register</definition>
        <argsstring>(mpu6050_handle_t handle, mpu6050_interrupt_pin_config_register_t *const reg)</argsstring>
        <name>mpu6050_get_interrupt_pin_config_register</name>
        <param>
          <type><ref refid="group__drivers_1ga3f041319af2d0918869a8e0895f074a1" kindref="member">mpu6050_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>mpu6050_interrupt_pin_config_register_t *const</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Reads interrupt pin configuration register from MPU6050. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MPU6050 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>MPU6050 interrupt pin configuration register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" line="549" column="11" bodyfile="components/peripherals/i2c/esp_mpu6050/mpu6050.c" bodystart="377" bodyend="388" declfile="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" declline="549" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gaec050ca6e180af7c6a3b61ac3c7023e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t mpu6050_set_interrupt_pin_config_register</definition>
        <argsstring>(mpu6050_handle_t handle, const mpu6050_interrupt_pin_config_register_t reg)</argsstring>
        <name>mpu6050_set_interrupt_pin_config_register</name>
        <param>
          <type><ref refid="group__drivers_1ga3f041319af2d0918869a8e0895f074a1" kindref="member">mpu6050_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const mpu6050_interrupt_pin_config_register_t</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Writes interrupt pin configuration register to MPU6050. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MPU6050 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reg</parametername>
</parameternamelist>
<parameterdescription>
<para>MPU6050 interrupt pin configuration register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" line="558" column="11" bodyfile="components/peripherals/i2c/esp_mpu6050/mpu6050.c" bodystart="390" bodyend="406" declfile="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" declline="558" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gacd6081fc3245cb547a56ca1805a36e0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t mpu6050_get_interrupt_status_register</definition>
        <argsstring>(mpu6050_handle_t handle, mpu6050_interrupt_status_register_t *const reg)</argsstring>
        <name>mpu6050_get_interrupt_status_register</name>
        <param>
          <type><ref refid="group__drivers_1ga3f041319af2d0918869a8e0895f074a1" kindref="member">mpu6050_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>mpu6050_interrupt_status_register_t *const</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Reads interrupt status register from MPU6050. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Interrupt status bits clear when read.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MPU6050 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>MPU6050 interrupt status register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" line="569" column="11" bodyfile="components/peripherals/i2c/esp_mpu6050/mpu6050.c" bodystart="408" bodyend="419" declfile="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" declline="569" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gae5906f63efd4278b0f14d20faf6475a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t mpu6050_get_signal_path_reset_register</definition>
        <argsstring>(mpu6050_handle_t handle, mpu6050_signal_path_reset_register_t *const reg)</argsstring>
        <name>mpu6050_get_signal_path_reset_register</name>
        <param>
          <type><ref refid="group__drivers_1ga3f041319af2d0918869a8e0895f074a1" kindref="member">mpu6050_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>mpu6050_signal_path_reset_register_t *const</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Reads signal path reset register from MPU6050. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MPU6050 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>MPU6050 signal path reset register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" line="578" column="11" declfile="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" declline="578" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga827ef9f07e4fbf7b2e37462483516e63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t mpu6050_set_signal_path_reset_register</definition>
        <argsstring>(mpu6050_handle_t handle, const mpu6050_signal_path_reset_register_t reg)</argsstring>
        <name>mpu6050_set_signal_path_reset_register</name>
        <param>
          <type><ref refid="group__drivers_1ga3f041319af2d0918869a8e0895f074a1" kindref="member">mpu6050_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const mpu6050_signal_path_reset_register_t</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Writes signal path reset register to MPU6050. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MPU6050 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>MPU6050 signal path reset register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" line="587" column="11" declfile="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" declline="587" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga875187c2e205ae5f1e43c8d7272ac0b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t mpu6050_get_user_control_register</definition>
        <argsstring>(mpu6050_handle_t handle, mpu6050_user_control_register_t *const reg)</argsstring>
        <name>mpu6050_get_user_control_register</name>
        <param>
          <type><ref refid="group__drivers_1ga3f041319af2d0918869a8e0895f074a1" kindref="member">mpu6050_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>mpu6050_user_control_register_t *const</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Reads user control register from MPU6050. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MPU6050 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>MPU6050 user control register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" line="596" column="11" declfile="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" declline="596" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga6fd4d0ad4e279ba35165daae7c135352" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t mpu6050_set_user_control_register</definition>
        <argsstring>(mpu6050_handle_t handle, const mpu6050_user_control_register_t reg)</argsstring>
        <name>mpu6050_set_user_control_register</name>
        <param>
          <type><ref refid="group__drivers_1ga3f041319af2d0918869a8e0895f074a1" kindref="member">mpu6050_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const mpu6050_user_control_register_t</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Writes user control register to MPU6050. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MPU6050 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>MPU6050 user control register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" line="605" column="11" declfile="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" declline="605" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga20d421bb6c06a578e8a86286c0b8be40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t mpu6050_get_power_management1_register</definition>
        <argsstring>(mpu6050_handle_t handle, mpu6050_power_management1_register_t *const reg)</argsstring>
        <name>mpu6050_get_power_management1_register</name>
        <param>
          <type><ref refid="group__drivers_1ga3f041319af2d0918869a8e0895f074a1" kindref="member">mpu6050_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>mpu6050_power_management1_register_t *const</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Reads power management 1 register from MPU6050. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MPU6050 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>MPU6050 power management 1 register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" line="614" column="11" bodyfile="components/peripherals/i2c/esp_mpu6050/mpu6050.c" bodystart="421" bodyend="432" declfile="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" declline="614" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gae3610dab1e816e2b2155316acd8247eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t mpu6050_set_power_management1_register</definition>
        <argsstring>(mpu6050_handle_t handle, const mpu6050_power_management1_register_t reg)</argsstring>
        <name>mpu6050_set_power_management1_register</name>
        <param>
          <type><ref refid="group__drivers_1ga3f041319af2d0918869a8e0895f074a1" kindref="member">mpu6050_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const mpu6050_power_management1_register_t</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Writes power management 1 register to MPU6050. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MPU6050 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>MPU6050 power management 1 register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" line="623" column="11" bodyfile="components/peripherals/i2c/esp_mpu6050/mpu6050.c" bodystart="434" bodyend="449" declfile="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" declline="623" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga9fb59b01f06b3dc74f1780b12a1153ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t mpu6050_get_power_management2_register</definition>
        <argsstring>(mpu6050_handle_t handle, mpu6050_power_management2_register_t *const reg)</argsstring>
        <name>mpu6050_get_power_management2_register</name>
        <param>
          <type><ref refid="group__drivers_1ga3f041319af2d0918869a8e0895f074a1" kindref="member">mpu6050_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>mpu6050_power_management2_register_t *const</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Reads power management 2 register from MPU6050. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MPU6050 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>MPU6050 power management 2 register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" line="632" column="11" bodyfile="components/peripherals/i2c/esp_mpu6050/mpu6050.c" bodystart="451" bodyend="462" declfile="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" declline="632" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gad94031f119ff3360c5dff5c90504f224" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t mpu6050_set_power_management2_register</definition>
        <argsstring>(mpu6050_handle_t handle, const mpu6050_power_management2_register_t reg)</argsstring>
        <name>mpu6050_set_power_management2_register</name>
        <param>
          <type><ref refid="group__drivers_1ga3f041319af2d0918869a8e0895f074a1" kindref="member">mpu6050_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const mpu6050_power_management2_register_t</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Writes power management 2 register to MPU6050. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MPU6050 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>MPU6050 power management 2 register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" line="641" column="11" bodyfile="components/peripherals/i2c/esp_mpu6050/mpu6050.c" bodystart="464" bodyend="475" declfile="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" declline="641" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga4500e1bacc71d7f2f6cb5d94324c2f09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t mpu6050_get_who_am_i_register</definition>
        <argsstring>(mpu6050_handle_t handle, mpu6050_who_am_i_register_t *const reg)</argsstring>
        <name>mpu6050_get_who_am_i_register</name>
        <param>
          <type><ref refid="group__drivers_1ga3f041319af2d0918869a8e0895f074a1" kindref="member">mpu6050_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>mpu6050_who_am_i_register_t *const</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Reads who am i (i.e. device identifier) register from MPU6050. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MPU6050 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>MPU6050 who am i register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" line="650" column="11" bodyfile="components/peripherals/i2c/esp_mpu6050/mpu6050.c" bodystart="477" bodyend="488" declfile="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" declline="650" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga847176cc5ea30ff059dd6abdb8594bc0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t mpu6050_configure_interrupts</definition>
        <argsstring>(mpu6050_handle_t handle, const mpu6050_config_t *const config)</argsstring>
        <name>mpu6050_configure_interrupts</name>
        <param>
          <type><ref refid="group__drivers_1ga3f041319af2d0918869a8e0895f074a1" kindref="member">mpu6050_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const <ref refid="group__drivers_1ga4fd5f2a4d35a7d1fa00e158e990372f5" kindref="member">mpu6050_config_t</ref> *const</type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>Configures interrupt pin behavior and setup target GPIO. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MPU6050 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>MPU6050 device configuration. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" line="659" column="11" bodyfile="components/peripherals/i2c/esp_mpu6050/mpu6050.c" bodystart="490" bodyend="535" declfile="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" declline="659" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gae720a99f979b7da1a344c2f9633da84c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t mpu6050_init</definition>
        <argsstring>(i2c_master_bus_handle_t master_handle, const mpu6050_config_t *mpu6050_config, mpu6050_handle_t *mpu6050_handle)</argsstring>
        <name>mpu6050_init</name>
        <param>
          <type>i2c_master_bus_handle_t</type>
          <declname>master_handle</declname>
        </param>
        <param>
          <type>const <ref refid="group__drivers_1ga4fd5f2a4d35a7d1fa00e158e990372f5" kindref="member">mpu6050_config_t</ref> *</type>
          <declname>mpu6050_config</declname>
        </param>
        <param>
          <type><ref refid="group__drivers_1ga3f041319af2d0918869a8e0895f074a1" kindref="member">mpu6050_handle_t</ref> *</type>
          <declname>mpu6050_handle</declname>
        </param>
        <briefdescription>
<para>Initializes an MPU6050 device onto the I2C master bus. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">master_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>I2C master bus handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mpu6050_config</parametername>
</parameternamelist>
<parameterdescription>
<para>MPU6050 device configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">mpu6050_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MPU6050 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" line="669" column="11" bodyfile="components/peripherals/i2c/esp_mpu6050/mpu6050.c" bodystart="620" bodyend="672" declfile="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" declline="669" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gaeb5006644e4bc09ef4dc212f215c2f2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t mpu6050_get_status</definition>
        <argsstring>(mpu6050_handle_t handle, bool *fifo_overflow, bool *i2c_master, bool *data_ready)</argsstring>
        <name>mpu6050_get_status</name>
        <param>
          <type><ref refid="group__drivers_1ga3f041319af2d0918869a8e0895f074a1" kindref="member">mpu6050_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>fifo_overflow</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>i2c_master</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>data_ready</declname>
        </param>
        <briefdescription>
<para>Reads status for FIFO buffer overflow, I2C master, and data ready interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Interrupt status bits clear when read.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MPU6050 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">fifo_overflow</parametername>
</parameternamelist>
<parameterdescription>
<para>FIFO buffer overflow interrupt generated when true. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">i2c_master</parametername>
</parameternamelist>
<parameterdescription>
<para>I2C master interrupt generated when true. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">data_ready</parametername>
</parameternamelist>
<parameterdescription>
<para>Measurement data ready interrupt generated when true. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" line="682" column="11" bodyfile="components/peripherals/i2c/esp_mpu6050/mpu6050.c" bodystart="674" bodyend="689" declfile="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" declline="682" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga4ac03c3f6ae4fa1454e67ec95e251585" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t mpu6050_get_data_status</definition>
        <argsstring>(mpu6050_handle_t handle, bool *ready)</argsstring>
        <name>mpu6050_get_data_status</name>
        <param>
          <type><ref refid="group__drivers_1ga3f041319af2d0918869a8e0895f074a1" kindref="member">mpu6050_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>ready</declname>
        </param>
        <briefdescription>
<para>Reads interrupt status for data ready interrupt. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Interrupt status bits clear when read.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MPU6050 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">ready</parametername>
</parameternamelist>
<parameterdescription>
<para>Measurement data ready interrupt generated when true. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" line="693" column="11" bodyfile="components/peripherals/i2c/esp_mpu6050/mpu6050.c" bodystart="691" bodyend="704" declfile="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" declline="693" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gae2ea0c1972cd17905c7f1d8e6390cf03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t mpu6050_get_motion</definition>
        <argsstring>(mpu6050_handle_t handle, mpu6050_gyro_data_axes_t *gyro_data, mpu6050_accel_data_axes_t *accel_data, float *temperature)</argsstring>
        <name>mpu6050_get_motion</name>
        <param>
          <type><ref refid="group__drivers_1ga3f041319af2d0918869a8e0895f074a1" kindref="member">mpu6050_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="structmpu6050__gyro__data__axes__s" kindref="compound">mpu6050_gyro_data_axes_t</ref> *</type>
          <declname>gyro_data</declname>
        </param>
        <param>
          <type><ref refid="structmpu6050__accel__data__axes__s" kindref="compound">mpu6050_accel_data_axes_t</ref> *</type>
          <declname>accel_data</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>temperature</declname>
        </param>
        <briefdescription>
<para>Reads gyroscope, accelerometer, and temperature measurements. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MPU6050 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">gyro_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Gyroscope data axes measurements in degrees per second. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">accel_data</parametername>
</parameternamelist>
<parameterdescription>
<para>Accelerometer data axes measurements relative to standard gravity (g). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">temperature</parametername>
</parameternamelist>
<parameterdescription>
<para>Temperature measurement in degrees Celsius. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" line="704" column="11" bodyfile="components/peripherals/i2c/esp_mpu6050/mpu6050.c" bodystart="753" bodyend="778" declfile="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" declline="704" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gaba1079b4ff69fbbdbd94edfb1df19d53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t mpu6050_get_rotation</definition>
        <argsstring>(mpu6050_handle_t handle, mpu6050_gyro_data_axes_t *gyro_data)</argsstring>
        <name>mpu6050_get_rotation</name>
        <param>
          <type><ref refid="group__drivers_1ga3f041319af2d0918869a8e0895f074a1" kindref="member">mpu6050_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="structmpu6050__gyro__data__axes__s" kindref="compound">mpu6050_gyro_data_axes_t</ref> *</type>
          <declname>gyro_data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" line="706" column="11" declfile="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" declline="706" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gad0c96e2578f5105278ad0cb0692ca427" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t mpu6050_get_acceleration</definition>
        <argsstring>(mpu6050_handle_t handle, mpu6050_accel_data_axes_t *accel_data)</argsstring>
        <name>mpu6050_get_acceleration</name>
        <param>
          <type><ref refid="group__drivers_1ga3f041319af2d0918869a8e0895f074a1" kindref="member">mpu6050_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="structmpu6050__accel__data__axes__s" kindref="compound">mpu6050_accel_data_axes_t</ref> *</type>
          <declname>accel_data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" line="708" column="11" declfile="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" declline="708" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gaaf26d3e77ba4663edc54abb6540e8a41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t mpu6050_get_temperature</definition>
        <argsstring>(mpu6050_handle_t handle, float *temperature)</argsstring>
        <name>mpu6050_get_temperature</name>
        <param>
          <type><ref refid="group__drivers_1ga3f041319af2d0918869a8e0895f074a1" kindref="member">mpu6050_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>temperature</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" line="710" column="11" declfile="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" declline="710" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga1027a8a3aeaed68ddc519b13c02f76ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t mpu6050_reset_signal_condition</definition>
        <argsstring>(mpu6050_handle_t handle)</argsstring>
        <name>mpu6050_reset_signal_condition</name>
        <param>
          <type><ref refid="group__drivers_1ga3f041319af2d0918869a8e0895f074a1" kindref="member">mpu6050_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" line="712" column="11" declfile="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" declline="712" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gae3ea13453a8f5e49cc8d6fc5b98f7093" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t mpu6050_reset_fifo</definition>
        <argsstring>(mpu6050_handle_t handle)</argsstring>
        <name>mpu6050_reset_fifo</name>
        <param>
          <type><ref refid="group__drivers_1ga3f041319af2d0918869a8e0895f074a1" kindref="member">mpu6050_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" line="714" column="11" declfile="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" declline="714" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga917afa7696834d182466084aaa9b5b35" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t mpu6050_reset_sensors</definition>
        <argsstring>(mpu6050_handle_t handle)</argsstring>
        <name>mpu6050_reset_sensors</name>
        <param>
          <type><ref refid="group__drivers_1ga3f041319af2d0918869a8e0895f074a1" kindref="member">mpu6050_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" line="716" column="11" declfile="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" declline="716" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga91fd6ab11687f17ae0fe0183f418b39f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t mpu6050_register_isr</definition>
        <argsstring>(mpu6050_handle_t handle, const mpu6050_isr_t isr)</argsstring>
        <name>mpu6050_register_isr</name>
        <param>
          <type><ref refid="group__drivers_1ga3f041319af2d0918869a8e0895f074a1" kindref="member">mpu6050_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const <ref refid="group__drivers_1ga924de93352178878008b66bf0bbbceb7" kindref="member">mpu6050_isr_t</ref></type>
          <declname>isr</declname>
        </param>
        <briefdescription>
<para>Registers an Interrupt Service Routine to handle MPU6050 interrupts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MPU6050 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>isr</parametername>
</parameternamelist>
<parameterdescription>
<para>Function to handle interrupts produced by MPU6050. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" line="725" column="11" bodyfile="components/peripherals/i2c/esp_mpu6050/mpu6050.c" bodystart="780" bodyend="791" declfile="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" declline="725" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga645508decdbcc902344704a9f7ce8fd5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t mpu6050_reset</definition>
        <argsstring>(mpu6050_handle_t handle)</argsstring>
        <name>mpu6050_reset</name>
        <param>
          <type><ref refid="group__drivers_1ga3f041319af2d0918869a8e0895f074a1" kindref="member">mpu6050_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Issues soft-reset to MPU6050 and initializes MPU6050 device handle registers. However, device configuration registers must be configured before reading data registers. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MPU6050 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" line="734" column="11" bodyfile="components/peripherals/i2c/esp_mpu6050/mpu6050.c" bodystart="793" bodyend="815" declfile="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" declline="734" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gad3e82f141af4f1ebb397ca2cfe01842a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t mpu6050_remove</definition>
        <argsstring>(mpu6050_handle_t handle)</argsstring>
        <name>mpu6050_remove</name>
        <param>
          <type><ref refid="group__drivers_1ga3f041319af2d0918869a8e0895f074a1" kindref="member">mpu6050_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Removes an MPU6050 device from master bus. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MPU6050 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" line="742" column="11" bodyfile="components/peripherals/i2c/esp_mpu6050/mpu6050.c" bodystart="817" bodyend="823" declfile="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" declline="742" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga22b072099a357ddaaf8fd039235157f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t mpu6050_delete</definition>
        <argsstring>(mpu6050_handle_t handle)</argsstring>
        <name>mpu6050_delete</name>
        <param>
          <type><ref refid="group__drivers_1ga3f041319af2d0918869a8e0895f074a1" kindref="member">mpu6050_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Removes an MPU6050 device from master bus and frees handle. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MPU6050 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" line="750" column="11" bodyfile="components/peripherals/i2c/esp_mpu6050/mpu6050.c" bodystart="825" bodyend="839" declfile="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" declline="750" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gafda2c8f3d86981c50e3d27b57375e650" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * mpu6050_get_fw_version</definition>
        <argsstring>(void)</argsstring>
        <name>mpu6050_get_fw_version</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Converts MPU6050 firmware version numbers (major, minor, patch, build) into a string. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>char* MPU6050 firmware version as a string that is formatted as X.X.X (e.g. 4.0.0). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" line="757" column="12" bodyfile="components/peripherals/i2c/esp_mpu6050/mpu6050.c" bodystart="841" bodyend="843" declfile="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" declline="757" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga2705248f11037cddb03a3158a2d6141d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t mpu6050_get_fw_version_number</definition>
        <argsstring>(void)</argsstring>
        <name>mpu6050_get_fw_version_number</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Converts MPU6050 firmware version numbers (major, minor, patch) into an integer value. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>int32_t MPU6050 firmware version number. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" line="764" column="9" bodyfile="components/peripherals/i2c/esp_mpu6050/mpu6050.c" bodystart="845" bodyend="847" declfile="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" declline="764" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga0bec60b8c1ab24e8061a1d6dadeed8fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t sgp4x_init</definition>
        <argsstring>(i2c_master_bus_handle_t master_handle, const sgp4x_config_t *sgp4x_config, sgp4x_handle_t *sgp4x_handle)</argsstring>
        <name>sgp4x_init</name>
        <param>
          <type>i2c_master_bus_handle_t</type>
          <declname>master_handle</declname>
        </param>
        <param>
          <type>const <ref refid="structsgp4x__config__t" kindref="compound">sgp4x_config_t</ref> *</type>
          <declname>sgp4x_config</declname>
        </param>
        <param>
          <type><ref refid="group__drivers_1gac40d2deb3fe0027ff3588c50d583b0cd" kindref="member">sgp4x_handle_t</ref> *</type>
          <declname>sgp4x_handle</declname>
        </param>
        <briefdescription>
<para>Initializes an SGP4X device onto the I2C master bus. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">master_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>I2C master bus handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">sgp4x_config</parametername>
</parameternamelist>
<parameterdescription>
<para>SGP4X device configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">sgp4x_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>SGP4X device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_sgp4x/include/sgp4x.h" line="125" column="11" bodyfile="components/peripherals/i2c/esp_sgp4x/sgp4x.c" bodystart="267" bodyend="324" declfile="components/peripherals/i2c/esp_sgp4x/include/sgp4x.h" declline="125" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga52efe21453b1d3606b14e49aefef9ae1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t sgp4x_execute_compensated_conditioning</definition>
        <argsstring>(sgp4x_handle_t handle, const float temperature, const float humidity, uint16_t *sraw_voc)</argsstring>
        <name>sgp4x_execute_compensated_conditioning</name>
        <param>
          <type><ref refid="group__drivers_1gac40d2deb3fe0027ff3588c50d583b0cd" kindref="member">sgp4x_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>temperature</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>humidity</declname>
        </param>
        <param>
          <type>uint16_t *</type>
          <declname>sraw_voc</declname>
        </param>
        <briefdescription>
<para>Starts the conditioning with temperature and humidity compensation, i.e., the VOC pixel will be operated at the same temperature as it is by calling the sgp41_measure_raw_signals function while the NOx pixel will be operated at a different temperature for conditioning. The conditioning should be ran when the device is initially powered for 10-seconds but do not run the conditioning longer than 10-seconds, otherwise damage may occur to the SGP4X. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>SGP4X device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">temperature</parametername>
</parameternamelist>
<parameterdescription>
<para>Temperature compensation in degree celcius. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">humidity</parametername>
</parameternamelist>
<parameterdescription>
<para>Humidity compensation in percentage. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">sraw_voc</parametername>
</parameternamelist>
<parameterdescription>
<para>Raw signal of VOC in ticks which is proportional to the logarithm of the resistance of the sensing element. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_sgp4x/include/sgp4x.h" line="139" column="11" bodyfile="components/peripherals/i2c/esp_sgp4x/sgp4x.c" bodystart="326" bodyend="395" declfile="components/peripherals/i2c/esp_sgp4x/include/sgp4x.h" declline="139" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga12f002286cb3e1a07ee467160febf165" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t sgp4x_execute_conditioning</definition>
        <argsstring>(sgp4x_handle_t handle, uint16_t *sraw_voc)</argsstring>
        <name>sgp4x_execute_conditioning</name>
        <param>
          <type><ref refid="group__drivers_1gac40d2deb3fe0027ff3588c50d583b0cd" kindref="member">sgp4x_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>uint16_t *</type>
          <declname>sraw_voc</declname>
        </param>
        <briefdescription>
<para>Starts the conditioning, i.e., the VOC pixel will be operated at the same temperature as it is by calling the sgp41_measure_raw_signals function while the NOx pixel will be operated at a different temperature for conditioning. The conditioning should be ran when the device is initially powered for 10-seconds but do not run the conditioning longer than 10-seconds, otherwise damage may occur to the SGP4X. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>SGP4X device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">sraw_voc</parametername>
</parameternamelist>
<parameterdescription>
<para>Raw signal of VOC in ticks which is proportional to the logarithm of the resistance of the sensing element. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_sgp4x/include/sgp4x.h" line="151" column="11" bodyfile="components/peripherals/i2c/esp_sgp4x/sgp4x.c" bodystart="397" bodyend="405" declfile="components/peripherals/i2c/esp_sgp4x/include/sgp4x.h" declline="151" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gaadd5bf985665147c4d997b26120dd9aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t sgp4x_measure_compensated_signals</definition>
        <argsstring>(sgp4x_handle_t handle, const float temperature, const float humidity, uint16_t *sraw_voc, uint16_t *sraw_nox)</argsstring>
        <name>sgp4x_measure_compensated_signals</name>
        <param>
          <type><ref refid="group__drivers_1gac40d2deb3fe0027ff3588c50d583b0cd" kindref="member">sgp4x_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>temperature</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>humidity</declname>
        </param>
        <param>
          <type>uint16_t *</type>
          <declname>sraw_voc</declname>
        </param>
        <param>
          <type>uint16_t *</type>
          <declname>sraw_nox</declname>
        </param>
        <briefdescription>
<para>Starts and/or continues the VOC and NOX measurement mode with temperature and humidity compensation. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>SGP4X device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">temperature</parametername>
</parameternamelist>
<parameterdescription>
<para>Temperature compensation in degree Celsius. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">humidity</parametername>
</parameternamelist>
<parameterdescription>
<para>Humidity compensation in percentage. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">sraw_voc</parametername>
</parameternamelist>
<parameterdescription>
<para>Raw signal of VOC in ticks which is proportional to the logarithm of the resistance of the sensing element. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">sraw_nox</parametername>
</parameternamelist>
<parameterdescription>
<para>Raw signal of NOX in ticks which is proportional to the logarithm of the resistance of the sensing element. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_sgp4x/include/sgp4x.h" line="163" column="11" bodyfile="components/peripherals/i2c/esp_sgp4x/sgp4x.c" bodystart="407" bodyend="482" declfile="components/peripherals/i2c/esp_sgp4x/include/sgp4x.h" declline="163" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga4efe02574e8280c6d1f75e5d67c1c282" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t sgp4x_measure_signals</definition>
        <argsstring>(sgp4x_handle_t handle, uint16_t *sraw_voc, uint16_t *sraw_nox)</argsstring>
        <name>sgp4x_measure_signals</name>
        <param>
          <type><ref refid="group__drivers_1gac40d2deb3fe0027ff3588c50d583b0cd" kindref="member">sgp4x_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>uint16_t *</type>
          <declname>sraw_voc</declname>
        </param>
        <param>
          <type>uint16_t *</type>
          <declname>sraw_nox</declname>
        </param>
        <briefdescription>
<para>Starts and/or continues the VOC and NOX measurement mode using default temperature and humidity compensation. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>SGP4X device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">sraw_voc</parametername>
</parameternamelist>
<parameterdescription>
<para>Raw signal of VOC in ticks which is proportional to the logarithm of the resistance of the sensing element. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">sraw_nox</parametername>
</parameternamelist>
<parameterdescription>
<para>Raw signal of NOX in ticks which is proportional to the logarithm of the resistance of the sensing element. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_sgp4x/include/sgp4x.h" line="173" column="11" bodyfile="components/peripherals/i2c/esp_sgp4x/sgp4x.c" bodystart="484" bodyend="492" declfile="components/peripherals/i2c/esp_sgp4x/include/sgp4x.h" declline="173" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga74a5a683b3490a8aaf03b03539929fae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t sgp4x_execute_self_test</definition>
        <argsstring>(sgp4x_handle_t handle, sgp4x_self_test_result_t *const result)</argsstring>
        <name>sgp4x_execute_self_test</name>
        <param>
          <type><ref refid="group__drivers_1gac40d2deb3fe0027ff3588c50d583b0cd" kindref="member">sgp4x_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>sgp4x_self_test_result_t *const</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Performs the built-in self-test that checks for integrity of both hotplate and MOX material. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>SGP4X device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">result</parametername>
</parameternamelist>
<parameterdescription>
<para>Results of the self-tests. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_sgp4x/include/sgp4x.h" line="183" column="11" bodyfile="components/peripherals/i2c/esp_sgp4x/sgp4x.c" bodystart="494" bodyend="531" declfile="components/peripherals/i2c/esp_sgp4x/include/sgp4x.h" declline="183" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga1a819671d1ed391a0666e7c8b3b0721e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t sgp4x_turn_heater_off</definition>
        <argsstring>(sgp4x_handle_t handle)</argsstring>
        <name>sgp4x_turn_heater_off</name>
        <param>
          <type><ref refid="group__drivers_1gac40d2deb3fe0027ff3588c50d583b0cd" kindref="member">sgp4x_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Turns the hotplate off, stops the measurement, and SGP4X enters idle mode. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>SGP4X device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_sgp4x/include/sgp4x.h" line="191" column="11" bodyfile="components/peripherals/i2c/esp_sgp4x/sgp4x.c" bodystart="533" bodyend="544" declfile="components/peripherals/i2c/esp_sgp4x/include/sgp4x.h" declline="191" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga1dd9539587a9de55514ab1dbeeb5d705" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t sgp4x_reset</definition>
        <argsstring>(sgp4x_handle_t handle)</argsstring>
        <name>sgp4x_reset</name>
        <param>
          <type><ref refid="group__drivers_1gac40d2deb3fe0027ff3588c50d583b0cd" kindref="member">sgp4x_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Issues soft-reset and initializes SGP4X. See datasheet for details. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>SGP4X device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_sgp4x/include/sgp4x.h" line="199" column="11" bodyfile="components/peripherals/i2c/esp_sgp4x/sgp4x.c" bodystart="546" bodyend="557" declfile="components/peripherals/i2c/esp_sgp4x/include/sgp4x.h" declline="199" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga05534062bf7f57eac9d0992fb788c4d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t sgp4x_remove</definition>
        <argsstring>(sgp4x_handle_t handle)</argsstring>
        <name>sgp4x_remove</name>
        <param>
          <type><ref refid="group__drivers_1gac40d2deb3fe0027ff3588c50d583b0cd" kindref="member">sgp4x_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Removes an SGP4X device from master bus. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>SGP4X device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_sgp4x/include/sgp4x.h" line="207" column="11" bodyfile="components/peripherals/i2c/esp_sgp4x/sgp4x.c" bodystart="559" bodyend="564" declfile="components/peripherals/i2c/esp_sgp4x/include/sgp4x.h" declline="207" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gad0cd93f1a86d46ac471b1266854ad781" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t sgp4x_delete</definition>
        <argsstring>(sgp4x_handle_t handle)</argsstring>
        <name>sgp4x_delete</name>
        <param>
          <type><ref refid="group__drivers_1gac40d2deb3fe0027ff3588c50d583b0cd" kindref="member">sgp4x_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Removes an SGP4X device from master bus and frees handle. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>SGP4X device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_sgp4x/include/sgp4x.h" line="215" column="11" bodyfile="components/peripherals/i2c/esp_sgp4x/sgp4x.c" bodystart="566" bodyend="580" declfile="components/peripherals/i2c/esp_sgp4x/include/sgp4x.h" declline="215" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gaff4d0425f787cda12108abe40e286d37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * sgp4x_get_fw_version</definition>
        <argsstring>(void)</argsstring>
        <name>sgp4x_get_fw_version</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Converts SGP4X firmware version numbers (major, minor, patch) into a string. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>char* SGP4X firmware version as a string that is formatted as X.X.X (e.g. 4.0.0). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_sgp4x/include/sgp4x.h" line="222" column="12" bodyfile="components/peripherals/i2c/esp_sgp4x/sgp4x.c" bodystart="582" bodyend="584" declfile="components/peripherals/i2c/esp_sgp4x/include/sgp4x.h" declline="222" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga2bf0031a0518fb0d4d8f1db8bf200dbb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t sgp4x_get_fw_version_number</definition>
        <argsstring>(void)</argsstring>
        <name>sgp4x_get_fw_version_number</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Converts SGP4X firmware version numbers (major, minor, patch) into an integer value. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>int32_t SGP4X firmware version number. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_sgp4x/include/sgp4x.h" line="229" column="9" bodyfile="components/peripherals/i2c/esp_sgp4x/sgp4x.c" bodystart="586" bodyend="588" declfile="components/peripherals/i2c/esp_sgp4x/include/sgp4x.h" declline="229" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga42d4a8ba981a9e27a2f06b779c06f1a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t sht4x_init</definition>
        <argsstring>(const i2c_master_bus_handle_t master_handle, const sht4x_config_t *sht4x_config, sht4x_handle_t *const sht4x_handle)</argsstring>
        <name>sht4x_init</name>
        <param>
          <type>const i2c_master_bus_handle_t</type>
          <declname>master_handle</declname>
        </param>
        <param>
          <type>const <ref refid="group__drivers_1ga5ca6e3df86dcbbba4a2a65014de70423" kindref="member">sht4x_config_t</ref> *</type>
          <declname>sht4x_config</declname>
        </param>
        <param>
          <type><ref refid="group__drivers_1gadc26551d1aa695a4d05c3912bd035b8a" kindref="member">sht4x_handle_t</ref> *const</type>
          <declname>sht4x_handle</declname>
        </param>
        <briefdescription>
<para>Initializes an SHT4X device onto the I2C master bus. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">master_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>I2C master bus handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">sht4x_config</parametername>
</parameternamelist>
<parameterdescription>
<para>SHT4X device configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">sht4x_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>SHT4X device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_sht4x/include/sht4x.h" line="162" column="11" bodyfile="components/peripherals/i2c/esp_sht4x/sht4x.c" bodystart="305" bodyend="357" declfile="components/peripherals/i2c/esp_sht4x/include/sht4x.h" declline="162" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga5c8a6cc7090c0cae8891b16d934d170d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t sht4x_get_measurement</definition>
        <argsstring>(sht4x_handle_t handle, float *const temperature, float *const humidity)</argsstring>
        <name>sht4x_get_measurement</name>
        <param>
          <type><ref refid="group__drivers_1gadc26551d1aa695a4d05c3912bd035b8a" kindref="member">sht4x_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>float *const</type>
          <declname>temperature</declname>
        </param>
        <param>
          <type>float *const</type>
          <declname>humidity</declname>
        </param>
        <briefdescription>
<para>Reads high-level measurements from SHT4X. This is a blocking function. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The function delays the calling task up to 1.1 s to wait for the measurement results. This might lead to problems when the function is called from a software timer callback function.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>SHT4X device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">temperature</parametername>
</parameternamelist>
<parameterdescription>
<para>Temperature in degree Celsius. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">humidity</parametername>
</parameternamelist>
<parameterdescription>
<para>Relative humidity in percentage. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_sht4x/include/sht4x.h" line="176" column="11" bodyfile="components/peripherals/i2c/esp_sht4x/sht4x.c" bodystart="359" bodyend="405" declfile="components/peripherals/i2c/esp_sht4x/include/sht4x.h" declline="176" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga0b8e85efac9959659fb38381a0df33c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t sht4x_get_measurements</definition>
        <argsstring>(sht4x_handle_t handle, float *const temperature, float *const humidity, float *const dewpoint)</argsstring>
        <name>sht4x_get_measurements</name>
        <param>
          <type><ref refid="group__drivers_1gadc26551d1aa695a4d05c3912bd035b8a" kindref="member">sht4x_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>float *const</type>
          <declname>temperature</declname>
        </param>
        <param>
          <type>float *const</type>
          <declname>humidity</declname>
        </param>
        <param>
          <type>float *const</type>
          <declname>dewpoint</declname>
        </param>
        <briefdescription>
<para>Similar to <computeroutput>i2c_sht4x_read_measurement</computeroutput> but it includes the dewpoint temperature in the results. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>SHT4X device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">temperature</parametername>
</parameternamelist>
<parameterdescription>
<para>Temperature in degree Celsius. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">humidity</parametername>
</parameternamelist>
<parameterdescription>
<para>Relative humidity in percentage. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">dewpoint</parametername>
</parameternamelist>
<parameterdescription>
<para>Calculated dewpoint temperature in degree Celsius. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_sht4x/include/sht4x.h" line="187" column="11" bodyfile="components/peripherals/i2c/esp_sht4x/sht4x.c" bodystart="407" bodyend="416" declfile="components/peripherals/i2c/esp_sht4x/include/sht4x.h" declline="187" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gac560af9e65f325df1f1d28873826010d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t sht4x_get_repeat_mode</definition>
        <argsstring>(sht4x_handle_t handle, sht4x_repeat_modes_t *const mode)</argsstring>
        <name>sht4x_get_repeat_mode</name>
        <param>
          <type><ref refid="group__drivers_1gadc26551d1aa695a4d05c3912bd035b8a" kindref="member">sht4x_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="group__drivers_1gaa3ca8d58b6772111c2fe9b2714691e74" kindref="member">sht4x_repeat_modes_t</ref> *const</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Reads measurement repeatability mode setting from SHT4X. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>SHT4X device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Repeatability mode setting. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_sht4x/include/sht4x.h" line="196" column="11" bodyfile="components/peripherals/i2c/esp_sht4x/sht4x.c" bodystart="418" bodyend="426" declfile="components/peripherals/i2c/esp_sht4x/include/sht4x.h" declline="196" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga0310bc33c15029a3d6f99d60ca25beb5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t sht4x_set_repeat_mode</definition>
        <argsstring>(sht4x_handle_t handle, const sht4x_repeat_modes_t mode)</argsstring>
        <name>sht4x_set_repeat_mode</name>
        <param>
          <type><ref refid="group__drivers_1gadc26551d1aa695a4d05c3912bd035b8a" kindref="member">sht4x_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const <ref refid="group__drivers_1gaa3ca8d58b6772111c2fe9b2714691e74" kindref="member">sht4x_repeat_modes_t</ref></type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Writes measurement repeatability mode setting to SHT4X. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>SHT4X device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Repeatability mode setting. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_sht4x/include/sht4x.h" line="205" column="11" bodyfile="components/peripherals/i2c/esp_sht4x/sht4x.c" bodystart="427" bodyend="435" declfile="components/peripherals/i2c/esp_sht4x/include/sht4x.h" declline="205" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gae74680f79f544896e2d63f12cec010c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t sht4x_get_heater_mode</definition>
        <argsstring>(sht4x_handle_t handle, sht4x_heater_modes_t *const mode)</argsstring>
        <name>sht4x_get_heater_mode</name>
        <param>
          <type><ref refid="group__drivers_1gadc26551d1aa695a4d05c3912bd035b8a" kindref="member">sht4x_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="group__drivers_1ga172b07afab8f75e7f52efe0e5669461a" kindref="member">sht4x_heater_modes_t</ref> *const</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Reads measurement heater mode setting from SHT4X. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>SHT4X device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Heater mode setting. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_sht4x/include/sht4x.h" line="214" column="11" bodyfile="components/peripherals/i2c/esp_sht4x/sht4x.c" bodystart="437" bodyend="445" declfile="components/peripherals/i2c/esp_sht4x/include/sht4x.h" declline="214" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga84243f1723d1fc83cf804b0914681dec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t sht4x_set_heater_mode</definition>
        <argsstring>(sht4x_handle_t handle, const sht4x_heater_modes_t mode)</argsstring>
        <name>sht4x_set_heater_mode</name>
        <param>
          <type><ref refid="group__drivers_1gadc26551d1aa695a4d05c3912bd035b8a" kindref="member">sht4x_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const <ref refid="group__drivers_1ga172b07afab8f75e7f52efe0e5669461a" kindref="member">sht4x_heater_modes_t</ref></type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Writes measurement heater mode setting to SHT4X. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>SHT4X device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Heater mode setting. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_sht4x/include/sht4x.h" line="223" column="11" bodyfile="components/peripherals/i2c/esp_sht4x/sht4x.c" bodystart="447" bodyend="455" declfile="components/peripherals/i2c/esp_sht4x/include/sht4x.h" declline="223" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gab0576084424fabc85a793cca32e9dc7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t sht4x_reset</definition>
        <argsstring>(sht4x_handle_t handle)</argsstring>
        <name>sht4x_reset</name>
        <param>
          <type><ref refid="group__drivers_1gadc26551d1aa695a4d05c3912bd035b8a" kindref="member">sht4x_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Issues soft-reset to SHT4X. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>SHT4X device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_sht4x/include/sht4x.h" line="231" column="11" bodyfile="components/peripherals/i2c/esp_sht4x/sht4x.c" bodystart="457" bodyend="471" declfile="components/peripherals/i2c/esp_sht4x/include/sht4x.h" declline="231" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga6559e247f4f3ddda5907d7e48100375e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t sht4x_remove</definition>
        <argsstring>(sht4x_handle_t handle)</argsstring>
        <name>sht4x_remove</name>
        <param>
          <type><ref refid="group__drivers_1gadc26551d1aa695a4d05c3912bd035b8a" kindref="member">sht4x_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Removes an SHT4X device from master I2C bus. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>SHT4X device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_sht4x/include/sht4x.h" line="239" column="11" bodyfile="components/peripherals/i2c/esp_sht4x/sht4x.c" bodystart="473" bodyend="478" declfile="components/peripherals/i2c/esp_sht4x/include/sht4x.h" declline="239" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gadc55d64648a9648100abe176dcbf6a94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t sht4x_delete</definition>
        <argsstring>(sht4x_handle_t handle)</argsstring>
        <name>sht4x_delete</name>
        <param>
          <type><ref refid="group__drivers_1gadc26551d1aa695a4d05c3912bd035b8a" kindref="member">sht4x_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Removes an SHT4X device from master I2C bus and delete the handle. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>SHT4X device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_sht4x/include/sht4x.h" line="247" column="11" bodyfile="components/peripherals/i2c/esp_sht4x/sht4x.c" bodystart="480" bodyend="494" declfile="components/peripherals/i2c/esp_sht4x/include/sht4x.h" declline="247" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga7dc2bdb1090f30af18882528f9c590bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * sht4x_get_fw_version</definition>
        <argsstring>(void)</argsstring>
        <name>sht4x_get_fw_version</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Converts SHT4X firmware version numbers (major, minor, patch) into a string. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>char* SHT4X firmware version as a string that is formatted as X.X.X (e.g. 4.0.0). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_sht4x/include/sht4x.h" line="254" column="12" bodyfile="components/peripherals/i2c/esp_sht4x/sht4x.c" bodystart="496" bodyend="498" declfile="components/peripherals/i2c/esp_sht4x/include/sht4x.h" declline="254" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga46afff26fb2c3d61420378265344fb2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t sht4x_get_fw_version_number</definition>
        <argsstring>(void)</argsstring>
        <name>sht4x_get_fw_version_number</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Converts SHT4X firmware version numbers (major, minor, patch) into an integer value. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>int32_t SHT4X firmware version number. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_sht4x/include/sht4x.h" line="261" column="9" bodyfile="components/peripherals/i2c/esp_sht4x/sht4x.c" bodystart="500" bodyend="502" declfile="components/peripherals/i2c/esp_sht4x/include/sht4x.h" declline="261" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga2f07f9d5941e0c425a6b089c05d22320" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ssd1306_load_bitmap_font</definition>
        <argsstring>(const uint8_t *font, int encoding, uint8_t *bitmap, ssd1306_bdf_font_t *const bdf_font)</argsstring>
        <name>ssd1306_load_bitmap_font</name>
        <param>
          <type>const uint8_t *</type>
          <declname>font</declname>
        </param>
        <param>
          <type>int</type>
          <declname>encoding</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>bitmap</declname>
        </param>
        <param>
          <type><ref refid="group__drivers_1ga186675dfec5f35aaec36d35275c50432" kindref="member">ssd1306_bdf_font_t</ref> *const</type>
          <declname>bdf_font</declname>
        </param>
        <briefdescription>
<para>Loads a BDF bitmap font and BDF font structure from a font file. </para>
        </briefdescription>
        <detaileddescription>
<para>public function and subroutine declarations </para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">font</parametername>
</parameternamelist>
<parameterdescription>
<para>BDF font bitmap data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">encoding</parametername>
</parameternamelist>
<parameterdescription>
<para>BDF font encoding. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">bitmap</parametername>
</parameternamelist>
<parameterdescription>
<para>BDF font bitmap data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">bdf_font</parametername>
</parameternamelist>
<parameterdescription>
<para>BDF font structure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" line="239" column="11" bodyfile="components/peripherals/i2c/esp_ssd1306/ssd1306.c" bodystart="162" bodyend="187" declfile="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" declline="239" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gad82dd4ac4d4e44af03a3426fce8b7488" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ssd1306_display_bdf_text</definition>
        <argsstring>(ssd1306_handle_t handle, const uint8_t *font, const char *text, int xpos, int ypos)</argsstring>
        <name>ssd1306_display_bdf_text</name>
        <param>
          <type><ref refid="group__drivers_1gad00aae97f6e6ed7273b46e4b955d89bb" kindref="member">ssd1306_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>font</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>text</declname>
        </param>
        <param>
          <type>int</type>
          <declname>xpos</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ypos</declname>
        </param>
        <briefdescription>
<para>Displays text on the SSD1306 with BDF font support. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>SSD1306 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>font</parametername>
</parameternamelist>
<parameterdescription>
<para>BDF font bitmap data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>text</parametername>
</parameternamelist>
<parameterdescription>
<para>Text characters to display. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xpos</parametername>
</parameternamelist>
<parameterdescription>
<para>X-axis position of the font character. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ypos</parametername>
</parameternamelist>
<parameterdescription>
<para>Y-axis position of the font character. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" line="251" column="11" bodyfile="components/peripherals/i2c/esp_ssd1306/ssd1306.c" bodystart="189" bodyend="228" declfile="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" declline="251" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga851d493003aedadb5eb0c56d59dc90eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ssd1306_display_bdf_code</definition>
        <argsstring>(ssd1306_handle_t handle, const uint8_t *font, int code, int xpos, int ypos)</argsstring>
        <name>ssd1306_display_bdf_code</name>
        <param>
          <type><ref refid="group__drivers_1gad00aae97f6e6ed7273b46e4b955d89bb" kindref="member">ssd1306_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>font</declname>
        </param>
        <param>
          <type>int</type>
          <declname>code</declname>
        </param>
        <param>
          <type>int</type>
          <declname>xpos</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ypos</declname>
        </param>
        <briefdescription>
<para>Displays BDF font code on the SSD1306. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>SSD1306 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>font</parametername>
</parameternamelist>
<parameterdescription>
<para>BDF font bitmap data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>code</parametername>
</parameternamelist>
<parameterdescription>
<para>BDF font code to display. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xpos</parametername>
</parameternamelist>
<parameterdescription>
<para>X-axis position of the font character. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ypos</parametername>
</parameternamelist>
<parameterdescription>
<para>Y-axis position of the font character. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" line="263" column="11" bodyfile="components/peripherals/i2c/esp_ssd1306/ssd1306.c" bodystart="230" bodyend="262" declfile="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" declline="263" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gac3fa65baec320d1851627c2ccb25b61a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ssd1306_enable_display</definition>
        <argsstring>(ssd1306_handle_t handle)</argsstring>
        <name>ssd1306_enable_display</name>
        <param>
          <type><ref refid="group__drivers_1gad00aae97f6e6ed7273b46e4b955d89bb" kindref="member">ssd1306_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Turns SSD1306 display panel on. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>SSD1306 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" line="271" column="11" bodyfile="components/peripherals/i2c/esp_ssd1306/ssd1306.c" bodystart="551" bodyend="567" declfile="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" declline="271" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga17e95f4070c3858a50032bdf8e90875a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ssd1306_disable_display</definition>
        <argsstring>(ssd1306_handle_t handle)</argsstring>
        <name>ssd1306_disable_display</name>
        <param>
          <type><ref refid="group__drivers_1gad00aae97f6e6ed7273b46e4b955d89bb" kindref="member">ssd1306_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Turns SSD1306 display panel off (sleep mode). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>SSD1306 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" line="279" column="11" bodyfile="components/peripherals/i2c/esp_ssd1306/ssd1306.c" bodystart="569" bodyend="585" declfile="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" declline="279" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gad5e4993ebac08d13ba9cc948452f3387" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ssd1306_display_pages</definition>
        <argsstring>(ssd1306_handle_t handle)</argsstring>
        <name>ssd1306_display_pages</name>
        <param>
          <type><ref refid="group__drivers_1gad00aae97f6e6ed7273b46e4b955d89bb" kindref="member">ssd1306_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Displays segment data for each page supported by the SSD1306 display panel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>SSD1306 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" line="287" column="11" bodyfile="components/peripherals/i2c/esp_ssd1306/ssd1306.c" bodystart="587" bodyend="596" declfile="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" declline="287" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga75191dd23168cd6c07b97b6586aac4be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ssd1306_set_pages</definition>
        <argsstring>(ssd1306_handle_t handle, uint8_t *buffer)</argsstring>
        <name>ssd1306_set_pages</name>
        <param>
          <type><ref refid="group__drivers_1gad00aae97f6e6ed7273b46e4b955d89bb" kindref="member">ssd1306_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
<para>Sets segment data for each page supported by the SSD1306 display panel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>SSD1306 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Segment data in 128-byte blocks by page. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" line="296" column="11" bodyfile="components/peripherals/i2c/esp_ssd1306/ssd1306.c" bodystart="598" bodyend="610" declfile="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" declline="296" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga75db0c1fd25ec290bbcc8c7720f57175" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ssd1306_get_pages</definition>
        <argsstring>(ssd1306_handle_t handle, uint8_t *buffer)</argsstring>
        <name>ssd1306_get_pages</name>
        <param>
          <type><ref refid="group__drivers_1gad00aae97f6e6ed7273b46e4b955d89bb" kindref="member">ssd1306_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
<para>Gets segment data for each page supported by the SSD1306 display panel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>SSD1306 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Segment data in 128-byte blocks by page. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" line="305" column="11" bodyfile="components/peripherals/i2c/esp_ssd1306/ssd1306.c" bodystart="612" bodyend="624" declfile="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" declline="305" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gafb0b69ca8dfa44daf631dfb127dfb8cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ssd1306_set_pixel</definition>
        <argsstring>(ssd1306_handle_t handle, uint8_t xpos, uint8_t ypos, bool invert)</argsstring>
        <name>ssd1306_set_pixel</name>
        <param>
          <type><ref refid="group__drivers_1gad00aae97f6e6ed7273b46e4b955d89bb" kindref="member">ssd1306_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>xpos</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>ypos</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>invert</declname>
        </param>
        <briefdescription>
<para>Sets SSD1306 pages and segments data for a pixel. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Call <computeroutput>ssd1306_display_pages</computeroutput> to display the pixel.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>SSD1306 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xpos</parametername>
</parameternamelist>
<parameterdescription>
<para>X-axis position of the pixel. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ypos</parametername>
</parameternamelist>
<parameterdescription>
<para>Y-axis position of the pixel. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>invert</parametername>
</parameternamelist>
<parameterdescription>
<para>Pixel is inverted when true. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" line="318" column="11" bodyfile="components/peripherals/i2c/esp_ssd1306/ssd1306.c" bodystart="264" bodyend="297" declfile="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" declline="318" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga477cdc5663c4f3540deadfbd94fcd78b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ssd1306_set_line</definition>
        <argsstring>(ssd1306_handle_t handle, uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, bool invert)</argsstring>
        <name>ssd1306_set_line</name>
        <param>
          <type><ref refid="group__drivers_1gad00aae97f6e6ed7273b46e4b955d89bb" kindref="member">ssd1306_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>x0</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>y0</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>y1</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>invert</declname>
        </param>
        <briefdescription>
<para>Sets SSD1306 pages and segments data for a line. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Call <computeroutput>ssd1306_display_pages</computeroutput> to display the line.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>SSD1306 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x1</parametername>
</parameternamelist>
<parameterdescription>
<para>X-axis start position of the line. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y1</parametername>
</parameternamelist>
<parameterdescription>
<para>Y-axis start position of the line. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x2</parametername>
</parameternamelist>
<parameterdescription>
<para>X-axis end position of the line. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y2</parametername>
</parameternamelist>
<parameterdescription>
<para>Y-axis end position of the line. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>invert</parametername>
</parameternamelist>
<parameterdescription>
<para>Line is inverted when true. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" line="333" column="11" bodyfile="components/peripherals/i2c/esp_ssd1306/ssd1306.c" bodystart="300" bodyend="387" declfile="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" declline="333" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga0c281a8940fc55f5e2490d706b96d268" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ssd1306_set_circle</definition>
        <argsstring>(ssd1306_handle_t handle, uint8_t x0, uint8_t y0, uint8_t r, bool invert)</argsstring>
        <name>ssd1306_set_circle</name>
        <param>
          <type><ref refid="group__drivers_1gad00aae97f6e6ed7273b46e4b955d89bb" kindref="member">ssd1306_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>x0</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>y0</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>r</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>invert</declname>
        </param>
        <briefdescription>
<para>Sets SSD1306 pages and segments data for a circle. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Call <computeroutput>ssd1306_display_pages</computeroutput> to display the circle.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>SSD1306 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x0</parametername>
</parameternamelist>
<parameterdescription>
<para>X-axis start position of the circle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y0</parametername>
</parameternamelist>
<parameterdescription>
<para>Y-axis start position of the circle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>Radius of the circle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>invert</parametername>
</parameternamelist>
<parameterdescription>
<para>Circle is inverted when true. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" line="347" column="11" bodyfile="components/peripherals/i2c/esp_ssd1306/ssd1306.c" bodystart="390" bodyend="427" declfile="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" declline="347" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga0bf892384d870eff5595007e1ff33c93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ssd1306_display_circle</definition>
        <argsstring>(ssd1306_handle_t handle, uint8_t x0, uint8_t y0, uint8_t r, bool invert)</argsstring>
        <name>ssd1306_display_circle</name>
        <param>
          <type><ref refid="group__drivers_1gad00aae97f6e6ed7273b46e4b955d89bb" kindref="member">ssd1306_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>x0</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>y0</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>r</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>invert</declname>
        </param>
        <briefdescription>
<para>Sets SSD1306 pages and segments data for a circle and display&apos;s the circle. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>SSD1306 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x0</parametername>
</parameternamelist>
<parameterdescription>
<para>X-axis start position of the circle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y0</parametername>
</parameternamelist>
<parameterdescription>
<para>Y-axis start position of the circle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>Radius of the circle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>invert</parametername>
</parameternamelist>
<parameterdescription>
<para>Circle is inverted when true. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" line="359" column="11" bodyfile="components/peripherals/i2c/esp_ssd1306/ssd1306.c" bodystart="429" bodyend="438" declfile="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" declline="359" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gacd0a42b768f22ae87820be5cd15fd433" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ssd1306_display_filled_circle</definition>
        <argsstring>(ssd1306_handle_t handle, uint8_t x0, uint8_t y0, uint8_t r, bool invert)</argsstring>
        <name>ssd1306_display_filled_circle</name>
        <param>
          <type><ref refid="group__drivers_1gad00aae97f6e6ed7273b46e4b955d89bb" kindref="member">ssd1306_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>x0</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>y0</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>r</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>invert</declname>
        </param>
        <briefdescription>
<para>Sets SSD1306 pages and segments data for a filled circle and display&apos;s the filled circle. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>SSD1306 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x0</parametername>
</parameternamelist>
<parameterdescription>
<para>X-axis start position of the circle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y0</parametername>
</parameternamelist>
<parameterdescription>
<para>Y-axis start position of the circle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>Radius of the circle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>invert</parametername>
</parameternamelist>
<parameterdescription>
<para>Circle is inverted when true. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" line="371" column="11" bodyfile="components/peripherals/i2c/esp_ssd1306/ssd1306.c" bodystart="440" bodyend="476" declfile="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" declline="371" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gad8de70e9ae4826ba74cd5055caac84a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ssd1306_set_rectangle</definition>
        <argsstring>(ssd1306_handle_t handle, uint8_t x, uint8_t y, uint8_t w, uint8_t h, bool invert)</argsstring>
        <name>ssd1306_set_rectangle</name>
        <param>
          <type><ref refid="group__drivers_1gad00aae97f6e6ed7273b46e4b955d89bb" kindref="member">ssd1306_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>y</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>w</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>h</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>invert</declname>
        </param>
        <briefdescription>
<para>Sets SSD1306 pages and segments data for a rectangle. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Call <computeroutput>ssd1306_display_pages</computeroutput> to display the rectangle.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>SSD1306 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>X-axis start position of the rectangle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Y-axis start position of the rectangle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>Width of the rectangle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>h</parametername>
</parameternamelist>
<parameterdescription>
<para>Height of the rectangle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>invert</parametername>
</parameternamelist>
<parameterdescription>
<para>Rectangle is inverted when true. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" line="386" column="11" bodyfile="components/peripherals/i2c/esp_ssd1306/ssd1306.c" bodystart="478" bodyend="506" declfile="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" declline="386" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gae4debbf01026d0fa4295142a828c35b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ssd1306_display_rectangle</definition>
        <argsstring>(ssd1306_handle_t handle, uint8_t x, uint8_t y, uint8_t w, uint8_t h, bool invert)</argsstring>
        <name>ssd1306_display_rectangle</name>
        <param>
          <type><ref refid="group__drivers_1gad00aae97f6e6ed7273b46e4b955d89bb" kindref="member">ssd1306_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>y</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>w</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>h</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>invert</declname>
        </param>
        <briefdescription>
<para>Sets SSD1306 pages and segments data for a rectangle and display&apos;s the rectangle. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>SSD1306 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>X-axis start position of the rectangle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Y-axis start position of the rectangle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>Width of the rectangle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>h</parametername>
</parameternamelist>
<parameterdescription>
<para>Height of the rectangle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>invert</parametername>
</parameternamelist>
<parameterdescription>
<para>Rectangle is inverted when true. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" line="399" column="11" bodyfile="components/peripherals/i2c/esp_ssd1306/ssd1306.c" bodystart="508" bodyend="517" declfile="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" declline="399" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga37ceb8360b0ac89f926c2d10b403d2ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ssd1306_display_filled_rectangle</definition>
        <argsstring>(ssd1306_handle_t handle, uint8_t x, uint8_t y, uint8_t w, uint8_t h, bool invert)</argsstring>
        <name>ssd1306_display_filled_rectangle</name>
        <param>
          <type><ref refid="group__drivers_1gad00aae97f6e6ed7273b46e4b955d89bb" kindref="member">ssd1306_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>y</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>w</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>h</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>invert</declname>
        </param>
        <briefdescription>
<para>Sets SSD1306 pages and segments data for a filled rectangle and display&apos;s the filled rectangle. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>SSD1306 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>X-axis start position of the rectangle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>Y-axis start position of the rectangle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>Width of the rectangle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>h</parametername>
</parameternamelist>
<parameterdescription>
<para>Height of the rectangle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>invert</parametername>
</parameternamelist>
<parameterdescription>
<para>Rectangle is inverted when true. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" line="412" column="11" bodyfile="components/peripherals/i2c/esp_ssd1306/ssd1306.c" bodystart="519" bodyend="549" declfile="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" declline="412" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga17bc046563c1d9123ee8e8ef85d4c239" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ssd1306_set_contrast</definition>
        <argsstring>(ssd1306_handle_t handle, uint8_t contrast)</argsstring>
        <name>ssd1306_set_contrast</name>
        <param>
          <type><ref refid="group__drivers_1gad00aae97f6e6ed7273b46e4b955d89bb" kindref="member">ssd1306_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>contrast</declname>
        </param>
        <briefdescription>
<para>Sets contrast of the SSD1306 display panel. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>SSD1306 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>contrast</parametername>
</parameternamelist>
<parameterdescription>
<para>Contrast of information being displayed (0 to 255). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" line="421" column="11" bodyfile="components/peripherals/i2c/esp_ssd1306/ssd1306.c" bodystart="1001" bodyend="1015" declfile="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" declline="421" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gad077195b8abf2294398d6a3b933bcfdd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ssd1306_set_bitmap</definition>
        <argsstring>(ssd1306_handle_t handle, uint8_t xpos, uint8_t ypos, const uint8_t *bitmap, uint8_t width, uint8_t height, bool invert)</argsstring>
        <name>ssd1306_set_bitmap</name>
        <param>
          <type><ref refid="group__drivers_1gad00aae97f6e6ed7273b46e4b955d89bb" kindref="member">ssd1306_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>xpos</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>ypos</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>bitmap</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>width</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>height</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>invert</declname>
        </param>
        <briefdescription>
<para>Sets SSD1306 pages and segments data for a bitmap. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Call <computeroutput>ssd1306_display_pages</computeroutput> to display the bitmap.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>SSD1306 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xpos</parametername>
</parameternamelist>
<parameterdescription>
<para>X-axis position of the bitmap. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ypos</parametername>
</parameternamelist>
<parameterdescription>
<para>Y-axis position of the bitmap. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bitmap</parametername>
</parameternamelist>
<parameterdescription>
<para>Bitmap data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para>Width of the bitmap. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>height</parametername>
</parameternamelist>
<parameterdescription>
<para>Height of the bitmap </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>invert</parametername>
</parameternamelist>
<parameterdescription>
<para>Bitmap is inverted when true. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" line="437" column="11" bodyfile="components/peripherals/i2c/esp_ssd1306/ssd1306.c" bodystart="626" bodyend="641" declfile="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" declline="437" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gafa66db38cf09253a7a3ad6779240c9d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ssd1306_display_bitmap</definition>
        <argsstring>(ssd1306_handle_t handle, uint8_t xpos, uint8_t ypos, const uint8_t *bitmap, uint8_t width, uint8_t height, bool invert)</argsstring>
        <name>ssd1306_display_bitmap</name>
        <param>
          <type><ref refid="group__drivers_1gad00aae97f6e6ed7273b46e4b955d89bb" kindref="member">ssd1306_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>xpos</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>ypos</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>bitmap</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>width</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>height</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>invert</declname>
        </param>
        <briefdescription>
<para>Displays a bitmap on the SSD1306. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Image to byte converter: <ulink url="https://mischianti.org/images-to-byte-array-online-converter-cpp-arduino/">https://mischianti.org/images-to-byte-array-online-converter-cpp-arduino/</ulink></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>SSD1306 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xpos</parametername>
</parameternamelist>
<parameterdescription>
<para>X-axis position of the bitmap. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ypos</parametername>
</parameternamelist>
<parameterdescription>
<para>Y-axis position of the bitmap. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bitmap</parametername>
</parameternamelist>
<parameterdescription>
<para>Bitmap data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para>Width of the bitmap. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>height</parametername>
</parameternamelist>
<parameterdescription>
<para>Height of the bitmap </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>invert</parametername>
</parameternamelist>
<parameterdescription>
<para>Bitmap is inverted when true. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" line="453" column="11" bodyfile="components/peripherals/i2c/esp_ssd1306/ssd1306.c" bodystart="643" bodyend="652" declfile="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" declline="453" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga995b3cf873461ff41db9499c11f24a18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ssd1306_display_image</definition>
        <argsstring>(ssd1306_handle_t handle, uint8_t page, uint8_t segment, const uint8_t *image, uint8_t width)</argsstring>
        <name>ssd1306_display_image</name>
        <param>
          <type><ref refid="group__drivers_1gad00aae97f6e6ed7273b46e4b955d89bb" kindref="member">ssd1306_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>page</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>segment</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>image</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>width</declname>
        </param>
        <briefdescription>
<para>Displays an image by page and segment on the SSD1306. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>SSD1306 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>page</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of page. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>segment</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of segment data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>image</parametername>
</parameternamelist>
<parameterdescription>
<para>Image data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para>Width of the image. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" line="465" column="11" bodyfile="components/peripherals/i2c/esp_ssd1306/ssd1306.c" bodystart="713" bodyend="765" declfile="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" declline="465" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga4e3e052294260fffa56f9dacc1ff0e4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ssd1306_display_text</definition>
        <argsstring>(ssd1306_handle_t handle, uint8_t page, const char *text, bool invert)</argsstring>
        <name>ssd1306_display_text</name>
        <param>
          <type><ref refid="group__drivers_1gad00aae97f6e6ed7273b46e4b955d89bb" kindref="member">ssd1306_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>page</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>text</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>invert</declname>
        </param>
        <briefdescription>
<para>Displays text by page on the SSD1306 with a maximum of 16-characters. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>SSD1306 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>page</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of page. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>text</parametername>
</parameternamelist>
<parameterdescription>
<para>Text characters (16 characters maximum) to display. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>invert</parametername>
</parameternamelist>
<parameterdescription>
<para>Text is inverted when true. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" line="476" column="11" bodyfile="components/peripherals/i2c/esp_ssd1306/ssd1306.c" bodystart="767" bodyend="787" declfile="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" declline="476" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gae45808dfc11b5de6f993f5f800b31516" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ssd1306_display_text_x2</definition>
        <argsstring>(ssd1306_handle_t handle, uint8_t page, const char *text, bool invert)</argsstring>
        <name>ssd1306_display_text_x2</name>
        <param>
          <type><ref refid="group__drivers_1gad00aae97f6e6ed7273b46e4b955d89bb" kindref="member">ssd1306_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>page</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>text</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>invert</declname>
        </param>
        <briefdescription>
<para>Displays text x2 larger by page on the SSD1306. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Text displayed uses 2-pages with a maximum of 8-characters.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>SSD1306 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>page</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of page. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>text</parametername>
</parameternamelist>
<parameterdescription>
<para>Text characters (8 characters maximum) to display. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>invert</parametername>
</parameternamelist>
<parameterdescription>
<para>Text is inverted when true. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" line="489" column="11" bodyfile="components/peripherals/i2c/esp_ssd1306/ssd1306.c" bodystart="789" bodyend="837" declfile="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" declline="489" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga70996f821857365b9ad33a6293f810c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ssd1306_display_text_x3</definition>
        <argsstring>(ssd1306_handle_t handle, uint8_t page, const char *text, bool invert)</argsstring>
        <name>ssd1306_display_text_x3</name>
        <param>
          <type><ref refid="group__drivers_1gad00aae97f6e6ed7273b46e4b955d89bb" kindref="member">ssd1306_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>page</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>text</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>invert</declname>
        </param>
        <briefdescription>
<para>Displays text x3 larger by page on the SSD1306. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Text displayed uses 3-pages with a maximum of 5 characters.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>SSD1306 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>page</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of page. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>text</parametername>
</parameternamelist>
<parameterdescription>
<para>Text characters (5 characters maximum) to display. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>invert</parametername>
</parameternamelist>
<parameterdescription>
<para>Text is inverted when true. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" line="502" column="11" bodyfile="components/peripherals/i2c/esp_ssd1306/ssd1306.c" bodystart="839" bodyend="888" declfile="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" declline="502" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gaf51fc93b1d7a8a6d75863605846b85cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ssd1306_display_textbox_banner</definition>
        <argsstring>(ssd1306_handle_t handle, uint8_t page, uint8_t segment, const char *text, uint8_t box_width, bool invert, uint8_t delay)</argsstring>
        <name>ssd1306_display_textbox_banner</name>
        <param>
          <type><ref refid="group__drivers_1gad00aae97f6e6ed7273b46e4b955d89bb" kindref="member">ssd1306_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>page</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>segment</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>text</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>box_width</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>invert</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>delay</declname>
        </param>
        <briefdescription>
<para>Displays scrolling text within a box as banner by page and segment on the SSD1306 with a maximum of 100-characters. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>SSD1306 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>page</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of page. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seg</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of segment data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>text</parametername>
</parameternamelist>
<parameterdescription>
<para>Text characters (100 characters maximum) to display. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>box_width</parametername>
</parameternamelist>
<parameterdescription>
<para>Width of the box. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>invert</parametername>
</parameternamelist>
<parameterdescription>
<para>Text is inverted when true. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delay</parametername>
</parameternamelist>
<parameterdescription>
<para>Delay in milliseconds before information is displayed, a value 0 there is no wait. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" line="516" column="11" bodyfile="components/peripherals/i2c/esp_ssd1306/ssd1306.c" bodystart="890" bodyend="925" declfile="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" declline="516" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gaa09a3774c0e2d1a6380c0d1d9694bb5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ssd1306_display_textbox_ticker</definition>
        <argsstring>(ssd1306_handle_t handle, uint8_t page, uint8_t segment, const char *text, uint8_t box_width, bool invert, uint8_t delay)</argsstring>
        <name>ssd1306_display_textbox_ticker</name>
        <param>
          <type><ref refid="group__drivers_1gad00aae97f6e6ed7273b46e4b955d89bb" kindref="member">ssd1306_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>page</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>segment</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>text</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>box_width</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>invert</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>delay</declname>
        </param>
        <briefdescription>
<para>Displays scrolling text within a box as a ticker by page and segment on the SSD1306 with a maximum of 100-characters. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>SSD1306 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>page</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of page. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seg</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of segment data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>text</parametername>
</parameternamelist>
<parameterdescription>
<para>Text characters (100 characters maximum) to display. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>box_width</parametername>
</parameternamelist>
<parameterdescription>
<para>Width of the box. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>invert</parametername>
</parameternamelist>
<parameterdescription>
<para>Text is inverted when true. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delay</parametername>
</parameternamelist>
<parameterdescription>
<para>Delay in milliseconds before information is displayed, a value 0 there is no wait. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" line="530" column="11" bodyfile="components/peripherals/i2c/esp_ssd1306/ssd1306.c" bodystart="927" bodyend="979" declfile="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" declline="530" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gabb36b61b4fd8c6782828efb3c8f100e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ssd1306_clear_display_page</definition>
        <argsstring>(ssd1306_handle_t handle, uint8_t page, bool invert)</argsstring>
        <name>ssd1306_clear_display_page</name>
        <param>
          <type><ref refid="group__drivers_1gad00aae97f6e6ed7273b46e4b955d89bb" kindref="member">ssd1306_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>page</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>invert</declname>
        </param>
        <briefdescription>
<para>Clears a page from the SSD1306 display. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>SSD1306 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>page</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of page to clear from the display. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>invert</parametername>
</parameternamelist>
<parameterdescription>
<para>Background is inverted when true. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" line="540" column="11" bodyfile="components/peripherals/i2c/esp_ssd1306/ssd1306.c" bodystart="981" bodyend="988" declfile="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" declline="540" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga4c23d69fc724593d58eb2cd04bbe2202" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ssd1306_clear_display</definition>
        <argsstring>(ssd1306_handle_t handle, bool invert)</argsstring>
        <name>ssd1306_clear_display</name>
        <param>
          <type><ref refid="group__drivers_1gad00aae97f6e6ed7273b46e4b955d89bb" kindref="member">ssd1306_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>invert</declname>
        </param>
        <briefdescription>
<para>Clears the entire SSD1306 display. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>SSD1306 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>invert</parametername>
</parameternamelist>
<parameterdescription>
<para>Background is inverted when true. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" line="549" column="11" bodyfile="components/peripherals/i2c/esp_ssd1306/ssd1306.c" bodystart="990" bodyend="999" declfile="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" declline="549" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga94321a86e0690eff8f8d6c39862e6a20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ssd1306_set_hardware_scroll</definition>
        <argsstring>(ssd1306_handle_t handle, ssd1306_scroll_types_t scroll, ssd1306_scroll_frames_t frame_frequency)</argsstring>
        <name>ssd1306_set_hardware_scroll</name>
        <param>
          <type><ref refid="group__drivers_1gad00aae97f6e6ed7273b46e4b955d89bb" kindref="member">ssd1306_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="group__drivers_1gaf8e3e2280d538ecfec1f53095ec54847" kindref="member">ssd1306_scroll_types_t</ref></type>
          <declname>scroll</declname>
        </param>
        <param>
          <type><ref refid="group__drivers_1ga836c705453828cd65340e8e2624a3de5" kindref="member">ssd1306_scroll_frames_t</ref></type>
          <declname>frame_frequency</declname>
        </param>
        <briefdescription>
<para>Sets SSD1306 scroll orientation and frame frequency for hardware based scrolling text. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Call <computeroutput>i2c_ssd1306_display_text</computeroutput> to display hardware based scrolling text.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>SSD1306 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scroll</parametername>
</parameternamelist>
<parameterdescription>
<para>Scrolling orientation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>frame_frequency</parametername>
</parameternamelist>
<parameterdescription>
<para>Frame rate of scrolling text. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" line="561" column="11" bodyfile="components/peripherals/i2c/esp_ssd1306/ssd1306.c" bodystart="1081" bodyend="1161" declfile="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" declline="561" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga5756410e01233fd698972eaa3514518f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ssd1306_set_software_scroll</definition>
        <argsstring>(ssd1306_handle_t handle, uint8_t start, uint8_t end)</argsstring>
        <name>ssd1306_set_software_scroll</name>
        <param>
          <type><ref refid="group__drivers_1gad00aae97f6e6ed7273b46e4b955d89bb" kindref="member">ssd1306_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>start</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>end</declname>
        </param>
        <briefdescription>
<para>Sets SSD1306 start and end page for software based scrolling text. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Call <computeroutput>i2c_ssd1306_display_scroll_text</computeroutput> to display software based scrolling text.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>SSD1306 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of start page. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of end page. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" line="573" column="11" bodyfile="components/peripherals/i2c/esp_ssd1306/ssd1306.c" bodystart="1017" bodyend="1034" declfile="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" declline="573" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gae2133378ab10c31d75efdbde5a135fdc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ssd1306_display_software_scroll_text</definition>
        <argsstring>(ssd1306_handle_t handle, const char *text, bool invert)</argsstring>
        <name>ssd1306_display_software_scroll_text</name>
        <param>
          <type><ref refid="group__drivers_1gad00aae97f6e6ed7273b46e4b955d89bb" kindref="member">ssd1306_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>text</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>invert</declname>
        </param>
        <briefdescription>
<para>Displays software based scrolling text on the SSD1306. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>SSD1306 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>text</parametername>
</parameternamelist>
<parameterdescription>
<para>Text characters (16 characters maximum) to display. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>invert</parametername>
</parameternamelist>
<parameterdescription>
<para>Text is inverted when true. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" line="583" column="11" bodyfile="components/peripherals/i2c/esp_ssd1306/ssd1306.c" bodystart="1036" bodyend="1060" declfile="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" declline="583" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga58e03e5ef20198ce341037a15ecc11fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ssd1306_clear_display_software_scroll</definition>
        <argsstring>(ssd1306_handle_t handle)</argsstring>
        <name>ssd1306_clear_display_software_scroll</name>
        <param>
          <type><ref refid="group__drivers_1gad00aae97f6e6ed7273b46e4b955d89bb" kindref="member">ssd1306_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Clears software based scrolling text from SSD1306 display. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>SSD1306 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" line="591" column="11" bodyfile="components/peripherals/i2c/esp_ssd1306/ssd1306.c" bodystart="1062" bodyend="1079" declfile="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" declline="591" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga03e081681a0943bd6a1706c2fc2a7f47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ssd1306_display_wrap_around</definition>
        <argsstring>(ssd1306_handle_t handle, ssd1306_scroll_types_t scroll, uint8_t start, uint8_t end, int8_t delay)</argsstring>
        <name>ssd1306_display_wrap_around</name>
        <param>
          <type><ref refid="group__drivers_1gad00aae97f6e6ed7273b46e4b955d89bb" kindref="member">ssd1306_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="group__drivers_1gaf8e3e2280d538ecfec1f53095ec54847" kindref="member">ssd1306_scroll_types_t</ref></type>
          <declname>scroll</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>start</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>end</declname>
        </param>
        <param>
          <type>int8_t</type>
          <declname>delay</declname>
        </param>
        <briefdescription>
<para>Sets SSD1306 scroll orientation, start and end pages to wrap around the display. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>SSD1306 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scroll</parametername>
</parameternamelist>
<parameterdescription>
<para>Scrolling orientation. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of page for left or right scroll, otherwise, height position for up or down scroll. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of page for left or right scroll, otherwise, height position for up or down scroll. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delay</parametername>
</parameternamelist>
<parameterdescription>
<para>Delay in milliseconds (0-255) before information is displayed, a value 0 there is no wait, and nothing is displayed with a value of -1. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" line="603" column="11" bodyfile="components/peripherals/i2c/esp_ssd1306/ssd1306.c" bodystart="1166" bodyend="1301" declfile="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" declline="603" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga8b7a7a8107467da64dcf54fa8e193578" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t ssd1306_copy_bit</definition>
        <argsstring>(uint8_t src, uint8_t src_bits, uint8_t dst, uint8_t dst_bits)</argsstring>
        <name>ssd1306_copy_bit</name>
        <param>
          <type>uint8_t</type>
          <declname>src</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>src_bits</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>dst_bits</declname>
        </param>
        <briefdescription>
<para>Copies bit from source to destination. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src_bits</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst_bits</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>uint8_t </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" line="614" column="9" bodyfile="components/peripherals/i2c/esp_ssd1306/ssd1306.c" bodystart="1311" bodyend="1326" declfile="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" declline="614" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gab7e84c8c633ca8c9348eb129585cd41a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ssd1306_invert_buffer</definition>
        <argsstring>(uint8_t *buf, size_t blen)</argsstring>
        <name>ssd1306_invert_buffer</name>
        <param>
          <type>uint8_t *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>blen</declname>
        </param>
        <briefdescription>
<para>Inverts the buffer data. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>blen</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of buffer data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" line="622" column="6" bodyfile="components/peripherals/i2c/esp_ssd1306/ssd1306.c" bodystart="1303" bodyend="1309" declfile="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" declline="622" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga08bb51787b4f00ea189694a53b19b0c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ssd1306_flip_buffer</definition>
        <argsstring>(uint8_t *buf, size_t blen)</argsstring>
        <name>ssd1306_flip_buffer</name>
        <param>
          <type>uint8_t *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>blen</declname>
        </param>
        <briefdescription>
<para>Flips the buffer data (upsidedown). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer data. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>blen</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of buffer data. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" line="630" column="6" bodyfile="components/peripherals/i2c/esp_ssd1306/ssd1306.c" bodystart="1329" bodyend="1333" declfile="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" declline="630" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gadcff44173cd188f6de9f701a6edc1cb1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t ssd1306_rotate_byte</definition>
        <argsstring>(uint8_t ch1)</argsstring>
        <name>ssd1306_rotate_byte</name>
        <param>
          <type>uint8_t</type>
          <declname>ch1</declname>
        </param>
        <briefdescription>
<para>Rotates 8-bits, as an example, 0x12 becomes 0x48. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ch1</parametername>
</parameternamelist>
<parameterdescription>
<para>8-bit value to rotate. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>uint8_t rotated 8-bit value. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" line="638" column="9" bodyfile="components/peripherals/i2c/esp_ssd1306/ssd1306.c" bodystart="1336" bodyend="1345" declfile="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" declline="638" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga6fb26d0c510920c0cea0e1d049af9d85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ssd1306_display_fadeout</definition>
        <argsstring>(ssd1306_handle_t handle)</argsstring>
        <name>ssd1306_display_fadeout</name>
        <param>
          <type><ref refid="group__drivers_1gad00aae97f6e6ed7273b46e4b955d89bb" kindref="member">ssd1306_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>SSD1306 display is faded out and cleared. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>SSD1306 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" line="646" column="11" bodyfile="components/peripherals/i2c/esp_ssd1306/ssd1306.c" bodystart="1347" bodyend="1369" declfile="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" declline="646" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga8947dac422d7f16f608a3360b57de507" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ssd1306_init</definition>
        <argsstring>(i2c_master_bus_handle_t master_handle, const ssd1306_config_t *ssd1306_config, ssd1306_handle_t *ssd1306_handle)</argsstring>
        <name>ssd1306_init</name>
        <param>
          <type>i2c_master_bus_handle_t</type>
          <declname>master_handle</declname>
        </param>
        <param>
          <type>const <ref refid="group__drivers_1gac71b91b4b58813d41ceba1ac27ef9214" kindref="member">ssd1306_config_t</ref> *</type>
          <declname>ssd1306_config</declname>
        </param>
        <param>
          <type><ref refid="group__drivers_1gad00aae97f6e6ed7273b46e4b955d89bb" kindref="member">ssd1306_handle_t</ref> *</type>
          <declname>ssd1306_handle</declname>
        </param>
        <briefdescription>
<para>Initializes an SSD1306 device onto the I2C master bus. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">master_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>I2C master bus handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ssd1306_config</parametername>
</parameternamelist>
<parameterdescription>
<para>SSD1306 device configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">ssd1306_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>SSD1306 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" line="656" column="11" bodyfile="components/peripherals/i2c/esp_ssd1306/ssd1306.c" bodystart="1423" bodyend="1476" declfile="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" declline="656" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga44d7d49a19e4c2292ae1dc5de0347e6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ssd1306_remove</definition>
        <argsstring>(ssd1306_handle_t handle)</argsstring>
        <name>ssd1306_remove</name>
        <param>
          <type><ref refid="group__drivers_1gad00aae97f6e6ed7273b46e4b955d89bb" kindref="member">ssd1306_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Removes an SSD1306 device from master bus. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>SSD1306 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" line="664" column="11" bodyfile="components/peripherals/i2c/esp_ssd1306/ssd1306.c" bodystart="1478" bodyend="1483" declfile="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" declline="664" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga53076408f712df3a9f7040032b8b64a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ssd1306_delete</definition>
        <argsstring>(ssd1306_handle_t handle)</argsstring>
        <name>ssd1306_delete</name>
        <param>
          <type><ref refid="group__drivers_1gad00aae97f6e6ed7273b46e4b955d89bb" kindref="member">ssd1306_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Removes an SSD1306 device from master bus and frees handle. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>SSD1306 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" line="672" column="11" bodyfile="components/peripherals/i2c/esp_ssd1306/ssd1306.c" bodystart="1485" bodyend="1499" declfile="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" declline="672" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga081f9ae8815661223907ce5fce66d5e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * ssd1306_get_fw_version</definition>
        <argsstring>(void)</argsstring>
        <name>ssd1306_get_fw_version</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Converts SSD1306 firmware version numbers (major, minor, patch) into a string. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>char* SSD1306 firmware version as a string that is formatted as X.X.X (e.g. 4.0.0). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" line="679" column="12" bodyfile="components/peripherals/i2c/esp_ssd1306/ssd1306.c" bodystart="1501" bodyend="1503" declfile="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" declline="679" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gaa4f81854a549ae34f52d4e05189a930e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t ssd1306_get_fw_version_number</definition>
        <argsstring>(void)</argsstring>
        <name>ssd1306_get_fw_version_number</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Converts SSD1306 firmware version numbers (major, minor, patch) into an integer value. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>int32_t SSD1306 firmware version number. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" line="686" column="9" bodyfile="components/peripherals/i2c/esp_ssd1306/ssd1306.c" bodystart="1505" bodyend="1507" declfile="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" declline="686" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga25bdb3452c5b29a3ff49e264860dcf27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t tbi2cxxx_init</definition>
        <argsstring>(i2c_master_bus_handle_t master_handle, const tbi2cxxx_config_t *tbi2cxxx_config, tbi2cxxx_handle_t *tbi2cxxx_handle)</argsstring>
        <name>tbi2cxxx_init</name>
        <param>
          <type>i2c_master_bus_handle_t</type>
          <declname>master_handle</declname>
        </param>
        <param>
          <type>const <ref refid="group__drivers_1gaa2c53e981afa7e2c33a020a1463a9f63" kindref="member">tbi2cxxx_config_t</ref> *</type>
          <declname>tbi2cxxx_config</declname>
        </param>
        <param>
          <type><ref refid="group__drivers_1gae94ca8f4dde9ba65a809b2482ac7ee39" kindref="member">tbi2cxxx_handle_t</ref> *</type>
          <declname>tbi2cxxx_handle</declname>
        </param>
        <briefdescription>
<para>Initializes an TBI2CXXX device onto the I2C master bus. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">master_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>I2C master bus handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">tbi2cxxx_config</parametername>
</parameternamelist>
<parameterdescription>
<para>TBI2CXXX device configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">tbi2cxxx_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>TBI2CXXX device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_tbi2cxxx/include/tbi2cxxx.h" line="120" column="11" bodyfile="components/peripherals/i2c/esp_tbi2cxxx/tbi2cxxx.c" bodystart="213" bodyend="260" declfile="components/peripherals/i2c/esp_tbi2cxxx/include/tbi2cxxx.h" declline="120" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga23bd65826ab6f55c5771b8d8d1d2f0e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t tbi2cxxx_get_temperatures</definition>
        <argsstring>(tbi2cxxx_handle_t handle, float *const ambient_temperature, float *const object_temperature)</argsstring>
        <name>tbi2cxxx_get_temperatures</name>
        <param>
          <type><ref refid="group__drivers_1gae94ca8f4dde9ba65a809b2482ac7ee39" kindref="member">tbi2cxxx_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>float *const</type>
          <declname>ambient_temperature</declname>
        </param>
        <param>
          <type>float *const</type>
          <declname>object_temperature</declname>
        </param>
        <briefdescription>
<para>Reads ambient and object temperatures from TBI2CXXX. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>TBI2CXXX device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ambient_temperature</parametername>
</parameternamelist>
<parameterdescription>
<para>Ambient temperature in degrees celsius. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>object_temperature</parametername>
</parameternamelist>
<parameterdescription>
<para>Object temperature in degrees celsius. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_tbi2cxxx/include/tbi2cxxx.h" line="130" column="11" bodyfile="components/peripherals/i2c/esp_tbi2cxxx/tbi2cxxx.c" bodystart="262" bodyend="273" declfile="components/peripherals/i2c/esp_tbi2cxxx/include/tbi2cxxx.h" declline="130" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gaae9dc6300d0137eed7bdb65dc740805c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t tbi2cxxx_get_ambient_temperature</definition>
        <argsstring>(tbi2cxxx_handle_t handle, float *const temperature)</argsstring>
        <name>tbi2cxxx_get_ambient_temperature</name>
        <param>
          <type><ref refid="group__drivers_1gae94ca8f4dde9ba65a809b2482ac7ee39" kindref="member">tbi2cxxx_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>float *const</type>
          <declname>temperature</declname>
        </param>
        <briefdescription>
<para>Reads ambient temperature from TBI2CXXX. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>TBI2CXXX device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>temperature</parametername>
</parameternamelist>
<parameterdescription>
<para>Ambient temperature in degrees celsius. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_tbi2cxxx/include/tbi2cxxx.h" line="139" column="11" bodyfile="components/peripherals/i2c/esp_tbi2cxxx/tbi2cxxx.c" bodystart="275" bodyend="291" declfile="components/peripherals/i2c/esp_tbi2cxxx/include/tbi2cxxx.h" declline="139" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gaa7ef08b34b225840d04ea8095e9542cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t tbi2cxxx_get_object_temperature</definition>
        <argsstring>(tbi2cxxx_handle_t handle, float *const temperature)</argsstring>
        <name>tbi2cxxx_get_object_temperature</name>
        <param>
          <type><ref refid="group__drivers_1gae94ca8f4dde9ba65a809b2482ac7ee39" kindref="member">tbi2cxxx_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>float *const</type>
          <declname>temperature</declname>
        </param>
        <briefdescription>
<para>Reads object temperature from TBI2CXXX. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>TBI2CXXX device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>temperature</parametername>
</parameternamelist>
<parameterdescription>
<para>Object temperature in degrees celsius. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_tbi2cxxx/include/tbi2cxxx.h" line="148" column="11" bodyfile="components/peripherals/i2c/esp_tbi2cxxx/tbi2cxxx.c" bodystart="293" bodyend="312" declfile="components/peripherals/i2c/esp_tbi2cxxx/include/tbi2cxxx.h" declline="148" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga6c77ae3eb92e74bb730086086cd0360c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t tbi2cxxx_get_emissivity</definition>
        <argsstring>(tbi2cxxx_handle_t handle, float *const coefficient)</argsstring>
        <name>tbi2cxxx_get_emissivity</name>
        <param>
          <type><ref refid="group__drivers_1gae94ca8f4dde9ba65a809b2482ac7ee39" kindref="member">tbi2cxxx_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>float *const</type>
          <declname>coefficient</declname>
        </param>
        <briefdescription>
<para>Reads emissivity coefficient setting from TBI2CXXX. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Factory default emissivity coefficient setting is 0.97.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>TBI2CXXX device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>coefficient</parametername>
</parameternamelist>
<parameterdescription>
<para>TBI2CXXX emissivity coefficient setting. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_tbi2cxxx/include/tbi2cxxx.h" line="159" column="11" bodyfile="components/peripherals/i2c/esp_tbi2cxxx/tbi2cxxx.c" bodystart="314" bodyend="327" declfile="components/peripherals/i2c/esp_tbi2cxxx/include/tbi2cxxx.h" declline="159" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gadcf122994a10b87d6c8e876a2177ba8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t tbi2cxxx_set_emissivity</definition>
        <argsstring>(tbi2cxxx_handle_t handle, const float coefficient)</argsstring>
        <name>tbi2cxxx_set_emissivity</name>
        <param>
          <type><ref refid="group__drivers_1gae94ca8f4dde9ba65a809b2482ac7ee39" kindref="member">tbi2cxxx_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>coefficient</declname>
        </param>
        <briefdescription>
<para>Writes emissivity coefficient setting to TBI2CXXX. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The manufacturer recommends restarting the sensor by cycling power off and on.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>TBI2CXXX device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>coefficient</parametername>
</parameternamelist>
<parameterdescription>
<para>TBI2CXXX emissivity coefficient setting, acceptable range is 0.1 to 1.0. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_tbi2cxxx/include/tbi2cxxx.h" line="170" column="11" bodyfile="components/peripherals/i2c/esp_tbi2cxxx/tbi2cxxx.c" bodystart="329" bodyend="349" declfile="components/peripherals/i2c/esp_tbi2cxxx/include/tbi2cxxx.h" declline="170" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga22daa35b11224ec670f6d28e1a06915b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t tbi2cxxx_remove</definition>
        <argsstring>(tbi2cxxx_handle_t handle)</argsstring>
        <name>tbi2cxxx_remove</name>
        <param>
          <type><ref refid="group__drivers_1gae94ca8f4dde9ba65a809b2482ac7ee39" kindref="member">tbi2cxxx_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Removes an TBI2CXXX device from master bus. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>TBI2CXXX device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_tbi2cxxx/include/tbi2cxxx.h" line="178" column="11" bodyfile="components/peripherals/i2c/esp_tbi2cxxx/tbi2cxxx.c" bodystart="351" bodyend="357" declfile="components/peripherals/i2c/esp_tbi2cxxx/include/tbi2cxxx.h" declline="178" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga16eab3ba0a07f5f5da98e91c74a86408" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t tbi2cxxx_delete</definition>
        <argsstring>(tbi2cxxx_handle_t handle)</argsstring>
        <name>tbi2cxxx_delete</name>
        <param>
          <type><ref refid="group__drivers_1gae94ca8f4dde9ba65a809b2482ac7ee39" kindref="member">tbi2cxxx_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Removes an TBI2CXXX device from master bus and frees handle. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>TBI2CXXX device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_tbi2cxxx/include/tbi2cxxx.h" line="186" column="11" bodyfile="components/peripherals/i2c/esp_tbi2cxxx/tbi2cxxx.c" bodystart="359" bodyend="373" declfile="components/peripherals/i2c/esp_tbi2cxxx/include/tbi2cxxx.h" declline="186" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga33588fb965ff9d8a16b04998746a7d3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * tbi2cxxx_get_fw_version</definition>
        <argsstring>(void)</argsstring>
        <name>tbi2cxxx_get_fw_version</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Converts TBI2CXXX firmware version numbers (major, minor, patch, build) into a string. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>char* TBI2CXXX firmware version as a string that is formatted as X.X.X (e.g. 4.0.0). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_tbi2cxxx/include/tbi2cxxx.h" line="193" column="12" bodyfile="components/peripherals/i2c/esp_tbi2cxxx/tbi2cxxx.c" bodystart="375" bodyend="377" declfile="components/peripherals/i2c/esp_tbi2cxxx/include/tbi2cxxx.h" declline="193" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga22484df6bb8c6fd727defc451d91a7c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t tbi2cxxx_get_fw_version_number</definition>
        <argsstring>(void)</argsstring>
        <name>tbi2cxxx_get_fw_version_number</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Converts TBI2CXXX firmware version numbers (major, minor, patch) into an integer value. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>int32_t TBI2CXXX firmware version number. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_tbi2cxxx/include/tbi2cxxx.h" line="200" column="9" bodyfile="components/peripherals/i2c/esp_tbi2cxxx/tbi2cxxx.c" bodystart="379" bodyend="381" declfile="components/peripherals/i2c/esp_tbi2cxxx/include/tbi2cxxx.h" declline="200" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga686d6f2d835e70c98d2c9400d5021cb2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t tlv493d_init</definition>
        <argsstring>(i2c_master_bus_handle_t master_handle, const tlv493d_config_t *tlv493d_config, tlv493d_handle_t *tlv493d_handle)</argsstring>
        <name>tlv493d_init</name>
        <param>
          <type>i2c_master_bus_handle_t</type>
          <declname>master_handle</declname>
        </param>
        <param>
          <type>const <ref refid="group__drivers_1ga93552d2492ff661b95f1b0b8171d46da" kindref="member">tlv493d_config_t</ref> *</type>
          <declname>tlv493d_config</declname>
        </param>
        <param>
          <type><ref refid="group__drivers_1ga74d5bbe8e6492b2ba70d8f9849e31bad" kindref="member">tlv493d_handle_t</ref> *</type>
          <declname>tlv493d_handle</declname>
        </param>
        <briefdescription>
<para>Initializes an TLV493D device onto the I2C master bus. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">master_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>I2C master bus handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">tlv493d_config</parametername>
</parameternamelist>
<parameterdescription>
<para>TLV493D device configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">tlv493d_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>TLV493D device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_tlv493d/include/tlv493d.h" line="281" column="11" bodyfile="components/peripherals/i2c/esp_tlv493d/tlv493d.c" bodystart="390" bodyend="516" declfile="components/peripherals/i2c/esp_tlv493d/include/tlv493d.h" declline="281" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gad63f29ed0b6a0a20f40b04733e1b77bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t tlv493d_get_data</definition>
        <argsstring>(tlv493d_handle_t handle, tlv493d_data_t *const data)</argsstring>
        <name>tlv493d_get_data</name>
        <param>
          <type><ref refid="group__drivers_1ga74d5bbe8e6492b2ba70d8f9849e31bad" kindref="member">tlv493d_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="structtlv493d__data__s" kindref="compound">tlv493d_data_t</ref> *const</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_tlv493d/include/tlv493d.h" line="283" column="11" bodyfile="components/peripherals/i2c/esp_tlv493d/tlv493d.c" bodystart="519" bodyend="528" declfile="components/peripherals/i2c/esp_tlv493d/include/tlv493d.h" declline="283" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga06e616c81c46030a149878b3efe26c84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t tlv493d_get_data_status</definition>
        <argsstring>(tlv493d_handle_t handle, bool *const ready)</argsstring>
        <name>tlv493d_get_data_status</name>
        <param>
          <type><ref refid="group__drivers_1ga74d5bbe8e6492b2ba70d8f9849e31bad" kindref="member">tlv493d_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>bool *const</type>
          <declname>ready</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_tlv493d/include/tlv493d.h" line="285" column="11" bodyfile="components/peripherals/i2c/esp_tlv493d/tlv493d.c" bodystart="531" bodyend="542" declfile="components/peripherals/i2c/esp_tlv493d/include/tlv493d.h" declline="285" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gaad2cf38df7777ba953a8744cd814da41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t tlv493d_power_down</definition>
        <argsstring>(tlv493d_handle_t handle)</argsstring>
        <name>tlv493d_power_down</name>
        <param>
          <type><ref refid="group__drivers_1ga74d5bbe8e6492b2ba70d8f9849e31bad" kindref="member">tlv493d_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_tlv493d/include/tlv493d.h" line="287" column="11" declfile="components/peripherals/i2c/esp_tlv493d/include/tlv493d.h" declline="287" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga560b7c57f84380d8c09efb1416b9437b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t tlv493d_power_up</definition>
        <argsstring>(tlv493d_handle_t handle)</argsstring>
        <name>tlv493d_power_up</name>
        <param>
          <type><ref refid="group__drivers_1ga74d5bbe8e6492b2ba70d8f9849e31bad" kindref="member">tlv493d_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_tlv493d/include/tlv493d.h" line="289" column="11" declfile="components/peripherals/i2c/esp_tlv493d/include/tlv493d.h" declline="289" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga67aa2d3b740377ce7d9e70145f41b192" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t tlv493d_reset</definition>
        <argsstring>(tlv493d_handle_t handle)</argsstring>
        <name>tlv493d_reset</name>
        <param>
          <type><ref refid="group__drivers_1ga74d5bbe8e6492b2ba70d8f9849e31bad" kindref="member">tlv493d_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Issues soft-reset and initializes TLV493D. See datasheet for details. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>TLV493D device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_tlv493d/include/tlv493d.h" line="298" column="11" declfile="components/peripherals/i2c/esp_tlv493d/include/tlv493d.h" declline="298" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga88b6f19971557e23d6c09027e9448b56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t tlv493d_remove</definition>
        <argsstring>(tlv493d_handle_t handle)</argsstring>
        <name>tlv493d_remove</name>
        <param>
          <type><ref refid="group__drivers_1ga74d5bbe8e6492b2ba70d8f9849e31bad" kindref="member">tlv493d_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Removes an TLV493D device from master bus. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>TLV493D device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_tlv493d/include/tlv493d.h" line="306" column="11" bodyfile="components/peripherals/i2c/esp_tlv493d/tlv493d.c" bodystart="544" bodyend="550" declfile="components/peripherals/i2c/esp_tlv493d/include/tlv493d.h" declline="306" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga53229d80a482f2ecf4137287fd5f63e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t tlv493d_delete</definition>
        <argsstring>(tlv493d_handle_t handle)</argsstring>
        <name>tlv493d_delete</name>
        <param>
          <type><ref refid="group__drivers_1ga74d5bbe8e6492b2ba70d8f9849e31bad" kindref="member">tlv493d_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Removes an TLV493D device from master bus and frees handle. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>TLV493D device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_tlv493d/include/tlv493d.h" line="314" column="11" bodyfile="components/peripherals/i2c/esp_tlv493d/tlv493d.c" bodystart="552" bodyend="566" declfile="components/peripherals/i2c/esp_tlv493d/include/tlv493d.h" declline="314" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga6a23c26a1961c5d210bf32053cf9ce96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t veml6040_get_configuration_register</definition>
        <argsstring>(veml6040_handle_t handle, veml6040_config_register_t *const reg)</argsstring>
        <name>veml6040_get_configuration_register</name>
        <param>
          <type><ref refid="group__drivers_1ga5138a917680071ae02ee47c3caa2a447" kindref="member">veml6040_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>veml6040_config_register_t *const</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Reads configuration register from VEML6040. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>VEML6040 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>VEML6040 configuration register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_veml6040/include/veml6040.h" line="169" column="11" bodyfile="components/peripherals/i2c/esp_veml6040/veml6040.c" bodystart="207" bodyend="223" declfile="components/peripherals/i2c/esp_veml6040/include/veml6040.h" declline="169" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga26a52a85e81b397f77d2a633ffb11b91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t veml6040_set_configuration_register</definition>
        <argsstring>(veml6040_handle_t handle, const veml6040_config_register_t reg)</argsstring>
        <name>veml6040_set_configuration_register</name>
        <param>
          <type><ref refid="group__drivers_1ga5138a917680071ae02ee47c3caa2a447" kindref="member">veml6040_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const veml6040_config_register_t</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Writes configuration register to VEML6040. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>VEML6040 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>VEML6040 configuration register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_veml6040/include/veml6040.h" line="178" column="11" bodyfile="components/peripherals/i2c/esp_veml6040/veml6040.c" bodystart="225" bodyend="244" declfile="components/peripherals/i2c/esp_veml6040/include/veml6040.h" declline="178" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gaa870815f17f869e2b196a33dddb6273d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t veml6040_init</definition>
        <argsstring>(i2c_master_bus_handle_t master_handle, const veml6040_config_t *veml6040_config, veml6040_handle_t *veml6040_handle)</argsstring>
        <name>veml6040_init</name>
        <param>
          <type>i2c_master_bus_handle_t</type>
          <declname>master_handle</declname>
        </param>
        <param>
          <type>const <ref refid="group__drivers_1gad40ef4055e142e70775987b4dcc2babd" kindref="member">veml6040_config_t</ref> *</type>
          <declname>veml6040_config</declname>
        </param>
        <param>
          <type><ref refid="group__drivers_1ga5138a917680071ae02ee47c3caa2a447" kindref="member">veml6040_handle_t</ref> *</type>
          <declname>veml6040_handle</declname>
        </param>
        <briefdescription>
<para>Initializes an VEML6040 device onto the I2C master bus. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">master_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>I2C master bus handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">veml6040_config</parametername>
</parameternamelist>
<parameterdescription>
<para>VEML6040 device configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">veml6040_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>VEML6040 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_veml6040/include/veml6040.h" line="188" column="11" bodyfile="components/peripherals/i2c/esp_veml6040/veml6040.c" bodystart="246" bodyend="310" declfile="components/peripherals/i2c/esp_veml6040/include/veml6040.h" declline="188" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gaaa40c9711ad3fb40fd67ad6c17383229" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t veml6040_get_red_als</definition>
        <argsstring>(veml6040_handle_t handle, float *const als)</argsstring>
        <name>veml6040_get_red_als</name>
        <param>
          <type><ref refid="group__drivers_1ga5138a917680071ae02ee47c3caa2a447" kindref="member">veml6040_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>float *const</type>
          <declname>als</declname>
        </param>
        <briefdescription>
<para>Reads red illuminance channel from VEML6040. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>VEML6040 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>als</parametername>
</parameternamelist>
<parameterdescription>
<para>VEML6040 red illuminance in lux. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_veml6040/include/veml6040.h" line="197" column="11" bodyfile="components/peripherals/i2c/esp_veml6040/veml6040.c" bodystart="312" bodyend="325" declfile="components/peripherals/i2c/esp_veml6040/include/veml6040.h" declline="197" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gad2075ef7be54945ef3388a3055a0b58c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t veml6040_get_green_als</definition>
        <argsstring>(veml6040_handle_t handle, float *const als)</argsstring>
        <name>veml6040_get_green_als</name>
        <param>
          <type><ref refid="group__drivers_1ga5138a917680071ae02ee47c3caa2a447" kindref="member">veml6040_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>float *const</type>
          <declname>als</declname>
        </param>
        <briefdescription>
<para>Reads green illuminance channel from VEML6040. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>VEML6040 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>als</parametername>
</parameternamelist>
<parameterdescription>
<para>VEML6040 green illuminance in lux. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_veml6040/include/veml6040.h" line="206" column="11" bodyfile="components/peripherals/i2c/esp_veml6040/veml6040.c" bodystart="327" bodyend="340" declfile="components/peripherals/i2c/esp_veml6040/include/veml6040.h" declline="206" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga0867046ddc001e337573a10b9b96b2d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t veml6040_get_blue_als</definition>
        <argsstring>(veml6040_handle_t handle, float *const als)</argsstring>
        <name>veml6040_get_blue_als</name>
        <param>
          <type><ref refid="group__drivers_1ga5138a917680071ae02ee47c3caa2a447" kindref="member">veml6040_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>float *const</type>
          <declname>als</declname>
        </param>
        <briefdescription>
<para>Reads blue illuminance channel from VEML6040. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>VEML6040 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>als</parametername>
</parameternamelist>
<parameterdescription>
<para>VEML6040 blue illuminance in lux. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_veml6040/include/veml6040.h" line="215" column="11" bodyfile="components/peripherals/i2c/esp_veml6040/veml6040.c" bodystart="342" bodyend="355" declfile="components/peripherals/i2c/esp_veml6040/include/veml6040.h" declline="215" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga0d3ff53326663c7d643b01abb4e9c0b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t veml6040_get_white_als</definition>
        <argsstring>(veml6040_handle_t handle, float *const als)</argsstring>
        <name>veml6040_get_white_als</name>
        <param>
          <type><ref refid="group__drivers_1ga5138a917680071ae02ee47c3caa2a447" kindref="member">veml6040_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>float *const</type>
          <declname>als</declname>
        </param>
        <briefdescription>
<para>Reads white illuminance channel from VEML6040. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>VEML6040 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>als</parametername>
</parameternamelist>
<parameterdescription>
<para>VEML6040 white illuminance in lux. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_veml6040/include/veml6040.h" line="224" column="11" bodyfile="components/peripherals/i2c/esp_veml6040/veml6040.c" bodystart="357" bodyend="370" declfile="components/peripherals/i2c/esp_veml6040/include/veml6040.h" declline="224" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga73af38b41ecc11b9e7895f248ac9adf6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t veml6040_get_als</definition>
        <argsstring>(veml6040_handle_t handle, float *const red_als, float *const green_als, float *const blue_als, float *const white_als)</argsstring>
        <name>veml6040_get_als</name>
        <param>
          <type><ref refid="group__drivers_1ga5138a917680071ae02ee47c3caa2a447" kindref="member">veml6040_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>float *const</type>
          <declname>red_als</declname>
        </param>
        <param>
          <type>float *const</type>
          <declname>green_als</declname>
        </param>
        <param>
          <type>float *const</type>
          <declname>blue_als</declname>
        </param>
        <param>
          <type>float *const</type>
          <declname>white_als</declname>
        </param>
        <briefdescription>
<para>Reads red, green, blue, and white illuminance channels from VEML6040. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>VEML6040 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>red_als</parametername>
</parameternamelist>
<parameterdescription>
<para>VEML6040 red illuminance in lux. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>green_als</parametername>
</parameternamelist>
<parameterdescription>
<para>VEML6040 green illuminance in lux. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>blue_als</parametername>
</parameternamelist>
<parameterdescription>
<para>VEML6040 blue illuminance in lux. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>white_als</parametername>
</parameternamelist>
<parameterdescription>
<para>VEML6040 white illuminance in lux. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_veml6040/include/veml6040.h" line="236" column="11" bodyfile="components/peripherals/i2c/esp_veml6040/veml6040.c" bodystart="372" bodyend="383" declfile="components/peripherals/i2c/esp_veml6040/include/veml6040.h" declline="236" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga598c23cc671ed472dae347258e9ae420" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t veml6040_get_integration_time</definition>
        <argsstring>(veml6040_handle_t handle, veml6040_integration_times_t *const integration_time)</argsstring>
        <name>veml6040_get_integration_time</name>
        <param>
          <type><ref refid="group__drivers_1ga5138a917680071ae02ee47c3caa2a447" kindref="member">veml6040_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="group__drivers_1ga965474f5a3cc90e59052034af367a774" kindref="member">veml6040_integration_times_t</ref> *const</type>
          <declname>integration_time</declname>
        </param>
        <briefdescription>
<para>Reads integration time from VEML6040. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>VEML6040 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">integration_time</parametername>
</parameternamelist>
<parameterdescription>
<para>VEML6040 integration time setting. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_veml6040/include/veml6040.h" line="245" column="11" bodyfile="components/peripherals/i2c/esp_veml6040/veml6040.c" bodystart="385" bodyend="397" declfile="components/peripherals/i2c/esp_veml6040/include/veml6040.h" declline="245" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga7bb9690cdbdbb57b3faeaa10d31d3382" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t veml6040_set_integration_time</definition>
        <argsstring>(veml6040_handle_t handle, const veml6040_integration_times_t integration_time)</argsstring>
        <name>veml6040_set_integration_time</name>
        <param>
          <type><ref refid="group__drivers_1ga5138a917680071ae02ee47c3caa2a447" kindref="member">veml6040_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const <ref refid="group__drivers_1ga965474f5a3cc90e59052034af367a774" kindref="member">veml6040_integration_times_t</ref></type>
          <declname>integration_time</declname>
        </param>
        <briefdescription>
<para>Writes integration time to VEML6040. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>VEML6040 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">integration_time</parametername>
</parameternamelist>
<parameterdescription>
<para>VEML6040 integration time setting. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_veml6040/include/veml6040.h" line="254" column="11" bodyfile="components/peripherals/i2c/esp_veml6040/veml6040.c" bodystart="399" bodyend="418" declfile="components/peripherals/i2c/esp_veml6040/include/veml6040.h" declline="254" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gab9a54cc7db60ebe995d9aeaa899ad4fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t veml6040_get_trigger_method</definition>
        <argsstring>(veml6040_handle_t handle, veml6040_triggers_t *const trigger_method)</argsstring>
        <name>veml6040_get_trigger_method</name>
        <param>
          <type><ref refid="group__drivers_1ga5138a917680071ae02ee47c3caa2a447" kindref="member">veml6040_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="group__drivers_1ga80b746ffca4da5b50952601d10cce4a8" kindref="member">veml6040_triggers_t</ref> *const</type>
          <declname>trigger_method</declname>
        </param>
        <briefdescription>
<para>Reads trigger method from VEML6040. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>VEML6040 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">trigger_method</parametername>
</parameternamelist>
<parameterdescription>
<para>VEML6040 trigger method seting. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_veml6040/include/veml6040.h" line="263" column="11" bodyfile="components/peripherals/i2c/esp_veml6040/veml6040.c" bodystart="420" bodyend="432" declfile="components/peripherals/i2c/esp_veml6040/include/veml6040.h" declline="263" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga30117ae62fd513c2ec56d51d358ff404" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t veml6040_set_trigger_method</definition>
        <argsstring>(veml6040_handle_t handle, const veml6040_triggers_t trigger_method)</argsstring>
        <name>veml6040_set_trigger_method</name>
        <param>
          <type><ref refid="group__drivers_1ga5138a917680071ae02ee47c3caa2a447" kindref="member">veml6040_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const <ref refid="group__drivers_1ga80b746ffca4da5b50952601d10cce4a8" kindref="member">veml6040_triggers_t</ref></type>
          <declname>trigger_method</declname>
        </param>
        <briefdescription>
<para>Write trigger method to VEML6040. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>VEML6040 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>trigger_method</parametername>
</parameternamelist>
<parameterdescription>
<para>VEML6040 trigger method seting. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_veml6040/include/veml6040.h" line="272" column="11" bodyfile="components/peripherals/i2c/esp_veml6040/veml6040.c" bodystart="434" bodyend="453" declfile="components/peripherals/i2c/esp_veml6040/include/veml6040.h" declline="272" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga067d3823a15e94ba31ebc860d4ff027c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t veml6040_get_mode</definition>
        <argsstring>(veml6040_handle_t handle, veml6040_modes_t *const mode)</argsstring>
        <name>veml6040_get_mode</name>
        <param>
          <type><ref refid="group__drivers_1ga5138a917680071ae02ee47c3caa2a447" kindref="member">veml6040_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="group__drivers_1ga9d3ce83e852049877f395e14bc449799" kindref="member">veml6040_modes_t</ref> *const</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Reads mode from VEML6040. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>VEML6040 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">mode</parametername>
</parameternamelist>
<parameterdescription>
<para>VEML6040 mode seting. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_veml6040/include/veml6040.h" line="281" column="11" bodyfile="components/peripherals/i2c/esp_veml6040/veml6040.c" bodystart="455" bodyend="467" declfile="components/peripherals/i2c/esp_veml6040/include/veml6040.h" declline="281" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gac9990614b78b5fb0c12af14949ffd278" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t veml6040_set_mode</definition>
        <argsstring>(veml6040_handle_t handle, const veml6040_modes_t mode)</argsstring>
        <name>veml6040_set_mode</name>
        <param>
          <type><ref refid="group__drivers_1ga5138a917680071ae02ee47c3caa2a447" kindref="member">veml6040_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const <ref refid="group__drivers_1ga9d3ce83e852049877f395e14bc449799" kindref="member">veml6040_modes_t</ref></type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Writes mode to VEML6040. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>VEML6040 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">mode</parametername>
</parameternamelist>
<parameterdescription>
<para>VEML6040 mode seting. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_veml6040/include/veml6040.h" line="290" column="11" bodyfile="components/peripherals/i2c/esp_veml6040/veml6040.c" bodystart="469" bodyend="488" declfile="components/peripherals/i2c/esp_veml6040/include/veml6040.h" declline="290" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga576aa4f19376f58e42facf56a6e793c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t veml6040_disable</definition>
        <argsstring>(veml6040_handle_t handle)</argsstring>
        <name>veml6040_disable</name>
        <param>
          <type><ref refid="group__drivers_1ga5138a917680071ae02ee47c3caa2a447" kindref="member">veml6040_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Shuts down VEML6040 until woken. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>VEML6040 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_veml6040/include/veml6040.h" line="298" column="11" bodyfile="components/peripherals/i2c/esp_veml6040/veml6040.c" bodystart="490" bodyend="509" declfile="components/peripherals/i2c/esp_veml6040/include/veml6040.h" declline="298" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga02a231de273876f832ff49e0b4f77b8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t veml6040_enable</definition>
        <argsstring>(veml6040_handle_t handle)</argsstring>
        <name>veml6040_enable</name>
        <param>
          <type><ref refid="group__drivers_1ga5138a917680071ae02ee47c3caa2a447" kindref="member">veml6040_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Wakes up VEML6040 from shutdown. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>VEML6040 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_veml6040/include/veml6040.h" line="306" column="11" bodyfile="components/peripherals/i2c/esp_veml6040/veml6040.c" bodystart="511" bodyend="530" declfile="components/peripherals/i2c/esp_veml6040/include/veml6040.h" declline="306" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gaf8046d8916700879d5618cbc5e8570a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t veml6040_remove</definition>
        <argsstring>(veml6040_handle_t handle)</argsstring>
        <name>veml6040_remove</name>
        <param>
          <type><ref refid="group__drivers_1ga5138a917680071ae02ee47c3caa2a447" kindref="member">veml6040_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Removes an VEML6040 device from master bus. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>VEML6040 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_veml6040/include/veml6040.h" line="314" column="11" bodyfile="components/peripherals/i2c/esp_veml6040/veml6040.c" bodystart="532" bodyend="537" declfile="components/peripherals/i2c/esp_veml6040/include/veml6040.h" declline="314" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga5010c3ba013060596795aa384df1e0d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t veml6040_delete</definition>
        <argsstring>(veml6040_handle_t handle)</argsstring>
        <name>veml6040_delete</name>
        <param>
          <type><ref refid="group__drivers_1ga5138a917680071ae02ee47c3caa2a447" kindref="member">veml6040_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Removes an VEML6040 device from master I2C bus and delete the handle. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>VEML6040 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_veml6040/include/veml6040.h" line="322" column="11" bodyfile="components/peripherals/i2c/esp_veml6040/veml6040.c" bodystart="539" bodyend="553" declfile="components/peripherals/i2c/esp_veml6040/include/veml6040.h" declline="322" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga014ca37ccf96d146020c0b298c11ef95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * veml6040_get_fw_version</definition>
        <argsstring>(void)</argsstring>
        <name>veml6040_get_fw_version</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Converts VEML6040 firmware version numbers (major, minor, patch) into a string. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>char* VEML6040 firmware version as a string that is formatted as X.X.X (e.g. 4.0.0). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_veml6040/include/veml6040.h" line="329" column="12" bodyfile="components/peripherals/i2c/esp_veml6040/veml6040.c" bodystart="555" bodyend="557" declfile="components/peripherals/i2c/esp_veml6040/include/veml6040.h" declline="329" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gaaab06871d262e2320e6de4f1b378a6cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t veml6040_get_fw_version_number</definition>
        <argsstring>(void)</argsstring>
        <name>veml6040_get_fw_version_number</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Converts VEML6040 firmware version numbers (major, minor, patch) into an integer value. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>int32_t VEML6040 firmware version number. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_veml6040/include/veml6040.h" line="336" column="9" bodyfile="components/peripherals/i2c/esp_veml6040/veml6040.c" bodystart="559" bodyend="561" declfile="components/peripherals/i2c/esp_veml6040/include/veml6040.h" declline="336" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga4e377fc2a600efda16058451d67969fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t veml7700_get_configuration_register</definition>
        <argsstring>(veml7700_handle_t handle, veml7700_configuration_register_t *const reg)</argsstring>
        <name>veml7700_get_configuration_register</name>
        <param>
          <type><ref refid="group__drivers_1ga15f981acc0edb18aed9c141c822210e8" kindref="member">veml7700_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>veml7700_configuration_register_t *const</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Reads configuration register from VEML7700. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>VEML7700 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>VEML7700 configuration register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_veml7700/include/veml7700.h" line="244" column="11" bodyfile="components/peripherals/i2c/esp_veml7700/veml7700.c" bodystart="410" bodyend="426" declfile="components/peripherals/i2c/esp_veml7700/include/veml7700.h" declline="244" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gab9b3f48a573243e5807e2c1dc15b59bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t veml7700_set_configuration_register</definition>
        <argsstring>(veml7700_handle_t handle, const veml7700_configuration_register_t reg)</argsstring>
        <name>veml7700_set_configuration_register</name>
        <param>
          <type><ref refid="group__drivers_1ga15f981acc0edb18aed9c141c822210e8" kindref="member">veml7700_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const veml7700_configuration_register_t</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Writes configuration register to VEML7700. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>VEML7700 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>VEML7700 configuration register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_veml7700/include/veml7700.h" line="253" column="11" bodyfile="components/peripherals/i2c/esp_veml7700/veml7700.c" bodystart="428" bodyend="447" declfile="components/peripherals/i2c/esp_veml7700/include/veml7700.h" declline="253" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gadab47413fd90263b4d8458ecab1ad1ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t veml7700_get_threshold_registers</definition>
        <argsstring>(veml7700_handle_t handle, uint16_t *const hi_threshold, uint16_t *const lo_threshold)</argsstring>
        <name>veml7700_get_threshold_registers</name>
        <param>
          <type><ref refid="group__drivers_1ga15f981acc0edb18aed9c141c822210e8" kindref="member">veml7700_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>uint16_t *const</type>
          <declname>hi_threshold</declname>
        </param>
        <param>
          <type>uint16_t *const</type>
          <declname>lo_threshold</declname>
        </param>
        <briefdescription>
<para>Reads high and low threshold registers from VEML7700. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>VEML7700 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">hi_threshold</parametername>
</parameternamelist>
<parameterdescription>
<para>VEML7700 high threshold register. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">lo_threshold</parametername>
</parameternamelist>
<parameterdescription>
<para>VEML7700 lo threshold register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_veml7700/include/veml7700.h" line="263" column="11" bodyfile="components/peripherals/i2c/esp_veml7700/veml7700.c" bodystart="449" bodyend="463" declfile="components/peripherals/i2c/esp_veml7700/include/veml7700.h" declline="263" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga22d6b29510514eaa79c476a3a221c416" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t veml7700_set_threshold_registers</definition>
        <argsstring>(veml7700_handle_t handle, const uint16_t hi_threshold, const uint16_t lo_threshold)</argsstring>
        <name>veml7700_set_threshold_registers</name>
        <param>
          <type><ref refid="group__drivers_1ga15f981acc0edb18aed9c141c822210e8" kindref="member">veml7700_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const uint16_t</type>
          <declname>hi_threshold</declname>
        </param>
        <param>
          <type>const uint16_t</type>
          <declname>lo_threshold</declname>
        </param>
        <briefdescription>
<para>Writes high and low threshold registers to VEML7700. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>VEML7700 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">hi_threshold</parametername>
</parameternamelist>
<parameterdescription>
<para>VEML7700 high threshold register. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">lo_threshold</parametername>
</parameternamelist>
<parameterdescription>
<para>VEML7700 lo threshold register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_veml7700/include/veml7700.h" line="273" column="11" bodyfile="components/peripherals/i2c/esp_veml7700/veml7700.c" bodystart="465" bodyend="479" declfile="components/peripherals/i2c/esp_veml7700/include/veml7700.h" declline="273" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga090fbfbb4faba01c1ee2521534bdeb78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t veml7700_get_power_saving_mode_register</definition>
        <argsstring>(veml7700_handle_t handle, veml7700_power_saving_mode_register_t *const reg)</argsstring>
        <name>veml7700_get_power_saving_mode_register</name>
        <param>
          <type><ref refid="group__drivers_1ga15f981acc0edb18aed9c141c822210e8" kindref="member">veml7700_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>veml7700_power_saving_mode_register_t *const</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Reads power saving mode register from VEML7700. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>VEML7700 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>VEML7700 power saving mode register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_veml7700/include/veml7700.h" line="282" column="11" bodyfile="components/peripherals/i2c/esp_veml7700/veml7700.c" bodystart="481" bodyend="497" declfile="components/peripherals/i2c/esp_veml7700/include/veml7700.h" declline="282" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga47c3ffa5576f5380ae52bbcf6aaffbb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t veml7700_set_power_saving_mode_register</definition>
        <argsstring>(veml7700_handle_t handle, const veml7700_power_saving_mode_register_t reg)</argsstring>
        <name>veml7700_set_power_saving_mode_register</name>
        <param>
          <type><ref refid="group__drivers_1ga15f981acc0edb18aed9c141c822210e8" kindref="member">veml7700_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const veml7700_power_saving_mode_register_t</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Writes power saving mode register to VEML7700. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>VEML7700 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>VEML7700 power saving mode register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_veml7700/include/veml7700.h" line="291" column="11" bodyfile="components/peripherals/i2c/esp_veml7700/veml7700.c" bodystart="499" bodyend="516" declfile="components/peripherals/i2c/esp_veml7700/include/veml7700.h" declline="291" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gac9a54d751449430f74593b1ab18e91c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t veml7700_get_interrupt_status_register</definition>
        <argsstring>(veml7700_handle_t handle, veml7700_interrupt_status_register_t *const reg)</argsstring>
        <name>veml7700_get_interrupt_status_register</name>
        <param>
          <type><ref refid="group__drivers_1ga15f981acc0edb18aed9c141c822210e8" kindref="member">veml7700_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>veml7700_interrupt_status_register_t *const</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Reads interrupt status register from VEML7700. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>VEML7700 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>VEML7700 interrupt status register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_veml7700/include/veml7700.h" line="300" column="11" bodyfile="components/peripherals/i2c/esp_veml7700/veml7700.c" bodystart="518" bodyend="534" declfile="components/peripherals/i2c/esp_veml7700/include/veml7700.h" declline="300" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gabc06af746ed00c91ef10303b3d9e3a13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t veml7700_get_identifier_register</definition>
        <argsstring>(veml7700_handle_t handle, veml7700_identifier_register_t *const reg)</argsstring>
        <name>veml7700_get_identifier_register</name>
        <param>
          <type><ref refid="group__drivers_1ga15f981acc0edb18aed9c141c822210e8" kindref="member">veml7700_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>veml7700_identifier_register_t *const</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Reads identifier register from VEML7700. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>VEML7700 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">reg</parametername>
</parameternamelist>
<parameterdescription>
<para>VEML7700 identifier register. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_veml7700/include/veml7700.h" line="309" column="11" declfile="components/peripherals/i2c/esp_veml7700/include/veml7700.h" declline="309" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga0670c76ac75d85976ab8dd28952341ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t veml7700_optimize_configuration</definition>
        <argsstring>(veml7700_handle_t handle)</argsstring>
        <name>veml7700_optimize_configuration</name>
        <param>
          <type><ref refid="group__drivers_1ga15f981acc0edb18aed9c141c822210e8" kindref="member">veml7700_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Optimizes VEML7700 gain and integration time configuration. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>VEML7700 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_veml7700/include/veml7700.h" line="317" column="11" bodyfile="components/peripherals/i2c/esp_veml7700/veml7700.c" bodystart="312" bodyend="365" declfile="components/peripherals/i2c/esp_veml7700/include/veml7700.h" declline="317" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gacbc527a4d3398c592fc15864cab14c04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t veml7700_optimize_configuration___</definition>
        <argsstring>(veml7700_handle_t handle)</argsstring>
        <name>veml7700_optimize_configuration___</name>
        <param>
          <type><ref refid="group__drivers_1ga15f981acc0edb18aed9c141c822210e8" kindref="member">veml7700_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_veml7700/include/veml7700.h" line="318" column="11" declfile="components/peripherals/i2c/esp_veml7700/include/veml7700.h" declline="318" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga3df45aea74256b7236c66d3d603fe4ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t veml7700_init</definition>
        <argsstring>(i2c_master_bus_handle_t master_handle, const veml7700_config_t *veml7700_config, veml7700_handle_t *veml7700_handle)</argsstring>
        <name>veml7700_init</name>
        <param>
          <type>i2c_master_bus_handle_t</type>
          <declname>master_handle</declname>
        </param>
        <param>
          <type>const <ref refid="group__drivers_1ga7d53219e1d496e47e273799a4c34cd97" kindref="member">veml7700_config_t</ref> *</type>
          <declname>veml7700_config</declname>
        </param>
        <param>
          <type><ref refid="group__drivers_1ga15f981acc0edb18aed9c141c822210e8" kindref="member">veml7700_handle_t</ref> *</type>
          <declname>veml7700_handle</declname>
        </param>
        <briefdescription>
<para>Initializes an VEML7700 device onto the I2C master bus. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">master_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>I2C master bus handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">veml7700_config</parametername>
</parameternamelist>
<parameterdescription>
<para>VEML7700 device configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">veml7700_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>VEML7700 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_veml7700/include/veml7700.h" line="329" column="11" bodyfile="components/peripherals/i2c/esp_veml7700/veml7700.c" bodystart="554" bodyend="636" declfile="components/peripherals/i2c/esp_veml7700/include/veml7700.h" declline="329" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga7b92d7ef8b97fb3dd9ca11cd37ab521e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t veml7700_get_ambient_light_counts</definition>
        <argsstring>(veml7700_handle_t handle, uint16_t *const counts)</argsstring>
        <name>veml7700_get_ambient_light_counts</name>
        <param>
          <type><ref refid="group__drivers_1ga15f981acc0edb18aed9c141c822210e8" kindref="member">veml7700_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>uint16_t *const</type>
          <declname>counts</declname>
        </param>
        <briefdescription>
<para>Reads ambient light counts from VEML7700. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>VEML7700 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>counts</parametername>
</parameternamelist>
<parameterdescription>
<para>Ambient light counts. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_veml7700/include/veml7700.h" line="338" column="11" bodyfile="components/peripherals/i2c/esp_veml7700/veml7700.c" bodystart="638" bodyend="663" declfile="components/peripherals/i2c/esp_veml7700/include/veml7700.h" declline="338" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga605226e520866ecd3b93fda8add8d5d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t veml7700_get_ambient_light</definition>
        <argsstring>(veml7700_handle_t handle, float *const ambient_light)</argsstring>
        <name>veml7700_get_ambient_light</name>
        <param>
          <type><ref refid="group__drivers_1ga15f981acc0edb18aed9c141c822210e8" kindref="member">veml7700_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>float *const</type>
          <declname>ambient_light</declname>
        </param>
        <briefdescription>
<para>Reads ambient light (0 lux to 140 klux) from VEML7700. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This follows the official Vishay VEML7700 Application Note, rev. 17-Jan-2024.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>VEML7700 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">ambient_light</parametername>
</parameternamelist>
<parameterdescription>
<para>Ambient light illumination in lux. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_veml7700/include/veml7700.h" line="349" column="11" bodyfile="components/peripherals/i2c/esp_veml7700/veml7700.c" bodystart="665" bodyend="690" declfile="components/peripherals/i2c/esp_veml7700/include/veml7700.h" declline="349" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga08efbb4a6b4acdf2ae339c65e2a8d5c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t veml7700_get_ambient_light_auto</definition>
        <argsstring>(veml7700_handle_t handle, float *const ambient_light)</argsstring>
        <name>veml7700_get_ambient_light_auto</name>
        <param>
          <type><ref refid="group__drivers_1ga15f981acc0edb18aed9c141c822210e8" kindref="member">veml7700_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>float *const</type>
          <declname>ambient_light</declname>
        </param>
        <briefdescription>
<para>Reads optimal ambient light (0 lux to 140 klux) from VEML7700. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This follows the official Vishay VEML7700 Application Note, rev. 17-Jan-2024.</para>
</simplesect>
<simplesect kind="note"><para>This doesn&apos;t seem to work all the time, results can vary, more testing required.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>VEML7700 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">ambient_light</parametername>
</parameternamelist>
<parameterdescription>
<para>Ambient light illumination in lux. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_veml7700/include/veml7700.h" line="362" column="11" bodyfile="components/peripherals/i2c/esp_veml7700/veml7700.c" bodystart="692" bodyend="706" declfile="components/peripherals/i2c/esp_veml7700/include/veml7700.h" declline="362" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga22d7d333457bfd18fb39b720fe776918" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t veml7700_get_white_channel_counts</definition>
        <argsstring>(veml7700_handle_t handle, uint16_t *const counts)</argsstring>
        <name>veml7700_get_white_channel_counts</name>
        <param>
          <type><ref refid="group__drivers_1ga15f981acc0edb18aed9c141c822210e8" kindref="member">veml7700_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>uint16_t *const</type>
          <declname>counts</declname>
        </param>
        <briefdescription>
<para>Reads white channel counts from VEML7700. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>VEML7700 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>counts</parametername>
</parameternamelist>
<parameterdescription>
<para>White channel counts. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_veml7700/include/veml7700.h" line="371" column="11" bodyfile="components/peripherals/i2c/esp_veml7700/veml7700.c" bodystart="708" bodyend="733" declfile="components/peripherals/i2c/esp_veml7700/include/veml7700.h" declline="371" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga356e53e172864f9b7c7cf155f2ec8d37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t veml7700_get_white_channel</definition>
        <argsstring>(veml7700_handle_t handle, float *const white_light)</argsstring>
        <name>veml7700_get_white_channel</name>
        <param>
          <type><ref refid="group__drivers_1ga15f981acc0edb18aed9c141c822210e8" kindref="member">veml7700_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>float *const</type>
          <declname>white_light</declname>
        </param>
        <briefdescription>
<para>Reads white channel from VEML7700. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This follows the official Vishay VEML7700 Application Note, rev. 17-Jan-2024.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>VEML7700 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">white_light</parametername>
</parameternamelist>
<parameterdescription>
<para>White channel illumination in lux. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_veml7700/include/veml7700.h" line="382" column="11" bodyfile="components/peripherals/i2c/esp_veml7700/veml7700.c" bodystart="735" bodyend="760" declfile="components/peripherals/i2c/esp_veml7700/include/veml7700.h" declline="382" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga2882675e21eb29903ecea8de8947efdb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t veml7700_get_white_channel_auto</definition>
        <argsstring>(veml7700_handle_t handle, float *const white_light)</argsstring>
        <name>veml7700_get_white_channel_auto</name>
        <param>
          <type><ref refid="group__drivers_1ga15f981acc0edb18aed9c141c822210e8" kindref="member">veml7700_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>float *const</type>
          <declname>white_light</declname>
        </param>
        <briefdescription>
<para>Reads optimal white channel from VEML7700. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This follows the official Vishay VEML7700 Application Note, rev. 17-Jan-2024.</para>
</simplesect>
<simplesect kind="note"><para>This doesn&apos;t seem to work all the time, results can vary, more testing required.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>VEML7700 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">white_light</parametername>
</parameternamelist>
<parameterdescription>
<para>White channel illumination in lux. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_veml7700/include/veml7700.h" line="395" column="11" bodyfile="components/peripherals/i2c/esp_veml7700/veml7700.c" bodystart="762" bodyend="776" declfile="components/peripherals/i2c/esp_veml7700/include/veml7700.h" declline="395" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gaa5b25167c5b2f9ca6f8517adbd781c3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t veml7700_get_thresholds</definition>
        <argsstring>(veml7700_handle_t handle, uint16_t *const hi_threshold, uint16_t *const lo_threshold)</argsstring>
        <name>veml7700_get_thresholds</name>
        <param>
          <type><ref refid="group__drivers_1ga15f981acc0edb18aed9c141c822210e8" kindref="member">veml7700_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>uint16_t *const</type>
          <declname>hi_threshold</declname>
        </param>
        <param>
          <type>uint16_t *const</type>
          <declname>lo_threshold</declname>
        </param>
        <briefdescription>
<para>Reads high and low als thresholds (lux) from VEML7700. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>VEML7700 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hi_threshold</parametername>
</parameternamelist>
<parameterdescription>
<para>VEML7700 high threshold setting. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lo_threshold</parametername>
</parameternamelist>
<parameterdescription>
<para>VEML7700 low threshold setting. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_veml7700/include/veml7700.h" line="405" column="11" bodyfile="components/peripherals/i2c/esp_veml7700/veml7700.c" bodystart="778" bodyend="786" declfile="components/peripherals/i2c/esp_veml7700/include/veml7700.h" declline="405" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga95f7902914c1e7d6d9ea132eaaca5d73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t veml7700_set_thresholds</definition>
        <argsstring>(veml7700_handle_t handle, const uint16_t hi_threshold, const uint16_t lo_threshold)</argsstring>
        <name>veml7700_set_thresholds</name>
        <param>
          <type><ref refid="group__drivers_1ga15f981acc0edb18aed9c141c822210e8" kindref="member">veml7700_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const uint16_t</type>
          <declname>hi_threshold</declname>
        </param>
        <param>
          <type>const uint16_t</type>
          <declname>lo_threshold</declname>
        </param>
        <briefdescription>
<para>Writes high and low als thresholds (lux) to VEML7700. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>VEML7700 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hi_threshold</parametername>
</parameternamelist>
<parameterdescription>
<para>VEML7700 high threshold setting. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lo_threshold</parametername>
</parameternamelist>
<parameterdescription>
<para>VEML7700 low threshold setting. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_veml7700/include/veml7700.h" line="415" column="11" bodyfile="components/peripherals/i2c/esp_veml7700/veml7700.c" bodystart="788" bodyend="800" declfile="components/peripherals/i2c/esp_veml7700/include/veml7700.h" declline="415" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga97b407fc167caa9ae7a7bf066bbdd1f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t veml7700_get_gain</definition>
        <argsstring>(veml7700_handle_t handle, veml7700_gains_t *const gain)</argsstring>
        <name>veml7700_get_gain</name>
        <param>
          <type><ref refid="group__drivers_1ga15f981acc0edb18aed9c141c822210e8" kindref="member">veml7700_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="group__drivers_1ga147216bbdea3f623352b8f1e4f65a88e" kindref="member">veml7700_gains_t</ref> *const</type>
          <declname>gain</declname>
        </param>
        <briefdescription>
<para>Reads als gain from VEML7700. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>VEML7700 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gain</parametername>
</parameternamelist>
<parameterdescription>
<para>VEML7700 gain setting. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_veml7700/include/veml7700.h" line="424" column="11" bodyfile="components/peripherals/i2c/esp_veml7700/veml7700.c" bodystart="802" bodyend="814" declfile="components/peripherals/i2c/esp_veml7700/include/veml7700.h" declline="424" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gab5614a740cccfe9cc18874d6c8927b0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t veml7700_set_gain</definition>
        <argsstring>(veml7700_handle_t handle, const veml7700_gains_t gain)</argsstring>
        <name>veml7700_set_gain</name>
        <param>
          <type><ref refid="group__drivers_1ga15f981acc0edb18aed9c141c822210e8" kindref="member">veml7700_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const <ref refid="group__drivers_1ga147216bbdea3f623352b8f1e4f65a88e" kindref="member">veml7700_gains_t</ref></type>
          <declname>gain</declname>
        </param>
        <briefdescription>
<para>Writes als gain to VEML7700. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>VEML7700 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gain</parametername>
</parameternamelist>
<parameterdescription>
<para>VEML7700 gain setting. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_veml7700/include/veml7700.h" line="433" column="11" bodyfile="components/peripherals/i2c/esp_veml7700/veml7700.c" bodystart="816" bodyend="836" declfile="components/peripherals/i2c/esp_veml7700/include/veml7700.h" declline="433" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga286f62aaa9bb92d8b1edef4db4cbe28b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t veml7700_get_integration_time</definition>
        <argsstring>(veml7700_handle_t handle, veml7700_integration_times_t *const integration_time)</argsstring>
        <name>veml7700_get_integration_time</name>
        <param>
          <type><ref refid="group__drivers_1ga15f981acc0edb18aed9c141c822210e8" kindref="member">veml7700_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="group__drivers_1gafac680c13034d3d5f1a9c422f9e7cbfa" kindref="member">veml7700_integration_times_t</ref> *const</type>
          <declname>integration_time</declname>
        </param>
        <briefdescription>
<para>Reads als integration time from VEML7700. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>VEML7700 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>integration_time</parametername>
</parameternamelist>
<parameterdescription>
<para>VEML7700 integration time setting. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_veml7700/include/veml7700.h" line="442" column="11" bodyfile="components/peripherals/i2c/esp_veml7700/veml7700.c" bodystart="838" bodyend="851" declfile="components/peripherals/i2c/esp_veml7700/include/veml7700.h" declline="442" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gaebf927dbf844aecff936da8151502318" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t veml7700_set_integration_time</definition>
        <argsstring>(veml7700_handle_t handle, const veml7700_integration_times_t integration_time)</argsstring>
        <name>veml7700_set_integration_time</name>
        <param>
          <type><ref refid="group__drivers_1ga15f981acc0edb18aed9c141c822210e8" kindref="member">veml7700_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const <ref refid="group__drivers_1gafac680c13034d3d5f1a9c422f9e7cbfa" kindref="member">veml7700_integration_times_t</ref></type>
          <declname>integration_time</declname>
        </param>
        <briefdescription>
<para>Writes als integration time to VEML7700. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>VEML7700 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>integration_time</parametername>
</parameternamelist>
<parameterdescription>
<para>VEML7700 integration time setting. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_veml7700/include/veml7700.h" line="451" column="11" bodyfile="components/peripherals/i2c/esp_veml7700/veml7700.c" bodystart="853" bodyend="872" declfile="components/peripherals/i2c/esp_veml7700/include/veml7700.h" declline="451" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga76bd429b05deb0df57215f14877dde21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t veml7700_get_persistence_protection</definition>
        <argsstring>(veml7700_handle_t handle, veml7700_persistence_protections_t *const persistence_protection)</argsstring>
        <name>veml7700_get_persistence_protection</name>
        <param>
          <type><ref refid="group__drivers_1ga15f981acc0edb18aed9c141c822210e8" kindref="member">veml7700_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="group__drivers_1gaeeb143d2beee98ad2a2ff5c989edb913" kindref="member">veml7700_persistence_protections_t</ref> *const</type>
          <declname>persistence_protection</declname>
        </param>
        <briefdescription>
<para>Reads als persistence protection from VEML7700. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>VEML7700 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>persistence_protection</parametername>
</parameternamelist>
<parameterdescription>
<para>VEML7700 persistence protection setting. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_veml7700/include/veml7700.h" line="460" column="11" bodyfile="components/peripherals/i2c/esp_veml7700/veml7700.c" bodystart="874" bodyend="887" declfile="components/peripherals/i2c/esp_veml7700/include/veml7700.h" declline="460" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga4be6ec152108484d2dafb735806f321c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t veml7700_set_persistence_protection</definition>
        <argsstring>(veml7700_handle_t handle, const veml7700_persistence_protections_t persistence_protection)</argsstring>
        <name>veml7700_set_persistence_protection</name>
        <param>
          <type><ref refid="group__drivers_1ga15f981acc0edb18aed9c141c822210e8" kindref="member">veml7700_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const <ref refid="group__drivers_1gaeeb143d2beee98ad2a2ff5c989edb913" kindref="member">veml7700_persistence_protections_t</ref></type>
          <declname>persistence_protection</declname>
        </param>
        <briefdescription>
<para>Writes als persistence protection to VEML7700. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>VEML7700 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>persistence_protection</parametername>
</parameternamelist>
<parameterdescription>
<para>VEML7700 persistence protection setting. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_veml7700/include/veml7700.h" line="469" column="11" bodyfile="components/peripherals/i2c/esp_veml7700/veml7700.c" bodystart="889" bodyend="908" declfile="components/peripherals/i2c/esp_veml7700/include/veml7700.h" declline="469" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga9799cdab16aa735712bae0a492b7d2fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t veml7700_get_power_saving_mode</definition>
        <argsstring>(veml7700_handle_t handle, veml7700_power_saving_modes_t *const power_saving_mode, bool *const power_saving_enabled)</argsstring>
        <name>veml7700_get_power_saving_mode</name>
        <param>
          <type><ref refid="group__drivers_1ga15f981acc0edb18aed9c141c822210e8" kindref="member">veml7700_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="group__drivers_1gad31166a451080a6684c80980ade4a1f4" kindref="member">veml7700_power_saving_modes_t</ref> *const</type>
          <declname>power_saving_mode</declname>
        </param>
        <param>
          <type>bool *const</type>
          <declname>power_saving_enabled</declname>
        </param>
        <briefdescription>
<para>Reads power saving mode from VEML7700. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>VEML7700 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>power_saving_mode</parametername>
</parameternamelist>
<parameterdescription>
<para>VEML7700 power saving mode setting. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>power_saving_enabled</parametername>
</parameternamelist>
<parameterdescription>
<para>VEML7700 power saving state setting. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_veml7700/include/veml7700.h" line="479" column="11" bodyfile="components/peripherals/i2c/esp_veml7700/veml7700.c" bodystart="910" bodyend="924" declfile="components/peripherals/i2c/esp_veml7700/include/veml7700.h" declline="479" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gaef0db61657096047281f6d1d07d76c26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t veml7700_set_power_saving_mode</definition>
        <argsstring>(veml7700_handle_t handle, const veml7700_power_saving_modes_t power_saving_mode, const bool power_saving_enabled)</argsstring>
        <name>veml7700_set_power_saving_mode</name>
        <param>
          <type><ref refid="group__drivers_1ga15f981acc0edb18aed9c141c822210e8" kindref="member">veml7700_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const <ref refid="group__drivers_1gad31166a451080a6684c80980ade4a1f4" kindref="member">veml7700_power_saving_modes_t</ref></type>
          <declname>power_saving_mode</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>power_saving_enabled</declname>
        </param>
        <briefdescription>
<para>Reads power saving mode from VEML7700. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>VEML7700 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>power_saving_mode</parametername>
</parameternamelist>
<parameterdescription>
<para>VEML7700 power saving mode setting. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>power_saving_enabled</parametername>
</parameternamelist>
<parameterdescription>
<para>VEML7700 power saving state setting. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_veml7700/include/veml7700.h" line="489" column="11" bodyfile="components/peripherals/i2c/esp_veml7700/veml7700.c" bodystart="926" bodyend="947" declfile="components/peripherals/i2c/esp_veml7700/include/veml7700.h" declline="489" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga06912f4d8764246090c3a0248cda4df3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t veml7700_enable_irq</definition>
        <argsstring>(veml7700_handle_t handle)</argsstring>
        <name>veml7700_enable_irq</name>
        <param>
          <type><ref refid="group__drivers_1ga15f981acc0edb18aed9c141c822210e8" kindref="member">veml7700_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Enables interrupt assertion. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>VEML7700 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_veml7700/include/veml7700.h" line="497" column="11" bodyfile="components/peripherals/i2c/esp_veml7700/veml7700.c" bodystart="964" bodyend="983" declfile="components/peripherals/i2c/esp_veml7700/include/veml7700.h" declline="497" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga1c38e9b091d65c8ab0a6986686fbef1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t veml7700_disable_irq</definition>
        <argsstring>(veml7700_handle_t handle)</argsstring>
        <name>veml7700_disable_irq</name>
        <param>
          <type><ref refid="group__drivers_1ga15f981acc0edb18aed9c141c822210e8" kindref="member">veml7700_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Disables interrupt assertion. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>VEML7700 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_veml7700/include/veml7700.h" line="505" column="11" bodyfile="components/peripherals/i2c/esp_veml7700/veml7700.c" bodystart="985" bodyend="1004" declfile="components/peripherals/i2c/esp_veml7700/include/veml7700.h" declline="505" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga9da6f871b446c5b4d1e79e832268e036" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t veml7700_get_interrupt_status</definition>
        <argsstring>(veml7700_handle_t handle, bool *const hi_threshold_exceeded, bool *const lo_threshold_exceeded)</argsstring>
        <name>veml7700_get_interrupt_status</name>
        <param>
          <type><ref refid="group__drivers_1ga15f981acc0edb18aed9c141c822210e8" kindref="member">veml7700_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>bool *const</type>
          <declname>hi_threshold_exceeded</declname>
        </param>
        <param>
          <type>bool *const</type>
          <declname>lo_threshold_exceeded</declname>
        </param>
        <briefdescription>
<para>Reads interrupt status from VEML7700. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>VEML7700 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">hi_threshold_exceeded</parametername>
</parameternamelist>
<parameterdescription>
<para>true when high threshold is exceeded. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">lo_threshold_exceeded</parametername>
</parameternamelist>
<parameterdescription>
<para>true when lo threshold is exceeded. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_veml7700/include/veml7700.h" line="515" column="11" bodyfile="components/peripherals/i2c/esp_veml7700/veml7700.c" bodystart="949" bodyend="962" declfile="components/peripherals/i2c/esp_veml7700/include/veml7700.h" declline="515" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga8c2fbed8a6a32690409fd971152f90fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t veml7700_disable</definition>
        <argsstring>(veml7700_handle_t handle)</argsstring>
        <name>veml7700_disable</name>
        <param>
          <type><ref refid="group__drivers_1ga15f981acc0edb18aed9c141c822210e8" kindref="member">veml7700_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Shuts down VEML7700 until woken. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>VEML7700 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_veml7700/include/veml7700.h" line="523" column="11" bodyfile="components/peripherals/i2c/esp_veml7700/veml7700.c" bodystart="1006" bodyend="1025" declfile="components/peripherals/i2c/esp_veml7700/include/veml7700.h" declline="523" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga19b84511cac9aba284a9730b57a8452c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t veml7700_enable</definition>
        <argsstring>(veml7700_handle_t handle)</argsstring>
        <name>veml7700_enable</name>
        <param>
          <type><ref refid="group__drivers_1ga15f981acc0edb18aed9c141c822210e8" kindref="member">veml7700_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Wakes up VEML7700 from shut-down. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>VEML7700 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_veml7700/include/veml7700.h" line="531" column="11" bodyfile="components/peripherals/i2c/esp_veml7700/veml7700.c" bodystart="1027" bodyend="1046" declfile="components/peripherals/i2c/esp_veml7700/include/veml7700.h" declline="531" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gac02fe809c88d3260e4a2936ed6906aec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t veml7700_remove</definition>
        <argsstring>(veml7700_handle_t handle)</argsstring>
        <name>veml7700_remove</name>
        <param>
          <type><ref refid="group__drivers_1ga15f981acc0edb18aed9c141c822210e8" kindref="member">veml7700_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Removes an VEML7700 device from master bus. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>VEML7700 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_veml7700/include/veml7700.h" line="539" column="11" bodyfile="components/peripherals/i2c/esp_veml7700/veml7700.c" bodystart="1048" bodyend="1053" declfile="components/peripherals/i2c/esp_veml7700/include/veml7700.h" declline="539" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga3d85934c16c7e75ad9a4db31bbf98a23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t veml7700_delete</definition>
        <argsstring>(veml7700_handle_t handle)</argsstring>
        <name>veml7700_delete</name>
        <param>
          <type><ref refid="group__drivers_1ga15f981acc0edb18aed9c141c822210e8" kindref="member">veml7700_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Removes an VEML7700 device from master I2C bus and delete the handle. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>VEML7700 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_veml7700/include/veml7700.h" line="547" column="11" bodyfile="components/peripherals/i2c/esp_veml7700/veml7700.c" bodystart="1055" bodyend="1069" declfile="components/peripherals/i2c/esp_veml7700/include/veml7700.h" declline="547" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga53e5fc530544c445a2e76009243e179d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * veml7700_get_fw_version</definition>
        <argsstring>(void)</argsstring>
        <name>veml7700_get_fw_version</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Converts VEML7700 firmware version numbers (major, minor, patch) into a string. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>char* VEML7700 firmware version as a string that is formatted as X.X.X (e.g. 4.0.0). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_veml7700/include/veml7700.h" line="555" column="12" bodyfile="components/peripherals/i2c/esp_veml7700/veml7700.c" bodystart="1071" bodyend="1073" declfile="components/peripherals/i2c/esp_veml7700/include/veml7700.h" declline="555" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gadd58a901e3980ff65a7ecf7472e87c88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t veml7700_get_fw_version_number</definition>
        <argsstring>(void)</argsstring>
        <name>veml7700_get_fw_version_number</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Converts VEML7700 firmware version numbers (major, minor, patch) into an integer value. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>int32_t VEML7700 firmware version number. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_veml7700/include/veml7700.h" line="562" column="9" bodyfile="components/peripherals/i2c/esp_veml7700/veml7700.c" bodystart="1075" bodyend="1077" declfile="components/peripherals/i2c/esp_veml7700/include/veml7700.h" declline="562" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga4a1fee0b059382bfe94cda53e3188348" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool ods18b20_validate_address</definition>
        <argsstring>(const onewire_device_address_t address)</argsstring>
        <name>ods18b20_validate_address</name>
        <param>
          <type>const onewire_device_address_t</type>
          <declname>address</declname>
        </param>
        <briefdescription>
<para>Checks 1-wire device address against the ROM ID (i.e. family code of DS18B20 is 0x28) to determine if the device is a DS18B20. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>address</parametername>
</parameternamelist>
<parameterdescription>
<para>1-wire device address. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool 1-wire device is a DS18B20 when true; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/owb/esp_ds18b20/include/ds18b20.h" line="144" column="6" declfile="components/peripherals/owb/esp_ds18b20/include/ds18b20.h" declline="144" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga92ed90eb99c6af8ced8ec60ded005e15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ds18b20_detect</definition>
        <argsstring>(onewire_bus_handle_t owb_handle, onewire_device_t *const devices, const uint8_t device_size, uint8_t *const device_count)</argsstring>
        <name>ds18b20_detect</name>
        <param>
          <type><ref refid="structonewire__bus__t" kindref="compound">onewire_bus_handle_t</ref></type>
          <declname>owb_handle</declname>
        </param>
        <param>
          <type><ref refid="structonewire__device__t" kindref="compound">onewire_device_t</ref> *const</type>
          <declname>devices</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>device_size</declname>
        </param>
        <param>
          <type>uint8_t *const</type>
          <declname>device_count</declname>
        </param>
        <briefdescription>
<para>Detects up to 10 DS18B20 devices on the 1-wire bus. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">owb_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>1-wire bus handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">devices</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of DS18B20 devices detected on the 1-wire bus. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">device_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of DS18B20 devices array. The maximum number of detectable DS18B20 devices is 10. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">device_count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of DS18B20 devices detected. The maximum number of detectable DS18B20 devices is 10. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/owb/esp_ds18b20/include/ds18b20.h" line="155" column="11" bodyfile="components/peripherals/owb/esp_ds18b20/ds18b20.c" bodystart="123" bodyend="156" declfile="components/peripherals/owb/esp_ds18b20/include/ds18b20.h" declline="155" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga2d2040a73e3947b56f4a0c5e5d436ddb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ds18b20_connected</definition>
        <argsstring>(ds18b20_handle_t handle, bool *const connected)</argsstring>
        <name>ds18b20_connected</name>
        <param>
          <type><ref refid="group__drivers_1gaa0631d921e9f741ba8c1cd3696723ba6" kindref="member">ds18b20_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>bool *const</type>
          <declname>connected</declname>
        </param>
        <briefdescription>
<para>Checks if the DS18B20 is connected to the 1-wire bus. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>DS18B20 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>connected</parametername>
</parameternamelist>
<parameterdescription>
<para>DS18B20 is connected when true. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/owb/esp_ds18b20/include/ds18b20.h" line="164" column="11" bodyfile="components/peripherals/owb/esp_ds18b20/ds18b20.c" bodystart="158" bodyend="180" declfile="components/peripherals/owb/esp_ds18b20/include/ds18b20.h" declline="164" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga873dc167ef31c19d2ed3c8aeb8858b40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ds18b20_init</definition>
        <argsstring>(onewire_device_t *device, const ds18b20_config_t *ds18b20_config, ds18b20_handle_t *ds18b20_handle)</argsstring>
        <name>ds18b20_init</name>
        <param>
          <type><ref refid="structonewire__device__t" kindref="compound">onewire_device_t</ref> *</type>
          <declname>device</declname>
        </param>
        <param>
          <type>const <ref refid="group__drivers_1gaf0a7fbdb7b61aa0636778a6f5e22ce68" kindref="member">ds18b20_config_t</ref> *</type>
          <declname>ds18b20_config</declname>
        </param>
        <param>
          <type><ref refid="group__drivers_1gaa0631d921e9f741ba8c1cd3696723ba6" kindref="member">ds18b20_handle_t</ref> *</type>
          <declname>ds18b20_handle</declname>
        </param>
        <briefdescription>
<para>Initializes an DS18B20 device onto the 1-wire master bus. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Parasitic-powered devices are not supported at this time.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">device</parametername>
</parameternamelist>
<parameterdescription>
<para>1-wire device. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ds18b20_config</parametername>
</parameternamelist>
<parameterdescription>
<para>DS18B20 device configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">ds18b20_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>DS18B20 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/owb/esp_ds18b20/include/ds18b20.h" line="176" column="11" bodyfile="components/peripherals/owb/esp_ds18b20/ds18b20.c" bodystart="182" bodyend="214" declfile="components/peripherals/owb/esp_ds18b20/include/ds18b20.h" declline="176" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga298fa035bc0b56a3f2aa1daef0902b6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ds18b20_get_temperature</definition>
        <argsstring>(ds18b20_handle_t handle, float *const temperature)</argsstring>
        <name>ds18b20_get_temperature</name>
        <param>
          <type><ref refid="group__drivers_1gaa0631d921e9f741ba8c1cd3696723ba6" kindref="member">ds18b20_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>float *const</type>
          <declname>temperature</declname>
        </param>
        <briefdescription>
<para>Triggers temperature conversion and reads temperature from DS18B20. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>DS18B20 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>temperature</parametername>
</parameternamelist>
<parameterdescription>
<para>Temperature in degree Celsius. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/owb/esp_ds18b20/include/ds18b20.h" line="185" column="11" bodyfile="components/peripherals/owb/esp_ds18b20/ds18b20.c" bodystart="216" bodyend="227" declfile="components/peripherals/owb/esp_ds18b20/include/ds18b20.h" declline="185" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gaf171cc3cd419edf22b67bd05e6840bb9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ds18b20_get_measurement</definition>
        <argsstring>(ds18b20_handle_t handle, float *const temperature)</argsstring>
        <name>ds18b20_get_measurement</name>
        <param>
          <type><ref refid="group__drivers_1gaa0631d921e9f741ba8c1cd3696723ba6" kindref="member">ds18b20_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>float *const</type>
          <declname>temperature</declname>
        </param>
        <briefdescription>
<para>Reads temperature from DS18B20. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The trigger temperature conversion function must be called before reading the temperature.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>DS18B20 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>temperature</parametername>
</parameternamelist>
<parameterdescription>
<para>Temperature in degree Celsius. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/owb/esp_ds18b20/include/ds18b20.h" line="196" column="11" bodyfile="components/peripherals/owb/esp_ds18b20/ds18b20.c" bodystart="229" bodyend="269" declfile="components/peripherals/owb/esp_ds18b20/include/ds18b20.h" declline="196" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gafe53683bf83d76974c820feef41ecbe6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ds18b20_trigger_temperature_conversion</definition>
        <argsstring>(ds18b20_handle_t handle)</argsstring>
        <name>ds18b20_trigger_temperature_conversion</name>
        <param>
          <type><ref refid="group__drivers_1gaa0631d921e9f741ba8c1cd3696723ba6" kindref="member">ds18b20_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Triggers DS18B20 temperature conversion. This function must be called before reading the temperature from DS18B20. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>DS18B20 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/owb/esp_ds18b20/include/ds18b20.h" line="204" column="11" bodyfile="components/peripherals/owb/esp_ds18b20/ds18b20.c" bodystart="271" bodyend="288" declfile="components/peripherals/owb/esp_ds18b20/include/ds18b20.h" declline="204" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga7e59840ae488ec9c5d6f48449e3e9491" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ds18b20_get_resolution</definition>
        <argsstring>(ds18b20_handle_t handle, ds18b20_resolutions_t *const resolution)</argsstring>
        <name>ds18b20_get_resolution</name>
        <param>
          <type><ref refid="group__drivers_1gaa0631d921e9f741ba8c1cd3696723ba6" kindref="member">ds18b20_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type><ref refid="group__drivers_1ga622b32418d99b0ae4feaf2e955f7a0f8" kindref="member">ds18b20_resolutions_t</ref> *const</type>
          <declname>resolution</declname>
        </param>
        <briefdescription>
<para>Reads temperature conversion resolution from DS18B20. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>DS18B20 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>resolution</parametername>
</parameternamelist>
<parameterdescription>
<para>DS18B20 temperature conversion resolution setting. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/owb/esp_ds18b20/include/ds18b20.h" line="213" column="11" bodyfile="components/peripherals/owb/esp_ds18b20/ds18b20.c" bodystart="290" bodyend="314" declfile="components/peripherals/owb/esp_ds18b20/include/ds18b20.h" declline="213" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga3c7b35f59d1d0ef09399784a9bf4bb84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ds18b20_set_resolution</definition>
        <argsstring>(ds18b20_handle_t handle, const ds18b20_resolutions_t resolution)</argsstring>
        <name>ds18b20_set_resolution</name>
        <param>
          <type><ref refid="group__drivers_1gaa0631d921e9f741ba8c1cd3696723ba6" kindref="member">ds18b20_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const <ref refid="group__drivers_1ga622b32418d99b0ae4feaf2e955f7a0f8" kindref="member">ds18b20_resolutions_t</ref></type>
          <declname>resolution</declname>
        </param>
        <briefdescription>
<para>Writes temperature conversion resolution to DS18B20. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>DS18B20 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>resolution</parametername>
</parameternamelist>
<parameterdescription>
<para>DS18B20 temperature conversion resolution setting. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/owb/esp_ds18b20/include/ds18b20.h" line="222" column="11" bodyfile="components/peripherals/owb/esp_ds18b20/ds18b20.c" bodystart="316" bodyend="357" declfile="components/peripherals/owb/esp_ds18b20/include/ds18b20.h" declline="222" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gac51c202feb63225d5548a5f3146bdbf9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ds18b20_get_alarm_thresholds</definition>
        <argsstring>(ds18b20_handle_t handle, int8_t *const high, int8_t *const low)</argsstring>
        <name>ds18b20_get_alarm_thresholds</name>
        <param>
          <type><ref refid="group__drivers_1gaa0631d921e9f741ba8c1cd3696723ba6" kindref="member">ds18b20_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>int8_t *const</type>
          <declname>high</declname>
        </param>
        <param>
          <type>int8_t *const</type>
          <declname>low</declname>
        </param>
        <briefdescription>
<para>Reads high and low temperature alarm thresholds from DS18B20. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>DS18B20 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>high</parametername>
</parameternamelist>
<parameterdescription>
<para>DS18B20 high temperature alarm threshold setting (-55 to 125 degrees Celsius). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>low</parametername>
</parameternamelist>
<parameterdescription>
<para>DS18B20 low temperature alarm threshold setting (-55 to 125 degrees Celsius). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/owb/esp_ds18b20/include/ds18b20.h" line="232" column="11" bodyfile="components/peripherals/owb/esp_ds18b20/ds18b20.c" bodystart="359" bodyend="381" declfile="components/peripherals/owb/esp_ds18b20/include/ds18b20.h" declline="232" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gaeb16ae3d4dd775f6907f34d9da383317" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ds18b20_set_alarm_thresholds</definition>
        <argsstring>(ds18b20_handle_t handle, const int8_t high, const int8_t low)</argsstring>
        <name>ds18b20_set_alarm_thresholds</name>
        <param>
          <type><ref refid="group__drivers_1gaa0631d921e9f741ba8c1cd3696723ba6" kindref="member">ds18b20_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const int8_t</type>
          <declname>high</declname>
        </param>
        <param>
          <type>const int8_t</type>
          <declname>low</declname>
        </param>
        <briefdescription>
<para>Writes high and low temperature alarm thresholds to DS18B20. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>DS18B20 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>high</parametername>
</parameternamelist>
<parameterdescription>
<para>DS18B20 high temperature alarm threshold setting (-55 to 125 degrees Celsius). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>low</parametername>
</parameternamelist>
<parameterdescription>
<para>DS18B20 low temperature alarm threshold setting (-55 to 125 degrees Celsius). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/owb/esp_ds18b20/include/ds18b20.h" line="242" column="11" bodyfile="components/peripherals/owb/esp_ds18b20/ds18b20.c" bodystart="383" bodyend="429" declfile="components/peripherals/owb/esp_ds18b20/include/ds18b20.h" declline="242" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gac2527efa7875cafc957ee8af472c4837" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ds18b20_alarm_triggered</definition>
        <argsstring>(ds18b20_handle_t handle, bool *const alarm)</argsstring>
        <name>ds18b20_alarm_triggered</name>
        <param>
          <type><ref refid="group__drivers_1gaa0631d921e9f741ba8c1cd3696723ba6" kindref="member">ds18b20_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>bool *const</type>
          <declname>alarm</declname>
        </param>
        <briefdescription>
<para>Check if the DS18B20 temperature alarm triggered. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>DS18B20 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alarm</parametername>
</parameternamelist>
<parameterdescription>
<para>DS18B20 alarm triggered when true. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/owb/esp_ds18b20/include/ds18b20.h" line="251" column="11" declfile="components/peripherals/owb/esp_ds18b20/include/ds18b20.h" declline="251" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga0e1dd9199e20fdd8883f397c42974375" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ds18b20_get_power_supply_mode</definition>
        <argsstring>(ds18b20_handle_t handle, bool *const parasitic)</argsstring>
        <name>ds18b20_get_power_supply_mode</name>
        <param>
          <type><ref refid="group__drivers_1gaa0631d921e9f741ba8c1cd3696723ba6" kindref="member">ds18b20_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>bool *const</type>
          <declname>parasitic</declname>
        </param>
        <briefdescription>
<para>Reads power supply mode setting from DS18B20. Parasitic-powered devices are powered by the data pin (DQ) and will pull the bus low during read time slot. Parasitic-powered devices are not supported at this time. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>DS18B20 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parasitic</parametername>
</parameternamelist>
<parameterdescription>
<para>DS18B20 power supply mode setting is parasitic when true. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/owb/esp_ds18b20/include/ds18b20.h" line="261" column="11" bodyfile="components/peripherals/owb/esp_ds18b20/ds18b20.c" bodystart="431" bodyend="449" declfile="components/peripherals/owb/esp_ds18b20/include/ds18b20.h" declline="261" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gacbd8f069919bd0e81dfc2d5376bdd35f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t ds18b20_delete</definition>
        <argsstring>(ds18b20_handle_t handle)</argsstring>
        <name>ds18b20_delete</name>
        <param>
          <type><ref refid="group__drivers_1gaa0631d921e9f741ba8c1cd3696723ba6" kindref="member">ds18b20_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Removes an DS18B20 device from master bus and frees handle. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>DS18B20 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/owb/esp_ds18b20/include/ds18b20.h" line="269" column="11" bodyfile="components/peripherals/owb/esp_ds18b20/ds18b20.c" bodystart="451" bodyend="461" declfile="components/peripherals/owb/esp_ds18b20/include/ds18b20.h" declline="269" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gac6f57225a50cf6ae7b7594e3196e6cee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * ds18b20_get_fw_version</definition>
        <argsstring>(void)</argsstring>
        <name>ds18b20_get_fw_version</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Converts DS18B20 firmware version numbers (major, minor, patch) into a string. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>char* DS18B20 firmware version as a string that is formatted as X.X.X (e.g. 4.0.0). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/owb/esp_ds18b20/include/ds18b20.h" line="276" column="12" bodyfile="components/peripherals/owb/esp_ds18b20/ds18b20.c" bodystart="463" bodyend="465" declfile="components/peripherals/owb/esp_ds18b20/include/ds18b20.h" declline="276" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga4de608df5087d6bec0a2472089a04979" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t ds18b20_get_fw_version_number</definition>
        <argsstring>(void)</argsstring>
        <name>ds18b20_get_fw_version_number</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Converts DS18B20 firmware version numbers (major, minor, patch) into an integer value. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>int32_t DS18B20 firmware version number. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/owb/esp_ds18b20/include/ds18b20.h" line="283" column="9" bodyfile="components/peripherals/owb/esp_ds18b20/ds18b20.c" bodystart="467" bodyend="469" declfile="components/peripherals/owb/esp_ds18b20/include/ds18b20.h" declline="283" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga6cf04e954900912884622a1fb1169d07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t spi_max31865_get_configuration_register</definition>
        <argsstring>(spi_max31865_handle_t max31865_handle)</argsstring>
        <name>spi_max31865_get_configuration_register</name>
        <param>
          <type><ref refid="group__drivers_1gab7de7aa3b7f22bb305271068cd193f6f" kindref="member">spi_max31865_handle_t</ref></type>
          <declname>max31865_handle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/spi/esp_max31865/max31865.h" line="174" column="11" declfile="components/peripherals/spi/esp_max31865/max31865.h" declline="174" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga944a3daaf42a2cd1f121ce69d8d867df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t spi_max31865_set_configuration_register</definition>
        <argsstring>(spi_max31865_handle_t max31865_handle, const spi_max31865_configuration_register_t config_reg)</argsstring>
        <name>spi_max31865_set_configuration_register</name>
        <param>
          <type><ref refid="group__drivers_1gab7de7aa3b7f22bb305271068cd193f6f" kindref="member">spi_max31865_handle_t</ref></type>
          <declname>max31865_handle</declname>
        </param>
        <param>
          <type>const spi_max31865_configuration_register_t</type>
          <declname>config_reg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/spi/esp_max31865/max31865.h" line="175" column="11" declfile="components/peripherals/spi/esp_max31865/max31865.h" declline="175" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gae4717b9e5fc1aa65d8caa6129979b4ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t spi_max31865_get_fault_status_register</definition>
        <argsstring>(spi_max31865_handle_t max31865_handle)</argsstring>
        <name>spi_max31865_get_fault_status_register</name>
        <param>
          <type><ref refid="group__drivers_1gab7de7aa3b7f22bb305271068cd193f6f" kindref="member">spi_max31865_handle_t</ref></type>
          <declname>max31865_handle</declname>
        </param>
        <briefdescription>
<para>Read fault status register from MAX31865. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>max31865_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MAX31865 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/spi/esp_max31865/max31865.h" line="184" column="11" declfile="components/peripherals/spi/esp_max31865/max31865.h" declline="184" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga802f250a56d82b7f538421065bfd7c4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t spi_max31865_init</definition>
        <argsstring>(const spi_max31865_config_t *max31865_config, spi_max31865_handle_t *max31865_handle)</argsstring>
        <name>spi_max31865_init</name>
        <param>
          <type>const <ref refid="structspi__max31865__config__t" kindref="compound">spi_max31865_config_t</ref> *</type>
          <declname>max31865_config</declname>
        </param>
        <param>
          <type><ref refid="group__drivers_1gab7de7aa3b7f22bb305271068cd193f6f" kindref="member">spi_max31865_handle_t</ref> *</type>
          <declname>max31865_handle</declname>
        </param>
        <briefdescription>
<para>Initializes an MAX31865 device onto the I2C master bus. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">max31865_config</parametername>
</parameternamelist>
<parameterdescription>
<para>Configuration of MAX31865 device. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">max31865_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MAX31865 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/spi/esp_max31865/max31865.h" line="193" column="11" bodyfile="components/peripherals/spi/esp_max31865/max31865.c" bodystart="110" bodyend="183" declfile="components/peripherals/spi/esp_max31865/max31865.h" declline="193" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga103ed3d7bc0a27d45be4a067426caf6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t spi_max31865_get_measurement</definition>
        <argsstring>(spi_max31865_handle_t max31865_handle, float *const temperature)</argsstring>
        <name>spi_max31865_get_measurement</name>
        <param>
          <type><ref refid="group__drivers_1gab7de7aa3b7f22bb305271068cd193f6f" kindref="member">spi_max31865_handle_t</ref></type>
          <declname>max31865_handle</declname>
        </param>
        <param>
          <type>float *const</type>
          <declname>temperature</declname>
        </param>
        <briefdescription>
<para>Reads temperature from MAX31865. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>max31865_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MAX31865 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>temperature</parametername>
</parameternamelist>
<parameterdescription>
<para>Temperature in degree Celsius. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/spi/esp_max31865/max31865.h" line="202" column="11" declfile="components/peripherals/spi/esp_max31865/max31865.h" declline="202" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gaa4974de2659627b67439a6eb43b0a00b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t spi_max31865_remove</definition>
        <argsstring>(spi_max31865_handle_t max31865_handle)</argsstring>
        <name>spi_max31865_remove</name>
        <param>
          <type><ref refid="group__drivers_1gab7de7aa3b7f22bb305271068cd193f6f" kindref="member">spi_max31865_handle_t</ref></type>
          <declname>max31865_handle</declname>
        </param>
        <briefdescription>
<para>Removes an MAX31865 device from master bus. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">max31865_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MAX31865 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/spi/esp_max31865/max31865.h" line="211" column="11" bodyfile="components/peripherals/spi/esp_max31865/max31865.c" bodystart="185" bodyend="190" declfile="components/peripherals/spi/esp_max31865/max31865.h" declline="211" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gaa99e2cf7b0d8f44c1982ce37d99c0bbd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t spi_max31865_delete</definition>
        <argsstring>(spi_max31865_handle_t max31865_handle)</argsstring>
        <name>spi_max31865_delete</name>
        <param>
          <type><ref refid="group__drivers_1gab7de7aa3b7f22bb305271068cd193f6f" kindref="member">spi_max31865_handle_t</ref></type>
          <declname>max31865_handle</declname>
        </param>
        <briefdescription>
<para>Removes an MAX31865 device from master bus and frees handle. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>max31865_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>MAX31865 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/spi/esp_max31865/max31865.h" line="219" column="11" bodyfile="components/peripherals/spi/esp_max31865/max31865.c" bodystart="192" bodyend="197" declfile="components/peripherals/spi/esp_max31865/max31865.h" declline="219" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gaf228d767bc9c583d19453d2cf62e9f54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t datatable_init</definition>
        <argsstring>(const datatable_config_t *datatable_config, datatable_handle_t *datatable_handle)</argsstring>
        <name>datatable_init</name>
        <param>
          <type>const <ref refid="group__drivers_1ga25f6266267983aec4306306da8a7a603" kindref="member">datatable_config_t</ref> *</type>
          <declname>datatable_config</declname>
        </param>
        <param>
          <type><ref refid="group__drivers_1ga85af77872c8413dc5845585b11a246cc" kindref="member">datatable_handle_t</ref> *</type>
          <declname>datatable_handle</declname>
        </param>
        <briefdescription>
<para>Initializes a data-table handle. A data-table handle instance is required before any other data-table functions can be called. Once the data-table is initialized the following functions are used to configure the data-table columns and within the sampling task. </para>
        </briefdescription>
        <detaileddescription>
<para>Use the <computeroutput>datatable_add_[data-type]_[process-type]_column</computeroutput> functions to define data-table columns <linebreak/>
 by data-type and process-type. The data-table columns are ordered as they are added and column index for the first user-defined column always starts at 2 given the record identifier and timestamp columns <linebreak/>
 are created by default and consume column indexes 0 and 1 respectively.</para>
<para>Use the <computeroutput>datatable_sampling_task_delay</computeroutput> function within the sampling task to sample measurements at the data-table&apos;s configured sampling interval.</para>
<para>Use the <computeroutput>datatable_push_[data-type]_sample</computeroutput> functions within the sampling task to push samples onto the column data buffer stack for processing. These functions should be placed after the <computeroutput>datatable_sampling_task_delay</computeroutput> function.</para>
<para>Use the <computeroutput>datatable_process_samples</computeroutput> function within the sampling task to process column data buffer samples at the data-table&apos;s configured processing interval. This function should be placed after the <computeroutput>datatable_push_[data-type]_sample</computeroutput> functions.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">datatable_config</parametername>
</parameternamelist>
<parameterdescription>
<para>Data-table configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">datatable_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Data-table handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
<para>validate data-table sampling and processing type, period and offset arguments</para>
<para>the sampling rate must be lower than the processing interval. as an example, a 5-sec sampling rate with a 1-min processing interval would trigger processing of the row columns once every minute and would process 12 samples based on the desired processing type (i.e. avg, min, max). if the processing type is configured to smp a sample would be updated every sampling interval and latest value would be recorded during the processing interval.</para>
        </inbodydescription>
        <location file="components/storage/esp_datalogger/include/datatable.h" line="334" column="11" bodyfile="components/storage/esp_datalogger/datatable.c" bodystart="1394" bodyend="1564" declfile="components/storage/esp_datalogger/include/datatable.h" declline="334" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga96036bfb5a146b525b61a7d9e637c8ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t datatable_add_vector_smp_column</definition>
        <argsstring>(datatable_handle_t datatable_handle, const char *name_uc, const char *name_vc, uint8_t *index)</argsstring>
        <name>datatable_add_vector_smp_column</name>
        <param>
          <type><ref refid="group__drivers_1ga85af77872c8413dc5845585b11a246cc" kindref="member">datatable_handle_t</ref></type>
          <declname>datatable_handle</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name_uc</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name_vc</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Appends a vector based data-type column as a sample to the data-table. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">datatable_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Data-table handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">name_uc</parametername>
</parameternamelist>
<parameterdescription>
<para>Textual name of the data-table column to be added for vector u-component. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">name_vc</parametername>
</parameternamelist>
<parameterdescription>
<para>Textual name of the data-table column to be added for vector v-component. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the column that was added to the data-table. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/storage/esp_datalogger/include/datatable.h" line="345" column="11" bodyfile="components/storage/esp_datalogger/datatable.c" bodystart="1673" bodyend="1681" declfile="components/storage/esp_datalogger/include/datatable.h" declline="345" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gab4a2d75f2a1ebece31490a9f26741b3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t datatable_add_vector_avg_column</definition>
        <argsstring>(datatable_handle_t datatable_handle, const char *name_uc, const char *name_vc, uint8_t *index)</argsstring>
        <name>datatable_add_vector_avg_column</name>
        <param>
          <type><ref refid="group__drivers_1ga85af77872c8413dc5845585b11a246cc" kindref="member">datatable_handle_t</ref></type>
          <declname>datatable_handle</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name_uc</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name_vc</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Appends a vector based data-type column as an average to the data-table. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">datatable_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Data-table handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">name_uc</parametername>
</parameternamelist>
<parameterdescription>
<para>Textual name of the data-table column to be added for vector u-component. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">name_vc</parametername>
</parameternamelist>
<parameterdescription>
<para>Textual name of the data-table column to be added for vector v-component. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the column that was added to the data-table. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/storage/esp_datalogger/include/datatable.h" line="356" column="11" bodyfile="components/storage/esp_datalogger/datatable.c" bodystart="1683" bodyend="1691" declfile="components/storage/esp_datalogger/include/datatable.h" declline="356" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gac10a4cdbe02a217a912349a763982edc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t datatable_add_vector_min_column</definition>
        <argsstring>(datatable_handle_t datatable_handle, const char *name_uc, const char *name_vc, uint8_t *index)</argsstring>
        <name>datatable_add_vector_min_column</name>
        <param>
          <type><ref refid="group__drivers_1ga85af77872c8413dc5845585b11a246cc" kindref="member">datatable_handle_t</ref></type>
          <declname>datatable_handle</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name_uc</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name_vc</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Appends a vector based data-type column as a v-component minimum to the data-table. </para>
        </briefdescription>
        <detaileddescription>
<para>The u-component at v-component minimum is sampled and stored.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">datatable_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Data-table handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">name_uc</parametername>
</parameternamelist>
<parameterdescription>
<para>Textual name of the data-table column to be added for vector u-component. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">name_vc</parametername>
</parameternamelist>
<parameterdescription>
<para>Textual name of the data-table column to be added for vector v-component. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the column that was added to the data-table. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/storage/esp_datalogger/include/datatable.h" line="369" column="11" bodyfile="components/storage/esp_datalogger/datatable.c" bodystart="1693" bodyend="1701" declfile="components/storage/esp_datalogger/include/datatable.h" declline="369" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga90322ed568e265370c8f7a53e946c6c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t datatable_add_vector_max_column</definition>
        <argsstring>(datatable_handle_t datatable_handle, const char *name_uc, const char *name_vc, uint8_t *index)</argsstring>
        <name>datatable_add_vector_max_column</name>
        <param>
          <type><ref refid="group__drivers_1ga85af77872c8413dc5845585b11a246cc" kindref="member">datatable_handle_t</ref></type>
          <declname>datatable_handle</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name_uc</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name_vc</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Appends a vector based data-type column as a v-component maximum to the data-table. </para>
        </briefdescription>
        <detaileddescription>
<para>The u-component at v-component maximum is sampled and stored.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">datatable_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Data-table handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">name_uc</parametername>
</parameternamelist>
<parameterdescription>
<para>Textual name of the data-table column to be added for vector u-component. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">name_vc</parametername>
</parameternamelist>
<parameterdescription>
<para>Textual name of the data-table column to be added for vector v-component. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the column that was added to the data-table. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/storage/esp_datalogger/include/datatable.h" line="382" column="11" bodyfile="components/storage/esp_datalogger/datatable.c" bodystart="1703" bodyend="1711" declfile="components/storage/esp_datalogger/include/datatable.h" declline="382" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gac4b19ea19a640bd715faf9c405b40859" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t datatable_add_vector_min_ts_column</definition>
        <argsstring>(datatable_handle_t datatable_handle, const char *name_uc, const char *name_vc, uint8_t *index)</argsstring>
        <name>datatable_add_vector_min_ts_column</name>
        <param>
          <type><ref refid="group__drivers_1ga85af77872c8413dc5845585b11a246cc" kindref="member">datatable_handle_t</ref></type>
          <declname>datatable_handle</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name_uc</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name_vc</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Appends a vector based data-type column as a v-component minimum with timestamp to the data-table. </para>
        </briefdescription>
        <detaileddescription>
<para>The u-component at v-component minimum is sampled and stored.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">datatable_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Data-table handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">name_uc</parametername>
</parameternamelist>
<parameterdescription>
<para>Textual name of the data-table column to be added for vector u-component. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">name_vc</parametername>
</parameternamelist>
<parameterdescription>
<para>Textual name of the data-table column to be added for vector v-component. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the column that was added to the data-table. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/storage/esp_datalogger/include/datatable.h" line="395" column="11" bodyfile="components/storage/esp_datalogger/datatable.c" bodystart="1713" bodyend="1721" declfile="components/storage/esp_datalogger/include/datatable.h" declline="395" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gade3e8daf24aa6e6269da815631e7fd12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t datatable_add_vector_max_ts_column</definition>
        <argsstring>(datatable_handle_t datatable_handle, const char *name_uc, const char *name_vc, uint8_t *index)</argsstring>
        <name>datatable_add_vector_max_ts_column</name>
        <param>
          <type><ref refid="group__drivers_1ga85af77872c8413dc5845585b11a246cc" kindref="member">datatable_handle_t</ref></type>
          <declname>datatable_handle</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name_uc</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name_vc</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Appends a vector based data-type column as a v-component maximum with timestamp to the data-table. </para>
        </briefdescription>
        <detaileddescription>
<para>The u-component at v-component maximum is sampled and stored.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">datatable_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Data-table handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">name_uc</parametername>
</parameternamelist>
<parameterdescription>
<para>Textual name of the data-table column to be added for vector u-component. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">name_vc</parametername>
</parameternamelist>
<parameterdescription>
<para>Textual name of the data-table column to be added for vector v-component. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the column that was added to the data-table. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/storage/esp_datalogger/include/datatable.h" line="408" column="11" bodyfile="components/storage/esp_datalogger/datatable.c" bodystart="1723" bodyend="1731" declfile="components/storage/esp_datalogger/include/datatable.h" declline="408" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga09557ae27d0f6d3fc6202cfd2fabadeb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t datatable_add_bool_smp_column</definition>
        <argsstring>(datatable_handle_t datatable_handle, const char *name, uint8_t *index)</argsstring>
        <name>datatable_add_bool_smp_column</name>
        <param>
          <type><ref refid="group__drivers_1ga85af77872c8413dc5845585b11a246cc" kindref="member">datatable_handle_t</ref></type>
          <declname>datatable_handle</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Appends a bool based data-type column as a sample process-type to the data-table. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">datatable_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Data-table handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>Textual name of the data-table column to be added. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the column that was added to the data-table. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/storage/esp_datalogger/include/datatable.h" line="418" column="11" bodyfile="components/storage/esp_datalogger/datatable.c" bodystart="1815" bodyend="1823" declfile="components/storage/esp_datalogger/include/datatable.h" declline="418" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga7da2fc011a039f5db9777c2c09b29fc8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t datatable_add_float_smp_column</definition>
        <argsstring>(datatable_handle_t datatable_handle, const char *name, uint8_t *index)</argsstring>
        <name>datatable_add_float_smp_column</name>
        <param>
          <type><ref refid="group__drivers_1ga85af77872c8413dc5845585b11a246cc" kindref="member">datatable_handle_t</ref></type>
          <declname>datatable_handle</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Appends a float based data-type column as a sample process-type to the data-table. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">datatable_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Data-table handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>Textual name of the data-table column to be added. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the column that was added to the data-table. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/storage/esp_datalogger/include/datatable.h" line="428" column="11" bodyfile="components/storage/esp_datalogger/datatable.c" bodystart="1933" bodyend="1941" declfile="components/storage/esp_datalogger/include/datatable.h" declline="428" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga56f0b237df545f1070bfb12143f9877a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t datatable_add_float_avg_column</definition>
        <argsstring>(datatable_handle_t datatable_handle, const char *name, uint8_t *index)</argsstring>
        <name>datatable_add_float_avg_column</name>
        <param>
          <type><ref refid="group__drivers_1ga85af77872c8413dc5845585b11a246cc" kindref="member">datatable_handle_t</ref></type>
          <declname>datatable_handle</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Appends a float based data-type column as an average process-type to the data-table. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">datatable_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Data-table handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>Textual name of the data-table column to be added. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the column that was added to the data-table. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/storage/esp_datalogger/include/datatable.h" line="438" column="11" bodyfile="components/storage/esp_datalogger/datatable.c" bodystart="1943" bodyend="1951" declfile="components/storage/esp_datalogger/include/datatable.h" declline="438" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gad8843f31fdde9c9795d9f77ea53442a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t datatable_add_float_min_column</definition>
        <argsstring>(datatable_handle_t datatable_handle, const char *name, uint8_t *index)</argsstring>
        <name>datatable_add_float_min_column</name>
        <param>
          <type><ref refid="group__drivers_1ga85af77872c8413dc5845585b11a246cc" kindref="member">datatable_handle_t</ref></type>
          <declname>datatable_handle</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Appends a float based data-type column as a minimum process-type to the data-table. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">datatable_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Data-table handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>Textual name of the data-table column to be added. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the column that was added to the data-table. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/storage/esp_datalogger/include/datatable.h" line="448" column="11" bodyfile="components/storage/esp_datalogger/datatable.c" bodystart="1953" bodyend="1961" declfile="components/storage/esp_datalogger/include/datatable.h" declline="448" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga4ecd3999ab6aa5d0a1a3f960a6533a06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t datatable_add_float_max_column</definition>
        <argsstring>(datatable_handle_t datatable_handle, const char *name, uint8_t *index)</argsstring>
        <name>datatable_add_float_max_column</name>
        <param>
          <type><ref refid="group__drivers_1ga85af77872c8413dc5845585b11a246cc" kindref="member">datatable_handle_t</ref></type>
          <declname>datatable_handle</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Appends a float based data-type column as a maximum process-type to the data-table. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">datatable_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Data-table handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>Textual name of the data-table column to be added. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the column that was added to the data-table. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/storage/esp_datalogger/include/datatable.h" line="458" column="11" bodyfile="components/storage/esp_datalogger/datatable.c" bodystart="1963" bodyend="1971" declfile="components/storage/esp_datalogger/include/datatable.h" declline="458" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga184886875546ee0dbe0b877e41dd9be3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t datatable_add_float_min_ts_column</definition>
        <argsstring>(datatable_handle_t datatable_handle, const char *name, uint8_t *index)</argsstring>
        <name>datatable_add_float_min_ts_column</name>
        <param>
          <type><ref refid="group__drivers_1ga85af77872c8413dc5845585b11a246cc" kindref="member">datatable_handle_t</ref></type>
          <declname>datatable_handle</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Appends a float based data-type column as a minimum with timestamp process-type to the data-table. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">datatable_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Data-table handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>Textual name of the data-table column to be added. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the column that was added to the data-table. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/storage/esp_datalogger/include/datatable.h" line="468" column="11" bodyfile="components/storage/esp_datalogger/datatable.c" bodystart="1973" bodyend="1981" declfile="components/storage/esp_datalogger/include/datatable.h" declline="468" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga3870b1e456b64288a70a7f3ed08839a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t datatable_add_float_max_ts_column</definition>
        <argsstring>(datatable_handle_t datatable_handle, const char *name, uint8_t *index)</argsstring>
        <name>datatable_add_float_max_ts_column</name>
        <param>
          <type><ref refid="group__drivers_1ga85af77872c8413dc5845585b11a246cc" kindref="member">datatable_handle_t</ref></type>
          <declname>datatable_handle</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Appends a float based data-type column as a maximum with timestamp process-type to the data-table. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">datatable_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Data-table handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>Textual name of the data-table column to be added. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the column that was added to the data-table. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/storage/esp_datalogger/include/datatable.h" line="478" column="11" bodyfile="components/storage/esp_datalogger/datatable.c" bodystart="1983" bodyend="1991" declfile="components/storage/esp_datalogger/include/datatable.h" declline="478" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga2a8aa81c3300a3522c964f943e28935f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t datatable_add_int16_smp_column</definition>
        <argsstring>(datatable_handle_t datatable_handle, const char *name, uint8_t *index)</argsstring>
        <name>datatable_add_int16_smp_column</name>
        <param>
          <type><ref refid="group__drivers_1ga85af77872c8413dc5845585b11a246cc" kindref="member">datatable_handle_t</ref></type>
          <declname>datatable_handle</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Appends a int16 based data-type column as a sample process-type to the data-table. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">datatable_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Data-table handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>Textual name of the data-table column to be added. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the column that was added to the data-table. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/storage/esp_datalogger/include/datatable.h" line="488" column="11" bodyfile="components/storage/esp_datalogger/datatable.c" bodystart="2103" bodyend="2111" declfile="components/storage/esp_datalogger/include/datatable.h" declline="488" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gaa4f45718ed9cd09b63deaae729608071" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t datatable_add_int16_avg_column</definition>
        <argsstring>(datatable_handle_t datatable_handle, const char *name, uint8_t *index)</argsstring>
        <name>datatable_add_int16_avg_column</name>
        <param>
          <type><ref refid="group__drivers_1ga85af77872c8413dc5845585b11a246cc" kindref="member">datatable_handle_t</ref></type>
          <declname>datatable_handle</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Appends a int16 based data-type column as an average process-type to the data-table. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">datatable_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Data-table handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>Textual name of the data-table column to be added. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the column that was added to the data-table. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/storage/esp_datalogger/include/datatable.h" line="498" column="11" bodyfile="components/storage/esp_datalogger/datatable.c" bodystart="2113" bodyend="2121" declfile="components/storage/esp_datalogger/include/datatable.h" declline="498" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gad7aceeba318aa0da3ef1f7b12ef90fa6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t datatable_add_int16_min_column</definition>
        <argsstring>(datatable_handle_t datatable_handle, const char *name, uint8_t *index)</argsstring>
        <name>datatable_add_int16_min_column</name>
        <param>
          <type><ref refid="group__drivers_1ga85af77872c8413dc5845585b11a246cc" kindref="member">datatable_handle_t</ref></type>
          <declname>datatable_handle</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Appends a int16 based data-type column as a minimum process-type to the data-table. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">datatable_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Data-table handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>Textual name of the data-table column to be added. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the column that was added to the data-table. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/storage/esp_datalogger/include/datatable.h" line="508" column="11" bodyfile="components/storage/esp_datalogger/datatable.c" bodystart="2123" bodyend="2131" declfile="components/storage/esp_datalogger/include/datatable.h" declline="508" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gac3346816fdd1ba267a16979a2f6dbde7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t datatable_add_int16_max_column</definition>
        <argsstring>(datatable_handle_t datatable_handle, const char *name, uint8_t *index)</argsstring>
        <name>datatable_add_int16_max_column</name>
        <param>
          <type><ref refid="group__drivers_1ga85af77872c8413dc5845585b11a246cc" kindref="member">datatable_handle_t</ref></type>
          <declname>datatable_handle</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Appends a int16 based data-type column as a maximum process-type to the data-table. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">datatable_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Data-table handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>Textual name of the data-table column to be added. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the column that was added to the data-table. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/storage/esp_datalogger/include/datatable.h" line="518" column="11" bodyfile="components/storage/esp_datalogger/datatable.c" bodystart="2133" bodyend="2141" declfile="components/storage/esp_datalogger/include/datatable.h" declline="518" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga360fe226f59ada63d29088875604715f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t datatable_add_int16_min_ts_column</definition>
        <argsstring>(datatable_handle_t datatable_handle, const char *name, uint8_t *index)</argsstring>
        <name>datatable_add_int16_min_ts_column</name>
        <param>
          <type><ref refid="group__drivers_1ga85af77872c8413dc5845585b11a246cc" kindref="member">datatable_handle_t</ref></type>
          <declname>datatable_handle</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Appends a int16 based data-type column as a minimum with timestamp process-type to the data-table. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">datatable_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Data-table handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>Textual name of the data-table column to be added. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the column that was added to the data-table. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/storage/esp_datalogger/include/datatable.h" line="528" column="11" bodyfile="components/storage/esp_datalogger/datatable.c" bodystart="2143" bodyend="2151" declfile="components/storage/esp_datalogger/include/datatable.h" declline="528" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gaf2d4c966cb901a85458639e90595b293" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t datatable_add_int16_max_ts_column</definition>
        <argsstring>(datatable_handle_t datatable_handle, const char *name, uint8_t *index)</argsstring>
        <name>datatable_add_int16_max_ts_column</name>
        <param>
          <type><ref refid="group__drivers_1ga85af77872c8413dc5845585b11a246cc" kindref="member">datatable_handle_t</ref></type>
          <declname>datatable_handle</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Appends a int16 based data-type column as a maximum with timestamp process-type to the data-table. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">datatable_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Data-table handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>Textual name of the data-table column to be added. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">index</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of the column that was added to the data-table. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/storage/esp_datalogger/include/datatable.h" line="538" column="11" bodyfile="components/storage/esp_datalogger/datatable.c" bodystart="2153" bodyend="2161" declfile="components/storage/esp_datalogger/include/datatable.h" declline="538" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gade35e6525e6de17850a18e8969692860" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t datatable_get_columns_count</definition>
        <argsstring>(datatable_handle_t datatable_handle, uint8_t *count)</argsstring>
        <name>datatable_get_columns_count</name>
        <param>
          <type><ref refid="group__drivers_1ga85af77872c8413dc5845585b11a246cc" kindref="member">datatable_handle_t</ref></type>
          <declname>datatable_handle</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>Gets the number of columns in the data-table. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>datatable_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Data-table handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of columns in the data-table. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/storage/esp_datalogger/include/datatable.h" line="547" column="11" bodyfile="components/storage/esp_datalogger/datatable.c" bodystart="2163" bodyend="2171" declfile="components/storage/esp_datalogger/include/datatable.h" declline="547" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga9aae23bbbe40452b2fdbaccbc9f90dbf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t datatable_get_rows_count</definition>
        <argsstring>(datatable_handle_t datatable_handle, uint8_t *count)</argsstring>
        <name>datatable_get_rows_count</name>
        <param>
          <type><ref refid="group__drivers_1ga85af77872c8413dc5845585b11a246cc" kindref="member">datatable_handle_t</ref></type>
          <declname>datatable_handle</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>Gets the number of rows in the data-table. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>datatable_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Data-table handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of rows in the data-table. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/storage/esp_datalogger/include/datatable.h" line="556" column="11" bodyfile="components/storage/esp_datalogger/datatable.c" bodystart="2173" bodyend="2181" declfile="components/storage/esp_datalogger/include/datatable.h" declline="556" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gac1c9d4f1df62235b3fc0eafd2cd45f39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t datatable_get_column</definition>
        <argsstring>(datatable_handle_t datatable_handle, const uint8_t index, datatable_column_t **column)</argsstring>
        <name>datatable_get_column</name>
        <param>
          <type><ref refid="group__drivers_1ga85af77872c8413dc5845585b11a246cc" kindref="member">datatable_handle_t</ref></type>
          <declname>datatable_handle</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="group__drivers_1ga5d1a7ffc0777ec12780e576d0a3a4e95" kindref="member">datatable_column_t</ref> **</type>
          <declname>column</declname>
        </param>
        <briefdescription>
<para>Gets the column structure from the data-table based on the column index. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>datatable_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Data-table handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Data-table column index to output. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>column</parametername>
</parameternamelist>
<parameterdescription>
<para>Data-table column structure output. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/storage/esp_datalogger/include/datatable.h" line="566" column="11" bodyfile="components/storage/esp_datalogger/datatable.c" bodystart="2183" bodyend="2194" declfile="components/storage/esp_datalogger/include/datatable.h" declline="566" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gad59f6932721bd81ded6fadcc6c87350a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t datatable_get_row</definition>
        <argsstring>(datatable_handle_t datatable_handle, const uint8_t index, datatable_row_t **row)</argsstring>
        <name>datatable_get_row</name>
        <param>
          <type><ref refid="group__drivers_1ga85af77872c8413dc5845585b11a246cc" kindref="member">datatable_handle_t</ref></type>
          <declname>datatable_handle</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type><ref refid="group__drivers_1ga9dff1bcb1f19fd9373a9662c6131d340" kindref="member">datatable_row_t</ref> **</type>
          <declname>row</declname>
        </param>
        <briefdescription>
<para>Gets the row structure from the data-table based on the row index. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>datatable_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Data-table handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Data-table row index to output. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>row</parametername>
</parameternamelist>
<parameterdescription>
<para>Data-table row structure output. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/storage/esp_datalogger/include/datatable.h" line="576" column="11" bodyfile="components/storage/esp_datalogger/datatable.c" bodystart="2196" bodyend="2207" declfile="components/storage/esp_datalogger/include/datatable.h" declline="576" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga00f230857143166e558bb74103d3c246" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t datatable_push_vector_sample</definition>
        <argsstring>(datatable_handle_t datatable_handle, const uint8_t index, const float uc_value, const float vc_value)</argsstring>
        <name>datatable_push_vector_sample</name>
        <param>
          <type><ref refid="group__drivers_1ga85af77872c8413dc5845585b11a246cc" kindref="member">datatable_handle_t</ref></type>
          <declname>datatable_handle</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>uc_value</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>vc_value</declname>
        </param>
        <briefdescription>
<para>Pushes a vector data-type sample onto the column sample data buffer stack for processing. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>datatable_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Data-table handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Sample data-table column index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>uc_value</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector data-type u-component sample to process. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vc_value</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector data-type v-component sample to process. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/storage/esp_datalogger/include/datatable.h" line="587" column="11" bodyfile="components/storage/esp_datalogger/datatable.c" bodystart="2209" bodyend="2255" declfile="components/storage/esp_datalogger/include/datatable.h" declline="587" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gab83c7cb803b897d507b6a40fb0e29c92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t datatable_push_bool_sample</definition>
        <argsstring>(datatable_handle_t datatable_handle, const uint8_t index, const bool value)</argsstring>
        <name>datatable_push_bool_sample</name>
        <param>
          <type><ref refid="group__drivers_1ga85af77872c8413dc5845585b11a246cc" kindref="member">datatable_handle_t</ref></type>
          <declname>datatable_handle</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Pushes a boolean data-type sample onto the column sample data buffer stack for processing. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>datatable_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Data-table handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Sample data-table column index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Boolean data-type sample to process. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/storage/esp_datalogger/include/datatable.h" line="597" column="11" bodyfile="components/storage/esp_datalogger/datatable.c" bodystart="2257" bodyend="2288" declfile="components/storage/esp_datalogger/include/datatable.h" declline="597" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga8766983d0abc8827db4de6c427cac380" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t datatable_push_float_sample</definition>
        <argsstring>(datatable_handle_t datatable_handle, const uint8_t index, const float value)</argsstring>
        <name>datatable_push_float_sample</name>
        <param>
          <type><ref refid="group__drivers_1ga85af77872c8413dc5845585b11a246cc" kindref="member">datatable_handle_t</ref></type>
          <declname>datatable_handle</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Pushes a float data-type sample onto the column sample data buffer stack for processing. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>datatable_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Data-table handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Sample data-table column index.. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Float data-type sample to process. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/storage/esp_datalogger/include/datatable.h" line="607" column="11" bodyfile="components/storage/esp_datalogger/datatable.c" bodystart="2290" bodyend="2335" declfile="components/storage/esp_datalogger/include/datatable.h" declline="607" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga257d771d4952cb18bbd0c8dc9ba4f55d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t datatable_push_int16_sample</definition>
        <argsstring>(datatable_handle_t datatable_handle, const uint8_t index, const int16_t value)</argsstring>
        <name>datatable_push_int16_sample</name>
        <param>
          <type><ref refid="group__drivers_1ga85af77872c8413dc5845585b11a246cc" kindref="member">datatable_handle_t</ref></type>
          <declname>datatable_handle</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>const int16_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Pushes an int16 data-type sample onto the column sample data buffer stack for processing. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>datatable_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Data-table handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>Sample data-table column index. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Int16 data-type sample to process. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/storage/esp_datalogger/include/datatable.h" line="617" column="11" bodyfile="components/storage/esp_datalogger/datatable.c" bodystart="2337" bodyend="2382" declfile="components/storage/esp_datalogger/include/datatable.h" declline="617" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gaf7216471d840ddce49979addde5497dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t datatable_sampling_task_delay</definition>
        <argsstring>(datatable_handle_t datatable_handle)</argsstring>
        <name>datatable_sampling_task_delay</name>
        <param>
          <type><ref refid="group__drivers_1ga85af77872c8413dc5845585b11a246cc" kindref="member">datatable_handle_t</ref></type>
          <declname>datatable_handle</declname>
        </param>
        <briefdescription>
<para>Delays the data-table&apos;s sampling task until the next scheduled task event. <linebreak/>
 This function should be placed after the <computeroutput>for (;;) {</computeroutput> syntax to delay the task based on the configured time-into-interval handle interval type, period, and offset parameters. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>datatable_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Data-table handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/storage/esp_datalogger/include/datatable.h" line="627" column="11" bodyfile="components/storage/esp_datalogger/datatable.c" bodystart="2384" bodyend="2392" declfile="components/storage/esp_datalogger/include/datatable.h" declline="627" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga7dbd90ddf9ee3cc22e0cccd995744c55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t datatable_process_samples</definition>
        <argsstring>(datatable_handle_t datatable_handle)</argsstring>
        <name>datatable_process_samples</name>
        <param>
          <type><ref refid="group__drivers_1ga85af77872c8413dc5845585b11a246cc" kindref="member">datatable_handle_t</ref></type>
          <declname>datatable_handle</declname>
        </param>
        <briefdescription>
<para>Processes data-table samples on the data buffer stack in each column based on the data-table&apos;s <linebreak/>
 configured processing interval. When the samples are processed, the data buffer stack is cleared for each column. This function must be called after data-table samples are pushed in the sampling task. </para>
        </briefdescription>
        <detaileddescription>
<para>If the sampling period exceeds the data-table&apos;s configured sampling interval, a skipped task event is recorded, and data-table may not process samples as expected.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>datatable_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Data-table handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/storage/esp_datalogger/include/datatable.h" line="640" column="11" bodyfile="components/storage/esp_datalogger/datatable.c" bodystart="2394" bodyend="2526" declfile="components/storage/esp_datalogger/include/datatable.h" declline="640" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gadefa4004e4db89244dab4be9c40d27bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t datatable_delete</definition>
        <argsstring>(datatable_handle_t datatable_handle)</argsstring>
        <name>datatable_delete</name>
        <param>
          <type><ref refid="group__drivers_1ga85af77872c8413dc5845585b11a246cc" kindref="member">datatable_handle_t</ref></type>
          <declname>datatable_handle</declname>
        </param>
        <briefdescription>
<para>Deletes the data-table handle to frees up resources. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>datatable_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Data-table handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/storage/esp_datalogger/include/datatable.h" line="648" column="11" bodyfile="components/storage/esp_datalogger/datatable.c" bodystart="2528" bodyend="2536" declfile="components/storage/esp_datalogger/include/datatable.h" declline="648" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga73545915b25d01821b94cf0a1a93a171" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t datatable_to_json</definition>
        <argsstring>(datatable_handle_t datatable_handle, cJSON **datatable)</argsstring>
        <name>datatable_to_json</name>
        <param>
          <type><ref refid="group__drivers_1ga85af77872c8413dc5845585b11a246cc" kindref="member">datatable_handle_t</ref></type>
          <declname>datatable_handle</declname>
        </param>
        <param>
          <type>cJSON **</type>
          <declname>datatable</declname>
        </param>
        <briefdescription>
<para>Converts a data-table to a <computeroutput>cJSON</computeroutput> object. </para>
        </briefdescription>
        <detaileddescription>
<para><computeroutput>cJSON</computeroutput> data-table object output example;</para>
<para>{ &quot;name&quot;: &quot;1min_tbl&quot;, &quot;process-interval&quot;: &quot;minute&quot;, &quot;process-period&quot;: 1, &quot;columns&quot;: [&quot;Record ID&quot;, &quot;TS&quot;, &quot;Pa_1-Min_Avg&quot;, &quot;Ta_1-Min_Avg&quot;, &quot;Ta_1-Min_Min&quot;, &quot;Ta_1-Min_Max&quot;, &quot;Hr_1-Min_Avg&quot;, &quot;Td_1-Min_Avg&quot;, &quot;Wd_1-Min_Avg&quot;, &quot;Ws_1-Min_Avg&quot;], &quot;types&quot;: [&quot;id&quot;, &quot;ts&quot;, &quot;float&quot;, &quot;float&quot;, &quot;float&quot;, &quot;float&quot;, &quot;int16&quot;, &quot;float&quot;, &quot;float&quot;, &quot;float&quot;], &quot;processes&quot;: [&quot;sample&quot;, &quot;sample&quot;, &quot;average&quot;, &quot;average&quot;, &quot;minimum&quot;, &quot;maximum&quot;, &quot;average&quot;, &quot;average&quot;, &quot;average&quot;, &quot;average&quot;], &quot;rows&quot;: [ [1, 61684380120, 1001.3500366210938, 22.350000381469727, 22.340000152587891, 22.360000610351562, 51, 20.350000381469727, 210, 1.4500000476837158], [2, 61684380180, 1001.3533325195312, 22.35333251953125, 22.340000152587891, 22.360000610351562, 53, 20.353334426879883, 210, 1.4500000476837158], [3, 61684380240, 1001.3583374023438, 22.358335494995117, 22.350000381469727, 22.3700008392334, 55, 20.358333587646484, 210, 1.4500000476837158], [4, 61684380300, 1001.3417358398438, 22.341667175292969, 22.329999923706055, 22.350000381469727, 57, 20.341667175292969, 210, 1.4500000476837158]] }</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">datatable_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Data-table handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">datatable</parametername>
</parameternamelist>
<parameterdescription>
<para>Data-table as a <computeroutput>cJSON</computeroutput> object. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/storage/esp_datalogger/include/datatable.h" line="673" column="11" bodyfile="components/storage/esp_datalogger/datatable.c" bodystart="2778" bodyend="2949" declfile="components/storage/esp_datalogger/include/datatable.h" declline="673" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gab03b911dd4296933c03792401419e762" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t nvs_init</definition>
        <argsstring>(void)</argsstring>
        <name>nvs_init</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Initialization NVS storage. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/storage/esp_nvs_ext/include/nvs_ext.h" line="56" column="11" bodyfile="components/storage/esp_nvs_ext/nvs_ext.c" bodystart="53" bodyend="62" declfile="components/storage/esp_nvs_ext/include/nvs_ext.h" declline="56" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga82772da96b531f8176b7b1bc8a449875" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t nvs_write_float</definition>
        <argsstring>(const char *key, float write_value)</argsstring>
        <name>nvs_write_float</name>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>float</type>
          <declname>write_value</declname>
        </param>
        <briefdescription>
<para>Writes float typed value to NVS. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>Storage key. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>write_value</parametername>
</parameternamelist>
<parameterdescription>
<para>Write value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/storage/esp_nvs_ext/include/nvs_ext.h" line="64" column="11" bodyfile="components/storage/esp_nvs_ext/nvs_ext.c" bodystart="64" bodyend="88" declfile="components/storage/esp_nvs_ext/include/nvs_ext.h" declline="64" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gadcb1c6c0a73290694e13f27261184a7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t nvs_read_float</definition>
        <argsstring>(const char *key, float *read_value)</argsstring>
        <name>nvs_read_float</name>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>read_value</declname>
        </param>
        <briefdescription>
<para>Reads float typed value from NVS. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>Storage key. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>read_value</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the read value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/storage/esp_nvs_ext/include/nvs_ext.h" line="72" column="11" bodyfile="components/storage/esp_nvs_ext/nvs_ext.c" bodystart="90" bodyend="126" declfile="components/storage/esp_nvs_ext/include/nvs_ext.h" declline="72" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga71fcd0d53dfedb0e90857054a66b8464" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t nvs_write_double</definition>
        <argsstring>(const char *key, double write_value)</argsstring>
        <name>nvs_write_double</name>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>double</type>
          <declname>write_value</declname>
        </param>
        <briefdescription>
<para>Writes double typed value to NVS. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>Storage key. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>write_value</parametername>
</parameternamelist>
<parameterdescription>
<para>Write value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/storage/esp_nvs_ext/include/nvs_ext.h" line="80" column="11" bodyfile="components/storage/esp_nvs_ext/nvs_ext.c" bodystart="128" bodyend="152" declfile="components/storage/esp_nvs_ext/include/nvs_ext.h" declline="80" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga1c60767d29bf95146960f8bf84af3bdd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t nvs_read_double</definition>
        <argsstring>(const char *key, double *read_value)</argsstring>
        <name>nvs_read_double</name>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>read_value</declname>
        </param>
        <briefdescription>
<para>Reads double typed value from NVS. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>Storage key. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>read_value</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the read value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/storage/esp_nvs_ext/include/nvs_ext.h" line="88" column="11" bodyfile="components/storage/esp_nvs_ext/nvs_ext.c" bodystart="154" bodyend="190" declfile="components/storage/esp_nvs_ext/include/nvs_ext.h" declline="88" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga8e9ad9fbc3bd988fa6533d496f2c2d40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t nvs_write_u8</definition>
        <argsstring>(const char *key, uint8_t write_value)</argsstring>
        <name>nvs_write_u8</name>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>write_value</declname>
        </param>
        <briefdescription>
<para>Writes uint8_t typed value to NVS. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>Storage key. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>write_value</parametername>
</parameternamelist>
<parameterdescription>
<para>Write value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/storage/esp_nvs_ext/include/nvs_ext.h" line="96" column="11" bodyfile="components/storage/esp_nvs_ext/nvs_ext.c" bodystart="245" bodyend="257" declfile="components/storage/esp_nvs_ext/include/nvs_ext.h" declline="96" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga6a8d897d48a5222f81e00b7b4b9460c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t nvs_read_u8</definition>
        <argsstring>(const char *key, uint8_t *read_value)</argsstring>
        <name>nvs_read_u8</name>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>read_value</declname>
        </param>
        <briefdescription>
<para>Reads uint8_t typed value from NVS. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>Storage key. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>read_value</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the read value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/storage/esp_nvs_ext/include/nvs_ext.h" line="104" column="11" bodyfile="components/storage/esp_nvs_ext/nvs_ext.c" bodystart="259" bodyend="276" declfile="components/storage/esp_nvs_ext/include/nvs_ext.h" declline="104" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga0abcc12b87ee19e520d31f335197a573" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t nvs_write_u16</definition>
        <argsstring>(const char *key, uint16_t write_value)</argsstring>
        <name>nvs_write_u16</name>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>write_value</declname>
        </param>
        <briefdescription>
<para>Writes uint16_t typed value to NVS. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>Storage key. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>write_value</parametername>
</parameternamelist>
<parameterdescription>
<para>Write value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/storage/esp_nvs_ext/include/nvs_ext.h" line="112" column="11" bodyfile="components/storage/esp_nvs_ext/nvs_ext.c" bodystart="278" bodyend="290" declfile="components/storage/esp_nvs_ext/include/nvs_ext.h" declline="112" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga11d903ba531ebeaf020ceea665251bd6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t nvs_read_u16</definition>
        <argsstring>(const char *key, uint16_t *read_value)</argsstring>
        <name>nvs_read_u16</name>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>uint16_t *</type>
          <declname>read_value</declname>
        </param>
        <briefdescription>
<para>Reads uint16_t typed value from NVS. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>Storage key. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>read_value</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the read value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/storage/esp_nvs_ext/include/nvs_ext.h" line="120" column="11" bodyfile="components/storage/esp_nvs_ext/nvs_ext.c" bodystart="292" bodyend="309" declfile="components/storage/esp_nvs_ext/include/nvs_ext.h" declline="120" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga4cda4ead5b04893807fe206c895b2bdc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t nvs_write_u32</definition>
        <argsstring>(const char *key, uint32_t write_value)</argsstring>
        <name>nvs_write_u32</name>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>write_value</declname>
        </param>
        <briefdescription>
<para>Writes uint32_t typed value to NVS. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>Storage key. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>write_value</parametername>
</parameternamelist>
<parameterdescription>
<para>Write value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/storage/esp_nvs_ext/include/nvs_ext.h" line="128" column="11" bodyfile="components/storage/esp_nvs_ext/nvs_ext.c" bodystart="311" bodyend="323" declfile="components/storage/esp_nvs_ext/include/nvs_ext.h" declline="128" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga3b36c1fc6e723fc8850858aa83b03d99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t nvs_read_u32</definition>
        <argsstring>(const char *key, uint32_t *read_value)</argsstring>
        <name>nvs_read_u32</name>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>read_value</declname>
        </param>
        <briefdescription>
<para>Reads uint32_t typed value from NVS. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>Storage key. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>read_value</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the read value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/storage/esp_nvs_ext/include/nvs_ext.h" line="136" column="11" bodyfile="components/storage/esp_nvs_ext/nvs_ext.c" bodystart="325" bodyend="342" declfile="components/storage/esp_nvs_ext/include/nvs_ext.h" declline="136" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gaa8f6f8963c4852217a3aa22d7b9bdeb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t nvs_write_u64</definition>
        <argsstring>(const char *key, uint64_t write_value)</argsstring>
        <name>nvs_write_u64</name>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>write_value</declname>
        </param>
        <briefdescription>
<para>Writes uint64_t typed value to NVS. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>Storage key. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>write_value</parametername>
</parameternamelist>
<parameterdescription>
<para>Write value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/storage/esp_nvs_ext/include/nvs_ext.h" line="144" column="11" bodyfile="components/storage/esp_nvs_ext/nvs_ext.c" bodystart="344" bodyend="356" declfile="components/storage/esp_nvs_ext/include/nvs_ext.h" declline="144" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gae2c2d66686f3c99e372832a3884ce966" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t nvs_read_u64</definition>
        <argsstring>(const char *key, uint64_t *read_value)</argsstring>
        <name>nvs_read_u64</name>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>uint64_t *</type>
          <declname>read_value</declname>
        </param>
        <briefdescription>
<para>Reads uint64_t typed value from NVS. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>Storage key. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>read_value</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the read value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/storage/esp_nvs_ext/include/nvs_ext.h" line="152" column="11" bodyfile="components/storage/esp_nvs_ext/nvs_ext.c" bodystart="358" bodyend="375" declfile="components/storage/esp_nvs_ext/include/nvs_ext.h" declline="152" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga2fb432f8a6d441c81cd52c1268d0846c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t nvs_write_i8</definition>
        <argsstring>(const char *key, int8_t write_value)</argsstring>
        <name>nvs_write_i8</name>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>int8_t</type>
          <declname>write_value</declname>
        </param>
        <briefdescription>
<para>Writes int8_t typed value to NVS. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>Storage key. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>write_value</parametername>
</parameternamelist>
<parameterdescription>
<para>Write value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/storage/esp_nvs_ext/include/nvs_ext.h" line="160" column="11" bodyfile="components/storage/esp_nvs_ext/nvs_ext.c" bodystart="377" bodyend="389" declfile="components/storage/esp_nvs_ext/include/nvs_ext.h" declline="160" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga7a5722df54776a66416efe1e0418245a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t nvs_read_i8</definition>
        <argsstring>(const char *key, int8_t *read_value)</argsstring>
        <name>nvs_read_i8</name>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>int8_t *</type>
          <declname>read_value</declname>
        </param>
        <briefdescription>
<para>Reads int8_t typed value from NVS. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>Storage key. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>read_value</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the read value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/storage/esp_nvs_ext/include/nvs_ext.h" line="168" column="11" bodyfile="components/storage/esp_nvs_ext/nvs_ext.c" bodystart="391" bodyend="408" declfile="components/storage/esp_nvs_ext/include/nvs_ext.h" declline="168" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga97aa81fc1efb97856d849e89041b33a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t nvs_write_i16</definition>
        <argsstring>(const char *key, int16_t write_value)</argsstring>
        <name>nvs_write_i16</name>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>int16_t</type>
          <declname>write_value</declname>
        </param>
        <briefdescription>
<para>Writes int16_t typed value to NVS. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>Storage key. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>write_value</parametername>
</parameternamelist>
<parameterdescription>
<para>Write value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/storage/esp_nvs_ext/include/nvs_ext.h" line="176" column="11" bodyfile="components/storage/esp_nvs_ext/nvs_ext.c" bodystart="410" bodyend="422" declfile="components/storage/esp_nvs_ext/include/nvs_ext.h" declline="176" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga375b6d523b44d9a474b3b7c023676a6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t nvs_read_i16</definition>
        <argsstring>(const char *key, int16_t *read_value)</argsstring>
        <name>nvs_read_i16</name>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>int16_t *</type>
          <declname>read_value</declname>
        </param>
        <briefdescription>
<para>Reads int16_t typed value from NVS. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>Storage key. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>read_value</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the read value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/storage/esp_nvs_ext/include/nvs_ext.h" line="184" column="11" bodyfile="components/storage/esp_nvs_ext/nvs_ext.c" bodystart="424" bodyend="441" declfile="components/storage/esp_nvs_ext/include/nvs_ext.h" declline="184" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga3d465caedf49cd9e462d03f00f08b176" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t nvs_write_i32</definition>
        <argsstring>(const char *key, int32_t write_value)</argsstring>
        <name>nvs_write_i32</name>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>write_value</declname>
        </param>
        <briefdescription>
<para>Writes int32_t typed value to NVS. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>Storage key. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>write_value</parametername>
</parameternamelist>
<parameterdescription>
<para>Write value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/storage/esp_nvs_ext/include/nvs_ext.h" line="192" column="11" bodyfile="components/storage/esp_nvs_ext/nvs_ext.c" bodystart="443" bodyend="455" declfile="components/storage/esp_nvs_ext/include/nvs_ext.h" declline="192" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga512ca77809ddca8df05c31bee3db988e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t nvs_read_i32</definition>
        <argsstring>(const char *key, int32_t *read_value)</argsstring>
        <name>nvs_read_i32</name>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>read_value</declname>
        </param>
        <briefdescription>
<para>Reads int32_t typed value from NVS. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>Storage key. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>read_value</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the read value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/storage/esp_nvs_ext/include/nvs_ext.h" line="200" column="11" bodyfile="components/storage/esp_nvs_ext/nvs_ext.c" bodystart="457" bodyend="474" declfile="components/storage/esp_nvs_ext/include/nvs_ext.h" declline="200" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga58437fef1c73c0c5edff0a8e1ce398d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t nvs_write_i64</definition>
        <argsstring>(const char *key, int64_t write_value)</argsstring>
        <name>nvs_write_i64</name>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>write_value</declname>
        </param>
        <briefdescription>
<para>Writes int64_t typed value to NVS. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>Storage key. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>write_value</parametername>
</parameternamelist>
<parameterdescription>
<para>Write value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/storage/esp_nvs_ext/include/nvs_ext.h" line="208" column="11" bodyfile="components/storage/esp_nvs_ext/nvs_ext.c" bodystart="476" bodyend="488" declfile="components/storage/esp_nvs_ext/include/nvs_ext.h" declline="208" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga4a80091b21237d39b2cfa0b81baded58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t nvs_read_i64</definition>
        <argsstring>(const char *key, int64_t *read_value)</argsstring>
        <name>nvs_read_i64</name>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>read_value</declname>
        </param>
        <briefdescription>
<para>Reads int64_t typed value from NVS. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>Storage key. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>read_value</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the read value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/storage/esp_nvs_ext/include/nvs_ext.h" line="216" column="11" bodyfile="components/storage/esp_nvs_ext/nvs_ext.c" bodystart="490" bodyend="507" declfile="components/storage/esp_nvs_ext/include/nvs_ext.h" declline="216" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga1734bc2ed83dd10de161cd883ac4c57d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t nvs_write_str</definition>
        <argsstring>(const char *key, const char *write_str)</argsstring>
        <name>nvs_write_str</name>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>write_str</declname>
        </param>
        <briefdescription>
<para>Writes string typed value to NVS. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>Storage key. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>write_str</parametername>
</parameternamelist>
<parameterdescription>
<para>Write value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/storage/esp_nvs_ext/include/nvs_ext.h" line="224" column="11" bodyfile="components/storage/esp_nvs_ext/nvs_ext.c" bodystart="192" bodyend="205" declfile="components/storage/esp_nvs_ext/include/nvs_ext.h" declline="224" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gaa90dd351186e036919fafcc09e3c7700" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t nvs_read_str</definition>
        <argsstring>(const char *key, char **read_str)</argsstring>
        <name>nvs_read_str</name>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>read_str</declname>
        </param>
        <briefdescription>
<para>Reads string typed value from NVS. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>Storage key. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the read value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/storage/esp_nvs_ext/include/nvs_ext.h" line="232" column="11" bodyfile="components/storage/esp_nvs_ext/nvs_ext.c" bodystart="207" bodyend="243" declfile="components/storage/esp_nvs_ext/include/nvs_ext.h" declline="232" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga3234840e000e4fc89baf6e3c9b49b071" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t nvs_write_struct</definition>
        <argsstring>(const char *key, void *write_struct, size_t size)</argsstring>
        <name>nvs_write_struct</name>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>write_struct</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Writes struct typed value to NVS. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>Storage key. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>write_struct</parametername>
</parameternamelist>
<parameterdescription>
<para>Write struct. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of struct. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/storage/esp_nvs_ext/include/nvs_ext.h" line="241" column="11" bodyfile="components/storage/esp_nvs_ext/nvs_ext.c" bodystart="509" bodyend="521" declfile="components/storage/esp_nvs_ext/include/nvs_ext.h" declline="241" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gae2d3381d7c7f182a4d08b3649fd88414" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t nvs_read_struct</definition>
        <argsstring>(const char *key, void **read_struct, size_t size)</argsstring>
        <name>nvs_read_struct</name>
        <param>
          <type>const char *</type>
          <declname>key</declname>
        </param>
        <param>
          <type>void **</type>
          <declname>read_struct</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Reads struct type value from NVS. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>Storage key. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>read_struct</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the struct value. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of struct. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/storage/esp_nvs_ext/include/nvs_ext.h" line="250" column="11" bodyfile="components/storage/esp_nvs_ext/nvs_ext.c" bodystart="523" bodyend="540" declfile="components/storage/esp_nvs_ext/include/nvs_ext.h" declline="250" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1ga5b1434c8e4125cb67c9a5268dbb38284" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * nvs_ext_get_fw_version</definition>
        <argsstring>(void)</argsstring>
        <name>nvs_ext_get_fw_version</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Converts <computeroutput>nvs_ext</computeroutput> firmware version numbers (major, minor, patch) into a string. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>char* <computeroutput>nvs_ext</computeroutput> firmware version as a string that is formatted as X.X.X (e.g. 4.0.0). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/storage/esp_nvs_ext/include/nvs_ext.h" line="257" column="12" bodyfile="components/storage/esp_nvs_ext/nvs_ext.c" bodystart="542" bodyend="544" declfile="components/storage/esp_nvs_ext/include/nvs_ext.h" declline="257" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__drivers_1gaad7fdf17465f150ca3c1e17979eff912" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t nvs_ext_get_fw_version_number</definition>
        <argsstring>(void)</argsstring>
        <name>nvs_ext_get_fw_version_number</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Converts <computeroutput>nvs_ext</computeroutput> firmware version numbers (major, minor, patch) into an integer value. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>int32_t <computeroutput>nvs_ext</computeroutput> firmware version number. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/storage/esp_nvs_ext/include/nvs_ext.h" line="264" column="9" bodyfile="components/storage/esp_nvs_ext/nvs_ext.c" bodystart="546" bodyend="548" declfile="components/storage/esp_nvs_ext/include/nvs_ext.h" declline="264" declcolumn="9"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="define">
      <memberdef kind="define" id="group__drivers_1ga64dd58508254149cc12f5bdf09036df9" prot="public" static="no">
        <name>ADC_S12SD_UNIT_DEFAULT</name>
        <initializer>ADC_UNIT_1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>dependency includes public constant definitions </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/adc/esp_s12sd/include/s12sd.h" line="59" column="9" bodyfile="components/peripherals/adc/esp_s12sd/include/s12sd.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1gae6bddfc5791d982035009ead0731212a" prot="public" static="no">
        <name>ADC_S12SD_CHANNEL_DEFAULT</name>
        <initializer>ADC_CHANNEL_0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/adc/esp_s12sd/include/s12sd.h" line="60" column="9" bodyfile="components/peripherals/adc/esp_s12sd/include/s12sd.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga9510fe58bde0c037dd6010a3a286a3e0" prot="public" static="no">
        <name>ADC_S12SD_SAMPLE_SIZE</name>
        <initializer>(1000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/adc/esp_s12sd/include/s12sd.h" line="61" column="9" bodyfile="components/peripherals/adc/esp_s12sd/include/s12sd.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1gab7aa6c6e70725b41683f17f14c0dee5a" prot="public" static="no">
        <name>ADC_S12SD_ATTEN</name>
        <initializer>ADC_ATTEN_DB_12</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/adc/esp_s12sd/include/s12sd.h" line="62" column="9" bodyfile="components/peripherals/adc/esp_s12sd/include/s12sd.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga1bcf8e85722aac11e4c36c84fdcbaf3a" prot="public" static="no">
        <name>ADC_S12SD_DIGI_BIT_WIDTH</name>
        <initializer>(12)</initializer>
        <briefdescription>
<para>adc bit width at 12-bits </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/adc/esp_s12sd/include/s12sd.h" line="63" column="9" bodyfile="components/peripherals/adc/esp_s12sd/include/s12sd.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga05b876c41163580b9d40fe050df88db3" prot="public" static="no">
        <name>ADC_S12SD_CONFIG_DEFAULT</name>
        <initializer>    {                  \
    .adc_unit    = <ref refid="group__drivers_1ga64dd58508254149cc12f5bdf09036df9" kindref="member">ADC_S12SD_UNIT_DEFAULT</ref>,          \
    .adc_channel = ADC_S12SD_CHANNEL_DEFAULT,  }</initializer>
        <briefdescription>
<para>Macro that initializes <computeroutput>adc_s12sd_config_t</computeroutput> to default configuration settings. </para>
        </briefdescription>
        <detaileddescription>
<para>public macro definitions </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/adc/esp_s12sd/include/s12sd.h" line="72" column="9" bodyfile="components/peripherals/adc/esp_s12sd/include/s12sd.h" bodystart="72" bodyend="74"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1gaeb1d1e5ae1a1ee405edcf1f447a8ed5e" prot="public" static="no">
        <name>I2C_AHTXX_DEV_CLK_SPD</name>
        <initializer>UINT32_C(100000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>dependency includes public constant definitions ahtxx i2c device scl clock frequency (100KHz) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ahtxx/include/ahtxx.h" line="57" column="9" bodyfile="components/peripherals/i2c/esp_ahtxx/include/ahtxx.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga57ee2aaac97db3bcab231deccc6e3399" prot="public" static="no">
        <name>I2C_AHTXX_DEV_ADDR</name>
        <initializer>UINT8_C(0x38)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>ahtxx i2c device address </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ahtxx/include/ahtxx.h" line="58" column="9" bodyfile="components/peripherals/i2c/esp_ahtxx/include/ahtxx.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga90c8e7d8c3b6158111d7b35d1a8fec50" prot="public" static="no">
        <name>I2C_XFR_TIMEOUT_MS</name>
        <initializer>(500)</initializer>
        <briefdescription>
<para>I2C transaction timeout in milliseconds. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ahtxx/include/ahtxx.h" line="60" column="9" bodyfile="components/peripherals/i2c/esp_ahtxx/include/ahtxx.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga7b83e45fecacb1c890f5ed26765e8da3" prot="public" static="no">
        <name>I2C_AHT30_CONFIG_DEFAULT</name>
        <initializer>    {                  \
    .i2c_address     = <ref refid="group__drivers_1ga57ee2aaac97db3bcab231deccc6e3399" kindref="member">I2C_AHTXX_DEV_ADDR</ref>,          \
    .i2c_clock_speed = <ref refid="group__drivers_1gaeb1d1e5ae1a1ee405edcf1f447a8ed5e" kindref="member">I2C_AHTXX_DEV_CLK_SPD</ref>,       \
    .sensor_type     = AHTXX_AHT30 }</initializer>
        <briefdescription>
<para>Macro that initializes <computeroutput><ref refid="group__drivers_1ga4481478f7508935e24b98cf5027da6dd" kindref="member">ahtxx_config_t</ref></computeroutput> to default configuration settings for the aht30 sensor type. </para>
        </briefdescription>
        <detaileddescription>
<para>public macro definitions </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ahtxx/include/ahtxx.h" line="69" column="9" bodyfile="components/peripherals/i2c/esp_ahtxx/include/ahtxx.h" bodystart="69" bodyend="72"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1gae4134028a75c7a35c3788b8700185676" prot="public" static="no">
        <name>I2C_AHT25_CONFIG_DEFAULT</name>
        <initializer>    {                  \
    .i2c_address     = <ref refid="group__drivers_1ga57ee2aaac97db3bcab231deccc6e3399" kindref="member">I2C_AHTXX_DEV_ADDR</ref>,          \
    .i2c_clock_speed = <ref refid="group__drivers_1gaeb1d1e5ae1a1ee405edcf1f447a8ed5e" kindref="member">I2C_AHTXX_DEV_CLK_SPD</ref>,       \
    .sensor_type     = AHTXX_AHT25 }</initializer>
        <briefdescription>
<para>Macro that initializes <computeroutput><ref refid="group__drivers_1ga4481478f7508935e24b98cf5027da6dd" kindref="member">ahtxx_config_t</ref></computeroutput> to default configuration settings for the aht25 sensor type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ahtxx/include/ahtxx.h" line="77" column="9" bodyfile="components/peripherals/i2c/esp_ahtxx/include/ahtxx.h" bodystart="77" bodyend="80"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga6a49467196b5d6dc6f860f73413264b4" prot="public" static="no">
        <name>I2C_AHT21_CONFIG_DEFAULT</name>
        <initializer>    {                  \
    .i2c_address     = <ref refid="group__drivers_1ga57ee2aaac97db3bcab231deccc6e3399" kindref="member">I2C_AHTXX_DEV_ADDR</ref>,          \
    .i2c_clock_speed = <ref refid="group__drivers_1gaeb1d1e5ae1a1ee405edcf1f447a8ed5e" kindref="member">I2C_AHTXX_DEV_CLK_SPD</ref>,       \
    .sensor_type     = AHTXX_AHT21 }</initializer>
        <briefdescription>
<para>Macro that initializes <computeroutput><ref refid="group__drivers_1ga4481478f7508935e24b98cf5027da6dd" kindref="member">ahtxx_config_t</ref></computeroutput> to default configuration settings for the aht21 sensor type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ahtxx/include/ahtxx.h" line="85" column="9" bodyfile="components/peripherals/i2c/esp_ahtxx/include/ahtxx.h" bodystart="85" bodyend="88"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1gafaf90a48857bdc123dbc7c3a145545f5" prot="public" static="no">
        <name>I2C_AHT20_CONFIG_DEFAULT</name>
        <initializer>    {                  \
    .i2c_address     = <ref refid="group__drivers_1ga57ee2aaac97db3bcab231deccc6e3399" kindref="member">I2C_AHTXX_DEV_ADDR</ref>,          \
    .i2c_clock_speed = <ref refid="group__drivers_1gaeb1d1e5ae1a1ee405edcf1f447a8ed5e" kindref="member">I2C_AHTXX_DEV_CLK_SPD</ref>,       \
    .sensor_type     = AHTXX_AHT20 }</initializer>
        <briefdescription>
<para>Macro that initializes <computeroutput><ref refid="group__drivers_1ga4481478f7508935e24b98cf5027da6dd" kindref="member">ahtxx_config_t</ref></computeroutput> to default configuration settings for the aht20 sensor type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ahtxx/include/ahtxx.h" line="93" column="9" bodyfile="components/peripherals/i2c/esp_ahtxx/include/ahtxx.h" bodystart="93" bodyend="96"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1gaacc36b22e4864f582ea9f7fdbbc5898c" prot="public" static="no">
        <name>I2C_AHT10_CONFIG_DEFAULT</name>
        <initializer>    {                  \
    .i2c_address     = <ref refid="group__drivers_1ga57ee2aaac97db3bcab231deccc6e3399" kindref="member">I2C_AHTXX_DEV_ADDR</ref>,          \
    .i2c_clock_speed = <ref refid="group__drivers_1gaeb1d1e5ae1a1ee405edcf1f447a8ed5e" kindref="member">I2C_AHTXX_DEV_CLK_SPD</ref>,       \
    .sensor_type     = AHTXX_AHT10 }</initializer>
        <briefdescription>
<para>Macro that initializes <computeroutput><ref refid="group__drivers_1ga4481478f7508935e24b98cf5027da6dd" kindref="member">ahtxx_config_t</ref></computeroutput> to default configuration settings for the aht10 sensor type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ahtxx/include/ahtxx.h" line="101" column="9" bodyfile="components/peripherals/i2c/esp_ahtxx/include/ahtxx.h" bodystart="101" bodyend="104"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga2fd4a3cecefd41ebf3ad98392aadb9fa" prot="public" static="no">
        <name>I2C_AK8975_DEV_CLK_SPD</name>
        <initializer>UINT32_C(100000)</initializer>
        <briefdescription>
<para>ak8975 I2C default clock frequency (100KHz) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ak8975/include/ak8975.h" line="52" column="9" bodyfile="components/peripherals/i2c/esp_ak8975/include/ak8975.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga2d07a0e495cfebfb5e56e9a5a62607ce" prot="public" static="no">
        <name>I2C_AK8975_DEV_ADDR_CAD1_0_CAD0_0</name>
        <initializer>UINT8_C(0x0c)</initializer>
        <briefdescription>
<para>ak8975 I2C address when CAD1 and CAD0 are low </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ak8975/include/ak8975.h" line="54" column="9" bodyfile="components/peripherals/i2c/esp_ak8975/include/ak8975.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga965b23a9ecbe9a24d295a1a7c069f8c9" prot="public" static="no">
        <name>I2C_AK8975_DEV_ADDR_CAD1_0_CAD0_1</name>
        <initializer>UINT8_C(0x0d)</initializer>
        <briefdescription>
<para>ak8975 I2C address when CAD1 is low and CAD0 is high </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ak8975/include/ak8975.h" line="55" column="9" bodyfile="components/peripherals/i2c/esp_ak8975/include/ak8975.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga2a65ae19f0407d84810ab3565b1529db" prot="public" static="no">
        <name>I2C_AK8975_DEV_ADDR_CAD1_1_CAD0_0</name>
        <initializer>UINT8_C(0x0e)</initializer>
        <briefdescription>
<para>ak8975 I2C address when CAD1 is high and CAD0 is low </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ak8975/include/ak8975.h" line="56" column="9" bodyfile="components/peripherals/i2c/esp_ak8975/include/ak8975.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1gaa3945f334089841dc25b1a0e7eaae7b7" prot="public" static="no">
        <name>I2C_AK8975_DEV_ADDR_CAD1_1_CAD0_1</name>
        <initializer>UINT8_C(0x0f)</initializer>
        <briefdescription>
<para>ak8975 I2C address when CAD1 and CAD0 are high </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ak8975/include/ak8975.h" line="57" column="9" bodyfile="components/peripherals/i2c/esp_ak8975/include/ak8975.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga90c8e7d8c3b6158111d7b35d1a8fec50" prot="public" static="no">
        <name>I2C_XFR_TIMEOUT_MS</name>
        <initializer>(500)</initializer>
        <briefdescription>
<para>I2C transaction timeout in milliseconds. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ak8975/include/ak8975.h" line="59" column="9" bodyfile="components/peripherals/i2c/esp_ak8975/include/ak8975.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1gae5925f3fe9c3bd9a0237e62704f6269c" prot="public" static="no">
        <name>I2C_AK8975_CONFIG_DEFAULT</name>
        <initializer>    {                           \
    .i2c_clock_speed    = <ref refid="group__drivers_1ga2fd4a3cecefd41ebf3ad98392aadb9fa" kindref="member">I2C_AK8975_DEV_CLK_SPD</ref>,            \
    .i2c_address        = <ref refid="group__drivers_1ga2d07a0e495cfebfb5e56e9a5a62607ce" kindref="member">I2C_AK8975_DEV_ADDR_CAD1_0_CAD0_0</ref>, }</initializer>
        <briefdescription>
<para>Macro that initializes <computeroutput>i2c_ak8975_config_t</computeroutput> to default configuration settings. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ak8975/include/ak8975.h" line="68" column="9" bodyfile="components/peripherals/i2c/esp_ak8975/include/ak8975.h" bodystart="68" bodyend="70"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga58d30de33868ca1906f52385a053d216" prot="public" static="no">
        <name>I2C_AS3935_DEV_CLK_SPD</name>
        <initializer>UINT32_C(100000)</initializer>
        <briefdescription>
<para>AS3935 definitions. </para>
        </briefdescription>
        <detaileddescription>
<para>as3935 I2C default clock frequency (100KHz) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="56" column="9" bodyfile="components/peripherals/i2c/esp_as3935/include/as3935.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga6148276b60338a1412c931bc6474aa65" prot="public" static="no">
        <name>I2C_AS3935_DEV_ADDR_1</name>
        <initializer>UINT8_C(0x01)</initializer>
        <briefdescription>
<para>as3935 I2C address when ADD1 pin floating/low and ADD0 pin high </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="59" column="9" bodyfile="components/peripherals/i2c/esp_as3935/include/as3935.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1gac2ffe4aaa66114136c21d50f5dea6086" prot="public" static="no">
        <name>I2C_AS3935_DEV_ADDR_2</name>
        <initializer>UINT8_C(0x02)</initializer>
        <briefdescription>
<para>as3935 I2C address when ADD0 pin floating/low and ADD1 pin high </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="60" column="9" bodyfile="components/peripherals/i2c/esp_as3935/include/as3935.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga5745278a8e5956fb2e0dedd70165afa3" prot="public" static="no">
        <name>I2C_AS3935_DEV_ADDR_3</name>
        <initializer>UINT8_C(0x03)</initializer>
        <briefdescription>
<para>as3935 I2C address when ADD0 and ADD1 pins high </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="61" column="9" bodyfile="components/peripherals/i2c/esp_as3935/include/as3935.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga90c8e7d8c3b6158111d7b35d1a8fec50" prot="public" static="no">
        <name>I2C_XFR_TIMEOUT_MS</name>
        <initializer>(500)</initializer>
        <briefdescription>
<para>I2C transaction timeout in milliseconds. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="63" column="9" bodyfile="components/peripherals/i2c/esp_as3935/include/as3935.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga913fb35039727e518fdfa60d3c1b79da" prot="public" static="no">
        <name>AS3935_REG_00</name>
        <initializer>UINT8_C(0x00)</initializer>
        <briefdescription>
<para>as3935 I2C register to access AFE gain boost and power-down </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="66" column="9" bodyfile="components/peripherals/i2c/esp_as3935/include/as3935.h" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga6d60567e9afe81cefbe0e919e897f211" prot="public" static="no">
        <name>AS3935_REG_01</name>
        <initializer>UINT8_C(0x01)</initializer>
        <briefdescription>
<para>as3935 I2C register to access noise floor level and watchdog threshold (0-15) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="67" column="9" bodyfile="components/peripherals/i2c/esp_as3935/include/as3935.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1gae1881332e24d601b94f9d390275bcc98" prot="public" static="no">
        <name>AS3935_REG_02</name>
        <initializer>UINT8_C(0x02)</initializer>
        <briefdescription>
<para>as3935 I2C register to access clearing statistics, minimum number of lightning, and spike rejection </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="68" column="9" bodyfile="components/peripherals/i2c/esp_as3935/include/as3935.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1gaa639c9c97dad09ae49efac72f5f854d4" prot="public" static="no">
        <name>AS3935_REG_03</name>
        <initializer>UINT8_C(0x03)</initializer>
        <briefdescription>
<para>as3935 I2C register to access frequency division ratio and mask disturber </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="69" column="9" bodyfile="components/peripherals/i2c/esp_as3935/include/as3935.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1gabd19c3aa18d7e52b3ccb76fa72f34bfb" prot="public" static="no">
        <name>AS3935_REG_04</name>
        <initializer>UINT8_C(0x04)</initializer>
        <briefdescription>
<para>as3935 I2C register to access energy of lightning (LSBYTE) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="70" column="9" bodyfile="components/peripherals/i2c/esp_as3935/include/as3935.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1gac53715d526314b782caf4125da3dd0eb" prot="public" static="no">
        <name>AS3935_REG_05</name>
        <initializer>UINT8_C(0x05)</initializer>
        <briefdescription>
<para>as3935 I2C register to access energy of lightning (MSBYTE) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="71" column="9" bodyfile="components/peripherals/i2c/esp_as3935/include/as3935.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga25ef19d28257b9bfbda0eb91ed2524eb" prot="public" static="no">
        <name>AS3935_REG_06</name>
        <initializer>UINT8_C(0x06)</initializer>
        <briefdescription>
<para>as3935 I2C register to access energy of lightning (MMSBYTE) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="72" column="9" bodyfile="components/peripherals/i2c/esp_as3935/include/as3935.h" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga27ef1631942c1c2086731b28e957919a" prot="public" static="no">
        <name>AS3935_REG_07</name>
        <initializer>UINT8_C(0x07)</initializer>
        <briefdescription>
<para>as3935 I2C register to access distance estimation of lightning </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="73" column="9" bodyfile="components/peripherals/i2c/esp_as3935/include/as3935.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1gaf721c8f549b546827eb30d9655c192a0" prot="public" static="no">
        <name>AS3935_REG_08</name>
        <initializer>UINT8_C(0x08)</initializer>
        <briefdescription>
<para>as3935 I2C register to access internal tuning caps and display (LCO, SRCO, TRCO) on IRQ pin </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="74" column="9" bodyfile="components/peripherals/i2c/esp_as3935/include/as3935.h" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga4575f50ef770d5c8482cb9a04b19d0f5" prot="public" static="no">
        <name>AS3935_REG_RST</name>
        <initializer>UINT8_C(0x96)</initializer>
        <briefdescription>
<para>as3935 I2C register to either calibrate or reset registers to default </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="75" column="9" bodyfile="components/peripherals/i2c/esp_as3935/include/as3935.h" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1gae5389394537eae4a77f8ceaf48b170b9" prot="public" static="no">
        <name>AS3935_CMD_PRESET_DEFAULT</name>
        <initializer>UINT8_C(0x3c)</initializer>
        <briefdescription>
<para>as3935 I2C command to set all registers in default mode </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="77" column="9" bodyfile="components/peripherals/i2c/esp_as3935/include/as3935.h" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga9314e4bfa18ffd335fe46be5710f8d4c" prot="public" static="no">
        <name>AS3935_CMD_CALIB_RCO</name>
        <initializer>UINT8_C(0x3d)</initializer>
        <briefdescription>
<para>as3935 I2C command to automatically calibrate the internal RC oscillators </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="78" column="9" bodyfile="components/peripherals/i2c/esp_as3935/include/as3935.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga5b07ca4672893f85bf5f2b2e9b6e3922" prot="public" static="no">
        <name>AS3935_POWERUP_DELAY_MS</name>
        <initializer>(25)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="80" column="9" bodyfile="components/peripherals/i2c/esp_as3935/include/as3935.h" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga616be07751de8c428e771bf8a07c3a86" prot="public" static="no">
        <name>AS3935_APPSTART_DELAY_MS</name>
        <initializer>(25)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="81" column="9" bodyfile="components/peripherals/i2c/esp_as3935/include/as3935.h" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga5d6a9f438a5d67f5f7f63f18b085850d" prot="public" static="no">
        <name>AS3935_STARTUP_DELAY_MS</name>
        <initializer>(2)</initializer>
        <briefdescription>
<para>as3935 I2C LCO start-up delay in milliseconds </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="82" column="9" bodyfile="components/peripherals/i2c/esp_as3935/include/as3935.h" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1gaa05b118e138f361c58e90c6a639fce88" prot="public" static="no">
        <name>AS3935_INTERRUPT_DELAY_MS</name>
        <initializer>(2)</initializer>
        <briefdescription>
<para>as3935 I2C interrupt delay in milliseconds </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="83" column="9" bodyfile="components/peripherals/i2c/esp_as3935/include/as3935.h" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga686c1a4e4a158f398a90be4696ef2bb1" prot="public" static="no">
        <name>AS3935_CALIBRATION_DELAY_MS</name>
        <initializer>(2)</initializer>
        <briefdescription>
<para>as3935 I2C calibration delay in milliseconds for RC oscillators </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="84" column="9" bodyfile="components/peripherals/i2c/esp_as3935/include/as3935.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1gade07cabbebe29cc805ee472f64ee027d" prot="public" static="no">
        <name>AS3935_TX_RX_DELAY_MS</name>
        <initializer>UINT16_C(10)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="85" column="9" bodyfile="components/peripherals/i2c/esp_as3935/include/as3935.h" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga5337283d5f009fbc64e6e464be6951c2" prot="public" static="no">
        <name>I2C_AS3935_CONFIG_DEFAULT</name>
        <initializer>        {                                             \
        .i2c_clock_speed                = <ref refid="group__drivers_1ga58d30de33868ca1906f52385a053d216" kindref="member">I2C_AS3935_DEV_CLK_SPD</ref>,               \
        .i2c_address                    = <ref refid="group__drivers_1ga5745278a8e5956fb2e0dedd70165afa3" kindref="member">I2C_AS3935_DEV_ADDR_3</ref>,                \
        .irq_io_enabled                 = true,                                 \
        .irq_io_num                     = GPIO_NUM_10,                          \
        .analog_frontend                = AS3935_AFE_INDOOR,                    \
        .min_lightning_strikes          = AS3935_MIN_LIGHTNING_9,               \
        .calibrate_rco                  = true,                                 \
        .disturber_detection_enabled    = true,                                 \
        .noise_level_threshold          = <ref refid="group__drivers_1gga29aaeb2c04fa0769eb47710872276ae7a6cd36f882e57c0b6b1bc5ce6e5b4f3d4" kindref="member">AS3935_NOISE_LEVEL_1140_95</ref>            \
    }</initializer>
        <briefdescription>
<para>CJMCU-3935 Board Wiring (I2C interface): ADD0 &amp; ADD1 pin to VCC (3.3v) -&gt; I2C address 0x03 SI pin to VCC (3.3v) -&gt; enable I2C interface SCL pin 10k-ohm pull-up resistor to VCC (3.3v) SCL pin to MCU SCL pin MOSI (SDA) pin to MCU SDA pin IRQ pin to MCU interrupt pin VCC pin to 3.3v GND pin to common ground. </para>
        </briefdescription>
        <detaileddescription>
<para>AS3935 macro definitions </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as3935/include/as3935.h" line="107" column="9" bodyfile="components/peripherals/i2c/esp_as3935/include/as3935.h" bodystart="107" bodyend="117"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1gae498fab1f933c5fab3193bac0ef1187f" prot="public" static="no">
        <name>I2C_AS7341_DEV_CLK_SPD</name>
        <initializer>UINT32_C(100000)</initializer>
        <briefdescription>
<para>as7341 I2C default clock frequency (100KHz) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as7341/include/as7341.h" line="55" column="9" bodyfile="components/peripherals/i2c/esp_as7341/include/as7341.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga8aef15dfe54e17c0c17826e0f35a4d53" prot="public" static="no">
        <name>I2C_AS7341_DEV_ADDR</name>
        <initializer>UINT8_C(0x39)</initializer>
        <briefdescription>
<para>as7341 I2C address </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as7341/include/as7341.h" line="57" column="9" bodyfile="components/peripherals/i2c/esp_as7341/include/as7341.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga90c8e7d8c3b6158111d7b35d1a8fec50" prot="public" static="no">
        <name>I2C_XFR_TIMEOUT_MS</name>
        <initializer>(500)</initializer>
        <briefdescription>
<para>I2C transaction timeout in milliseconds. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as7341/include/as7341.h" line="59" column="9" bodyfile="components/peripherals/i2c/esp_as7341/include/as7341.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga922aa068dff9cdb160de2fd7b16b21df" prot="public" static="no">
        <name>I2C_AS7341_CONFIG_DEFAULT</name>
        <initializer>    {                      \
    .i2c_address        = <ref refid="group__drivers_1ga8aef15dfe54e17c0c17826e0f35a4d53" kindref="member">I2C_AS7341_DEV_ADDR</ref>,           \
    .i2c_clock_speed    = <ref refid="group__drivers_1gae498fab1f933c5fab3193bac0ef1187f" kindref="member">I2C_AS7341_DEV_CLK_SPD</ref>,        \
    .spectral_gain      = AS7341_SPECTRAL_GAIN_32X,      \
    .atime              = 29,                            \
    .astep              = 599 }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_as7341/include/as7341.h" line="65" column="9" bodyfile="components/peripherals/i2c/esp_as7341/include/as7341.h" bodystart="65" bodyend="70"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga8ca572ae385810ed22987909ac62afaa" prot="public" static="no">
        <name>I2C_BH1750_DEV_CLK_SPD</name>
        <initializer>UINT32_C(100000)</initializer>
        <briefdescription>
<para>bh1750 I2C default clock frequency (100KHz) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bh1750/include/bh1750.h" line="52" column="9" bodyfile="components/peripherals/i2c/esp_bh1750/include/bh1750.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga7ebe0e0fe7d678d2de29f645ceed7434" prot="public" static="no">
        <name>I2C_BH1750_DEV_ADDR_LO</name>
        <initializer>UINT8_C(0x23)</initializer>
        <briefdescription>
<para>bh1750 I2C address when ADDR pin floating/low </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bh1750/include/bh1750.h" line="54" column="9" bodyfile="components/peripherals/i2c/esp_bh1750/include/bh1750.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga279d08d7ecfc79b7a65142103ccca222" prot="public" static="no">
        <name>I2C_BH1750_DEV_ADDR_HI</name>
        <initializer>UINT8_C(0x5C)</initializer>
        <briefdescription>
<para>bh1750 I2C address when ADDR pin high </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bh1750/include/bh1750.h" line="55" column="9" bodyfile="components/peripherals/i2c/esp_bh1750/include/bh1750.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga90c8e7d8c3b6158111d7b35d1a8fec50" prot="public" static="no">
        <name>I2C_XFR_TIMEOUT_MS</name>
        <initializer>(500)</initializer>
        <briefdescription>
<para>I2C transaction timeout in milliseconds. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bh1750/include/bh1750.h" line="57" column="9" bodyfile="components/peripherals/i2c/esp_bh1750/include/bh1750.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga897305b241314fd8783d5dfc0d7fbb13" prot="public" static="no">
        <name>I2C_BH1750_CONFIG_DEFAULT</name>
        <initializer>        {                             \
        .i2c_address        = <ref refid="group__drivers_1ga7ebe0e0fe7d678d2de29f645ceed7434" kindref="member">I2C_BH1750_DEV_ADDR_LO</ref>,           \
        .i2c_clock_speed    = <ref refid="group__drivers_1ga8ca572ae385810ed22987909ac62afaa" kindref="member">I2C_BH1750_DEV_CLK_SPD</ref>,           \
        .mode               = <ref refid="group__drivers_1gga66416e4a883bd9a0719917edaeaae8a7a088345f3ccd93ad8a00d1963a7cc7d3c" kindref="member">BH1750_MODE_CM_HI_RESOLUTION</ref>,     \
        .power_enabled      = true,                             \
        .set_timespan       = false }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bh1750/include/bh1750.h" line="64" column="9" bodyfile="components/peripherals/i2c/esp_bh1750/include/bh1750.h" bodystart="64" bodyend="69"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga91f7f12ab13dfd442db035e12c62558d" prot="public" static="no">
        <name>I2C_BME680_DEV_CLK_SPD</name>
        <initializer>UINT32_C(100000)</initializer>
        <briefdescription>
<para>bme680 I2C default clock frequency (100KHz) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bme680/include/bme680.h" line="54" column="9" bodyfile="components/peripherals/i2c/esp_bme680/include/bme680.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga01c379f28a4673d112382bf9801d673c" prot="public" static="no">
        <name>I2C_BME680_DEV_ADDR_LO</name>
        <initializer>UINT8_C(0x76)</initializer>
        <briefdescription>
<para>bme680 I2C address when ADDR pin floating/low </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bme680/include/bme680.h" line="59" column="9" bodyfile="components/peripherals/i2c/esp_bme680/include/bme680.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1gaa1d56d3463d0b38650d27be65fd73e9c" prot="public" static="no">
        <name>I2C_BME680_DEV_ADDR_HI</name>
        <initializer>UINT8_C(0x77)</initializer>
        <briefdescription>
<para>bme680 I2C address when ADDR pin high </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bme680/include/bme680.h" line="60" column="9" bodyfile="components/peripherals/i2c/esp_bme680/include/bme680.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga90c8e7d8c3b6158111d7b35d1a8fec50" prot="public" static="no">
        <name>I2C_XFR_TIMEOUT_MS</name>
        <initializer>(500)</initializer>
        <briefdescription>
<para>I2C transaction timeout in milliseconds. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bme680/include/bme680.h" line="62" column="9" bodyfile="components/peripherals/i2c/esp_bme680/include/bme680.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga26c752c27dd9a71242cc54ae148ae3d2" prot="public" static="no">
        <name>BME680_HEATER_TEMP_MIN</name>
        <initializer>UINT8_C(200)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bme680/include/bme680.h" line="64" column="9" bodyfile="components/peripherals/i2c/esp_bme680/include/bme680.h" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga51d8f28364b40fdac92dd13980205e03" prot="public" static="no">
        <name>BME680_HEATER_TEMP_MAX</name>
        <initializer>UINT8_C(400)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bme680/include/bme680.h" line="65" column="9" bodyfile="components/peripherals/i2c/esp_bme680/include/bme680.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga43a69462b99e282f6b5406de483417e3" prot="public" static="no">
        <name>BME680_HEATER_PROFILE_SIZE</name>
        <initializer>UINT8_C(10)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bme680/include/bme680.h" line="66" column="9" bodyfile="components/peripherals/i2c/esp_bme680/include/bme680.h" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1gab5488660ba71a597b2317b7a7a0bb67d" prot="public" static="no">
        <name>I2C_BME680_CONFIG_DEFAULT</name>
        <initializer>        {                                             \
        .i2c_address                = <ref refid="group__drivers_1gaa1d56d3463d0b38650d27be65fd73e9c" kindref="member">I2C_BME680_DEV_ADDR_HI</ref>,                   \
        .i2c_clock_speed            = <ref refid="group__drivers_1ga91f7f12ab13dfd442db035e12c62558d" kindref="member">I2C_BME680_DEV_CLK_SPD</ref>,                   \
        .power_mode                 = <ref refid="group__drivers_1gga036c0d22ef7602a37e6acc30754c44d6a5c62dd38dc60b06037d60c9037582874" kindref="member">BME680_POWER_MODE_FORCED</ref>,                 \
        .iir_filter                 = BME680_IIR_FILTER_OFF,                    \
        .pressure_oversampling      = <ref refid="group__drivers_1gga94e531ba21486e2c6f40f16e3021a97aadead53800b79df0e0201a31807639b38" kindref="member">BME680_PRESSURE_OVERSAMPLING_4X</ref>,          \
        .temperature_oversampling   = <ref refid="group__drivers_1gga759038547cb6202de03caba5a7c882a7ac9891d9fbad80d05bee5a2da831872a0" kindref="member">BME680_TEMPERATURE_OVERSAMPLING_4X</ref>,       \
        .humidity_oversampling      = <ref refid="group__drivers_1gga3fff6756c917ec8461faffdfb8bb2ef4a4af4ee525dba2162ed18450858af2f33" kindref="member">BME680_HUMIDITY_OVERSAMPLING_4X</ref>,          \
        .gas_enabled                = true,                                     \
        .heater_temperature         = 300,                                      \
        .heater_duration            = 300,                                      \
        .heater_profile_size        = 1                                         \
    }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bme680/include/bme680.h" line="71" column="9" bodyfile="components/peripherals/i2c/esp_bme680/include/bme680.h" bodystart="71" bodyend="83"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga7e56bffd7cca7dee466685b2c78fa218" prot="public" static="no">
        <name>I2C_BMP280_DEV_CLK_SPD</name>
        <initializer>UINT32_C(100000)</initializer>
        <briefdescription>
<para>bmp280 I2C default clock frequency (100KHz) </para>
        </briefdescription>
        <detaileddescription>
<para>dependency includes public constant definitions </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp280/include/bmp280.h" line="57" column="9" bodyfile="components/peripherals/i2c/esp_bmp280/include/bmp280.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga13c83c268a369bb2a284c7d2cc11cf9d" prot="public" static="no">
        <name>I2C_BMP280_DEV_ADDR_LO</name>
        <initializer>UINT8_C(0x76)</initializer>
        <briefdescription>
<para>bmp280 I2C address when ADDR pin floating/low </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp280/include/bmp280.h" line="59" column="9" bodyfile="components/peripherals/i2c/esp_bmp280/include/bmp280.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga313b8d85e2d16ac9c748e1eb2ae79e64" prot="public" static="no">
        <name>I2C_BMP280_DEV_ADDR_HI</name>
        <initializer>UINT8_C(0x77)</initializer>
        <briefdescription>
<para>bmp280 I2C address when ADDR pin high </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp280/include/bmp280.h" line="60" column="9" bodyfile="components/peripherals/i2c/esp_bmp280/include/bmp280.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga90c8e7d8c3b6158111d7b35d1a8fec50" prot="public" static="no">
        <name>I2C_XFR_TIMEOUT_MS</name>
        <initializer>(500)</initializer>
        <briefdescription>
<para>I2C transaction timeout in milliseconds. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp280/include/bmp280.h" line="62" column="9" bodyfile="components/peripherals/i2c/esp_bmp280/include/bmp280.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga4c4e8ce8868867aae3193138683a13db" prot="public" static="no">
        <name>I2C_BMP280_CONFIG_DEFAULT</name>
        <initializer>        {                                          \
        .i2c_address                = <ref refid="group__drivers_1ga313b8d85e2d16ac9c748e1eb2ae79e64" kindref="member">I2C_BMP280_DEV_ADDR_HI</ref>,                \
        .i2c_clock_speed            = <ref refid="group__drivers_1ga7e56bffd7cca7dee466685b2c78fa218" kindref="member">I2C_BMP280_DEV_CLK_SPD</ref>,                \
        .power_mode                 = <ref refid="group__drivers_1ggaa4f8d7bff4d2100e147454563eb16712aa3b65aa6ea4fbbe841c075e580c6c91c" kindref="member">BMP280_POWER_MODE_NORMAL</ref>,              \
        .iir_filter                 = BMP280_IIR_FILTER_OFF,                 \
        .pressure_oversampling      = <ref refid="group__drivers_1gga4cb3c585b3e9d393ee0b44b8ec0b8dbca6439ab95093d6b22fd6c8b537839d4bc" kindref="member">BMP280_PRESSURE_OVERSAMPLING_4X</ref>,       \
        .temperature_oversampling   = <ref refid="group__drivers_1ggaf7580026dc3ad627fe0fc505fd1d24cda103c5373a9615ebac3f9b8b8a1889015" kindref="member">BMP280_TEMPERATURE_OVERSAMPLING_4X</ref>,    \
        .standby_time               = <ref refid="group__drivers_1ggad9ece41b3c809c1942a598a8776f6e12ae383c92942e0ff076a11a0ff339a2951" kindref="member">BMP280_STANDBY_TIME_250MS</ref> }</initializer>
        <briefdescription>
<para>Macro that initializes <computeroutput><ref refid="group__drivers_1ga683075794a68e847ac00880f3fbc5a1e" kindref="member">bmp280_config_t</ref></computeroutput> to default configuration settings. </para>
        </briefdescription>
        <detaileddescription>
<para>public macro definitions </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp280/include/bmp280.h" line="71" column="9" bodyfile="components/peripherals/i2c/esp_bmp280/include/bmp280.h" bodystart="71" bodyend="78"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga77fadec2764a370c27c8fbc6bee1fbd8" prot="public" static="no">
        <name>I2C_BMP390_DEV_CLK_SPD</name>
        <initializer>UINT32_C(100000)</initializer>
        <briefdescription>
<para>bmp390 I2C default clock frequency (100KHz) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp390/include/bmp390.h" line="52" column="9" bodyfile="components/peripherals/i2c/esp_bmp390/include/bmp390.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga72089fc541dd96a253f9e6cd9de36992" prot="public" static="no">
        <name>I2C_BMP390_DEV_ADDR_LO</name>
        <initializer>UINT8_C(0x76)</initializer>
        <briefdescription>
<para>bmp390 I2C address when ADDR pin low </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp390/include/bmp390.h" line="57" column="9" bodyfile="components/peripherals/i2c/esp_bmp390/include/bmp390.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1gaa7fde345e72d133f7617a37b569a98bc" prot="public" static="no">
        <name>I2C_BMP390_DEV_ADDR_HI</name>
        <initializer>UINT8_C(0x77)</initializer>
        <briefdescription>
<para>bmp390 I2C address when ADDR pin high </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp390/include/bmp390.h" line="58" column="9" bodyfile="components/peripherals/i2c/esp_bmp390/include/bmp390.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga90c8e7d8c3b6158111d7b35d1a8fec50" prot="public" static="no">
        <name>I2C_XFR_TIMEOUT_MS</name>
        <initializer>(500)</initializer>
        <briefdescription>
<para>I2C transaction timeout in milliseconds. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp390/include/bmp390.h" line="60" column="9" bodyfile="components/peripherals/i2c/esp_bmp390/include/bmp390.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1gaeee22da90e6846a8913a6d957d40ae0c" prot="public" static="no">
        <name>I2C_BMP390_CONFIG_DEFAULT</name>
        <initializer>        {                                          \
        .i2c_address                = <ref refid="group__drivers_1gaa7fde345e72d133f7617a37b569a98bc" kindref="member">I2C_BMP390_DEV_ADDR_HI</ref>,                \
        .i2c_clock_speed            = <ref refid="group__drivers_1ga77fadec2764a370c27c8fbc6bee1fbd8" kindref="member">I2C_BMP390_DEV_CLK_SPD</ref>,                \
        .power_mode                 = <ref refid="group__drivers_1gga42a6b3878c63588fdf5601a0a0385d61a685e536b4876bd46a77a133f511f70f5" kindref="member">BMP390_POWER_MODE_FORCED</ref>,              \
        .iir_filter                 = BMP390_IIR_FILTER_OFF,                 \
        .pressure_oversampling      = <ref refid="group__drivers_1gga7d8fbea6422f39b254b222705433918ba7afebb12b8293fd36d0bcb0946de2a45" kindref="member">BMP390_PRESSURE_OVERSAMPLING_8X</ref>,       \
        .temperature_oversampling   = <ref refid="group__drivers_1gga7f2043cbe079464e80e1b2ae2c788ee5a6ca4ddfe613042fcc49f6a2115231367" kindref="member">BMP390_TEMPERATURE_OVERSAMPLING_8X</ref>,    \
        .output_data_rate           = <ref refid="group__drivers_1gga1ee0ad95b878f162342e3a2b31c21b5dac43d28d1e725d3efd5d0d3ee011f81bb" kindref="member">BMP390_ODR_40MS</ref> }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp390/include/bmp390.h" line="65" column="9" bodyfile="components/peripherals/i2c/esp_bmp390/include/bmp390.h" bodystart="65" bodyend="72"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1gabdf0cc7d8f8821ee7de4aefcc10fa83d" prot="public" static="no">
        <name>I2C_CCS811_DEV_CLK_SPD</name>
        <initializer>UINT32_C(100000)</initializer>
        <briefdescription>
<para>ccs811 I2C default clock frequency (100KHz) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ccs811/include/ccs811.h" line="53" column="9" bodyfile="components/peripherals/i2c/esp_ccs811/include/ccs811.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga2b8071c12d3b4ad585f81e8da78fc7c5" prot="public" static="no">
        <name>I2C_CCS811_DEV_ADDR_LO</name>
        <initializer>UINT8_C(0x5a)</initializer>
        <briefdescription>
<para>ccs811 I2C address when ADDR pin floating/low </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ccs811/include/ccs811.h" line="55" column="9" bodyfile="components/peripherals/i2c/esp_ccs811/include/ccs811.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1gad1a2bd896b353c80a982963238f639f3" prot="public" static="no">
        <name>I2C_CCS811_DEV_ADDR_HI</name>
        <initializer>UINT8_C(0x5b)</initializer>
        <briefdescription>
<para>ccs811 I2C address when ADDR pin high </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ccs811/include/ccs811.h" line="56" column="9" bodyfile="components/peripherals/i2c/esp_ccs811/include/ccs811.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga90c8e7d8c3b6158111d7b35d1a8fec50" prot="public" static="no">
        <name>I2C_XFR_TIMEOUT_MS</name>
        <initializer>(500)</initializer>
        <briefdescription>
<para>I2C transaction timeout in milliseconds. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ccs811/include/ccs811.h" line="58" column="9" bodyfile="components/peripherals/i2c/esp_ccs811/include/ccs811.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga2ce64e208d4916728d421a9f782a1f4b" prot="public" static="no">
        <name>CCS811_ERROR_TABLE_SIZE</name>
        <initializer>(6)</initializer>
        <briefdescription>
<para>ccs811 I2C error table size </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ccs811/include/ccs811.h" line="60" column="9" bodyfile="components/peripherals/i2c/esp_ccs811/include/ccs811.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga29a57c6f12a44f68158f0f9576726a59" prot="public" static="no">
        <name>CCS811_MEASURE_MODE_TABLE_SIZE</name>
        <initializer>(5)</initializer>
        <briefdescription>
<para>ccs811 I2C measure mode table size </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ccs811/include/ccs811.h" line="61" column="9" bodyfile="components/peripherals/i2c/esp_ccs811/include/ccs811.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga7f1586818ba6d6d3893928bfdfaae120" prot="public" static="no">
        <name>I2C_CCS811_CONFIG_DEFAULT</name>
        <initializer>        {                                           \
        .i2c_address                = <ref refid="group__drivers_1ga2b8071c12d3b4ad585f81e8da78fc7c5" kindref="member">I2C_CCS811_DEV_ADDR_LO</ref>,                   \
        .i2c_clock_speed            = <ref refid="group__drivers_1gabdf0cc7d8f8821ee7de4aefcc10fa83d" kindref="member">I2C_CCS811_DEV_CLK_SPD</ref>,                   \
        .wake_io_enabled            = false,                                    \
        .reset_io_enabled           = false,                                    \
        .irq_threshold_enabled      = false,                                    \
        .irq_data_ready_enabled     = false,                                    \
        .drive_mode                 = <ref refid="group__drivers_1ggad77e9dec744afbae856a9e21ee269514a1576068aa364e7161710aa725246b0ca" kindref="member">CCS811_DRIVE_MODE_CONSTANT_POWER_IAQ</ref>,     \
        .set_environmental_data     = false }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ccs811/include/ccs811.h" line="68" column="9" bodyfile="components/peripherals/i2c/esp_ccs811/include/ccs811.h" bodystart="68" bodyend="76"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1gaef2ac9c5086e8f63c9840134f9a0c2ce" prot="public" static="no">
        <name>I2C_ENS160_DEV_CLK_SPD</name>
        <initializer>UINT32_C(100000)</initializer>
        <briefdescription>
<para>ens160 I2C default clock frequency (100KHz) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ens160/include/ens160.h" line="53" column="9" bodyfile="components/peripherals/i2c/esp_ens160/include/ens160.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga2a622c70bf18384aa3f2be04e8a93c2f" prot="public" static="no">
        <name>I2C_ENS160_DEV_ADDR_LO</name>
        <initializer>UINT8_C(0x52)</initializer>
        <briefdescription>
<para>ens160 I2C address ADDR pin low </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ens160/include/ens160.h" line="55" column="9" bodyfile="components/peripherals/i2c/esp_ens160/include/ens160.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1gab3432ce8496f801521e78107e1cb756e" prot="public" static="no">
        <name>I2C_ENS160_DEV_ADDR_HI</name>
        <initializer>UINT8_C(0x53)</initializer>
        <briefdescription>
<para>ens160 I2C address ADDR pin high </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ens160/include/ens160.h" line="56" column="9" bodyfile="components/peripherals/i2c/esp_ens160/include/ens160.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga90c8e7d8c3b6158111d7b35d1a8fec50" prot="public" static="no">
        <name>I2C_XFR_TIMEOUT_MS</name>
        <initializer>(500)</initializer>
        <briefdescription>
<para>I2C transaction timeout in milliseconds. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ens160/include/ens160.h" line="58" column="9" bodyfile="components/peripherals/i2c/esp_ens160/include/ens160.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga9c04a31b15b5c42ee99b62f4cdbba115" prot="public" static="no">
        <name>ENS160_TVOC_MIN</name>
        <initializer>UINT16_C(0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>ens160 tvoc minimum in ppb (section 5.1) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ens160/include/ens160.h" line="61" column="9" bodyfile="components/peripherals/i2c/esp_ens160/include/ens160.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1gaddd9b48801e35f641da743ede92e11ca" prot="public" static="no">
        <name>ENS160_TVOC_MAX</name>
        <initializer>UINT16_C(65000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>ens160 tvoc maximum in ppb (section 5.1) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ens160/include/ens160.h" line="62" column="9" bodyfile="components/peripherals/i2c/esp_ens160/include/ens160.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1gadc86cead2f984939ffcb9970f2b56f3d" prot="public" static="no">
        <name>ENS160_ECO2_MIN</name>
        <initializer>UINT16_C(400)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>ens160 equivalent co2 minimum in ppm (table 5) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ens160/include/ens160.h" line="63" column="9" bodyfile="components/peripherals/i2c/esp_ens160/include/ens160.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1gac1c00b2fba2706f0a3b1d1e6b660fb9f" prot="public" static="no">
        <name>ENS160_ECO2_MAX</name>
        <initializer>UINT16_C(65000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>ens160 equivalent co2 maximum in ppm (table 5) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ens160/include/ens160.h" line="64" column="9" bodyfile="components/peripherals/i2c/esp_ens160/include/ens160.h" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga0ff1c026ea27fdfd823abebe22c9252c" prot="public" static="no">
        <name>ENS160_AQI_MIN</name>
        <initializer>UINT16_C(1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>ens160 air quality index UBA minimum (table 6) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ens160/include/ens160.h" line="65" column="9" bodyfile="components/peripherals/i2c/esp_ens160/include/ens160.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga0366e30fcd40a9d3bd484dec9096b02b" prot="public" static="no">
        <name>ENS160_AQI_MAX</name>
        <initializer>UINT16_C(5)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>ens160 air quality index UBA maximum (table 6) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ens160/include/ens160.h" line="66" column="9" bodyfile="components/peripherals/i2c/esp_ens160/include/ens160.h" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga75231f32b3127d3a4428bc6853e97877" prot="public" static="no">
        <name>ENS160_ERROR_MSG_SIZE</name>
        <initializer>(80)</initializer>
        <briefdescription>
<para>ens160 I2C error message size </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ens160/include/ens160.h" line="69" column="9" bodyfile="components/peripherals/i2c/esp_ens160/include/ens160.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga69f13b56e5c70913ed6896e0a1143c73" prot="public" static="no">
        <name>ENS160_ERROR_MSG_TABLE_SIZE</name>
        <initializer>(7)</initializer>
        <briefdescription>
<para>ens160 I2C error message table size </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ens160/include/ens160.h" line="70" column="9" bodyfile="components/peripherals/i2c/esp_ens160/include/ens160.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1gab6760dc29adf5219230214535464b500" prot="public" static="no">
        <name>I2C_ENS160_CONFIG_DEFAULT</name>
        <initializer>        {                                             \
        .i2c_address                = <ref refid="group__drivers_1gab3432ce8496f801521e78107e1cb756e" kindref="member">I2C_ENS160_DEV_ADDR_HI</ref>,                   \
        .i2c_clock_speed            = <ref refid="group__drivers_1gaef2ac9c5086e8f63c9840134f9a0c2ce" kindref="member">I2C_ENS160_DEV_CLK_SPD</ref>,                   \
        .irq_enabled                = false,                                    \
        .irq_data_enabled           = false,                                    \
        .irq_gpr_enabled            = false,                                    \
        .irq_pin_driver             = <ref refid="group__drivers_1gga75c593a0cc73463325240b4024666622ab7c98b25f90dd5005f51895aaf07f456" kindref="member">ENS160_INT_PIN_DRIVE_OPEN_DRAIN</ref>,          \
        .irq_pin_polarity           = <ref refid="group__drivers_1gga85829c5c19d6ec9d3ea8643d3d2627a6a450b74eae6c7bc01837114e36e257bd5" kindref="member">ENS160_INT_PIN_POLARITY_ACTIVE_LO</ref> }</initializer>
        <briefdescription>
<para>Macro that initializes <computeroutput>i2c_ens160_config_t</computeroutput> to default configuration settings. </para>
        </briefdescription>
        <detaileddescription>
<para>Parameter Range TVOC 0..65,000 ppb (Total Volatile Organic Compounds) eCO2 400..65,00 ppm (Equivalent Carbon Dioxide) AQI-UBA 1..5 (UBA Air Quality Index) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ens160/include/ens160.h" line="87" column="9" bodyfile="components/peripherals/i2c/esp_ens160/include/ens160.h" bodystart="87" bodyend="94"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1gafe92aca02069406fca4e2d08ebe97c8f" prot="public" static="no">
        <name>I2C_HDC1080_DEV_CLK_SPD</name>
        <initializer>UINT32_C(100000)</initializer>
        <briefdescription>
<para>hdc1080 I2C default clock frequency (100KHz) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_hdc1080/include/hdc1080.h" line="52" column="9" bodyfile="components/peripherals/i2c/esp_hdc1080/include/hdc1080.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga20646823e2b79cab3f9292098296f7dd" prot="public" static="no">
        <name>I2C_HDC1080_DEV_ADDR_0</name>
        <initializer>UINT8_C(0x40)</initializer>
        <briefdescription>
<para>hdc1080 I2C address when ADR1 = 0, ADR0 = 0 </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_hdc1080/include/hdc1080.h" line="54" column="9" bodyfile="components/peripherals/i2c/esp_hdc1080/include/hdc1080.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1gaf0a68e1db73e117aee6873eb59b33150" prot="public" static="no">
        <name>I2C_HDC1080_DEV_ADDR_1</name>
        <initializer>UINT8_C(0x41)</initializer>
        <briefdescription>
<para>hdc1080 I2C address when ADR1 = 0, ADR0 = 1 </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_hdc1080/include/hdc1080.h" line="55" column="9" bodyfile="components/peripherals/i2c/esp_hdc1080/include/hdc1080.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga04acb5ef04a39f4b521c70682698c162" prot="public" static="no">
        <name>I2C_HDC1080_DEV_ADDR_2</name>
        <initializer>UINT8_C(0x42)</initializer>
        <briefdescription>
<para>hdc1080 I2C address when ADR1 = 1, ADR0 = 0 </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_hdc1080/include/hdc1080.h" line="56" column="9" bodyfile="components/peripherals/i2c/esp_hdc1080/include/hdc1080.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1gae64695d0443e67d445bde578b909a861" prot="public" static="no">
        <name>I2C_HDC1080_DEV_ADDR_3</name>
        <initializer>UINT8_C(0x43)</initializer>
        <briefdescription>
<para>hdc1080 I2C address when ADR1 = 1, ADR0 = 1 </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_hdc1080/include/hdc1080.h" line="57" column="9" bodyfile="components/peripherals/i2c/esp_hdc1080/include/hdc1080.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga90c8e7d8c3b6158111d7b35d1a8fec50" prot="public" static="no">
        <name>I2C_XFR_TIMEOUT_MS</name>
        <initializer>(500)</initializer>
        <briefdescription>
<para>I2C transaction timeout in milliseconds. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_hdc1080/include/hdc1080.h" line="59" column="9" bodyfile="components/peripherals/i2c/esp_hdc1080/include/hdc1080.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga861551427a7771d3c9af94155b04259a" prot="public" static="no">
        <name>I2C_HDC1080_CONFIG_DEFAULT</name>
        <initializer>        {                                            \
        .i2c_address                = <ref refid="group__drivers_1ga20646823e2b79cab3f9292098296f7dd" kindref="member">I2C_HDC1080_DEV_ADDR_0</ref>,                   \
        .i2c_clock_speed            = <ref refid="group__drivers_1gafe92aca02069406fca4e2d08ebe97c8f" kindref="member">I2C_HDC1080_DEV_CLK_SPD</ref>,                  \
        .temperature_resolution     = <ref refid="group__drivers_1gga67668000949d016e559d46366831972ca28ef676034a8e76374410a20228782fe" kindref="member">HDC1080_TEMPERATURE_RESOLUTION_14BIT</ref>,     \
        .humidity_resolution        = <ref refid="group__drivers_1ggafebf60aee364b0512cc8b5dbc2e4acabaabc33facda545a62722e9afa5fb54eb0" kindref="member">HDC1080_HUMIDITY_RESOLUTION_14BIT</ref>,    }</initializer>
        <briefdescription>
<para>Macro that initializes <computeroutput>i2c_hdc1080_config_t</computeroutput> to default configuration settings. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_hdc1080/include/hdc1080.h" line="68" column="9" bodyfile="components/peripherals/i2c/esp_hdc1080/include/hdc1080.h" bodystart="68" bodyend="72"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga3b6719397ddaeffbb35be4be42f1e29d" prot="public" static="no">
        <name>I2C_HMC5883L_DEV_CLK_SPD</name>
        <initializer>UINT32_C(100000)</initializer>
        <briefdescription>
<para>hmc5883l I2C default clock frequency (100KHz) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_hmc5883l/include/hmc5883l.h" line="52" column="9" bodyfile="components/peripherals/i2c/esp_hmc5883l/include/hmc5883l.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga22f693f1a0eee92189b3d55fc33f21d7" prot="public" static="no">
        <name>I2C_HMC5883L_DEV_ADDR</name>
        <initializer>UINT8_C(0x1e)</initializer>
        <briefdescription>
<para>hmc5883l I2C address when ADDR pin floating/low </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_hmc5883l/include/hmc5883l.h" line="54" column="9" bodyfile="components/peripherals/i2c/esp_hmc5883l/include/hmc5883l.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga90c8e7d8c3b6158111d7b35d1a8fec50" prot="public" static="no">
        <name>I2C_XFR_TIMEOUT_MS</name>
        <initializer>(500)</initializer>
        <briefdescription>
<para>I2C transaction timeout in milliseconds. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_hmc5883l/include/hmc5883l.h" line="56" column="9" bodyfile="components/peripherals/i2c/esp_hmc5883l/include/hmc5883l.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga872065d70ae11b283f8b26960efa4cb6" prot="public" static="no">
        <name>I2C_HMC5883L_CONFIG_DEFAULT</name>
        <initializer>        {                                   \
        .i2c_address                    = <ref refid="group__drivers_1ga22f693f1a0eee92189b3d55fc33f21d7" kindref="member">I2C_HMC5883L_DEV_ADDR</ref>,        \
        .i2c_clock_speed                = <ref refid="group__drivers_1ga3b6719397ddaeffbb35be4be42f1e29d" kindref="member">I2C_HMC5883L_DEV_CLK_SPD</ref>,     \
        .mode                           = <ref refid="group__drivers_1gga5f5de977bcf14d5aeacedd4c8367dd2fad480e6b2a4718df08a15bd1a35e01dba" kindref="member">HMC5883L_MODE_CONTINUOUS</ref>, \
        .sample                         = <ref refid="group__drivers_1gga9231bcbd7f72cf02258e1fc5e51d2fdca01b4d8e0fe0869c202d59e4474ba1512" kindref="member">HMC5883L_SAMPLE_4</ref>,        \
        .rate                           = <ref refid="group__drivers_1ggab3a3115db483560ccfcbb2329d4bc910a12f27f5dafa214aaedf4cec43e26b595" kindref="member">HMC5883L_DATA_RATE_15_00</ref>, \
        .gain                           = <ref refid="group__drivers_1ggab5113b8281f21e348730a6ac2db59627a1a7dd4a5b0288e8ddf45398f1b35583d" kindref="member">HMC5883L_GAIN_390</ref>,        \
        .bias                           = <ref refid="group__drivers_1ggadaf60b6050a6e8a19038b8950d3e5bf7a6ff9a24c7caefaa6478a17fbbc1ec132" kindref="member">HMC5883L_BIAS_NORMAL</ref>,     \
        .declination                    = -16.0f }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_hmc5883l/include/hmc5883l.h" line="61" column="9" bodyfile="components/peripherals/i2c/esp_hmc5883l/include/hmc5883l.h" bodystart="61" bodyend="69"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga66d1cad7c693e0c6cb4c3d5a4a296083" prot="public" static="no">
        <name>I2C_INA226_DEV_CLK_SPD</name>
        <initializer>UINT32_C(100000)</initializer>
        <briefdescription>
<para>ina226 I2C default clock frequency (100KHz) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ina226/include/ina226.h" line="53" column="9" bodyfile="components/peripherals/i2c/esp_ina226/include/ina226.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga3fa5ddc0f501ef9b38891eb9261df91a" prot="public" static="no">
        <name>I2C_INA226_ADDR_GND_GND</name>
        <initializer>UINT8_C(0x40)</initializer>
        <briefdescription>
<para>ina226 I2C address, A1 pin - GND, A0 pin - GND </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ina226/include/ina226.h" line="55" column="9" bodyfile="components/peripherals/i2c/esp_ina226/include/ina226.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1gabb75fad4789bdf0a5626bbce8e79840b" prot="public" static="no">
        <name>I2C_INA226_ADDR_GND_VS</name>
        <initializer>UINT8_C(0x41)</initializer>
        <briefdescription>
<para>ina226 I2C address, A1 pin - GND, A0 pin - VS+ </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ina226/include/ina226.h" line="56" column="9" bodyfile="components/peripherals/i2c/esp_ina226/include/ina226.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1gacc4308b03267791c103e05ffa4ca1a7f" prot="public" static="no">
        <name>I2C_INA226_ADDR_GND_SDA</name>
        <initializer>UINT8_C(0x42)</initializer>
        <briefdescription>
<para>ina226 I2C address, A1 pin - GND, A0 pin - SDA </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ina226/include/ina226.h" line="57" column="9" bodyfile="components/peripherals/i2c/esp_ina226/include/ina226.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga15e7b1c115c30ec4703720500f3e9b0b" prot="public" static="no">
        <name>I2C_INA226_ADDR_GND_SCL</name>
        <initializer>UINT8_C(0x43)</initializer>
        <briefdescription>
<para>ina226 I2C address, A1 pin - GND, A0 pin - SCL </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ina226/include/ina226.h" line="58" column="9" bodyfile="components/peripherals/i2c/esp_ina226/include/ina226.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga3540c291ede07fefba487557aee0fabd" prot="public" static="no">
        <name>I2C_INA226_ADDR_VS_GND</name>
        <initializer>UINT8_C(0x44)</initializer>
        <briefdescription>
<para>ina226 I2C address, A1 pin - VS+, A0 pin - GND </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ina226/include/ina226.h" line="59" column="9" bodyfile="components/peripherals/i2c/esp_ina226/include/ina226.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1gae5dc28849473a7febf0495e870d2510a" prot="public" static="no">
        <name>I2C_INA226_ADDR_VS_VS</name>
        <initializer>UINT8_C(0x45)</initializer>
        <briefdescription>
<para>ina226 I2C address, A1 pin - VS+, A0 pin - VS+ </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ina226/include/ina226.h" line="60" column="9" bodyfile="components/peripherals/i2c/esp_ina226/include/ina226.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga2c412a20e2d3025a0ce57a0c61a2d96e" prot="public" static="no">
        <name>I2C_INA226_ADDR_VS_SDA</name>
        <initializer>UINT8_C(0x46)</initializer>
        <briefdescription>
<para>ina226 I2C address, A1 pin - VS+, A0 pin - SDA </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ina226/include/ina226.h" line="61" column="9" bodyfile="components/peripherals/i2c/esp_ina226/include/ina226.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga04169aa087af270fddef6b513e783ad4" prot="public" static="no">
        <name>I2C_INA226_ADDR_VS_SCL</name>
        <initializer>UINT8_C(0x47)</initializer>
        <briefdescription>
<para>ina226 I2C address, A1 pin - VS+, A0 pin - SCL </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ina226/include/ina226.h" line="62" column="9" bodyfile="components/peripherals/i2c/esp_ina226/include/ina226.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1gaf80f8467d6d7cf6aa23329679ee13234" prot="public" static="no">
        <name>I2C_INA226_ADDR_SDA_GND</name>
        <initializer>UINT8_C(0x48)</initializer>
        <briefdescription>
<para>ina226 I2C address, A1 pin - SDA, A0 pin - GND </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ina226/include/ina226.h" line="63" column="9" bodyfile="components/peripherals/i2c/esp_ina226/include/ina226.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga197456d4a6466107990e5a4e79d147a9" prot="public" static="no">
        <name>I2C_INA226_ADDR_SDA_VS</name>
        <initializer>UINT8_C(0x49)</initializer>
        <briefdescription>
<para>ina226 I2C address, A1 pin - SDA, A0 pin - VS+ </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ina226/include/ina226.h" line="64" column="9" bodyfile="components/peripherals/i2c/esp_ina226/include/ina226.h" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1gaf1319353544a18432195d2f1369572d6" prot="public" static="no">
        <name>I2C_INA226_ADDR_SDA_SDA</name>
        <initializer>UINT8_C(0x4a)</initializer>
        <briefdescription>
<para>ina226 I2C address, A1 pin - SDA, A0 pin - SDA </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ina226/include/ina226.h" line="65" column="9" bodyfile="components/peripherals/i2c/esp_ina226/include/ina226.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga3075ed08edad12a4bd138fd03dadca7e" prot="public" static="no">
        <name>I2C_INA226_ADDR_SDA_SCL</name>
        <initializer>UINT8_C(0x4b)</initializer>
        <briefdescription>
<para>ina226 I2C address, A1 pin - SDA, A0 pin - SCL </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ina226/include/ina226.h" line="66" column="9" bodyfile="components/peripherals/i2c/esp_ina226/include/ina226.h" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga518117172f035dd25a741f9f79768751" prot="public" static="no">
        <name>I2C_INA226_ADDR_SCL_GND</name>
        <initializer>UINT8_C(0x4c)</initializer>
        <briefdescription>
<para>ina226 I2C address, A1 pin - SCL, A0 pin - GND </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ina226/include/ina226.h" line="67" column="9" bodyfile="components/peripherals/i2c/esp_ina226/include/ina226.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga1f6b604f4fb2d9a4bddec1482c0e3835" prot="public" static="no">
        <name>I2C_INA226_ADDR_SCL_VS</name>
        <initializer>UINT8_C(0x4d)</initializer>
        <briefdescription>
<para>ina226 I2C address, A1 pin - SCL, A0 pin - VS+ </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ina226/include/ina226.h" line="68" column="9" bodyfile="components/peripherals/i2c/esp_ina226/include/ina226.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga7c8c34144f0c5926fed6977f52e40fe0" prot="public" static="no">
        <name>I2C_INA226_ADDR_SCL_SDA</name>
        <initializer>UINT8_C(0x4e)</initializer>
        <briefdescription>
<para>ina226 I2C address, A1 pin - SCL, A0 pin - SDA </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ina226/include/ina226.h" line="69" column="9" bodyfile="components/peripherals/i2c/esp_ina226/include/ina226.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1gada941bb5334f71359aee08177238a17c" prot="public" static="no">
        <name>I2C_INA226_ADDR_SCL_SCL</name>
        <initializer>UINT8_C(0x4f)</initializer>
        <briefdescription>
<para>ina226 I2C address, A1 pin - SCL, A0 pin - SCL </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ina226/include/ina226.h" line="70" column="9" bodyfile="components/peripherals/i2c/esp_ina226/include/ina226.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga90c8e7d8c3b6158111d7b35d1a8fec50" prot="public" static="no">
        <name>I2C_XFR_TIMEOUT_MS</name>
        <initializer>(500)</initializer>
        <briefdescription>
<para>I2C transaction timeout in milliseconds. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ina226/include/ina226.h" line="72" column="9" bodyfile="components/peripherals/i2c/esp_ina226/include/ina226.h" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga2c3581c4233795efd735d2653907ee74" prot="public" static="no">
        <name>I2C_INA226_CONFIG_DEFAULT</name>
        <initializer>    {                                     \
    .i2c_address                = <ref refid="group__drivers_1ga3fa5ddc0f501ef9b38891eb9261df91a" kindref="member">I2C_INA226_ADDR_GND_GND</ref>,              \
    .i2c_clock_speed            = <ref refid="group__drivers_1ga66d1cad7c693e0c6cb4c3d5a4a296083" kindref="member">I2C_INA226_DEV_CLK_SPD</ref>,               \
    .averaging_mode             = <ref refid="group__drivers_1gga331987c52263d3232c0355c54284a98ca63e4883a131990d4884d11274ff2584c" kindref="member">INA226_AVG_MODE_1</ref>,                    \
    .shunt_voltage_conv_time    = <ref refid="group__drivers_1gga0ff2d17cdd65de6c48164da40f545f30ad1265344ea7f32c52958b4d4a25d69be" kindref="member">INA226_VOLT_CONV_TIME_1_1MS</ref>,          \
    .bus_voltage_conv_time      = <ref refid="group__drivers_1gga0ff2d17cdd65de6c48164da40f545f30ad1265344ea7f32c52958b4d4a25d69be" kindref="member">INA226_VOLT_CONV_TIME_1_1MS</ref>,          \
    .operating_mode             = <ref refid="group__drivers_1gga5a5218c9d32b83def8dc014eb623dcb8a90d9863cfc37473007339c7934a08278" kindref="member">INA226_OP_MODE_CONT_SHUNT_BUS</ref>,        \
    .shunt_resistance           = 0.002,                                \
    .max_current                = 0.5                                   \
    }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ina226/include/ina226.h" line="96" column="9" bodyfile="components/peripherals/i2c/esp_ina226/include/ina226.h" bodystart="96" bodyend="105"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1gafad3eae68938f61c62e14d62980cc932" prot="public" static="no">
        <name>I2C_LTR390UV_DEV_CLK_SPD</name>
        <initializer>UINT32_C(100000)</initializer>
        <briefdescription>
<para>ltr390uv I2C default clock frequency (100KHz) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" line="58" column="9" bodyfile="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1gab82399ea62e4aff9bdf358a86efc9e7d" prot="public" static="no">
        <name>I2C_LTR390UV_DEV_ADDR</name>
        <initializer>UINT8_C(0x53)</initializer>
        <briefdescription>
<para>ltr390uv I2C address </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" line="60" column="9" bodyfile="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga90c8e7d8c3b6158111d7b35d1a8fec50" prot="public" static="no">
        <name>I2C_XFR_TIMEOUT_MS</name>
        <initializer>(500)</initializer>
        <briefdescription>
<para>I2C transaction timeout in milliseconds. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" line="62" column="9" bodyfile="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1gafa996d8535caa255cd9ca6bb3bd1e6f4" prot="public" static="no">
        <name>I2C_LTR390UV_CONFIG_DEFAULT</name>
        <initializer>    {                       \
    .i2c_address               = <ref refid="group__drivers_1gab82399ea62e4aff9bdf358a86efc9e7d" kindref="member">I2C_LTR390UV_DEV_ADDR</ref>,     \
    .i2c_clock_speed           = <ref refid="group__drivers_1gafad3eae68938f61c62e14d62980cc932" kindref="member">I2C_LTR390UV_DEV_CLK_SPD</ref>,  \
    .window_factor             = 1,                         \
    .als_sensor_resolution     = <ref refid="group__drivers_1gga7aa7abb83bd1c9c3c8c9aa98d37b1248a8a08abe0fd2ae3808e7107c7e8e73ed4" kindref="member">LTR390UV_SR_18BIT</ref>,         \
    .als_measurement_rate      = <ref refid="group__drivers_1gga763aecfa1b468ef300d966da552be213a00fdeefcd13123ebf902a1bdfd5556f3" kindref="member">LTR390UV_MR_100MS</ref>,         \
    .als_measurement_gain      = <ref refid="group__drivers_1gga240bac95531dbc35edc64da1ca0a84b3a631c2a196edbcafd5a4a23c4786c323f" kindref="member">LTR390UV_MG_X3</ref>,            \
    .uvs_sensor_resolution     = <ref refid="group__drivers_1gga7aa7abb83bd1c9c3c8c9aa98d37b1248a8a08abe0fd2ae3808e7107c7e8e73ed4" kindref="member">LTR390UV_SR_18BIT</ref>,         \
    .uvs_measurement_rate      = <ref refid="group__drivers_1gga763aecfa1b468ef300d966da552be213a00fdeefcd13123ebf902a1bdfd5556f3" kindref="member">LTR390UV_MR_100MS</ref>,         \
    .uvs_measurement_gain      = <ref refid="group__drivers_1gga240bac95531dbc35edc64da1ca0a84b3a631c2a196edbcafd5a4a23c4786c323f" kindref="member">LTR390UV_MG_X3</ref>,            }</initializer>
        <briefdescription>
<para>Macro that initializes <computeroutput><ref refid="group__drivers_1gaf416c36c716812bdd1e7270f706cb3b9" kindref="member">ltr390uv_config_t</ref></computeroutput> to default configuration settings. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" line="72" column="9" bodyfile="components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" bodystart="72" bodyend="81"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1gacf3e7b553897765471a47bd83c3721da" prot="public" static="no">
        <name>I2C_MAX30105_DEV_CLK_SPD</name>
        <initializer>UINT32_C(100000)</initializer>
        <briefdescription>
<para>max30105 I2C default clock frequency (100KHz) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_max30105/include/max30105.h" line="52" column="9" bodyfile="components/peripherals/i2c/esp_max30105/include/max30105.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1gade3df9b0e1b0677d2169700513e5c689" prot="public" static="no">
        <name>I2C_MAX30105_DEV_ADDR</name>
        <initializer>UINT8_C(0x38)</initializer>
        <briefdescription>
<para>max30105 I2C address </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_max30105/include/max30105.h" line="54" column="9" bodyfile="components/peripherals/i2c/esp_max30105/include/max30105.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga90c8e7d8c3b6158111d7b35d1a8fec50" prot="public" static="no">
        <name>I2C_XFR_TIMEOUT_MS</name>
        <initializer>(500)</initializer>
        <briefdescription>
<para>I2C transaction timeout in milliseconds. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_max30105/include/max30105.h" line="56" column="9" bodyfile="components/peripherals/i2c/esp_max30105/include/max30105.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1gadd59f6adc5a3d114f55cf5e313df936a" prot="public" static="no">
        <name>I2C_MAX30105_CONFIG_DEFAULT</name>
        <initializer>    {                   \
    .i2c_address            = <ref refid="group__drivers_1gade3df9b0e1b0677d2169700513e5c689" kindref="member">I2C_MAX30105_DEV_ADDR</ref>,    \
    .i2c_clock_speed        = <ref refid="group__drivers_1gacf3e7b553897765471a47bd83c3721da" kindref="member">I2C_MAX30105_DEV_CLK_SPD</ref>, \
    }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_max30105/include/max30105.h" line="62" column="9" bodyfile="components/peripherals/i2c/esp_max30105/include/max30105.h" bodystart="62" bodyend="65"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1gab275c756cdad22c88541a496b0f94d87" prot="public" static="no">
        <name>I2C_MLX90614_DEV_CLK_SPD</name>
        <initializer>UINT32_C(100000)</initializer>
        <briefdescription>
<para>mlx90614 I2C default clock frequency (100KHz) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" line="55" column="9" bodyfile="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga232c57db5398601161a3ea0c6406b305" prot="public" static="no">
        <name>I2C_MLX90614_DEV_ADDR</name>
        <initializer>UINT8_C(0x5A)</initializer>
        <briefdescription>
<para>mlx90614 I2C address when ADDR pin floating/low </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" line="56" column="9" bodyfile="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga90c8e7d8c3b6158111d7b35d1a8fec50" prot="public" static="no">
        <name>I2C_XFR_TIMEOUT_MS</name>
        <initializer>(500)</initializer>
        <briefdescription>
<para>I2C transaction timeout in milliseconds. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" line="58" column="9" bodyfile="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga7328ea23920197e3b2dc0062c8d891c8" prot="public" static="no">
        <name>I2C_MLX90614_CONFIG_DEFAULT</name>
        <initializer>        {                        \
        .i2c_address            = <ref refid="group__drivers_1ga232c57db5398601161a3ea0c6406b305" kindref="member">I2C_MLX90614_DEV_ADDR</ref>,     \
        .i2c_clock_speed        = <ref refid="group__drivers_1gab275c756cdad22c88541a496b0f94d87" kindref="member">I2C_MLX90614_DEV_CLK_SPD</ref> }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" line="64" column="9" bodyfile="components/peripherals/i2c/esp_mlx90614/include/mlx90614.h" bodystart="64" bodyend="66"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga0e974bdfbde8a2f7078a6f4692c9bc9d" prot="public" static="no">
        <name>I2C_MMC56X3_DEV_CLK_SPD</name>
        <initializer>UINT32_C(100000)</initializer>
        <briefdescription>
<para>mmc56x3 I2C default clock frequency (100KHz) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mmc56x3/include/mmc56x3.h" line="52" column="9" bodyfile="components/peripherals/i2c/esp_mmc56x3/include/mmc56x3.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga0ee101cf41be46df59b782fe2bd13326" prot="public" static="no">
        <name>I2C_MMC56X3_DEV_ADDR</name>
        <initializer>UINT8_C(0x30)</initializer>
        <briefdescription>
<para>mmc56x3 I2C address </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mmc56x3/include/mmc56x3.h" line="54" column="9" bodyfile="components/peripherals/i2c/esp_mmc56x3/include/mmc56x3.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga90c8e7d8c3b6158111d7b35d1a8fec50" prot="public" static="no">
        <name>I2C_XFR_TIMEOUT_MS</name>
        <initializer>(500)</initializer>
        <briefdescription>
<para>I2C transaction timeout in milliseconds. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mmc56x3/include/mmc56x3.h" line="56" column="9" bodyfile="components/peripherals/i2c/esp_mmc56x3/include/mmc56x3.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga4ec238b9dd3974e34a91847a5917ff13" prot="public" static="no">
        <name>I2C_MMC56X3_CONFIG_DEFAULT</name>
        <initializer>        {                                 \
        .i2c_address                    = <ref refid="group__drivers_1ga0ee101cf41be46df59b782fe2bd13326" kindref="member">I2C_MMC56X3_DEV_ADDR</ref>,      \
        .i2c_clock_speed                = <ref refid="group__drivers_1ga0e974bdfbde8a2f7078a6f4692c9bc9d" kindref="member">I2C_MMC56X3_DEV_CLK_SPD</ref>,   \
        .data_rate                      = 0,                         \
        .continuous_mode_enabled        = false,                     \
        .declination                    = -16.0f }</initializer>
        <briefdescription>
<para>Macro that initializes <computeroutput><ref refid="group__drivers_1gace8f7bf433f0bfc89754ddbfb7a7d2d3" kindref="member">mmc56x3_config_t</ref></computeroutput> to default configuration settings. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mmc56x3/include/mmc56x3.h" line="66" column="9" bodyfile="components/peripherals/i2c/esp_mmc56x3/include/mmc56x3.h" bodystart="66" bodyend="71"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga83a9bb9cea41b03199238c73d92906a4" prot="public" static="no">
        <name>I2C_MPU6050_DEV_CLK_SPD</name>
        <initializer>UINT32_C(100000)</initializer>
        <briefdescription>
<para>mpu6050 I2C default clock frequency (100KHz) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" line="53" column="9" bodyfile="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga4b03fe60bf8d8cc924bf639ad145deed" prot="public" static="no">
        <name>I2C_MPU6050_DEV_ADDR_H</name>
        <initializer>UINT8_C(0x69)</initializer>
        <briefdescription>
<para>mpu6050 I2C address when AD0 = 1 or to vcc </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" line="55" column="9" bodyfile="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga51d79a9d1356ec57d2ef87d406616fc6" prot="public" static="no">
        <name>I2C_MPU6050_DEV_ADDR_L</name>
        <initializer>UINT8_C(0x68)</initializer>
        <briefdescription>
<para>mpu6050 I2C address when AD0 = 0 or to gnd </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" line="56" column="9" bodyfile="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga90c8e7d8c3b6158111d7b35d1a8fec50" prot="public" static="no">
        <name>I2C_XFR_TIMEOUT_MS</name>
        <initializer>(500)</initializer>
        <briefdescription>
<para>I2C transaction timeout in milliseconds. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" line="58" column="9" bodyfile="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga6bbaf1b39e591fa49ca558b038a34fab" prot="public" static="no">
        <name>I2C_MPU6050_CONFIG_DEFAULT</name>
        <initializer>    {                        \
    .i2c_address                = <ref refid="group__drivers_1ga51d79a9d1356ec57d2ef87d406616fc6" kindref="member">I2C_MPU6050_DEV_ADDR_L</ref>,        \
    .i2c_clock_speed            = <ref refid="group__drivers_1ga83a9bb9cea41b03199238c73d92906a4" kindref="member">I2C_MPU6050_DEV_CLK_SPD</ref>,             \
    .low_pass_filter            = <ref refid="group__drivers_1ggad454686cba9d58e8e6dc020f42df7302aec6f0920d07720a1d373ce80aefb9abd" kindref="member">MPU6050_DIGITAL_LP_FILTER_ACCEL_260KHZ_GYRO_256KHZ</ref>,    \
    .gyro_clock_source          = <ref refid="group__drivers_1ggaf48aed66889785fbd5707f8b9581cec2ae9c01646b282b1776c48d6db37bcce15" kindref="member">MPU6050_GYRO_CS_PLL_X_AXIS_REF</ref>,   \
    .gyro_full_scale_range      = <ref refid="group__drivers_1ggadc5bc45ff9daba6efbdfdd49ae8c98e1a3eed49608367524b44192bdb585e3b6c" kindref="member">MPU6050_GYRO_FS_RANGE_500DPS</ref>,     \
    .accel_full_scale_range     = <ref refid="group__drivers_1ggafdfc70c10ee16636fbeb7a5ca3f0b326a8327b2d64c66cde486cc22f2817e82eb" kindref="member">MPU6050_ACCEL_FS_RANGE_4G</ref> }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" line="64" column="9" bodyfile="components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" bodystart="64" bodyend="70"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1gafb547b4d4ed164690e1983e3adde69a6" prot="public" static="no">
        <name>I2C_SGP4X_DEV_CLK_SPD</name>
        <initializer>UINT32_C(100000)</initializer>
        <briefdescription>
<para>sgp4x I2C default clock frequency (100KHz) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_sgp4x/include/sgp4x.h" line="53" column="9" bodyfile="components/peripherals/i2c/esp_sgp4x/include/sgp4x.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga23e755ac5f241adafb724d7970d2725d" prot="public" static="no">
        <name>I2C_SGP4X_DEV_ADDR</name>
        <initializer>UINT8_C(0x59)</initializer>
        <briefdescription>
<para>sgp4x I2C address </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_sgp4x/include/sgp4x.h" line="55" column="9" bodyfile="components/peripherals/i2c/esp_sgp4x/include/sgp4x.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga0382382bb6f45ac5247eb66f95de7d58" prot="public" static="no">
        <name>I2C_SGP4X_XFR_TIMEOUT_MS</name>
        <initializer>(500)</initializer>
        <briefdescription>
<para>I2C transaction timeout in milliseconds. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_sgp4x/include/sgp4x.h" line="57" column="9" bodyfile="components/peripherals/i2c/esp_sgp4x/include/sgp4x.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga5740bccde801d90d1b16127b61f2200d" prot="public" static="no">
        <name>I2C_SGP41_CONFIG_DEFAULT</name>
        <initializer>    {                   \
    .i2c_address        = <ref refid="group__drivers_1ga23e755ac5f241adafb724d7970d2725d" kindref="member">I2C_SGP4X_DEV_ADDR</ref>,        \
    .i2c_clock_speed    = <ref refid="group__drivers_1gafb547b4d4ed164690e1983e3adde69a6" kindref="member">I2C_SGP4X_DEV_CLK_SPD</ref>,     \
    .dev_version        = SGP4X_VERSION_SGP41 }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_sgp4x/include/sgp4x.h" line="62" column="9" bodyfile="components/peripherals/i2c/esp_sgp4x/include/sgp4x.h" bodystart="62" bodyend="65"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga97ee7016549a63f15305a591d4d1c130" prot="public" static="no">
        <name>I2C_SHT4X_DEV_CLK_SPD</name>
        <initializer>UINT32_C(100000)</initializer>
        <briefdescription>
<para>sht4x i2c default scl clock frequency (100KHz) </para>
        </briefdescription>
        <detaileddescription>
<para>dependency includes public constant definitions </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_sht4x/include/sht4x.h" line="57" column="9" bodyfile="components/peripherals/i2c/esp_sht4x/include/sht4x.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga701baea873149a985ffcb4ea78dfe107" prot="public" static="no">
        <name>I2C_SHT4X_DEV_ADDR_LO</name>
        <initializer>UINT8_C(0x44)</initializer>
        <briefdescription>
<para>sht4x i2c address when ADDR pin floating/low </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_sht4x/include/sht4x.h" line="59" column="9" bodyfile="components/peripherals/i2c/esp_sht4x/include/sht4x.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1gaa148a273ac93194439a4e8076d2fa66d" prot="public" static="no">
        <name>I2C_SHT4X_DEV_ADDR_HI</name>
        <initializer>UINT8_C(0x45)</initializer>
        <briefdescription>
<para>sht4x i2c address when ADDR pin high </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_sht4x/include/sht4x.h" line="60" column="9" bodyfile="components/peripherals/i2c/esp_sht4x/include/sht4x.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga90c8e7d8c3b6158111d7b35d1a8fec50" prot="public" static="no">
        <name>I2C_XFR_TIMEOUT_MS</name>
        <initializer>(500)</initializer>
        <briefdescription>
<para>I2C transaction timeout in milliseconds. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_sht4x/include/sht4x.h" line="62" column="9" bodyfile="components/peripherals/i2c/esp_sht4x/include/sht4x.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga3fd670aa7f05d6a67ef70f30f4b02fcb" prot="public" static="no">
        <name>I2C_SHT4X_CONFIG_DEFAULT</name>
        <initializer>        {                      \
        .i2c_address    = <ref refid="group__drivers_1ga701baea873149a985ffcb4ea78dfe107" kindref="member">I2C_SHT4X_DEV_ADDR_LO</ref>,        \
        .i2c_clock_speed= <ref refid="group__drivers_1ga97ee7016549a63f15305a591d4d1c130" kindref="member">I2C_SHT4X_DEV_CLK_SPD</ref>,        \
        .heater_mode    = <ref refid="group__drivers_1ggabdae5ef8438d30d79eb2d817cff393f5ae1759d62c6282914ff338f90c4fa78a2" kindref="member">SHT4X_HEATER_OFF</ref>,             \
        .repeat_mode    = <ref refid="group__drivers_1gga4302f128b226e236bedc8d9347c6c0dba759060ab31ac2e2a5b069d8355a6d5cc" kindref="member">SHT4X_REPEAT_HIGH</ref>, }</initializer>
        <briefdescription>
<para>Macro that initializes <computeroutput>i2c_sht4x_config_t</computeroutput> to default configuration settings. </para>
        </briefdescription>
        <detaileddescription>
<para>public macro definitions </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_sht4x/include/sht4x.h" line="71" column="9" bodyfile="components/peripherals/i2c/esp_sht4x/include/sht4x.h" bodystart="71" bodyend="75"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1gafebc974a94a54e83bfd34a81a9026306" prot="public" static="no">
        <name>FONT_LATIN_8x8_COLS_SIZE</name>
        <initializer>8</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ssd1306/include/font_latin_8x8.h" line="100" column="9" bodyfile="components/peripherals/i2c/esp_ssd1306/include/font_latin_8x8.h" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga4b4eb9210d82dbb8c24709c5cc3d9a79" prot="public" static="no">
        <name>FONT_LATIN_8x8_ROWS_SIZE</name>
        <initializer>256</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ssd1306/include/font_latin_8x8.h" line="101" column="9" bodyfile="components/peripherals/i2c/esp_ssd1306/include/font_latin_8x8.h" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga19581c041c5131137a2e65b0ac4e0d2d" prot="public" static="no">
        <name>I2C_SSD1306_DEV_CLK_SPD</name>
        <initializer>UINT32_C(100000)</initializer>
        <briefdescription>
<para>ssd1306 I2C default clock frequency (100KHz) </para>
        </briefdescription>
        <detaileddescription>
<para>dependency includes public constant definitions </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" line="57" column="9" bodyfile="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga19462d0e9e8771f6ee1d668cb1f094df" prot="public" static="no">
        <name>I2C_SSD1306_DEV_ADDR</name>
        <initializer>UINT8_C(0x3c)</initializer>
        <briefdescription>
<para>ssd1306 I2C address </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" line="59" column="9" bodyfile="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga90c8e7d8c3b6158111d7b35d1a8fec50" prot="public" static="no">
        <name>I2C_XFR_TIMEOUT_MS</name>
        <initializer>(500)</initializer>
        <briefdescription>
<para>I2C transaction timeout in milliseconds. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" line="61" column="9" bodyfile="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga8d6b970529ad7b54468972c97d4a90eb" prot="public" static="no">
        <name>SSD1306_PAGE_SEGMENT_SIZE</name>
        <initializer>128</initializer>
        <briefdescription>
<para>ssd1306 segment size </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" line="64" column="9" bodyfile="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga851e3d558c61024ccbe9f8c1ec2510b0" prot="public" static="no">
        <name>SSD1306_PAGE_128x32_SIZE</name>
        <initializer>4</initializer>
        <briefdescription>
<para>ssd1306 128x32 page size </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" line="65" column="9" bodyfile="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1gaddef6f645e4ce97f319446f0097f9ab5" prot="public" static="no">
        <name>SSD1306_PAGE_128x64_SIZE</name>
        <initializer>8</initializer>
        <briefdescription>
<para>ssd1306 128x64 page size </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" line="66" column="9" bodyfile="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga5ff36484e54db1f1b37feb7f768cdb49" prot="public" static="no">
        <name>SSD1306_PAGE_128x128_SIZE</name>
        <initializer>16</initializer>
        <briefdescription>
<para>ssd1306 128x128 page size </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" line="67" column="9" bodyfile="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga324d350d1ce208cc37d5de5c519661e5" prot="public" static="no">
        <name>SSD1306_PANEL_128x32_WIDTH</name>
        <initializer>128</initializer>
        <briefdescription>
<para>ssd1306 128x32 panel width </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" line="69" column="9" bodyfile="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga181fed5c06044c6b100872fe4ae5b08e" prot="public" static="no">
        <name>SSD1306_PANEL_128x64_WIDTH</name>
        <initializer>128</initializer>
        <briefdescription>
<para>ssd1306 128x64 panel width </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" line="70" column="9" bodyfile="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1gaae186ca5231dfad59b57128989c59dd4" prot="public" static="no">
        <name>SSD1306_PANEL_128x128_WIDTH</name>
        <initializer>128</initializer>
        <briefdescription>
<para>ssd1306 128x128 panel width </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" line="71" column="9" bodyfile="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1gabbaad9f733400fd5a33d037c37a21cfe" prot="public" static="no">
        <name>SSD1306_PANEL_128x32_HEIGHT</name>
        <initializer>32</initializer>
        <briefdescription>
<para>ssd1306 128x32 panel height </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" line="73" column="9" bodyfile="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga476e429e940be0c8beefd7b25d04fd7a" prot="public" static="no">
        <name>SSD1306_PANEL_128x64_HEIGHT</name>
        <initializer>64</initializer>
        <briefdescription>
<para>ssd1306 128x64 panel height </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" line="74" column="9" bodyfile="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1gaf0d79a59b5f6e483d64045eb9dfde994" prot="public" static="no">
        <name>SSD1306_PANEL_128x128_HEIGHT</name>
        <initializer>128</initializer>
        <briefdescription>
<para>ssd1306 128x128 panel height </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" line="75" column="9" bodyfile="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1gad255fedc81ff1514dc95d375229e2fee" prot="public" static="no">
        <name>I2C_SSD1306_128x32_CONFIG_DEFAULT</name>
        <initializer>    {				\
    .i2c_address  				= <ref refid="group__drivers_1ga19462d0e9e8771f6ee1d668cb1f094df" kindref="member">I2C_SSD1306_DEV_ADDR</ref>,		\
	.i2c_clock_speed    		= <ref refid="group__drivers_1ga19581c041c5131137a2e65b0ac4e0d2d" kindref="member">I2C_SSD1306_DEV_CLK_SPD</ref>,  \
    .panel_size                 = <ref refid="group__drivers_1gga85941c2a1b9163f4a70e01778f7026e5aa55bf7971e79aa2e7b5779eb65762c4e" kindref="member">SSD1306_PANEL_128x32</ref>,	    \
    .offset_x                   = 0,						\
    .flip_enabled               = false }</initializer>
        <briefdescription>
<para>Macro that initializes <computeroutput><ref refid="group__drivers_1gac71b91b4b58813d41ceba1ac27ef9214" kindref="member">ssd1306_config_t</ref></computeroutput> to default configuration settings for a 128x32 display. </para>
        </briefdescription>
        <detaileddescription>
<para>public macro definitions </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" line="84" column="9" bodyfile="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" bodystart="84" bodyend="89"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga4058c2bc49eb1fe09ca026568ec931b1" prot="public" static="no">
        <name>I2C_SSD1306_128x64_CONFIG_DEFAULT</name>
        <initializer>    {				\
    .i2c_address  				= <ref refid="group__drivers_1ga19462d0e9e8771f6ee1d668cb1f094df" kindref="member">I2C_SSD1306_DEV_ADDR</ref>,		\
	.i2c_clock_speed    		= <ref refid="group__drivers_1ga19581c041c5131137a2e65b0ac4e0d2d" kindref="member">I2C_SSD1306_DEV_CLK_SPD</ref>,  \
    .panel_size                 = <ref refid="group__drivers_1gga85941c2a1b9163f4a70e01778f7026e5a302ac4c8da144d757ebd2c588b4ff6ea" kindref="member">SSD1306_PANEL_128x64</ref>,	    \
    .offset_x                   = 0,						\
    .flip_enabled               = false }</initializer>
        <briefdescription>
<para>Macro that initializes <computeroutput><ref refid="group__drivers_1gac71b91b4b58813d41ceba1ac27ef9214" kindref="member">ssd1306_config_t</ref></computeroutput> to default configuration settings for a 128x64 display. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" line="94" column="9" bodyfile="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" bodystart="94" bodyend="99"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga19bd536e54dd33857a643a3ed61fe9f2" prot="public" static="no">
        <name>I2C_SSD1306_128x128_CONFIG_DEFAULT</name>
        <initializer>    {				\
    .i2c_address  				= <ref refid="group__drivers_1ga19462d0e9e8771f6ee1d668cb1f094df" kindref="member">I2C_SSD1306_DEV_ADDR</ref>,		\
	.i2c_clock_speed    		= <ref refid="group__drivers_1ga19581c041c5131137a2e65b0ac4e0d2d" kindref="member">I2C_SSD1306_DEV_CLK_SPD</ref>,  \
    .panel_size                 = <ref refid="group__drivers_1gga85941c2a1b9163f4a70e01778f7026e5a0e344987b6336995c655efa639ad71e4" kindref="member">SSD1306_PANEL_128x128</ref>,	\
    .offset_x                   = 0,						\
    .flip_enabled               = false }</initializer>
        <briefdescription>
<para>Macro that initializes <computeroutput><ref refid="group__drivers_1gac71b91b4b58813d41ceba1ac27ef9214" kindref="member">ssd1306_config_t</ref></computeroutput> to default configuration settings for a 128x128 display. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" line="104" column="9" bodyfile="components/peripherals/i2c/esp_ssd1306/include/ssd1306.h" bodystart="104" bodyend="109"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1gae83754227ef38281a7601ed84e3cdeb1" prot="public" static="no">
        <name>I2C_TBI2CXXX_DEV_CLK_SPD</name>
        <initializer>UINT32_C(100000)</initializer>
        <briefdescription>
<para>tbi2cxxx I2C default clock frequency (100KHz) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_tbi2cxxx/include/tbi2cxxx.h" line="53" column="9" bodyfile="components/peripherals/i2c/esp_tbi2cxxx/include/tbi2cxxx.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga50a7876f7f2a36dfd099c516087b097c" prot="public" static="no">
        <name>I2C_TBI2CXXX_DEV_ADDR</name>
        <initializer>UINT8_C(0x3a)</initializer>
        <briefdescription>
<para>tbi2cxxx I2C address </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_tbi2cxxx/include/tbi2cxxx.h" line="55" column="9" bodyfile="components/peripherals/i2c/esp_tbi2cxxx/include/tbi2cxxx.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga90c8e7d8c3b6158111d7b35d1a8fec50" prot="public" static="no">
        <name>I2C_XFR_TIMEOUT_MS</name>
        <initializer>(500)</initializer>
        <briefdescription>
<para>I2C transaction timeout in milliseconds. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_tbi2cxxx/include/tbi2cxxx.h" line="57" column="9" bodyfile="components/peripherals/i2c/esp_tbi2cxxx/include/tbi2cxxx.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1gacedc37d3b55785a72a7c11b7c17c02e7" prot="public" static="no">
        <name>I2C_AHT2X_CONFIG_DEFAULT</name>
        <initializer>    {                  \
    .i2c_address        = <ref refid="group__drivers_1ga50a7876f7f2a36dfd099c516087b097c" kindref="member">I2C_TBI2CXXX_DEV_ADDR</ref>,    \
    .i2c_clock_speed    = <ref refid="group__drivers_1gae83754227ef38281a7601ed84e3cdeb1" kindref="member">I2C_TBI2CXXX_DEV_CLK_SPD</ref>, \
    .tb_type            = TB_I2C_H04 }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_tbi2cxxx/include/tbi2cxxx.h" line="62" column="9" bodyfile="components/peripherals/i2c/esp_tbi2cxxx/include/tbi2cxxx.h" bodystart="62" bodyend="65"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga59dcd7b2db449f67e09a975e06d51b14" prot="public" static="no">
        <name>TBI2CXXX_FW_VERSION_MAJOR</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>public constant definitions Major version number (X.x.x) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_tbi2cxxx/include/tbi2cxxx_version.h" line="49" column="9" bodyfile="components/peripherals/i2c/esp_tbi2cxxx/include/tbi2cxxx_version.h" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga3a41c577fe769ded2450c7ab0d5f2929" prot="public" static="no">
        <name>TBI2CXXX_FW_VERSION_MINOR</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Minor version number (x.X.x) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_tbi2cxxx/include/tbi2cxxx_version.h" line="51" column="9" bodyfile="components/peripherals/i2c/esp_tbi2cxxx/include/tbi2cxxx_version.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1gae8011f9af1b609de66b9f179985776ab" prot="public" static="no">
        <name>TBI2CXXX_FW_VERSION_PATCH</name>
        <initializer>6</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Patch version number (x.x.X) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_tbi2cxxx/include/tbi2cxxx_version.h" line="53" column="9" bodyfile="components/peripherals/i2c/esp_tbi2cxxx/include/tbi2cxxx_version.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga874bb38f037bce19b775ee0d13bbf8c9" prot="public" static="no">
        <name>STR_QUOTES</name>
        <param><defname>x</defname></param>
        <initializer>#x</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>public macro definitions Macro to print x parameter as a string i.e. enclose x in double quotes. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_tbi2cxxx/include/tbi2cxxx_version.h" line="63" column="9" bodyfile="components/peripherals/i2c/esp_tbi2cxxx/include/tbi2cxxx_version.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga18d295a837ac71add5578860b55e5502" prot="public" static="no">
        <name>STR</name>
        <param><defname>x</defname></param>
        <initializer>STR_QUOTES( x )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Macro to create a string of x parameter with all macros fully expanded. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_tbi2cxxx/include/tbi2cxxx_version.h" line="68" column="9" bodyfile="components/peripherals/i2c/esp_tbi2cxxx/include/tbi2cxxx_version.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga0a743668a9f0a8f172b4af4230e82179" prot="public" static="no">
        <name>TBI2CXXX_FW_VERSION_STR</name>
        <initializer>        STR( <ref refid="group__drivers_1ga59dcd7b2db449f67e09a975e06d51b14" kindref="member">TBI2CXXX_FW_VERSION_MAJOR</ref> ) &quot;.&quot; \
        STR( <ref refid="group__drivers_1ga3a41c577fe769ded2450c7ab0d5f2929" kindref="member">TBI2CXXX_FW_VERSION_MINOR</ref> ) &quot;.&quot; \
        STR( <ref refid="group__drivers_1gae8011f9af1b609de66b9f179985776ab" kindref="member">TBI2CXXX_FW_VERSION_PATCH</ref> )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Macro to generate current firmware version numbers (major, minor, patch) into a string that is formatted as X.X.X (e.g. 4.0.0). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_tbi2cxxx/include/tbi2cxxx_version.h" line="73" column="9" bodyfile="components/peripherals/i2c/esp_tbi2cxxx/include/tbi2cxxx_version.h" bodystart="73" bodyend="76"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga780c4f3363a2432ae02e2211b0061c47" prot="public" static="no">
        <name>TBI2CXXX_FW_VERSION_PARAMS_INT32</name>
        <param><defname>major</defname></param>
        <param><defname>minor</defname></param>
        <param><defname>patch</defname></param>
        <initializer>        ((major &lt;&lt; 16) | (minor &lt;&lt; 8) | (patch))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Macro to convert firmware version parameters (major, minor, patch numbers) into an integer (<computeroutput>int32_t</computeroutput>) value that can be used for comparison purposes.</para>
<para>As an example, [COMPONENT]_FW_VERSION_INT32 &gt;= [COMPONENT]_FW_VERSION_PARAMS_INT32(4, 0, 0). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_tbi2cxxx/include/tbi2cxxx_version.h" line="84" column="9" bodyfile="components/peripherals/i2c/esp_tbi2cxxx/include/tbi2cxxx_version.h" bodystart="84" bodyend="85"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1gae3131947f0845aad364fa21118816136" prot="public" static="no">
        <name>TBI2CXXX_FW_VERSION_INT32</name>
        <initializer>        <ref refid="group__drivers_1ga780c4f3363a2432ae02e2211b0061c47" kindref="member">TBI2CXXX_FW_VERSION_PARAMS_INT32</ref>(<ref refid="group__drivers_1ga59dcd7b2db449f67e09a975e06d51b14" kindref="member">TBI2CXXX_FW_VERSION_MAJOR</ref>,   \
                <ref refid="group__drivers_1ga3a41c577fe769ded2450c7ab0d5f2929" kindref="member">TBI2CXXX_FW_VERSION_MINOR</ref>,   \
                <ref refid="group__drivers_1gae8011f9af1b609de66b9f179985776ab" kindref="member">TBI2CXXX_FW_VERSION_PATCH</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Macro to generate current firmware version numbers (major, minor, patch) as an integer (<computeroutput>int32_t</computeroutput>) value that can be used for comparison purposes.</para>
<para>As an example, [COMPONENT]_FW_VERSION_INT32 &gt;= [COMPONENT]_FW_VERSION_PARAMS_INT32(4, 0, 0). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_tbi2cxxx/include/tbi2cxxx_version.h" line="93" column="9" bodyfile="components/peripherals/i2c/esp_tbi2cxxx/include/tbi2cxxx_version.h" bodystart="93" bodyend="96"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1gae4a5a8f18f5ff0ba996b19b806dd9548" prot="public" static="no">
        <name>I2C_TLV493D_DEV_CLK_SPD</name>
        <initializer>UINT32_C(100000)</initializer>
        <briefdescription>
<para>tlv493d I2C default clock frequency (100KHz) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_tlv493d/include/tlv493d.h" line="52" column="9" bodyfile="components/peripherals/i2c/esp_tlv493d/include/tlv493d.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga28978e7e3ef48ca6a35c5cab4ad1e9da" prot="public" static="no">
        <name>I2C_TLV493D_DEV_ADDR_LO</name>
        <initializer>UINT8_C(0x1F)</initializer>
        <briefdescription>
<para>tlv493d I2C address </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_tlv493d/include/tlv493d.h" line="54" column="9" bodyfile="components/peripherals/i2c/esp_tlv493d/include/tlv493d.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga2c4069f4c488febbe2bb3d07382de5eb" prot="public" static="no">
        <name>I2C_TLV493D_DEV_ADDR_HI</name>
        <initializer>UINT8_C(0x5E)</initializer>
        <briefdescription>
<para>tlv493d I2C address </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_tlv493d/include/tlv493d.h" line="55" column="9" bodyfile="components/peripherals/i2c/esp_tlv493d/include/tlv493d.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga90c8e7d8c3b6158111d7b35d1a8fec50" prot="public" static="no">
        <name>I2C_XFR_TIMEOUT_MS</name>
        <initializer>(500)</initializer>
        <briefdescription>
<para>I2C transaction timeout in milliseconds. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_tlv493d/include/tlv493d.h" line="57" column="9" bodyfile="components/peripherals/i2c/esp_tlv493d/include/tlv493d.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1gad171287ac8085f0a188a683075880fde" prot="public" static="no">
        <name>I2C_TLV493D_CONFIG_DEFAULT</name>
        <initializer>    {                                    \
    .i2c_address                = <ref refid="group__drivers_1ga28978e7e3ef48ca6a35c5cab4ad1e9da" kindref="member">I2C_TLV493D_DEV_ADDR_LO</ref>,              \
    .i2c_clock_speed            = <ref refid="group__drivers_1gae4a5a8f18f5ff0ba996b19b806dd9548" kindref="member">I2C_TLV493D_DEV_CLK_SPD</ref>,             \
    .parity_test_enabled        = true,                                 \
    .power_mode                 = <ref refid="group__drivers_1gga43330b906b500291d79752f60652555da947876ba048b07fdd2d6fb2ffc1fec72" kindref="member">TLV493D_LOW_POWER_MODE</ref>,   \
    .irq_pin_enabled            = true }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_tlv493d/include/tlv493d.h" line="62" column="9" bodyfile="components/peripherals/i2c/esp_tlv493d/include/tlv493d.h" bodystart="62" bodyend="67"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga1dc158643dd1d5055dedcab81c88d3c7" prot="public" static="no">
        <name>I2C_VEML6040_DEV_CLK_SPD</name>
        <initializer>UINT32_C(100000)</initializer>
        <briefdescription>
<para>veml6040 I2C default clock frequency (100KHz) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_veml6040/include/veml6040.h" line="52" column="9" bodyfile="components/peripherals/i2c/esp_veml6040/include/veml6040.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga5610269196cf011d1ffb17d8b5157f51" prot="public" static="no">
        <name>I2C_VEML6040_DEV_ADDR</name>
        <initializer>UINT8_C(0x10)</initializer>
        <briefdescription>
<para>veml6040 I2C address </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_veml6040/include/veml6040.h" line="54" column="9" bodyfile="components/peripherals/i2c/esp_veml6040/include/veml6040.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga90c8e7d8c3b6158111d7b35d1a8fec50" prot="public" static="no">
        <name>I2C_XFR_TIMEOUT_MS</name>
        <initializer>(500)</initializer>
        <briefdescription>
<para>I2C transaction timeout in milliseconds. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_veml6040/include/veml6040.h" line="56" column="9" bodyfile="components/peripherals/i2c/esp_veml6040/include/veml6040.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga71fe78780d4400e657ec568722332940" prot="public" static="no">
        <name>I2C_VEML6040_CONFIG_DEFAULT</name>
        <initializer>            {                                       \
            .i2c_address                = <ref refid="group__drivers_1ga5610269196cf011d1ffb17d8b5157f51" kindref="member">I2C_VEML6040_DEV_ADDR</ref>,            \
            .i2c_clock_speed            = <ref refid="group__drivers_1ga1dc158643dd1d5055dedcab81c88d3c7" kindref="member">I2C_VEML6040_DEV_CLK_SPD</ref>,         \
            .integration_time           = VEML6040_INTEGRATION_TIME_160MS,  \
            .shutdown_enabled           = false,                            \
            .mode                       = <ref refid="group__drivers_1gga0e4af5e35aa466da691135e807831e4ba235d5d10df643a361c9cb66a29c2079f" kindref="member">VEML6040_MODE_AUTO</ref>,               \
            .trigger_method             = <ref refid="group__drivers_1gga58f992449473ea7be7328a63b3125334ae166ad6c78f645e296123d267cae17b5" kindref="member">VEML6040_TRIGGER_NONE</ref>,            \
        }</initializer>
        <briefdescription>
<para>VEML6040 device configuration initialization default macro. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_veml6040/include/veml6040.h" line="65" column="9" bodyfile="components/peripherals/i2c/esp_veml6040/include/veml6040.h" bodystart="65" bodyend="72"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1gaeb5f29ce2be160264d990059edb0495c" prot="public" static="no">
        <name>I2C_VEML7700_DEV_CLK_SPD</name>
        <initializer>UINT32_C(100000)</initializer>
        <briefdescription>
<para>veml7700 I2C default clock frequency (100KHz) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_veml7700/include/veml7700.h" line="52" column="9" bodyfile="components/peripherals/i2c/esp_veml7700/include/veml7700.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga44959a18ff4df1e346af96a7b46c200d" prot="public" static="no">
        <name>I2C_VEML7700_DEV_ADDR</name>
        <initializer>UINT8_C(0x10)</initializer>
        <briefdescription>
<para>veml7700 I2C address </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_veml7700/include/veml7700.h" line="54" column="9" bodyfile="components/peripherals/i2c/esp_veml7700/include/veml7700.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga90c8e7d8c3b6158111d7b35d1a8fec50" prot="public" static="no">
        <name>I2C_XFR_TIMEOUT_MS</name>
        <initializer>(500)</initializer>
        <briefdescription>
<para>I2C transaction timeout in milliseconds. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_veml7700/include/veml7700.h" line="56" column="9" bodyfile="components/peripherals/i2c/esp_veml7700/include/veml7700.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1gaea3380b7ab5255329b7c2ac552bfc000" prot="public" static="no">
        <name>I2C_VEML7700_CONFIG_DEFAULT</name>
        <initializer>            {                                               \
            .i2c_address                = <ref refid="group__drivers_1ga44959a18ff4df1e346af96a7b46c200d" kindref="member">I2C_VEML7700_DEV_ADDR</ref>,                    \
            .i2c_clock_speed            = <ref refid="group__drivers_1gaeb5f29ce2be160264d990059edb0495c" kindref="member">I2C_VEML7700_DEV_CLK_SPD</ref>,                 \
            .gain                       = <ref refid="group__drivers_1ggafa58f8a71ae5eef80d07b8fcf7b2cfdea6eea1a8246afc202c4c70d9f98cc9e34" kindref="member">VEML7700_GAIN_DIV_4</ref>,                      \
            .integration_time           = VEML7700_INTEGRATION_TIME_400MS,          \
            .persistence_protect        = VEML7700_PERSISTENCE_PROTECTION_4,        \
            .irq_enabled                = true,                                     \
            .power_disabled             = false,                                    \
            .power_saving_enabled       = false,                                    \
            .power_saving_mode          = VEML7700_POWER_SAVING_MODE_1 }</initializer>
        <briefdescription>
<para>VEML7700 device configuration initialization default. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_veml7700/include/veml7700.h" line="66" column="9" bodyfile="components/peripherals/i2c/esp_veml7700/include/veml7700.h" bodystart="66" bodyend="75"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga7880a4b605cecbe64f1227fb73bd6ebf" prot="public" static="no">
        <name>OWB_DS18B20_CONFIG_DEFAULT</name>
        <initializer>    {                \
    .resolution      = <ref refid="group__drivers_1ggacf07a98756a425197bfab93e4d170eaca6274d477f2d9d92a62050c3375c361a0" kindref="member">DS18B20_RESOLUTION_10BIT</ref>,    \
    .trigger_enabled = false }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/owb/esp_ds18b20/include/ds18b20.h" line="66" column="9" bodyfile="components/peripherals/owb/esp_ds18b20/include/ds18b20.h" bodystart="66" bodyend="68"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1gab26480a575786ee8b7ba1a0fef301dd1" prot="public" static="no">
        <name>I2C_MAX31865_SCL_SPEED_HZ</name>
        <initializer>UINT32_C(100000)</initializer>
        <briefdescription>
<para>max31865 I2C default clock frequency (100KHz) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/spi/esp_max31865/max31865.h" line="54" column="9" bodyfile="components/peripherals/spi/esp_max31865/max31865.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1gae10b8cdc6e47a84b1a3bb39994e2ad2a" prot="public" static="no">
        <name>SPI_MAX31865_DEV_ADDR</name>
        <initializer>UINT8_C(0x38)</initializer>
        <briefdescription>
<para>max31865 I2C address </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/spi/esp_max31865/max31865.h" line="56" column="9" bodyfile="components/peripherals/spi/esp_max31865/max31865.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga45c8f29942a8359f8976998f270ef207" prot="public" static="no">
        <name>DATATABLE_NAME_MAX_SIZE</name>
        <initializer>(15)</initializer>
        <briefdescription>
<para>15-characters for user-defined table name </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/storage/esp_datalogger/include/datatable.h" line="58" column="9" bodyfile="components/storage/esp_datalogger/include/datatable.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga2cde7d622fb27d22bb1c72ba35fdf356" prot="public" static="no">
        <name>DATATABLE_COLUMN_NAME_SIZE</name>
        <initializer>(15)</initializer>
        <briefdescription>
<para>15-characters for user-defined column name </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/storage/esp_datalogger/include/datatable.h" line="59" column="9" bodyfile="components/storage/esp_datalogger/include/datatable.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga7ada1fdf8db4ff1fa46afff55ca3d2f0" prot="public" static="no">
        <name>DATATABLE_COLUMN_NAME_MAX_SIZE</name>
        <initializer>(25)</initializer>
        <briefdescription>
<para>25-characters for column name </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/storage/esp_datalogger/include/datatable.h" line="60" column="9" bodyfile="components/storage/esp_datalogger/include/datatable.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga36569ba2de27e8a0d79c1d422c7e8010" prot="public" static="no">
        <name>DATATABLE_COLUMNS_MAX</name>
        <initializer>(255)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/storage/esp_datalogger/include/datatable.h" line="61" column="9" bodyfile="components/storage/esp_datalogger/include/datatable.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1gade62cf28d6c0fc0828b6a025f47e3f00" prot="public" static="no">
        <name>DATATABLE_ROWS_MAX</name>
        <initializer>(65535)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/storage/esp_datalogger/include/datatable.h" line="62" column="9" bodyfile="components/storage/esp_datalogger/include/datatable.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga7be3f369469d2f6f4a32afae2fb3b8dd" prot="public" static="no">
        <name>DATATABLE_COLUMN_ID_NAME</name>
        <initializer>&quot;Record ID&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/storage/esp_datalogger/include/datatable.h" line="63" column="9" bodyfile="components/storage/esp_datalogger/include/datatable.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga348ffa858653441c9a79e2c8712b1078" prot="public" static="no">
        <name>DATATABLE_COLUMN_TS_NAME</name>
        <initializer>&quot;TS&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/storage/esp_datalogger/include/datatable.h" line="64" column="9" bodyfile="components/storage/esp_datalogger/include/datatable.h" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga22b50d3ef43611b7f82f75e50f5e3257" prot="public" static="no">
        <name>DATATABLE_COLUMN_TII_SMP_NAME</name>
        <initializer>&quot;_tii_smp&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/storage/esp_datalogger/include/datatable.h" line="65" column="9" bodyfile="components/storage/esp_datalogger/include/datatable.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__drivers_1ga8b58c31e1d559b6327b91dd4e2d6eae5" prot="public" static="no">
        <name>DATATABLE_COLUMN_TII_PRC_NAME</name>
        <initializer>&quot;_tii_prc&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/storage/esp_datalogger/include/datatable.h" line="66" column="9" bodyfile="components/storage/esp_datalogger/include/datatable.h" bodystart="66" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>ESP-IDF driver for guva-s12sd uv sensor</para>
<para>Copyright (c) 2024 Eric Gionet (<ulink url="mailto:gionet.c.eric@gmail.com">gionet.c.eric@gmail.com</ulink>)</para>
<para>MIT Licensed as described in the file LICENSE</para>
<para>ESP-IDF driver for ahtxx sensor types</para>
<para>Copyright (c) 2024 Eric Gionet (<ulink url="mailto:gionet.c.eric@gmail.com">gionet.c.eric@gmail.com</ulink>)</para>
<para>MIT Licensed as described in the file LICENSE</para>
<para>ESP-IDF driver for ak8975 3-axis electronic compass</para>
<para>Copyright (c) 2024 Eric Gionet (<ulink url="mailto:gionet.c.eric@gmail.com">gionet.c.eric@gmail.com</ulink>)</para>
<para>MIT Licensed as described in the file LICENSE</para>
<para>ESP-IDF driver for as3935 sensor</para>
<para>Copyright (c) 2024 Eric Gionet (<ulink url="mailto:gionet.c.eric@gmail.com">gionet.c.eric@gmail.com</ulink>)</para>
<para>MIT Licensed as described in the file LICENSE</para>
<para>ESP-IDF driver for as7341 11-channel spectrometer</para>
<para><ulink url="https://github.com/DFRobot/DFRobot_AS7341/blob/master/DFRobot_AS7341.cpp">https://github.com/DFRobot/DFRobot_AS7341/blob/master/DFRobot_AS7341.cpp</ulink> <ulink url="https://github.com/adafruit/Adafruit_AS7341/blob/master/Adafruit_AS7341.cpp">https://github.com/adafruit/Adafruit_AS7341/blob/master/Adafruit_AS7341.cpp</ulink></para>
<para>Copyright (c) 2024 Eric Gionet (<ulink url="mailto:gionet.c.eric@gmail.com">gionet.c.eric@gmail.com</ulink>)</para>
<para>MIT Licensed as described in the file LICENSE</para>
<para>ESP-IDF driver for bh1750 sensor</para>
<para>Copyright (c) 2024 Eric Gionet (<ulink url="mailto:gionet.c.eric@gmail.com">gionet.c.eric@gmail.com</ulink>)</para>
<para>MIT Licensed as described in the file LICENSE</para>
<para><ulink url="https://github.com/boschsensortec/BME68x_SensorAPI/blob/master/bme68x.c">https://github.com/boschsensortec/BME68x_SensorAPI/blob/master/bme68x.c</ulink></para>
<para>ESP-IDF driver for bme680 sensor</para>
<para>Copyright (c) 2024 Eric Gionet (<ulink url="mailto:gionet.c.eric@gmail.com">gionet.c.eric@gmail.com</ulink>)</para>
<para>MIT Licensed as described in the file LICENSE</para>
<para>ESP-IDF driver for bmp280 sensor</para>
<para>Copyright (c) 2024 Eric Gionet (<ulink url="mailto:gionet.c.eric@gmail.com">gionet.c.eric@gmail.com</ulink>)</para>
<para>MIT Licensed as described in the file LICENSE</para>
<para>ESP-IDF driver for bmp390 sensor</para>
<para>Copyright (c) 2024 Eric Gionet (<ulink url="mailto:gionet.c.eric@gmail.com">gionet.c.eric@gmail.com</ulink>)</para>
<para>MIT Licensed as described in the file LICENSE</para>
<para>ESP-IDF driver for ccs811 sensor</para>
<para>Copyright (c) 2024 Eric Gionet (<ulink url="mailto:gionet.c.eric@gmail.com">gionet.c.eric@gmail.com</ulink>)</para>
<para>MIT Licensed as described in the file LICENSE</para>
<para>ESP-IDF driver for ens160 sensor</para>
<para>Copyright (c) 2024 Eric Gionet (<ulink url="mailto:gionet.c.eric@gmail.com">gionet.c.eric@gmail.com</ulink>)</para>
<para>MIT Licensed as described in the file LICENSE</para>
<para>ESP-IDF driver for hdc1080 sensor</para>
<para>Copyright (c) 2024 Eric Gionet (<ulink url="mailto:gionet.c.eric@gmail.com">gionet.c.eric@gmail.com</ulink>)</para>
<para>MIT Licensed as described in the file LICENSE</para>
<para>ESP-IDF driver for hmc5883l sensor</para>
<para>Copyright (c) 2024 Eric Gionet (<ulink url="mailto:gionet.c.eric@gmail.com">gionet.c.eric@gmail.com</ulink>)</para>
<para>MIT Licensed as described in the file LICENSE</para>
<para>ESP-IDF driver for ina226 sensor</para>
<para>Copyright (c) 2024 Eric Gionet (<ulink url="mailto:gionet.c.eric@gmail.com">gionet.c.eric@gmail.com</ulink>)</para>
<para>MIT Licensed as described in the file LICENSE</para>
<para>ESP-IDF driver for ltr390uv sensor</para>
<para>Source references: <ulink url="https://github.com/esphome/esphome/blob/dev/esphome/components/ltr390/ltr390.cpp">https://github.com/esphome/esphome/blob/dev/esphome/components/ltr390/ltr390.cpp</ulink> <ulink url="https://github.com/DFRobot/DFRobot_LTR390UV/blob/master/DFRobot_LTR390UV.cpp">https://github.com/DFRobot/DFRobot_LTR390UV/blob/master/DFRobot_LTR390UV.cpp</ulink></para>
<para>Copyright (c) 2024 Eric Gionet (<ulink url="mailto:gionet.c.eric@gmail.com">gionet.c.eric@gmail.com</ulink>)</para>
<para>MIT Licensed as described in the file LICENSE</para>
<para>ESP-IDF driver for max30105 sensor</para>
<para>Copyright (c) 2024 Eric Gionet (<ulink url="mailto:gionet.c.eric@gmail.com">gionet.c.eric@gmail.com</ulink>)</para>
<para>MIT Licensed as described in the file LICENSE</para>
<para>ESP-IDF driver for mlx90614 sensor</para>
<para><ulink url="https://github.com/melexis/mlx90614-library">https://github.com/melexis/mlx90614-library</ulink></para>
<para>Copyright (c) 2024 Eric Gionet (<ulink url="mailto:gionet.c.eric@gmail.com">gionet.c.eric@gmail.com</ulink>)</para>
<para>MIT Licensed as described in the file LICENSE</para>
<para>ESP-IDF driver for mmc56x3 sensor</para>
<para>Copyright (c) 2024 Eric Gionet (<ulink url="mailto:gionet.c.eric@gmail.com">gionet.c.eric@gmail.com</ulink>)</para>
<para>MIT Licensed as described in the file LICENSE</para>
<para>ESP-IDF driver for mpu6050 sensor</para>
<para>Copyright (c) 2024 Eric Gionet (<ulink url="mailto:gionet.c.eric@gmail.com">gionet.c.eric@gmail.com</ulink>)</para>
<para>MIT Licensed as described in the file LICENSE</para>
<para>ESP-IDF driver for sgp4x sensor</para>
<para>Copyright (c) 2024 Eric Gionet (<ulink url="mailto:gionet.c.eric@gmail.com">gionet.c.eric@gmail.com</ulink>)</para>
<para>MIT Licensed as described in the file LICENSE</para>
<para>ESP-IDF driver for sht4x sensor</para>
<para>Copyright (c) 2024 Eric Gionet (<ulink url="mailto:gionet.c.eric@gmail.com">gionet.c.eric@gmail.com</ulink>)</para>
<para>MIT Licensed as described in the file LICENSE</para>
<para>bitmap images for display panel demos</para>
<para>Copyright (c) 2024 Eric Gionet (<ulink url="mailto:gionet.c.eric@gmail.com">gionet.c.eric@gmail.com</ulink>)</para>
<para>MIT Licensed as described in the file LICENSE</para>
<para>ESP-IDF driver for ssd1306 display panel</para>
<para>Copyright (c) 2024 Eric Gionet (<ulink url="mailto:gionet.c.eric@gmail.com">gionet.c.eric@gmail.com</ulink>)</para>
<para>MIT Licensed as described in the file LICENSE</para>
<para>ESP-IDF driver for tbi2cxxx ir temperature sensor</para>
<para>Copyright (c) 2024 Eric Gionet (<ulink url="mailto:gionet.c.eric@gmail.com">gionet.c.eric@gmail.com</ulink>)</para>
<para>MIT Licensed as described in the file LICENSE</para>
<para>ESP-IDF driver for tbi2cxxx sensor</para>
<para>Copyright (c) 2024 Eric Gionet (<ulink url="mailto:gionet.c.eric@gmail.com">gionet.c.eric@gmail.com</ulink>)</para>
<para>MIT Licensed as described in the file LICENSE</para>
<para>ESP-IDF driver for tlv493d sensor</para>
<para>Copyright (c) 2024 Eric Gionet (<ulink url="mailto:gionet.c.eric@gmail.com">gionet.c.eric@gmail.com</ulink>)</para>
<para>MIT Licensed as described in the file LICENSE</para>
<para>ESP-IDF driver for veml6040 sensor</para>
<para>Copyright (c) 2024 Eric Gionet (<ulink url="mailto:gionet.c.eric@gmail.com">gionet.c.eric@gmail.com</ulink>)</para>
<para>MIT Licensed as described in the file LICENSE</para>
<para>ESP-IDF driver for veml7700 sensor</para>
<para>Copyright (c) 2024 Eric Gionet (<ulink url="mailto:gionet.c.eric@gmail.com">gionet.c.eric@gmail.com</ulink>)</para>
<para>MIT Licensed as described in the file LICENSE</para>
<para>ESP-IDF driver for ds18b20 temperature sensor</para>
<para>Source references: <ulink url="https://github.com/espressif/esp-bsp/blob/master/components/ds18b20/src/ds18b20.c">https://github.com/espressif/esp-bsp/blob/master/components/ds18b20/src/ds18b20.c</ulink> <ulink url="https://github.com/DavidAntliff/esp32-ds18b20/blob/99eb5dd55536fd79b4bd5790f1430c218c51410f/ds18b20.c">https://github.com/DavidAntliff/esp32-ds18b20/blob/99eb5dd55536fd79b4bd5790f1430c218c51410f/ds18b20.c</ulink> <ulink url="https://github.com/adafruit/MAX31850_DallasTemp/blob/master/DallasTemperature.cpp">https://github.com/adafruit/MAX31850_DallasTemp/blob/master/DallasTemperature.cpp</ulink></para>
<para>Copyright (c) 2024 Eric Gionet (<ulink url="mailto:gionet.c.eric@gmail.com">gionet.c.eric@gmail.com</ulink>)</para>
<para>MIT Licensed as described in the file LICENSE</para>
<para>ESP-IDF driver for max31865 sensor</para>
<para>Copyright (c) 2024 Eric Gionet (<ulink url="mailto:gionet.c.eric@gmail.com">gionet.c.eric@gmail.com</ulink>)</para>
<para>MIT Licensed as described in the file LICENSE</para>
<para>ESP-IDF library for datatable</para>
<para>Copyright (c) 2024 Eric Gionet (<ulink url="mailto:gionet.c.eric@gmail.com">gionet.c.eric@gmail.com</ulink>)</para>
<para>MIT Licensed as described in the file LICENSE</para>
<para>ESP-IDF nvs driver extension</para>
<para>Copyright (c) 2024 Eric Gionet (<ulink url="mailto:gionet.c.eric@gmail.com">gionet.c.eric@gmail.com</ulink>)</para>
<para>MIT Licensed as described in the file LICENSE </para>
    </detaileddescription>
  </compounddef>
</doxygen>
