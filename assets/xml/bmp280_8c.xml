<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="bmp280_8c" kind="file" language="C++">
    <compoundname>bmp280.c</compoundname>
    <includes refid="bmp280_8h" local="yes">include/bmp280.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">sdkconfig.h</includes>
    <includes local="no">esp_types.h</includes>
    <includes local="no">esp_log.h</includes>
    <includes local="no">esp_check.h</includes>
    <includes local="no">esp_timer.h</includes>
    <includes local="no">freertos/FreeRTOS.h</includes>
    <includes local="no">freertos/task.h</includes>
    <incdepgraph>
      <node id="1">
        <label>components/peripherals/i2c/esp_bmp280/bmp280.c</label>
        <link refid="bmp280_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>include/bmp280.h</label>
        <link refid="bmp280_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>bmp280_version.h</label>
        <link refid="bmp280__version_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>type_utils.h</label>
        <link refid="type__utils_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>type_utils_version.h</label>
        <link refid="type__utils__version_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>driver/i2c_master.h</label>
      </node>
      <node id="16">
        <label>esp_check.h</label>
      </node>
      <node id="5">
        <label>esp_err.h</label>
      </node>
      <node id="15">
        <label>esp_log.h</label>
      </node>
      <node id="8">
        <label>esp_mac.h</label>
      </node>
      <node id="17">
        <label>esp_timer.h</label>
      </node>
      <node id="14">
        <label>esp_types.h</label>
      </node>
      <node id="18">
        <label>freertos/FreeRTOS.h</label>
      </node>
      <node id="19">
        <label>freertos/task.h</label>
      </node>
      <node id="13">
        <label>sdkconfig.h</label>
      </node>
      <node id="4">
        <label>stdbool.h</label>
      </node>
      <node id="3">
        <label>stdint.h</label>
      </node>
      <node id="12">
        <label>stdio.h</label>
      </node>
      <node id="11">
        <label>string.h</label>
      </node>
    </incdepgraph>
    <sectiondef kind="define">
      <memberdef kind="define" id="bmp280_8c_1a887f1b7dab20ccebe9b1c451f15d3c86" prot="public" static="no">
        <name>BMP280_REG_TEMP_XLSB</name>
        <initializer>UINT8_C(0xFC)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>possible BMP280 registers </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp280/bmp280.c" line="50" column="9" bodyfile="components/peripherals/i2c/esp_bmp280/bmp280.c" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bmp280_8c_1a946474615d59dfab906fd7a7613e9b35" prot="public" static="no">
        <name>BMP280_REG_TEMP_LSB</name>
        <initializer>UINT8_C(0xFB)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp280/bmp280.c" line="51" column="9" bodyfile="components/peripherals/i2c/esp_bmp280/bmp280.c" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bmp280_8c_1a2cd2723c469cf7c1dfcdbd953593c474" prot="public" static="no">
        <name>BMP280_REG_TEMP_MSB</name>
        <initializer>UINT8_C(0xFA)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp280/bmp280.c" line="52" column="9" bodyfile="components/peripherals/i2c/esp_bmp280/bmp280.c" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bmp280_8c_1af4a6f01e143b29bafc80592e9674f3d1" prot="public" static="no">
        <name>BMP280_REG_TEMP</name>
        <initializer>(BMP280_REG_TEMP_MSB)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp280/bmp280.c" line="53" column="9" bodyfile="components/peripherals/i2c/esp_bmp280/bmp280.c" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bmp280_8c_1aeaaf4fef06ddf4bea3d4181a450bccf9" prot="public" static="no">
        <name>BMP280_REG_PRESS_XLSB</name>
        <initializer>UINT8_C(0xF9)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp280/bmp280.c" line="54" column="9" bodyfile="components/peripherals/i2c/esp_bmp280/bmp280.c" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bmp280_8c_1ac703068787eaa09f9dab28448412cfab" prot="public" static="no">
        <name>BMP280_REG_PRESS_LSB</name>
        <initializer>UINT8_C(0xF8)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp280/bmp280.c" line="55" column="9" bodyfile="components/peripherals/i2c/esp_bmp280/bmp280.c" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bmp280_8c_1afa572b770b46ca3553cf4ed2de98d7f4" prot="public" static="no">
        <name>BMP280_REG_PRESS_MSB</name>
        <initializer>UINT8_C(0xF7)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp280/bmp280.c" line="56" column="9" bodyfile="components/peripherals/i2c/esp_bmp280/bmp280.c" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bmp280_8c_1a93363115a09fa950669c5bb82c75732e" prot="public" static="no">
        <name>BMP280_REG_PRESSURE</name>
        <initializer>(BMP280_REG_PRESS_MSB)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp280/bmp280.c" line="57" column="9" bodyfile="components/peripherals/i2c/esp_bmp280/bmp280.c" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bmp280_8c_1a45694d6e3967184999c884d88a76178e" prot="public" static="no">
        <name>BMP280_REG_CONFIG</name>
        <initializer>UINT8_C(0xF5)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp280/bmp280.c" line="58" column="9" bodyfile="components/peripherals/i2c/esp_bmp280/bmp280.c" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bmp280_8c_1a2a24df3774f7cead0831198a81222050" prot="public" static="no">
        <name>BMP280_REG_CTRL</name>
        <initializer>UINT8_C(0xF4)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp280/bmp280.c" line="59" column="9" bodyfile="components/peripherals/i2c/esp_bmp280/bmp280.c" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bmp280_8c_1a51471f4c3ee565c77fdcca39802cc197" prot="public" static="no">
        <name>BMP280_REG_STATUS</name>
        <initializer>UINT8_C(0xF3)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp280/bmp280.c" line="60" column="9" bodyfile="components/peripherals/i2c/esp_bmp280/bmp280.c" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bmp280_8c_1a227f4b21f2c19e0697f2dbd6f59b08d7" prot="public" static="no">
        <name>BMP280_REG_CTRL_HUM</name>
        <initializer>UINT8_C(0xF2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp280/bmp280.c" line="61" column="9" bodyfile="components/peripherals/i2c/esp_bmp280/bmp280.c" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bmp280_8c_1a32455aa8a6c26667ef99d73fc02b662b" prot="public" static="no">
        <name>BMP280_REG_RESET</name>
        <initializer>UINT8_C(0xE0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp280/bmp280.c" line="62" column="9" bodyfile="components/peripherals/i2c/esp_bmp280/bmp280.c" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bmp280_8c_1a37f071326f27f31400e13cc00ff3faa4" prot="public" static="no">
        <name>BMP280_REG_ID</name>
        <initializer>UINT8_C(0xD0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp280/bmp280.c" line="63" column="9" bodyfile="components/peripherals/i2c/esp_bmp280/bmp280.c" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bmp280_8c_1a68622050abfca784a2080b6edc8fc1e0" prot="public" static="no">
        <name>BMP280_REG_CALIB</name>
        <initializer>UINT8_C(0x88)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp280/bmp280.c" line="64" column="9" bodyfile="components/peripherals/i2c/esp_bmp280/bmp280.c" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bmp280_8c_1aad42639eb2dbea70ca2cbc93602d92cc" prot="public" static="no">
        <name>BMP280_REG_HUM_CALIB</name>
        <initializer>UINT8_C(0x88)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp280/bmp280.c" line="65" column="9" bodyfile="components/peripherals/i2c/esp_bmp280/bmp280.c" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bmp280_8c_1a37118440f3eae833c1d99f5400d3f80e" prot="public" static="no">
        <name>BMP280_RESET_VALUE</name>
        <initializer>UINT8_C(0xB6)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp280/bmp280.c" line="66" column="9" bodyfile="components/peripherals/i2c/esp_bmp280/bmp280.c" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bmp280_8c_1aea1b324e2ffe3929e6df7f8f9fa49a44" prot="public" static="no">
        <name>BMP280_TYPE_BMP280</name>
        <initializer>UINT8_C(0x58)</initializer>
        <briefdescription>
<para>BMP280. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp280/bmp280.c" line="68" column="9" bodyfile="components/peripherals/i2c/esp_bmp280/bmp280.c" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bmp280_8c_1a9645578c157ea26f04dda79b8f282a0e" prot="public" static="no">
        <name>BMP280_TYPE_BME280</name>
        <initializer>UINT8_C(0x60)</initializer>
        <briefdescription>
<para>BME280. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp280/bmp280.c" line="69" column="9" bodyfile="components/peripherals/i2c/esp_bmp280/bmp280.c" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bmp280_8c_1af7cfe7994ee6da87d293b9c2be4e8ca6" prot="public" static="no">
        <name>BMP280_DATA_POLL_TIMEOUT_MS</name>
        <initializer>UINT16_C(250)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp280/bmp280.c" line="71" column="9" bodyfile="components/peripherals/i2c/esp_bmp280/bmp280.c" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bmp280_8c_1ae9c7bb03aa523be945fd5a730899aa58" prot="public" static="no">
        <name>BMP280_DATA_READY_DELAY_MS</name>
        <initializer>UINT16_C(1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp280/bmp280.c" line="72" column="9" bodyfile="components/peripherals/i2c/esp_bmp280/bmp280.c" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bmp280_8c_1a2a85f0edc1615a3c50ef488a8757d27b" prot="public" static="no">
        <name>BMP280_POWERUP_DELAY_MS</name>
        <initializer>UINT16_C(25)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp280/bmp280.c" line="73" column="9" bodyfile="components/peripherals/i2c/esp_bmp280/bmp280.c" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bmp280_8c_1a0dcdfee54c954e32333a4eebeef93eb0" prot="public" static="no">
        <name>BMP280_APPSTART_DELAY_MS</name>
        <initializer>UINT16_C(25)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp280/bmp280.c" line="74" column="9" bodyfile="components/peripherals/i2c/esp_bmp280/bmp280.c" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bmp280_8c_1a9f2506d06edef5c5fec2789be4c3e541" prot="public" static="no">
        <name>BMP280_RESET_DELAY_MS</name>
        <initializer>UINT16_C(25)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp280/bmp280.c" line="75" column="9" bodyfile="components/peripherals/i2c/esp_bmp280/bmp280.c" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bmp280_8c_1aed208fa748148f099ec9e0d827778879" prot="public" static="no">
        <name>BMP280_CMD_DELAY_MS</name>
        <initializer>UINT16_C(5)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp280/bmp280.c" line="76" column="9" bodyfile="components/peripherals/i2c/esp_bmp280/bmp280.c" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bmp280_8c_1ab95af7ce4466efdd565a14066d02b09a" prot="public" static="no">
        <name>BMP280_TX_RX_DELAY_MS</name>
        <initializer>UINT16_C(10)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp280/bmp280.c" line="77" column="9" bodyfile="components/peripherals/i2c/esp_bmp280/bmp280.c" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bmp280_8c_1aee7b193fcb571e0c3bc88c29f1662af4" prot="public" static="no">
        <name>ESP_TIMEOUT_CHECK</name>
        <param><defname>start</defname></param>
        <param><defname>len</defname></param>
        <initializer>((uint64_t)(esp_timer_get_time() - (start)) &gt;= (len))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp280/bmp280.c" line="82" column="9" bodyfile="components/peripherals/i2c/esp_bmp280/bmp280.c" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bmp280_8c_1ac2bb3db0b37c9f45103fd513ca5158fe" prot="public" static="no">
        <name>ESP_ARG_CHECK</name>
        <param><defname>VAL</defname></param>
        <initializer>do { if (!(VAL)) return ESP_ERR_INVALID_ARG; } while (0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp280/bmp280.c" line="83" column="9" bodyfile="components/peripherals/i2c/esp_bmp280/bmp280.c" bodystart="83" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="var">
      <memberdef kind="variable" id="bmp280_8c_1a5a85b9c772bbeb480b209a3e6ea92b4c" prot="public" static="yes" mutable="no">
        <type>const char *</type>
        <definition>const char* TAG</definition>
        <argsstring></argsstring>
        <name>TAG</name>
        <initializer>= &quot;bmp280&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp280/bmp280.c" line="89" column="19" bodyfile="components/peripherals/i2c/esp_bmp280/bmp280.c" bodystart="89" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="bmp280_8c_1a0b8c6e65ddbf6eeec61c423255b3c2f0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>static esp_err_t bmp280_i2c_read_from</definition>
        <argsstring>(bmp280_handle_t handle, const uint8_t reg_addr, uint8_t *buffer, const uint8_t size)</argsstring>
        <name>bmp280_i2c_read_from</name>
        <param>
          <type><ref refid="group__drivers_1ga4ba5e63f50d3e97eabf7bdb5491420f4" kindref="member">bmp280_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>reg_addr</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>BMP280 I2C read from register address transaction. This is a write and then read process. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>BMP280 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reg_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>BMP280 register address to read from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>BMP280 read transaction return buffer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of buffer to store results from read transaction. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp280/bmp280.c" line="101" column="25" bodyfile="components/peripherals/i2c/esp_bmp280/bmp280.c" bodystart="101" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="bmp280_8c_1a65afebae5324e0e93d8def80070d6c93" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>static esp_err_t bmp280_i2c_read_word_from</definition>
        <argsstring>(bmp280_handle_t handle, const uint8_t reg_addr, uint16_t *const word)</argsstring>
        <name>bmp280_i2c_read_word_from</name>
        <param>
          <type><ref refid="group__drivers_1ga4ba5e63f50d3e97eabf7bdb5491420f4" kindref="member">bmp280_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>reg_addr</declname>
        </param>
        <param>
          <type>uint16_t *const</type>
          <declname>word</declname>
        </param>
        <briefdescription>
<para>BMP280 I2C read halfword from register address transaction. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>BMP280 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reg_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>BMP280 register address to read from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>word</parametername>
</parameternamelist>
<parameterdescription>
<para>BMP280 read transaction return halfword. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp280/bmp280.c" line="120" column="25" bodyfile="components/peripherals/i2c/esp_bmp280/bmp280.c" bodystart="120" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="bmp280_8c_1a15b589bd2d5d117b158d604b85c34b53" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>static esp_err_t bmp280_i2c_read_byte_from</definition>
        <argsstring>(bmp280_handle_t handle, const uint8_t reg_addr, uint8_t *const byte)</argsstring>
        <name>bmp280_i2c_read_byte_from</name>
        <param>
          <type><ref refid="group__drivers_1ga4ba5e63f50d3e97eabf7bdb5491420f4" kindref="member">bmp280_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>reg_addr</declname>
        </param>
        <param>
          <type>uint8_t *const</type>
          <declname>byte</declname>
        </param>
        <briefdescription>
<para>BMP280 I2C read byte from register address transaction. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>BMP280 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reg_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>BMP280 register address to read from. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>byte</parametername>
</parameternamelist>
<parameterdescription>
<para>BMP280 read transaction return byte. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp280/bmp280.c" line="143" column="25" bodyfile="components/peripherals/i2c/esp_bmp280/bmp280.c" bodystart="143" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="bmp280_8c_1a669337e3ce8736777adf09c733773e26" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>static esp_err_t bmp280_i2c_write_byte_to</definition>
        <argsstring>(bmp280_handle_t handle, const uint8_t reg_addr, const uint8_t byte)</argsstring>
        <name>bmp280_i2c_write_byte_to</name>
        <param>
          <type><ref refid="group__drivers_1ga4ba5e63f50d3e97eabf7bdb5491420f4" kindref="member">bmp280_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>reg_addr</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>byte</declname>
        </param>
        <briefdescription>
<para>BMP280 I2C write byte to register address transaction. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>BMP280 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reg_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>BMP280 register address to write to. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>byte</parametername>
</parameternamelist>
<parameterdescription>
<para>BMP280 write transaction input byte. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp280/bmp280.c" line="166" column="25" bodyfile="components/peripherals/i2c/esp_bmp280/bmp280.c" bodystart="166" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="bmp280_8c_1a0ffe67e74d3853c02b0832c9da398389" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>float</type>
        <definition>static float bmp280_compensate_temperature</definition>
        <argsstring>(bmp280_handle_t handle, const int32_t adc_temperature)</argsstring>
        <name>bmp280_compensate_temperature</name>
        <param>
          <type><ref refid="group__drivers_1ga4ba5e63f50d3e97eabf7bdb5491420f4" kindref="member">bmp280_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const int32_t</type>
          <declname>adc_temperature</declname>
        </param>
        <briefdescription>
<para>Temperature compensation algorithm taken from datasheet. See datasheet for details. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>BMP280 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">adc_temperature</parametername>
</parameternamelist>
<parameterdescription>
<para>Raw adc temperature. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Compensated temperature in degrees Celsius. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp280/bmp280.c" line="185" column="21" bodyfile="components/peripherals/i2c/esp_bmp280/bmp280.c" bodystart="185" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="bmp280_8c_1a6f4efaca4018ddf0bf0faa4337611247" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>float</type>
        <definition>static float bmp280_compensate_pressure</definition>
        <argsstring>(bmp280_handle_t handle, const int32_t adc_pressure)</argsstring>
        <name>bmp280_compensate_pressure</name>
        <param>
          <type><ref refid="group__drivers_1ga4ba5e63f50d3e97eabf7bdb5491420f4" kindref="member">bmp280_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const int32_t</type>
          <declname>adc_pressure</declname>
        </param>
        <briefdescription>
<para>Pressure compensation algorithm taken from datasheet. See datasheet for details. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>BMP280 device handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">adc_pressure</parametername>
</parameternamelist>
<parameterdescription>
<para>Raw adc pressure. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Compensated pressure in pascal. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp280/bmp280.c" line="205" column="21" bodyfile="components/peripherals/i2c/esp_bmp280/bmp280.c" bodystart="205" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="bmp280_8c_1aff027abd36253ba50477110418ec78f2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>static esp_err_t bmp280_get_cal_factors</definition>
        <argsstring>(bmp280_handle_t handle)</argsstring>
        <name>bmp280_get_cal_factors</name>
        <param>
          <type><ref refid="group__drivers_1ga4ba5e63f50d3e97eabf7bdb5491420f4" kindref="member">bmp280_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Reads calibration factors from BMP280. see datasheet for details. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>BMP280 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp280/bmp280.c" line="234" column="25" bodyfile="components/peripherals/i2c/esp_bmp280/bmp280.c" bodystart="234" bodyend="273"/>
      </memberdef>
      <memberdef kind="function" id="bmp280_8c_1ab1c4a486d9ff62bb2662c0a84c72b310" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>static esp_err_t bmp280_setup</definition>
        <argsstring>(bmp280_handle_t handle)</argsstring>
        <name>bmp280_setup</name>
        <param>
          <type><ref refid="group__drivers_1ga4ba5e63f50d3e97eabf7bdb5491420f4" kindref="member">bmp280_handle_t</ref></type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Reads BMP280 calibration factors and configures control measurement, and configuration registers. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para>BMP280 device handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/peripherals/i2c/esp_bmp280/bmp280.c" line="281" column="25" bodyfile="components/peripherals/i2c/esp_bmp280/bmp280.c" bodystart="281" bodyend="320"/>
      </memberdef>
      <member refid="group__drivers_1gaf76cc4194a69a3305e80efc3a4a04f67" kind="function"><name>bmp280_get_chip_id_register</name></member>
      <member refid="group__drivers_1ga0f819759aa334f52d78d16fc5bf66973" kind="function"><name>bmp280_get_status_register</name></member>
      <member refid="group__drivers_1ga5ced8f2fb2f2eb30487333c486092f7d" kind="function"><name>bmp280_get_control_measurement_register</name></member>
      <member refid="group__drivers_1gaa9f0653ff6fdcb6df91be990e87f4324" kind="function"><name>bmp280_set_control_measurement_register</name></member>
      <member refid="group__drivers_1ga855ad80da01437df61e95e204a8f27a0" kind="function"><name>bmp280_get_configuration_register</name></member>
      <member refid="group__drivers_1gadc04372e8af742e060dd363e7b15b665" kind="function"><name>bmp280_set_configuration_register</name></member>
      <member refid="group__drivers_1ga0b4e560981ac807923e4943c7288f11b" kind="function"><name>bmp280_init</name></member>
      <member refid="group__drivers_1ga8b4019ea8a3aa82c3e14b69e311f05bc" kind="function"><name>bmp280_get_measurements</name></member>
      <member refid="group__drivers_1ga56e6e621f28b1aaae87ccf078582fc5c" kind="function"><name>bmp280_get_temperature</name></member>
      <member refid="group__drivers_1ga15c360c34b843e3b827e202dbc64df6d" kind="function"><name>bmp280_get_pressure</name></member>
      <member refid="group__drivers_1ga676b9dec55adbe7be006ec44911e4ded" kind="function"><name>bmp280_get_data_status</name></member>
      <member refid="group__drivers_1gaa3b1ed5dabfd33fb862a77c362e6916e" kind="function"><name>bmp280_get_power_mode</name></member>
      <member refid="group__drivers_1ga42d45d4d0bc59f6892359139fab1be1c" kind="function"><name>bmp280_set_power_mode</name></member>
      <member refid="group__drivers_1ga6bf83bdbd14a94abb9460a8c158a0079" kind="function"><name>bmp280_get_pressure_oversampling</name></member>
      <member refid="group__drivers_1ga08bd496a9b36a475125232ca3366e481" kind="function"><name>bmp280_set_pressure_oversampling</name></member>
      <member refid="group__drivers_1gaeac31c3392f59747e6b59af99d4d141b" kind="function"><name>bmp280_get_temperature_oversampling</name></member>
      <member refid="group__drivers_1ga9bbfcf39651d3b9b6bc07bf426cd2ecc" kind="function"><name>bmp280_set_temperature_oversampling</name></member>
      <member refid="group__drivers_1ga41810e5f04fe34b3d6b6d7a2f0ed6090" kind="function"><name>bmp280_get_standby_time</name></member>
      <member refid="group__drivers_1ga0d7567352da5f0d2ae94a8975838733a" kind="function"><name>bmp280_set_standby_time</name></member>
      <member refid="group__drivers_1gaf3d52e45780f2336048c4fa6906a8972" kind="function"><name>bmp280_get_iir_filter</name></member>
      <member refid="group__drivers_1ga49d702e3251bd23cfb8b5122cfe95a20" kind="function"><name>bmp280_set_iir_filter</name></member>
      <member refid="group__drivers_1ga4cc4d2e4cc06abc7b1b56788e3526b86" kind="function"><name>bmp280_reset</name></member>
      <member refid="group__drivers_1ga29361ec23d39ce227eee5cbf49902160" kind="function"><name>bmp280_remove</name></member>
      <member refid="group__drivers_1ga56d41e7e1d5e629206877e97cb556ccc" kind="function"><name>bmp280_delete</name></member>
      <member refid="group__drivers_1ga987b258a57f3c4a4384e6aa865b326c6" kind="function"><name>bmp280_get_fw_version</name></member>
      <member refid="group__drivers_1ga18945c7c6b94a2aa4187dfef889f7da8" kind="function"><name>bmp280_get_fw_version_number</name></member>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>ESP-IDF driver for BMP280 temperature and pressure sensor</para>
<para>Ported from esp-open-rtos</para>
<para>Copyright (c) 2024 Eric Gionet (<ulink url="mailto:gionet.c.eric@gmail.com">gionet.c.eric@gmail.com</ulink>)</para>
<para>MIT Licensed as described in the file LICENSE</para>
<para>ESP-IDF driver for BMP390 temperature and pressure sensor</para>
<para>Ported from esp-open-rtos</para>
<para>Copyright (c) 2024 Eric Gionet (<ulink url="mailto:gionet.c.eric@gmail.com">gionet.c.eric@gmail.com</ulink>)</para>
<para>MIT Licensed as described in the file LICENSE </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>The<sp/>MIT<sp/>License<sp/>(MIT)</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2024<sp/>Eric<sp/>Gionet<sp/>(gionet.c.eric@gmail.com)</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>Permission<sp/>is<sp/>hereby<sp/>granted,<sp/>free<sp/>of<sp/>charge,<sp/>to<sp/>any<sp/>person<sp/>obtaining<sp/>a<sp/>copy</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>of<sp/>this<sp/>software<sp/>and<sp/>associated<sp/>documentation<sp/>files<sp/>(the<sp/>&quot;Software&quot;),<sp/>to<sp/>deal</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>in<sp/>the<sp/>Software<sp/>without<sp/>restriction,<sp/>including<sp/>without<sp/>limitation<sp/>the<sp/>rights</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>to<sp/>use,<sp/>copy,<sp/>modify,<sp/>merge,<sp/>publish,<sp/>distribute,<sp/>sublicense,<sp/>and/or<sp/>sell</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>copies<sp/>of<sp/>the<sp/>Software,<sp/>and<sp/>to<sp/>permit<sp/>persons<sp/>to<sp/>whom<sp/>the<sp/>Software<sp/>is</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>furnished<sp/>to<sp/>do<sp/>so,<sp/>subject<sp/>to<sp/>the<sp/>following<sp/>conditions:</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>The<sp/>above<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>shall<sp/>be<sp/>included<sp/>in<sp/>all</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>copies<sp/>or<sp/>substantial<sp/>portions<sp/>of<sp/>the<sp/>Software.</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;,<sp/>WITHOUT<sp/>WARRANTY<sp/>OF<sp/>ANY<sp/>KIND,<sp/>EXPRESS<sp/>OR</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>IMPLIED,<sp/>INCLUDING<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO<sp/>THE<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY,</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND<sp/>NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>AUTHORS<sp/>OR<sp/>COPYRIGHT<sp/>HOLDERS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>CLAIM,<sp/>DAMAGES<sp/>OR<sp/>OTHER</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>AN<sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/>FROM,</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>OUT<sp/>OF<sp/>OR<sp/>IN<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER<sp/>DEALINGS<sp/>IN<sp/>THE</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>SOFTWARE.</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="bmp280_8h" kindref="compound">include/bmp280.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sdkconfig.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;esp_types.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;esp_log.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;esp_check.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;esp_timer.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;freertos/FreeRTOS.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;freertos/task.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BMP280_REG_TEMP_XLSB<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UINT8_C(0xFC)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BMP280_REG_TEMP_LSB<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UINT8_C(0xFB)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BMP280_REG_TEMP_MSB<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UINT8_C(0xFA)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BMP280_REG_TEMP<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(BMP280_REG_TEMP_MSB)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BMP280_REG_PRESS_XLSB<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UINT8_C(0xF9)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BMP280_REG_PRESS_LSB<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UINT8_C(0xF8)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BMP280_REG_PRESS_MSB<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UINT8_C(0xF7)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BMP280_REG_PRESSURE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(BMP280_REG_PRESS_MSB)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BMP280_REG_CONFIG<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UINT8_C(0xF5)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BMP280_REG_CTRL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UINT8_C(0xF4)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BMP280_REG_STATUS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UINT8_C(0xF3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BMP280_REG_CTRL_HUM<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UINT8_C(0xF2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BMP280_REG_RESET<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UINT8_C(0xE0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BMP280_REG_ID<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UINT8_C(0xD0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BMP280_REG_CALIB<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UINT8_C(0x88)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BMP280_REG_HUM_CALIB<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UINT8_C(0x88)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BMP280_RESET_VALUE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UINT8_C(0xB6)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BMP280_TYPE_BMP280<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UINT8_C(0x58)<sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BMP280_TYPE_BME280<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UINT8_C(0x60)<sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BMP280_DATA_POLL_TIMEOUT_MS<sp/><sp/><sp/><sp/><sp/>UINT16_C(250)<sp/></highlight><highlight class="comment">//<sp/>?<sp/>see<sp/>datasheet<sp/>tables<sp/>13<sp/>and<sp/>14,<sp/>standby-time<sp/>could<sp/>be<sp/>2-seconds<sp/>(2000ms)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BMP280_DATA_READY_DELAY_MS<sp/><sp/><sp/><sp/><sp/><sp/>UINT16_C(1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BMP280_POWERUP_DELAY_MS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UINT16_C(25)<sp/><sp/></highlight><highlight class="comment">//<sp/>start-up<sp/>time<sp/>is<sp/>2-ms</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BMP280_APPSTART_DELAY_MS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UINT16_C(25)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BMP280_RESET_DELAY_MS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UINT16_C(25)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BMP280_CMD_DELAY_MS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UINT16_C(5)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BMP280_TX_RX_DELAY_MS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UINT16_C(10)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/>*<sp/>macro<sp/>definitions</highlight></codeline>
<codeline lineno="81"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ESP_TIMEOUT_CHECK(start,<sp/>len)<sp/>((uint64_t)(esp_timer_get_time()<sp/>-<sp/>(start))<sp/>&gt;=<sp/>(len))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ESP_ARG_CHECK(VAL)<sp/>do<sp/>{<sp/>if<sp/>(!(VAL))<sp/>return<sp/>ESP_ERR_INVALID_ARG;<sp/>}<sp/>while<sp/>(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="86"><highlight class="comment">*<sp/>static<sp/>constant<sp/>declarations</highlight></codeline>
<codeline lineno="87"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*TAG<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;bmp280&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>esp_err_t<sp/>bmp280_i2c_read_from(<ref refid="group__drivers_1ga4ba5e63f50d3e97eabf7bdb5491420f4" kindref="member">bmp280_handle_t</ref><sp/>handle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>reg_addr,<sp/>uint8_t<sp/>*buffer,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>bit8_uint8_buffer_t<sp/>tx<sp/>=<sp/>{<sp/>reg_addr<sp/>};</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>validate<sp/>arguments<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_ARG_CHECK(<sp/>handle<sp/>);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_RETURN_ON_ERROR(<sp/>i2c_master_transmit_receive(handle-&gt;<ref refid="structbmp280__context__t_1aebc33e9d9d97bc57c51d01fa39056a22" kindref="member">i2c_handle</ref>,<sp/>tx,<sp/>BIT8_UINT8_BUFFER_SIZE,<sp/>buffer,<sp/>size,<sp/><ref refid="group__drivers_1ga90c8e7d8c3b6158111d7b35d1a8fec50" kindref="member">I2C_XFR_TIMEOUT_MS</ref>),<sp/>TAG,<sp/></highlight><highlight class="stringliteral">&quot;bmp280_i2c_read_from<sp/>failed&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ESP_OK;</highlight></codeline>
<codeline lineno="110"><highlight class="normal">}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>esp_err_t<sp/>bmp280_i2c_read_word_from(<ref refid="group__drivers_1ga4ba5e63f50d3e97eabf7bdb5491420f4" kindref="member">bmp280_handle_t</ref><sp/>handle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>reg_addr,<sp/>uint16_t<sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>word)<sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>bit8_uint8_buffer_t<sp/>tx<sp/>=<sp/>{<sp/>reg_addr<sp/>};</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>bit16_uint8_buffer_t<sp/>rx<sp/>=<sp/>{<sp/>0<sp/>};</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>validate<sp/>arguments<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_ARG_CHECK(<sp/>handle<sp/>);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_RETURN_ON_ERROR(<sp/>i2c_master_transmit_receive(handle-&gt;<ref refid="structbmp280__context__t_1aebc33e9d9d97bc57c51d01fa39056a22" kindref="member">i2c_handle</ref>,<sp/>tx,<sp/>BIT8_UINT8_BUFFER_SIZE,<sp/>rx,<sp/>BIT16_UINT8_BUFFER_SIZE,<sp/><ref refid="group__drivers_1ga90c8e7d8c3b6158111d7b35d1a8fec50" kindref="member">I2C_XFR_TIMEOUT_MS</ref>),<sp/>TAG,<sp/></highlight><highlight class="stringliteral">&quot;bmp280_i2c_read_word_from<sp/>failed&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>set<sp/>output<sp/>parameter<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>*word<sp/>=<sp/>(uint16_t)rx[0]<sp/>|<sp/>((uint16_t)rx[1]<sp/>&lt;&lt;<sp/>8);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ESP_OK;</highlight></codeline>
<codeline lineno="133"><highlight class="normal">}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>esp_err_t<sp/>bmp280_i2c_read_byte_from(<ref refid="group__drivers_1ga4ba5e63f50d3e97eabf7bdb5491420f4" kindref="member">bmp280_handle_t</ref><sp/>handle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>reg_addr,<sp/>uint8_t<sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">byte</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>bit8_uint8_buffer_t<sp/>tx<sp/>=<sp/>{<sp/>reg_addr<sp/>};</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>bit8_uint8_buffer_t<sp/>rx<sp/>=<sp/>{<sp/>0<sp/>};</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>validate<sp/>arguments<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_ARG_CHECK(<sp/>handle<sp/>);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_RETURN_ON_ERROR(<sp/>i2c_master_transmit_receive(handle-&gt;<ref refid="structbmp280__context__t_1aebc33e9d9d97bc57c51d01fa39056a22" kindref="member">i2c_handle</ref>,<sp/>tx,<sp/>BIT8_UINT8_BUFFER_SIZE,<sp/>rx,<sp/>BIT8_UINT8_BUFFER_SIZE,<sp/><ref refid="group__drivers_1ga90c8e7d8c3b6158111d7b35d1a8fec50" kindref="member">I2C_XFR_TIMEOUT_MS</ref>),<sp/>TAG,<sp/></highlight><highlight class="stringliteral">&quot;bmp280_i2c_read_byte_from<sp/>failed&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>set<sp/>output<sp/>parameter<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>*</highlight><highlight class="keywordtype">byte</highlight><highlight class="normal"><sp/>=<sp/>rx[0];</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ESP_OK;</highlight></codeline>
<codeline lineno="156"><highlight class="normal">}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>esp_err_t<sp/>bmp280_i2c_write_byte_to(<ref refid="group__drivers_1ga4ba5e63f50d3e97eabf7bdb5491420f4" kindref="member">bmp280_handle_t</ref><sp/>handle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>reg_addr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/></highlight><highlight class="keywordtype">byte</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>bit16_uint8_buffer_t<sp/>tx<sp/>=<sp/>{<sp/>reg_addr,<sp/></highlight><highlight class="keywordtype">byte</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>validate<sp/>arguments<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_ARG_CHECK(<sp/>handle<sp/>);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>attempt<sp/>i2c<sp/>write<sp/>transaction<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_RETURN_ON_ERROR(<sp/>i2c_master_transmit(handle-&gt;<ref refid="structbmp280__context__t_1aebc33e9d9d97bc57c51d01fa39056a22" kindref="member">i2c_handle</ref>,<sp/>tx,<sp/>BIT16_UINT8_BUFFER_SIZE,<sp/><ref refid="group__drivers_1ga90c8e7d8c3b6158111d7b35d1a8fec50" kindref="member">I2C_XFR_TIMEOUT_MS</ref>),<sp/>TAG,<sp/></highlight><highlight class="stringliteral">&quot;i2c_master_transmit,<sp/>i2c<sp/>write<sp/>failed&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ESP_OK;</highlight></codeline>
<codeline lineno="176"><highlight class="normal">}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>bmp280_compensate_temperature(<ref refid="group__drivers_1ga4ba5e63f50d3e97eabf7bdb5491420f4" kindref="member">bmp280_handle_t</ref><sp/>handle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int32_t<sp/>adc_temperature)<sp/>{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>var1,<sp/>var2;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>var1<sp/>=<sp/>((((adc_temperature<sp/>&gt;&gt;<sp/>3)<sp/>-<sp/>((int32_t)handle-&gt;<ref refid="structbmp280__context__t_1af426a06322777dd303c01b6f98ec3981" kindref="member">dev_cal_factors</ref>-&gt;dig_T1<sp/>&lt;&lt;<sp/>1)))<sp/>*<sp/>(int32_t)handle-&gt;<ref refid="structbmp280__context__t_1af426a06322777dd303c01b6f98ec3981" kindref="member">dev_cal_factors</ref>-&gt;dig_T2)<sp/>&gt;&gt;<sp/>11;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>var2<sp/>=<sp/>(((((adc_temperature<sp/>&gt;&gt;<sp/>4)<sp/>-<sp/>(int32_t)handle-&gt;<ref refid="structbmp280__context__t_1af426a06322777dd303c01b6f98ec3981" kindref="member">dev_cal_factors</ref>-&gt;dig_T1)<sp/>*<sp/>((adc_temperature<sp/>&gt;&gt;<sp/>4)<sp/>-<sp/>(int32_t)handle-&gt;<ref refid="structbmp280__context__t_1af426a06322777dd303c01b6f98ec3981" kindref="member">dev_cal_factors</ref>-&gt;dig_T1))<sp/>&gt;&gt;<sp/>12)<sp/>*<sp/>(int32_t)handle-&gt;<ref refid="structbmp280__context__t_1af426a06322777dd303c01b6f98ec3981" kindref="member">dev_cal_factors</ref>-&gt;dig_T3)<sp/>&gt;&gt;<sp/>14;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>handle-&gt;<ref refid="structbmp280__context__t_1af426a06322777dd303c01b6f98ec3981" kindref="member">dev_cal_factors</ref>-&gt;t_fine<sp/>=<sp/>var1<sp/>+<sp/>var2;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>var1<sp/>=<sp/>(handle-&gt;<ref refid="structbmp280__context__t_1af426a06322777dd303c01b6f98ec3981" kindref="member">dev_cal_factors</ref>-&gt;t_fine<sp/>*<sp/>5<sp/>+<sp/>128)<sp/>&gt;&gt;<sp/>8;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)var1<sp/>/<sp/>100.0f;</highlight></codeline>
<codeline lineno="196"><highlight class="normal">}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>bmp280_compensate_pressure(<ref refid="group__drivers_1ga4ba5e63f50d3e97eabf7bdb5491420f4" kindref="member">bmp280_handle_t</ref><sp/>handle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int32_t<sp/>adc_pressure)<sp/>{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>var1,<sp/>var2,<sp/>p;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>var1<sp/>=<sp/>(int64_t)handle-&gt;<ref refid="structbmp280__context__t_1af426a06322777dd303c01b6f98ec3981" kindref="member">dev_cal_factors</ref>-&gt;t_fine<sp/>-<sp/>128000;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>var2<sp/>=<sp/>var1<sp/>*<sp/>var1<sp/>*<sp/>(int64_t)handle-&gt;<ref refid="structbmp280__context__t_1af426a06322777dd303c01b6f98ec3981" kindref="member">dev_cal_factors</ref>-&gt;dig_P6;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>var2<sp/>=<sp/>var2<sp/>+<sp/>((var1<sp/>*<sp/>(int64_t)handle-&gt;<ref refid="structbmp280__context__t_1af426a06322777dd303c01b6f98ec3981" kindref="member">dev_cal_factors</ref>-&gt;dig_P5)<sp/>&lt;&lt;<sp/>17);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>var2<sp/>=<sp/>var2<sp/>+<sp/>(((int64_t)handle-&gt;<ref refid="structbmp280__context__t_1af426a06322777dd303c01b6f98ec3981" kindref="member">dev_cal_factors</ref>-&gt;dig_P4)<sp/>&lt;&lt;<sp/>35);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>var1<sp/>=<sp/>((var1<sp/>*<sp/>var1<sp/>*<sp/>(int64_t)handle-&gt;<ref refid="structbmp280__context__t_1af426a06322777dd303c01b6f98ec3981" kindref="member">dev_cal_factors</ref>-&gt;dig_P3)<sp/>&gt;&gt;<sp/>8)<sp/>+<sp/>((var1<sp/>*<sp/>(int64_t)handle-&gt;<ref refid="structbmp280__context__t_1af426a06322777dd303c01b6f98ec3981" kindref="member">dev_cal_factors</ref>-&gt;dig_P2)<sp/>&lt;&lt;<sp/>12);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>var1<sp/>=<sp/>(((int64_t)1<sp/>&lt;&lt;<sp/>47)<sp/>+<sp/>var1)<sp/>*<sp/>((int64_t)handle-&gt;<ref refid="structbmp280__context__t_1af426a06322777dd303c01b6f98ec3981" kindref="member">dev_cal_factors</ref>-&gt;dig_P1)<sp/>&gt;&gt;<sp/>33;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(var1<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/><sp/></highlight><highlight class="comment">//<sp/>avoid<sp/>exception<sp/>caused<sp/>by<sp/>division<sp/>by<sp/>zero</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>p<sp/>=<sp/>1048576<sp/>-<sp/>adc_pressure;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>p<sp/>=<sp/>(((p<sp/>&lt;&lt;<sp/>31)<sp/>-<sp/>var2)<sp/>*<sp/>3125)<sp/>/<sp/>var1;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>var1<sp/>=<sp/>((int64_t)handle-&gt;<ref refid="structbmp280__context__t_1af426a06322777dd303c01b6f98ec3981" kindref="member">dev_cal_factors</ref>-&gt;dig_P9<sp/>*<sp/>(p<sp/>&gt;&gt;<sp/>13)<sp/>*<sp/>(p<sp/>&gt;&gt;<sp/>13))<sp/>&gt;&gt;<sp/>25;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>var2<sp/>=<sp/>((int64_t)handle-&gt;<ref refid="structbmp280__context__t_1af426a06322777dd303c01b6f98ec3981" kindref="member">dev_cal_factors</ref>-&gt;dig_P8<sp/>*<sp/>p)<sp/>&gt;&gt;<sp/>19;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>p<sp/>=<sp/>((p<sp/>+<sp/>var1<sp/>+<sp/>var2)<sp/>&gt;&gt;<sp/>8)<sp/>+<sp/>((int64_t)handle-&gt;<ref refid="structbmp280__context__t_1af426a06322777dd303c01b6f98ec3981" kindref="member">dev_cal_factors</ref>-&gt;dig_P7<sp/>&lt;&lt;<sp/>4);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)p<sp/>/<sp/>256.0f;;</highlight></codeline>
<codeline lineno="226"><highlight class="normal">}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>esp_err_t<sp/>bmp280_get_cal_factors(<ref refid="group__drivers_1ga4ba5e63f50d3e97eabf7bdb5491420f4" kindref="member">bmp280_handle_t</ref><sp/>handle)<sp/>{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>validate<sp/>arguments<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_ARG_CHECK(<sp/>handle<sp/>);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>bmp280<sp/>attempt<sp/>to<sp/>request<sp/>T1-T3<sp/>calibration<sp/>values<sp/>from<sp/>device<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_ERROR_CHECK(<sp/>bmp280_i2c_read_word_from(handle,<sp/>0x88,<sp/>&amp;handle-&gt;<ref refid="structbmp280__context__t_1af426a06322777dd303c01b6f98ec3981" kindref="member">dev_cal_factors</ref>-&gt;dig_T1)<sp/>);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_ERROR_CHECK(<sp/>bmp280_i2c_read_word_from(handle,<sp/>0x8a,<sp/>(uint16_t<sp/>*)&amp;handle-&gt;<ref refid="structbmp280__context__t_1af426a06322777dd303c01b6f98ec3981" kindref="member">dev_cal_factors</ref>-&gt;dig_T2)<sp/>);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_ERROR_CHECK(<sp/>bmp280_i2c_read_word_from(handle,<sp/>0x8c,<sp/>(uint16_t<sp/>*)&amp;handle-&gt;<ref refid="structbmp280__context__t_1af426a06322777dd303c01b6f98ec3981" kindref="member">dev_cal_factors</ref>-&gt;dig_T3)<sp/>);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>bmp280<sp/>attempt<sp/>to<sp/>request<sp/>P1-P9<sp/>calibration<sp/>values<sp/>from<sp/>device<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_ERROR_CHECK(<sp/>bmp280_i2c_read_word_from(handle,<sp/>0x8e,<sp/>&amp;handle-&gt;<ref refid="structbmp280__context__t_1af426a06322777dd303c01b6f98ec3981" kindref="member">dev_cal_factors</ref>-&gt;dig_P1)<sp/>);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_ERROR_CHECK(<sp/>bmp280_i2c_read_word_from(handle,<sp/>0x90,<sp/>(uint16_t<sp/>*)&amp;handle-&gt;<ref refid="structbmp280__context__t_1af426a06322777dd303c01b6f98ec3981" kindref="member">dev_cal_factors</ref>-&gt;dig_P2)<sp/>);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_ERROR_CHECK(<sp/>bmp280_i2c_read_word_from(handle,<sp/>0x92,<sp/>(uint16_t<sp/>*)&amp;handle-&gt;<ref refid="structbmp280__context__t_1af426a06322777dd303c01b6f98ec3981" kindref="member">dev_cal_factors</ref>-&gt;dig_P3)<sp/>);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_ERROR_CHECK(<sp/>bmp280_i2c_read_word_from(handle,<sp/>0x94,<sp/>(uint16_t<sp/>*)&amp;handle-&gt;<ref refid="structbmp280__context__t_1af426a06322777dd303c01b6f98ec3981" kindref="member">dev_cal_factors</ref>-&gt;dig_P4)<sp/>);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_ERROR_CHECK(<sp/>bmp280_i2c_read_word_from(handle,<sp/>0x96,<sp/>(uint16_t<sp/>*)&amp;handle-&gt;<ref refid="structbmp280__context__t_1af426a06322777dd303c01b6f98ec3981" kindref="member">dev_cal_factors</ref>-&gt;dig_P5)<sp/>);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_ERROR_CHECK(<sp/>bmp280_i2c_read_word_from(handle,<sp/>0x98,<sp/>(uint16_t<sp/>*)&amp;handle-&gt;<ref refid="structbmp280__context__t_1af426a06322777dd303c01b6f98ec3981" kindref="member">dev_cal_factors</ref>-&gt;dig_P6)<sp/>);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_ERROR_CHECK(<sp/>bmp280_i2c_read_word_from(handle,<sp/>0x9a,<sp/>(uint16_t<sp/>*)&amp;handle-&gt;<ref refid="structbmp280__context__t_1af426a06322777dd303c01b6f98ec3981" kindref="member">dev_cal_factors</ref>-&gt;dig_P7)<sp/>);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_ERROR_CHECK(<sp/>bmp280_i2c_read_word_from(handle,<sp/>0x9c,<sp/>(uint16_t<sp/>*)&amp;handle-&gt;<ref refid="structbmp280__context__t_1af426a06322777dd303c01b6f98ec3981" kindref="member">dev_cal_factors</ref>-&gt;dig_P8)<sp/>);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_ERROR_CHECK(<sp/>bmp280_i2c_read_word_from(handle,<sp/>0x9e,<sp/>(uint16_t<sp/>*)&amp;handle-&gt;<ref refid="structbmp280__context__t_1af426a06322777dd303c01b6f98ec3981" kindref="member">dev_cal_factors</ref>-&gt;dig_P9)<sp/>);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="254"><highlight class="comment"><sp/><sp/><sp/><sp/>ESP_LOGD(TAG,<sp/>&quot;Calibration<sp/>data<sp/>received:&quot;);</highlight></codeline>
<codeline lineno="255"><highlight class="comment"><sp/><sp/><sp/><sp/>ESP_LOGD(TAG,<sp/>&quot;dig_T1=%u&quot;,<sp/>handle-&gt;dev_cal_factors-&gt;dig_T1);</highlight></codeline>
<codeline lineno="256"><highlight class="comment"><sp/><sp/><sp/><sp/>ESP_LOGD(TAG,<sp/>&quot;dig_T2=%d&quot;,<sp/>handle-&gt;dev_cal_factors-&gt;dig_T2);</highlight></codeline>
<codeline lineno="257"><highlight class="comment"><sp/><sp/><sp/><sp/>ESP_LOGD(TAG,<sp/>&quot;dig_T3=%d&quot;,<sp/>handle-&gt;dev_cal_factors-&gt;dig_T3);</highlight></codeline>
<codeline lineno="258"><highlight class="comment"><sp/><sp/><sp/><sp/>ESP_LOGD(TAG,<sp/>&quot;dig_P1=%u&quot;,<sp/>handle-&gt;dev_cal_factors-&gt;dig_P1);</highlight></codeline>
<codeline lineno="259"><highlight class="comment"><sp/><sp/><sp/><sp/>ESP_LOGD(TAG,<sp/>&quot;dig_P2=%d&quot;,<sp/>handle-&gt;dev_cal_factors-&gt;dig_P2);</highlight></codeline>
<codeline lineno="260"><highlight class="comment"><sp/><sp/><sp/><sp/>ESP_LOGD(TAG,<sp/>&quot;dig_P3=%d&quot;,<sp/>handle-&gt;dev_cal_factors-&gt;dig_P3);</highlight></codeline>
<codeline lineno="261"><highlight class="comment"><sp/><sp/><sp/><sp/>ESP_LOGD(TAG,<sp/>&quot;dig_P4=%d&quot;,<sp/>handle-&gt;dev_cal_factors-&gt;dig_P4);</highlight></codeline>
<codeline lineno="262"><highlight class="comment"><sp/><sp/><sp/><sp/>ESP_LOGD(TAG,<sp/>&quot;dig_P5=%d&quot;,<sp/>handle-&gt;dev_cal_factors-&gt;dig_P5);</highlight></codeline>
<codeline lineno="263"><highlight class="comment"><sp/><sp/><sp/><sp/>ESP_LOGD(TAG,<sp/>&quot;dig_P6=%d&quot;,<sp/>handle-&gt;dev_cal_factors-&gt;dig_P6);</highlight></codeline>
<codeline lineno="264"><highlight class="comment"><sp/><sp/><sp/><sp/>ESP_LOGD(TAG,<sp/>&quot;dig_P7=%d&quot;,<sp/>handle-&gt;dev_cal_factors-&gt;dig_P7);</highlight></codeline>
<codeline lineno="265"><highlight class="comment"><sp/><sp/><sp/><sp/>ESP_LOGD(TAG,<sp/>&quot;dig_P8=%d&quot;,<sp/>handle-&gt;dev_cal_factors-&gt;dig_P8);</highlight></codeline>
<codeline lineno="266"><highlight class="comment"><sp/><sp/><sp/><sp/>ESP_LOGD(TAG,<sp/>&quot;dig_P9=%d&quot;,<sp/>handle-&gt;dev_cal_factors-&gt;dig_P9);</highlight></codeline>
<codeline lineno="267"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>delay<sp/>before<sp/>next<sp/>i2c<sp/>transaction<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(BMP280_CMD_DELAY_MS));</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ESP_OK;</highlight></codeline>
<codeline lineno="273"><highlight class="normal">}</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>esp_err_t<sp/>bmp280_setup(<ref refid="group__drivers_1ga4ba5e63f50d3e97eabf7bdb5491420f4" kindref="member">bmp280_handle_t</ref><sp/>handle)<sp/>{</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>bmp280_configuration_register_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>config_reg;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>bmp280_control_measurement_register_t<sp/>ctrl_meas_reg;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>validate<sp/>arguments<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_ARG_CHECK(<sp/>handle<sp/>);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>attempt<sp/>to<sp/>read<sp/>calibration<sp/>factors<sp/>from<sp/>device<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_RETURN_ON_ERROR(<sp/>bmp280_get_cal_factors(handle),<sp/>TAG,<sp/></highlight><highlight class="stringliteral">&quot;read<sp/>calibration<sp/>factors<sp/>for<sp/>get<sp/>registers<sp/>failed&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>attempt<sp/>to<sp/>read<sp/>configuration<sp/>register<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_RETURN_ON_ERROR(<sp/><ref refid="group__drivers_1ga855ad80da01437df61e95e204a8f27a0" kindref="member">bmp280_get_configuration_register</ref>(handle,<sp/>&amp;config_reg),<sp/>TAG,<sp/></highlight><highlight class="stringliteral">&quot;read<sp/>configuration<sp/>register<sp/>for<sp/>setup<sp/>failed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>attempt<sp/>to<sp/>read<sp/>control<sp/>measurement<sp/>register<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_RETURN_ON_ERROR(<sp/><ref refid="group__drivers_1ga5ced8f2fb2f2eb30487333c486092f7d" kindref="member">bmp280_get_control_measurement_register</ref>(handle,<sp/>&amp;ctrl_meas_reg),<sp/>TAG,<sp/></highlight><highlight class="stringliteral">&quot;read<sp/>control<sp/>measurement<sp/>register<sp/>for<sp/>setup<sp/>failed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>initialize<sp/>configuration<sp/>register<sp/>from<sp/>configuration<sp/>params<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>config_reg.bits.standby_time<sp/>=<sp/>handle-&gt;<ref refid="structbmp280__context__t_1ac412ae17d2b8c0f3e19957a5440b7198" kindref="member">dev_config</ref>.<ref refid="structbmp280__config__s_1a0d5af9bb0a15a2c61d91fb67231f8feb" kindref="member">standby_time</ref>;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>config_reg.bits.iir_filter<sp/><sp/><sp/>=<sp/>handle-&gt;<ref refid="structbmp280__context__t_1ac412ae17d2b8c0f3e19957a5440b7198" kindref="member">dev_config</ref>.<ref refid="structbmp280__config__s_1a57e6b0c4dacd2ca29ad4c3c71a98f728" kindref="member">iir_filter</ref>;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>initialize<sp/>control<sp/>measurement<sp/>register<sp/>from<sp/>configuration<sp/>params<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(handle-&gt;<ref refid="structbmp280__context__t_1ac412ae17d2b8c0f3e19957a5440b7198" kindref="member">dev_config</ref>.<ref refid="structbmp280__config__s_1a12241bc86e835299ae12611b56b7e246" kindref="member">power_mode</ref><sp/>==<sp/><ref refid="group__drivers_1ggaa4f8d7bff4d2100e147454563eb16712a0a5eaa62779bf8c3021ec9b387eb4683" kindref="member">BMP280_POWER_MODE_FORCED</ref><sp/>||<sp/>handle-&gt;<ref refid="structbmp280__context__t_1ac412ae17d2b8c0f3e19957a5440b7198" kindref="member">dev_config</ref>.<ref refid="structbmp280__config__s_1a12241bc86e835299ae12611b56b7e246" kindref="member">power_mode</ref><sp/>==<sp/><ref refid="group__drivers_1ggaa4f8d7bff4d2100e147454563eb16712adecf4b4ef1718a47831b2fb1ad887b50" kindref="member">BMP280_POWER_MODE_FORCED1</ref>)<sp/>{</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>initial<sp/>mode<sp/>for<sp/>forced<sp/>is<sp/>sleep</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ctrl_meas_reg.bits.power_mode<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="group__drivers_1ggaa4f8d7bff4d2100e147454563eb16712a0b80523bc1870d9646beec02645266b6" kindref="member">BMP280_POWER_MODE_SLEEP</ref>;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ctrl_meas_reg.bits.temperature_oversampling<sp/>=<sp/>handle-&gt;<ref refid="structbmp280__context__t_1ac412ae17d2b8c0f3e19957a5440b7198" kindref="member">dev_config</ref>.<ref refid="structbmp280__config__s_1a378ce448d1df2ee325ce28239a946b02" kindref="member">temperature_oversampling</ref>;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ctrl_meas_reg.bits.pressure_oversampling<sp/><sp/><sp/><sp/>=<sp/>handle-&gt;<ref refid="structbmp280__context__t_1ac412ae17d2b8c0f3e19957a5440b7198" kindref="member">dev_config</ref>.<ref refid="structbmp280__config__s_1ae73fa5c593d834c2e39a628b574ae876" kindref="member">pressure_oversampling</ref>;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ctrl_meas_reg.bits.power_mode<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>handle-&gt;<ref refid="structbmp280__context__t_1ac412ae17d2b8c0f3e19957a5440b7198" kindref="member">dev_config</ref>.<ref refid="structbmp280__config__s_1a12241bc86e835299ae12611b56b7e246" kindref="member">power_mode</ref>;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ctrl_meas_reg.bits.temperature_oversampling<sp/>=<sp/>handle-&gt;<ref refid="structbmp280__context__t_1ac412ae17d2b8c0f3e19957a5440b7198" kindref="member">dev_config</ref>.<ref refid="structbmp280__config__s_1a378ce448d1df2ee325ce28239a946b02" kindref="member">temperature_oversampling</ref>;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ctrl_meas_reg.bits.pressure_oversampling<sp/><sp/><sp/><sp/>=<sp/>handle-&gt;<ref refid="structbmp280__context__t_1ac412ae17d2b8c0f3e19957a5440b7198" kindref="member">dev_config</ref>.<ref refid="structbmp280__config__s_1ae73fa5c593d834c2e39a628b574ae876" kindref="member">pressure_oversampling</ref>;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>attempt<sp/>to<sp/>write<sp/>configuration<sp/>register<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_RETURN_ON_ERROR(<sp/><ref refid="group__drivers_1gadc04372e8af742e060dd363e7b15b665" kindref="member">bmp280_set_configuration_register</ref>(handle,<sp/>config_reg),<sp/>TAG,<sp/></highlight><highlight class="stringliteral">&quot;write<sp/>configuration<sp/>register<sp/>for<sp/>setup<sp/>failed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>attempt<sp/>to<sp/>write<sp/>control<sp/>measurement<sp/>register<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_RETURN_ON_ERROR(<sp/><ref refid="group__drivers_1gaa9f0653ff6fdcb6df91be990e87f4324" kindref="member">bmp280_set_control_measurement_register</ref>(handle,<sp/>ctrl_meas_reg),<sp/>TAG,<sp/></highlight><highlight class="stringliteral">&quot;write<sp/>control<sp/>measurement<sp/>register<sp/>for<sp/>setup<sp/>failed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ESP_OK;</highlight></codeline>
<codeline lineno="320"><highlight class="normal">}</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal">esp_err_t<sp/><ref refid="group__drivers_1gaf76cc4194a69a3305e80efc3a4a04f67" kindref="member">bmp280_get_chip_id_register</ref>(<ref refid="group__drivers_1ga4ba5e63f50d3e97eabf7bdb5491420f4" kindref="member">bmp280_handle_t</ref><sp/>handle,<sp/>uint8_t<sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>reg)<sp/>{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>validate<sp/>arguments<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_ARG_CHECK(<sp/>handle<sp/>&amp;&amp;<sp/>reg<sp/>);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>attempt<sp/>i2c<sp/>read<sp/>transaction<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_RETURN_ON_ERROR(<sp/>bmp280_i2c_read_byte_from(handle,<sp/>BMP280_REG_ID,<sp/>reg),<sp/>TAG,<sp/></highlight><highlight class="stringliteral">&quot;read<sp/>chip<sp/>identifier<sp/>register<sp/>failed&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>delay<sp/>before<sp/>next<sp/>i2c<sp/>transaction<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(BMP280_CMD_DELAY_MS));</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ESP_OK;</highlight></codeline>
<codeline lineno="333"><highlight class="normal">}</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal">esp_err_t<sp/><ref refid="group__drivers_1ga0f819759aa334f52d78d16fc5bf66973" kindref="member">bmp280_get_status_register</ref>(<ref refid="group__drivers_1ga4ba5e63f50d3e97eabf7bdb5491420f4" kindref="member">bmp280_handle_t</ref><sp/>handle,<sp/>bmp280_status_register_t<sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>reg)<sp/>{</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>validate<sp/>arguments<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_ARG_CHECK(<sp/>handle<sp/>&amp;&amp;<sp/>reg<sp/>);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>attempt<sp/>i2c<sp/>read<sp/>transaction<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_RETURN_ON_ERROR(<sp/>bmp280_i2c_read_byte_from(handle,<sp/>BMP280_REG_STATUS,<sp/>&amp;reg-&gt;reg),<sp/>TAG,<sp/></highlight><highlight class="stringliteral">&quot;read<sp/>status<sp/>register<sp/>failed&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>delay<sp/>before<sp/>next<sp/>i2c<sp/>transaction<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(BMP280_CMD_DELAY_MS));</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ESP_OK;</highlight></codeline>
<codeline lineno="346"><highlight class="normal">}</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal">esp_err_t<sp/><ref refid="group__drivers_1ga5ced8f2fb2f2eb30487333c486092f7d" kindref="member">bmp280_get_control_measurement_register</ref>(<ref refid="group__drivers_1ga4ba5e63f50d3e97eabf7bdb5491420f4" kindref="member">bmp280_handle_t</ref><sp/>handle,<sp/>bmp280_control_measurement_register_t<sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>reg)<sp/>{</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>validate<sp/>arguments<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_ARG_CHECK(<sp/>handle<sp/>&amp;&amp;<sp/>reg<sp/>);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>attempt<sp/>i2c<sp/>read<sp/>transaction<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_RETURN_ON_ERROR(<sp/>bmp280_i2c_read_byte_from(handle,<sp/>BMP280_REG_CTRL,<sp/>&amp;reg-&gt;reg),<sp/>TAG,<sp/></highlight><highlight class="stringliteral">&quot;read<sp/>control<sp/>measurement<sp/>register<sp/>failed&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>delay<sp/>before<sp/>next<sp/>i2c<sp/>transaction<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(BMP280_CMD_DELAY_MS));</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ESP_OK;</highlight></codeline>
<codeline lineno="359"><highlight class="normal">}</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal">esp_err_t<sp/><ref refid="group__drivers_1gaa9f0653ff6fdcb6df91be990e87f4324" kindref="member">bmp280_set_control_measurement_register</ref>(<ref refid="group__drivers_1ga4ba5e63f50d3e97eabf7bdb5491420f4" kindref="member">bmp280_handle_t</ref><sp/>handle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>bmp280_control_measurement_register_t<sp/>reg)<sp/>{</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>validate<sp/>arguments<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_ARG_CHECK(<sp/>handle<sp/>);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>attempt<sp/>i2c<sp/>write<sp/>transaction<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_RETURN_ON_ERROR(<sp/>bmp280_i2c_write_byte_to(handle,<sp/>BMP280_REG_CTRL,<sp/>reg.reg),<sp/>TAG,<sp/></highlight><highlight class="stringliteral">&quot;write<sp/>control<sp/>measurement<sp/>register<sp/>failed&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>delay<sp/>before<sp/>next<sp/>i2c<sp/>transaction<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(BMP280_CMD_DELAY_MS));</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ESP_OK;</highlight></codeline>
<codeline lineno="372"><highlight class="normal">}</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal">esp_err_t<sp/><ref refid="group__drivers_1ga855ad80da01437df61e95e204a8f27a0" kindref="member">bmp280_get_configuration_register</ref>(<ref refid="group__drivers_1ga4ba5e63f50d3e97eabf7bdb5491420f4" kindref="member">bmp280_handle_t</ref><sp/>handle,<sp/>bmp280_configuration_register_t<sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>reg)<sp/>{</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>validate<sp/>arguments<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_ARG_CHECK(<sp/>handle<sp/>&amp;&amp;<sp/>reg<sp/>);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>attempt<sp/>i2c<sp/>read<sp/>transaction<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_RETURN_ON_ERROR(<sp/>bmp280_i2c_read_byte_from(handle,<sp/>BMP280_REG_CONFIG,<sp/>&amp;reg-&gt;reg),<sp/>TAG,<sp/></highlight><highlight class="stringliteral">&quot;read<sp/>configuration<sp/>register<sp/>failed&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>delay<sp/>before<sp/>next<sp/>i2c<sp/>transaction<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(BMP280_CMD_DELAY_MS));</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ESP_OK;</highlight></codeline>
<codeline lineno="385"><highlight class="normal">}</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal">esp_err_t<sp/><ref refid="group__drivers_1gadc04372e8af742e060dd363e7b15b665" kindref="member">bmp280_set_configuration_register</ref>(<ref refid="group__drivers_1ga4ba5e63f50d3e97eabf7bdb5491420f4" kindref="member">bmp280_handle_t</ref><sp/>handle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>bmp280_configuration_register_t<sp/>reg)<sp/>{</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/>bmp280_configuration_register_t<sp/>config<sp/>=<sp/>{<sp/>.reg<sp/>=<sp/>reg.reg};</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>validate<sp/>arguments<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_ARG_CHECK(<sp/>handle<sp/>);</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>set<sp/>reserved<sp/>to<sp/>0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/>config.bits.reserved<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>attempt<sp/>i2c<sp/>write<sp/>transaction<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_RETURN_ON_ERROR(<sp/>bmp280_i2c_write_byte_to(handle,<sp/>BMP280_REG_CONFIG,<sp/>config.reg),<sp/>TAG,<sp/></highlight><highlight class="stringliteral">&quot;write<sp/>configuration<sp/>register<sp/>failed&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>delay<sp/>before<sp/>next<sp/>i2c<sp/>transaction<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(BMP280_CMD_DELAY_MS));</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ESP_OK;</highlight></codeline>
<codeline lineno="403"><highlight class="normal">}</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal">esp_err_t<sp/><ref refid="group__drivers_1ga0b4e560981ac807923e4943c7288f11b" kindref="member">bmp280_init</ref>(i2c_master_bus_handle_t<sp/>master_handle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group__drivers_1ga683075794a68e847ac00880f3fbc5a1e" kindref="member">bmp280_config_t</ref><sp/>*bmp280_config,<sp/><ref refid="group__drivers_1ga4ba5e63f50d3e97eabf7bdb5491420f4" kindref="member">bmp280_handle_t</ref><sp/>*bmp280_handle)<sp/>{</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>validate<sp/>arguments<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_ARG_CHECK(<sp/>master_handle<sp/>&amp;&amp;<sp/>bmp280_config<sp/>);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>delay<sp/>task<sp/>before<sp/>i2c<sp/>transaction<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(BMP280_POWERUP_DELAY_MS));</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>validate<sp/>device<sp/>exists<sp/>on<sp/>the<sp/>master<sp/>bus<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/>esp_err_t<sp/>ret<sp/>=<sp/>i2c_master_probe(master_handle,<sp/>bmp280_config-&gt;<ref refid="structbmp280__config__s_1a4fc512d568c2b72f6907c218205cf6c9" kindref="member">i2c_address</ref>,<sp/><ref refid="group__drivers_1ga90c8e7d8c3b6158111d7b35d1a8fec50" kindref="member">I2C_XFR_TIMEOUT_MS</ref>);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_GOTO_ON_ERROR(ret,<sp/>err,<sp/>TAG,<sp/></highlight><highlight class="stringliteral">&quot;device<sp/>does<sp/>not<sp/>exist<sp/>at<sp/>address<sp/>0x%02x,<sp/>bmp280<sp/>device<sp/>handle<sp/>initialization<sp/>failed&quot;</highlight><highlight class="normal">,<sp/>bmp280_config-&gt;<ref refid="structbmp280__config__s_1a4fc512d568c2b72f6907c218205cf6c9" kindref="member">i2c_address</ref>);</highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>validate<sp/>memory<sp/>availability<sp/>for<sp/>handle<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__drivers_1ga4ba5e63f50d3e97eabf7bdb5491420f4" kindref="member">bmp280_handle_t</ref><sp/>out_handle;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/>out_handle<sp/>=<sp/>(<ref refid="group__drivers_1ga4ba5e63f50d3e97eabf7bdb5491420f4" kindref="member">bmp280_handle_t</ref>)calloc(1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*out_handle));</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_GOTO_ON_FALSE(out_handle,<sp/>ESP_ERR_NO_MEM,<sp/>err,<sp/>TAG,<sp/></highlight><highlight class="stringliteral">&quot;no<sp/>memory<sp/>for<sp/>i2c0<sp/>bmp280<sp/>device<sp/>for<sp/>init&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>validate<sp/>memory<sp/>availability<sp/>for<sp/>handle<sp/>calibration<sp/>factors<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/>out_handle-&gt;<ref refid="structbmp280__context__t_1af426a06322777dd303c01b6f98ec3981" kindref="member">dev_cal_factors</ref><sp/>=<sp/>(<ref refid="group__drivers_1ga56de4c11f5b22c1d0cf373c243652b52" kindref="member">bmp280_cal_factors_t</ref>*)calloc(1,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="group__drivers_1ga56de4c11f5b22c1d0cf373c243652b52" kindref="member">bmp280_cal_factors_t</ref>));</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_GOTO_ON_FALSE(out_handle-&gt;<ref refid="structbmp280__context__t_1af426a06322777dd303c01b6f98ec3981" kindref="member">dev_cal_factors</ref>,<sp/>ESP_ERR_NO_MEM,<sp/>err_handle,<sp/>TAG,<sp/></highlight><highlight class="stringliteral">&quot;no<sp/>memory<sp/>for<sp/>i2c<sp/>bmp280<sp/>device<sp/>calibration<sp/>factors<sp/>for<sp/>init&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>copy<sp/>configuration<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/>out_handle-&gt;<ref refid="structbmp280__context__t_1ac412ae17d2b8c0f3e19957a5440b7198" kindref="member">dev_config</ref><sp/>=<sp/>*bmp280_config;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>set<sp/>i2c<sp/>device<sp/>configuration<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>i2c_device_config_t<sp/>i2c_dev_conf<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.dev_addr_length<sp/><sp/><sp/><sp/>=<sp/>I2C_ADDR_BIT_LEN_7,</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.device_address<sp/><sp/><sp/><sp/><sp/>=<sp/>out_handle-&gt;<ref refid="structbmp280__context__t_1ac412ae17d2b8c0f3e19957a5440b7198" kindref="member">dev_config</ref>.<ref refid="structbmp280__config__s_1a4fc512d568c2b72f6907c218205cf6c9" kindref="member">i2c_address</ref>,</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.scl_speed_hz<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>out_handle-&gt;<ref refid="structbmp280__context__t_1ac412ae17d2b8c0f3e19957a5440b7198" kindref="member">dev_config</ref>.<ref refid="structbmp280__config__s_1a770b3ab4bba557baec88287d86832a34" kindref="member">i2c_clock_speed</ref>,</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>validate<sp/>device<sp/>handle<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(out_handle-&gt;<ref refid="structbmp280__context__t_1aebc33e9d9d97bc57c51d01fa39056a22" kindref="member">i2c_handle</ref><sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_GOTO_ON_ERROR(i2c_master_bus_add_device(master_handle,<sp/>&amp;i2c_dev_conf,<sp/>&amp;out_handle-&gt;<ref refid="structbmp280__context__t_1aebc33e9d9d97bc57c51d01fa39056a22" kindref="member">i2c_handle</ref>),<sp/>err_handle,<sp/>TAG,<sp/></highlight><highlight class="stringliteral">&quot;i2c0<sp/>new<sp/>bus<sp/>failed<sp/>for<sp/>init&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>delay<sp/>before<sp/>next<sp/>i2c<sp/>transaction<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(BMP280_CMD_DELAY_MS));</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>read<sp/>and<sp/>validate<sp/>device<sp/>type<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_GOTO_ON_ERROR(<ref refid="group__drivers_1gaf76cc4194a69a3305e80efc3a4a04f67" kindref="member">bmp280_get_chip_id_register</ref>(out_handle,<sp/>&amp;out_handle-&gt;<ref refid="structbmp280__context__t_1a137c97523d489997ecbb781789e28b20" kindref="member">sensor_type</ref>),<sp/>err_handle,<sp/>TAG,<sp/></highlight><highlight class="stringliteral">&quot;read<sp/>chip<sp/>identifier<sp/>for<sp/>init<sp/>failed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(out_handle-&gt;<ref refid="structbmp280__context__t_1a137c97523d489997ecbb781789e28b20" kindref="member">sensor_type</ref><sp/>!=<sp/><ref refid="bmp280_8c_1aea1b324e2ffe3929e6df7f8f9fa49a44" kindref="member">BMP280_TYPE_BMP280</ref>)<sp/>{</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_GOTO_ON_FALSE(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>ESP_ERR_INVALID_VERSION,<sp/>err_handle,<sp/>TAG,<sp/></highlight><highlight class="stringliteral">&quot;detected<sp/>an<sp/>invalid<sp/>chip<sp/>type<sp/>for<sp/>init,<sp/>got:<sp/>%02x&quot;</highlight><highlight class="normal">,<sp/>out_handle-&gt;<ref refid="structbmp280__context__t_1a137c97523d489997ecbb781789e28b20" kindref="member">sensor_type</ref>);</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>attempt<sp/>to<sp/>reset<sp/>the<sp/>device<sp/>and<sp/>initialize<sp/>registers<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_GOTO_ON_ERROR(<ref refid="group__drivers_1ga4cc4d2e4cc06abc7b1b56788e3526b86" kindref="member">bmp280_reset</ref>(out_handle),<sp/>err_handle,<sp/>TAG,<sp/></highlight><highlight class="stringliteral">&quot;soft-reset<sp/>and<sp/>initialize<sp/>registers<sp/>for<sp/>init<sp/>failed&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>set<sp/>output<sp/>parameter<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/>*bmp280_handle<sp/>=<sp/>out_handle;</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>delay<sp/>task<sp/>before<sp/>i2c<sp/>transaction<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(BMP280_APPSTART_DELAY_MS));</highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ESP_OK;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/>err_handle:</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(out_handle<sp/>&amp;&amp;<sp/>out_handle-&gt;<ref refid="structbmp280__context__t_1aebc33e9d9d97bc57c51d01fa39056a22" kindref="member">i2c_handle</ref>)<sp/>{</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i2c_master_bus_rm_device(out_handle-&gt;<ref refid="structbmp280__context__t_1aebc33e9d9d97bc57c51d01fa39056a22" kindref="member">i2c_handle</ref>);</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(out_handle);</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/>err:</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="467"><highlight class="normal">}</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal">esp_err_t<sp/><ref refid="group__drivers_1ga8b4019ea8a3aa82c3e14b69e311f05bc" kindref="member">bmp280_get_measurements</ref>(<ref refid="group__drivers_1ga4ba5e63f50d3e97eabf7bdb5491420f4" kindref="member">bmp280_handle_t</ref><sp/>handle,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>temperature,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pressure)<sp/>{</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/>esp_err_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>ESP_OK;</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>start_time<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>esp_timer_get_time();</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data_is_ready<sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/>bit48_uint8_buffer_t<sp/>rx;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>validate<sp/>arguments<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_ARG_CHECK(<sp/>handle<sp/>&amp;&amp;<sp/>temperature<sp/>&amp;&amp;<sp/>pressure<sp/>);</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>attempt<sp/>to<sp/>poll<sp/>until<sp/>data<sp/>is<sp/>available<sp/>or<sp/>timeout<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>attempt<sp/>to<sp/>check<sp/>if<sp/>data<sp/>is<sp/>ready<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ESP_GOTO_ON_ERROR(<sp/><ref refid="group__drivers_1ga676b9dec55adbe7be006ec44911e4ded" kindref="member">bmp280_get_data_status</ref>(handle,<sp/>&amp;data_is_ready),<sp/>err,<sp/>TAG,<sp/></highlight><highlight class="stringliteral">&quot;data<sp/>ready<sp/>ready<sp/>for<sp/>get<sp/>fixed<sp/>measurement<sp/>failed.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>delay<sp/>task<sp/>before<sp/>next<sp/>i2c<sp/>transaction<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(BMP280_DATA_READY_DELAY_MS));</highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>validate<sp/>timeout<sp/>condition<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="ahtxx_8c_1aee7b193fcb571e0c3bc88c29f1662af4" kindref="member">ESP_TIMEOUT_CHECK</ref>(start_time,<sp/>BMP280_DATA_POLL_TIMEOUT_MS<sp/>*<sp/>1000))</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ESP_ERR_TIMEOUT;</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(data_is_ready<sp/>==<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>need<sp/>to<sp/>read<sp/>in<sp/>one<sp/>sequence<sp/>to<sp/>ensure<sp/>they<sp/>match.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_GOTO_ON_ERROR(<sp/>bmp280_i2c_read_from(handle,<sp/>BMP280_REG_PRESSURE,<sp/>rx,<sp/>BIT48_UINT8_BUFFER_SIZE),<sp/>err,<sp/>TAG,<sp/></highlight><highlight class="stringliteral">&quot;read<sp/>temperature<sp/>and<sp/>pressure<sp/>data<sp/>failed&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>concat<sp/>adc<sp/>pressure<sp/>&amp;<sp/>temperature<sp/>bytes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>adc_press<sp/>=<sp/>rx[0]<sp/>&lt;&lt;<sp/>12<sp/>|<sp/>rx[1]<sp/>&lt;&lt;<sp/>4<sp/>|<sp/>rx[2]<sp/>&gt;&gt;<sp/>4;</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>adc_temp<sp/><sp/>=<sp/>rx[3]<sp/>&lt;&lt;<sp/>12<sp/>|<sp/>rx[4]<sp/>&lt;&lt;<sp/>4<sp/>|<sp/>rx[5]<sp/>&gt;&gt;<sp/>4;</highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>compensate<sp/>adc<sp/>temperature<sp/>&amp;<sp/>pressure<sp/>and<sp/>set<sp/>output<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/>*temperature<sp/>=<sp/>bmp280_compensate_temperature(handle,<sp/>adc_temp);</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/>*pressure<sp/><sp/><sp/><sp/>=<sp/>bmp280_compensate_pressure(handle,<sp/>adc_press);</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>delay<sp/>before<sp/>next<sp/>i2c<sp/>transaction<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(BMP280_CMD_DELAY_MS));</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ESP_OK;</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/>err:</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="509"><highlight class="normal">}</highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal">esp_err_t<sp/><ref refid="group__drivers_1ga56e6e621f28b1aaae87ccf078582fc5c" kindref="member">bmp280_get_temperature</ref>(<ref refid="group__drivers_1ga4ba5e63f50d3e97eabf7bdb5491420f4" kindref="member">bmp280_handle_t</ref><sp/>handle,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>temperature)<sp/>{</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>pressure;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>validate<sp/>arguments<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_ARG_CHECK(<sp/>handle<sp/>&amp;&amp;<sp/>temperature<sp/>);</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>attempt<sp/>to<sp/>read<sp/>measurements<sp/>(temperature<sp/>&amp;<sp/>pressure)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_RETURN_ON_ERROR(<sp/><ref refid="group__drivers_1ga8b4019ea8a3aa82c3e14b69e311f05bc" kindref="member">bmp280_get_measurements</ref>(handle,<sp/>temperature,<sp/>&amp;pressure),<sp/>TAG,<sp/></highlight><highlight class="stringliteral">&quot;unable<sp/>to<sp/>read<sp/>measurements,<sp/>get<sp/>temperature<sp/>failed&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ESP_OK;</highlight></codeline>
<codeline lineno="521"><highlight class="normal">}</highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal">esp_err_t<sp/><ref refid="group__drivers_1ga15c360c34b843e3b827e202dbc64df6d" kindref="member">bmp280_get_pressure</ref>(<ref refid="group__drivers_1ga4ba5e63f50d3e97eabf7bdb5491420f4" kindref="member">bmp280_handle_t</ref><sp/>handle,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pressure)<sp/>{</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>temperature;</highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>validate<sp/>arguments<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_ARG_CHECK(<sp/>handle<sp/>&amp;&amp;<sp/>pressure<sp/>);</highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>attempt<sp/>to<sp/>read<sp/>measurements<sp/>(temperature<sp/>&amp;<sp/>pressure)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_RETURN_ON_ERROR(<sp/><ref refid="group__drivers_1ga8b4019ea8a3aa82c3e14b69e311f05bc" kindref="member">bmp280_get_measurements</ref>(handle,<sp/>&amp;temperature,<sp/>pressure),<sp/>TAG,<sp/></highlight><highlight class="stringliteral">&quot;unable<sp/>to<sp/>read<sp/>measurements,<sp/>get<sp/>pressure<sp/>failed&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ESP_OK;</highlight></codeline>
<codeline lineno="533"><highlight class="normal">}</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal">esp_err_t<sp/><ref refid="group__drivers_1ga676b9dec55adbe7be006ec44911e4ded" kindref="member">bmp280_get_data_status</ref>(<ref refid="group__drivers_1ga4ba5e63f50d3e97eabf7bdb5491420f4" kindref="member">bmp280_handle_t</ref><sp/>handle,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ready)<sp/>{</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/>bmp280_status_register_t<sp/>status_reg;</highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>validate<sp/>arguments<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_ARG_CHECK(<sp/>handle<sp/>);</highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>attempt<sp/>to<sp/>read<sp/>device<sp/>status<sp/>register<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_RETURN_ON_ERROR(<sp/><ref refid="group__drivers_1ga0f819759aa334f52d78d16fc5bf66973" kindref="member">bmp280_get_status_register</ref>(handle,<sp/>&amp;status_reg),<sp/>TAG,<sp/></highlight><highlight class="stringliteral">&quot;read<sp/>status<sp/>register<sp/>(data<sp/>ready<sp/>state)<sp/>failed&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>set<sp/>ready<sp/>state<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(status_reg.bits.measuring<sp/>==<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*ready<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*ready<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ESP_OK;</highlight></codeline>
<codeline lineno="552"><highlight class="normal">}</highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal">esp_err_t<sp/><ref refid="group__drivers_1gaa3b1ed5dabfd33fb862a77c362e6916e" kindref="member">bmp280_get_power_mode</ref>(<ref refid="group__drivers_1ga4ba5e63f50d3e97eabf7bdb5491420f4" kindref="member">bmp280_handle_t</ref><sp/>handle,<sp/><ref refid="group__drivers_1ga09b778eb79ca4059180c508483dd7426" kindref="member">bmp280_power_modes_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>power_mode)<sp/>{</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/>bmp280_control_measurement_register_t<sp/>ctrl_meas_reg;</highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>validate<sp/>arguments<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_ARG_CHECK(<sp/>handle<sp/>);</highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>attempt<sp/>to<sp/>read<sp/>control<sp/>measurement<sp/>register<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_RETURN_ON_ERROR(<sp/><ref refid="group__drivers_1ga5ced8f2fb2f2eb30487333c486092f7d" kindref="member">bmp280_get_control_measurement_register</ref>(handle,<sp/>&amp;ctrl_meas_reg),<sp/>TAG,<sp/></highlight><highlight class="stringliteral">&quot;read<sp/>control<sp/>measurement<sp/>register<sp/>for<sp/>get<sp/>power<sp/>mode<sp/>failed&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>set<sp/>power<sp/>mode<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/>*power_mode<sp/>=<sp/>ctrl_meas_reg.bits.power_mode;</highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ESP_OK;</highlight></codeline>
<codeline lineno="567"><highlight class="normal">}</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal">esp_err_t<sp/><ref refid="group__drivers_1ga42d45d4d0bc59f6892359139fab1be1c" kindref="member">bmp280_set_power_mode</ref>(<ref refid="group__drivers_1ga4ba5e63f50d3e97eabf7bdb5491420f4" kindref="member">bmp280_handle_t</ref><sp/>handle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group__drivers_1ga09b778eb79ca4059180c508483dd7426" kindref="member">bmp280_power_modes_t</ref><sp/>power_mode)<sp/>{</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/>bmp280_control_measurement_register_t<sp/>ctrl_meas_reg;</highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>validate<sp/>arguments<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_ARG_CHECK(<sp/>handle<sp/>);</highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>attempt<sp/>to<sp/>read<sp/>control<sp/>measurement<sp/>register<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_RETURN_ON_ERROR(<sp/><ref refid="group__drivers_1ga5ced8f2fb2f2eb30487333c486092f7d" kindref="member">bmp280_get_control_measurement_register</ref>(handle,<sp/>&amp;ctrl_meas_reg),<sp/>TAG,<sp/></highlight><highlight class="stringliteral">&quot;read<sp/>control<sp/>measurement<sp/>register<sp/>for<sp/>set<sp/>power<sp/>mode<sp/>failed&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>initialize<sp/>control<sp/>measurement<sp/>register<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/>ctrl_meas_reg.bits.power_mode<sp/>=<sp/>power_mode;</highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>attempt<sp/>to<sp/>write<sp/>control<sp/>measurement<sp/>register<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_RETURN_ON_ERROR(<sp/><ref refid="group__drivers_1gaa9f0653ff6fdcb6df91be990e87f4324" kindref="member">bmp280_set_control_measurement_register</ref>(handle,<sp/>ctrl_meas_reg),<sp/>TAG,<sp/></highlight><highlight class="stringliteral">&quot;write<sp/>control<sp/>measurement<sp/>register<sp/>for<sp/>set<sp/>power<sp/>mode<sp/>failed&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ESP_OK;</highlight></codeline>
<codeline lineno="585"><highlight class="normal">}</highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal">esp_err_t<sp/><ref refid="group__drivers_1ga6bf83bdbd14a94abb9460a8c158a0079" kindref="member">bmp280_get_pressure_oversampling</ref>(<ref refid="group__drivers_1ga4ba5e63f50d3e97eabf7bdb5491420f4" kindref="member">bmp280_handle_t</ref><sp/>handle,<sp/><ref refid="group__drivers_1ga21e2402ff8bbe587f1c9564f68de0561" kindref="member">bmp280_pressure_oversampling_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>oversampling)<sp/>{</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/>bmp280_control_measurement_register_t<sp/>ctrl_meas_reg;</highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>validate<sp/>arguments<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_ARG_CHECK(<sp/>handle<sp/>);</highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>attempt<sp/>to<sp/>read<sp/>control<sp/>measurement<sp/>register<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_RETURN_ON_ERROR(<sp/><ref refid="group__drivers_1ga5ced8f2fb2f2eb30487333c486092f7d" kindref="member">bmp280_get_control_measurement_register</ref>(handle,<sp/>&amp;ctrl_meas_reg),<sp/>TAG,<sp/></highlight><highlight class="stringliteral">&quot;read<sp/>control<sp/>measurement<sp/>register<sp/>for<sp/>get<sp/>pressure<sp/>oversampling<sp/>failed&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>set<sp/>oversampling<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/>*oversampling<sp/>=<sp/>ctrl_meas_reg.bits.pressure_oversampling;</highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ESP_OK;</highlight></codeline>
<codeline lineno="600"><highlight class="normal">}</highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal">esp_err_t<sp/><ref refid="group__drivers_1ga08bd496a9b36a475125232ca3366e481" kindref="member">bmp280_set_pressure_oversampling</ref>(<ref refid="group__drivers_1ga4ba5e63f50d3e97eabf7bdb5491420f4" kindref="member">bmp280_handle_t</ref><sp/>handle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group__drivers_1ga21e2402ff8bbe587f1c9564f68de0561" kindref="member">bmp280_pressure_oversampling_t</ref><sp/>oversampling)<sp/>{</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/>bmp280_control_measurement_register_t<sp/>ctrl_meas_reg;</highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>validate<sp/>arguments<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_ARG_CHECK(<sp/>handle<sp/>);</highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>attempt<sp/>to<sp/>read<sp/>control<sp/>measurement<sp/>register<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_RETURN_ON_ERROR(<sp/><ref refid="group__drivers_1ga5ced8f2fb2f2eb30487333c486092f7d" kindref="member">bmp280_get_control_measurement_register</ref>(handle,<sp/>&amp;ctrl_meas_reg),<sp/>TAG,<sp/></highlight><highlight class="stringliteral">&quot;read<sp/>control<sp/>measurement<sp/>register<sp/>for<sp/>set<sp/>pressure<sp/>oversampling<sp/>failed&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>initialize<sp/>control<sp/>measurement<sp/>register<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/>ctrl_meas_reg.bits.pressure_oversampling<sp/>=<sp/>oversampling;</highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>attempt<sp/>to<sp/>write<sp/>control<sp/>measurement<sp/>register<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_RETURN_ON_ERROR(<sp/><ref refid="group__drivers_1gaa9f0653ff6fdcb6df91be990e87f4324" kindref="member">bmp280_set_control_measurement_register</ref>(handle,<sp/>ctrl_meas_reg),<sp/>TAG,<sp/></highlight><highlight class="stringliteral">&quot;write<sp/>control<sp/>measurement<sp/>register<sp/>for<sp/>set<sp/>pressure<sp/>oversampling<sp/>failed&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ESP_OK;</highlight></codeline>
<codeline lineno="618"><highlight class="normal">}</highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal">esp_err_t<sp/><ref refid="group__drivers_1gaeac31c3392f59747e6b59af99d4d141b" kindref="member">bmp280_get_temperature_oversampling</ref>(<ref refid="group__drivers_1ga4ba5e63f50d3e97eabf7bdb5491420f4" kindref="member">bmp280_handle_t</ref><sp/>handle,<sp/><ref refid="group__drivers_1ga5cfc950126ecbc2ac018615da7ed9448" kindref="member">bmp280_temperature_oversampling_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>oversampling)<sp/>{</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/>bmp280_control_measurement_register_t<sp/>ctrl_meas_reg;</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>validate<sp/>arguments<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_ARG_CHECK(<sp/>handle<sp/>);</highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>attempt<sp/>to<sp/>read<sp/>control<sp/>measurement<sp/>register<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_RETURN_ON_ERROR(<sp/><ref refid="group__drivers_1ga5ced8f2fb2f2eb30487333c486092f7d" kindref="member">bmp280_get_control_measurement_register</ref>(handle,<sp/>&amp;ctrl_meas_reg),<sp/>TAG,<sp/></highlight><highlight class="stringliteral">&quot;read<sp/>control<sp/>measurement<sp/>register<sp/>for<sp/>get<sp/>temperature<sp/>oversampling<sp/>failed&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>set<sp/>oversampling<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/>*oversampling<sp/>=<sp/>ctrl_meas_reg.bits.temperature_oversampling;</highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ESP_OK;</highlight></codeline>
<codeline lineno="632"><highlight class="normal">}</highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal">esp_err_t<sp/><ref refid="group__drivers_1ga9bbfcf39651d3b9b6bc07bf426cd2ecc" kindref="member">bmp280_set_temperature_oversampling</ref>(<ref refid="group__drivers_1ga4ba5e63f50d3e97eabf7bdb5491420f4" kindref="member">bmp280_handle_t</ref><sp/>handle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group__drivers_1ga5cfc950126ecbc2ac018615da7ed9448" kindref="member">bmp280_temperature_oversampling_t</ref><sp/>oversampling)<sp/>{</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/>bmp280_control_measurement_register_t<sp/>ctrl_meas_reg;</highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>validate<sp/>arguments<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_ARG_CHECK(<sp/>handle<sp/>);</highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>attempt<sp/>to<sp/>read<sp/>control<sp/>measurement<sp/>register<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_RETURN_ON_ERROR(<sp/><ref refid="group__drivers_1ga5ced8f2fb2f2eb30487333c486092f7d" kindref="member">bmp280_get_control_measurement_register</ref>(handle,<sp/>&amp;ctrl_meas_reg),<sp/>TAG,<sp/></highlight><highlight class="stringliteral">&quot;read<sp/>control<sp/>measurement<sp/>register<sp/>for<sp/>set<sp/>temperature<sp/>oversampling<sp/>failed&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>initialize<sp/>control<sp/>measurement<sp/>register<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/>ctrl_meas_reg.bits.temperature_oversampling<sp/>=<sp/>oversampling;</highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>attempt<sp/>to<sp/>write<sp/>control<sp/>measurement<sp/>register<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_RETURN_ON_ERROR(<sp/><ref refid="group__drivers_1gaa9f0653ff6fdcb6df91be990e87f4324" kindref="member">bmp280_set_control_measurement_register</ref>(handle,<sp/>ctrl_meas_reg),<sp/>TAG,<sp/></highlight><highlight class="stringliteral">&quot;write<sp/>control<sp/>measurement<sp/>register<sp/>for<sp/>set<sp/>temperature<sp/>oversampling<sp/>failed&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ESP_OK;</highlight></codeline>
<codeline lineno="650"><highlight class="normal">}</highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal">esp_err_t<sp/><ref refid="group__drivers_1ga41810e5f04fe34b3d6b6d7a2f0ed6090" kindref="member">bmp280_get_standby_time</ref>(<ref refid="group__drivers_1ga4ba5e63f50d3e97eabf7bdb5491420f4" kindref="member">bmp280_handle_t</ref><sp/>handle,<sp/><ref refid="group__drivers_1gaa9766737a9535054ecb73ff34d467dbd" kindref="member">bmp280_standby_times_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>standby_time)<sp/>{</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/>bmp280_configuration_register_t<sp/>config_reg;</highlight></codeline>
<codeline lineno="654"><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>validate<sp/>arguments<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_ARG_CHECK(<sp/>handle<sp/>);</highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>attempt<sp/>to<sp/>read<sp/>configuration<sp/>register<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_RETURN_ON_ERROR(<sp/><ref refid="group__drivers_1ga855ad80da01437df61e95e204a8f27a0" kindref="member">bmp280_get_configuration_register</ref>(handle,<sp/>&amp;config_reg),<sp/>TAG,<sp/></highlight><highlight class="stringliteral">&quot;read<sp/>configuration<sp/>register<sp/>for<sp/>get<sp/>stand-by<sp/>time<sp/>failed&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>set<sp/>standby<sp/>time<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/>*standby_time<sp/>=<sp/>config_reg.bits.standby_time;</highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ESP_OK;</highlight></codeline>
<codeline lineno="665"><highlight class="normal">}</highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal">esp_err_t<sp/><ref refid="group__drivers_1ga0d7567352da5f0d2ae94a8975838733a" kindref="member">bmp280_set_standby_time</ref>(<ref refid="group__drivers_1ga4ba5e63f50d3e97eabf7bdb5491420f4" kindref="member">bmp280_handle_t</ref><sp/>handle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group__drivers_1gaa9766737a9535054ecb73ff34d467dbd" kindref="member">bmp280_standby_times_t</ref><sp/>standby_time)<sp/>{</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/>bmp280_configuration_register_t<sp/>config_reg;</highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>validate<sp/>arguments<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_ARG_CHECK(<sp/>handle<sp/>);</highlight></codeline>
<codeline lineno="672"><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>attempt<sp/>to<sp/>read<sp/>configuration<sp/>register<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_RETURN_ON_ERROR(<sp/><ref refid="group__drivers_1ga855ad80da01437df61e95e204a8f27a0" kindref="member">bmp280_get_configuration_register</ref>(handle,<sp/>&amp;config_reg),<sp/>TAG,<sp/></highlight><highlight class="stringliteral">&quot;read<sp/>configuration<sp/>register<sp/>for<sp/>set<sp/>stand-by<sp/>time<sp/>failed&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>initialize<sp/>configuration<sp/>register<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/>config_reg.bits.standby_time<sp/>=<sp/>standby_time;</highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>attempt<sp/>to<sp/>write<sp/>configuration<sp/>register<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_RETURN_ON_ERROR(<sp/><ref refid="group__drivers_1gadc04372e8af742e060dd363e7b15b665" kindref="member">bmp280_set_configuration_register</ref>(handle,<sp/>config_reg),<sp/>TAG,<sp/></highlight><highlight class="stringliteral">&quot;write<sp/>configuration<sp/>register<sp/>for<sp/>set<sp/>stand-by<sp/>time<sp/>failed&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="681"><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ESP_OK;</highlight></codeline>
<codeline lineno="683"><highlight class="normal">}</highlight></codeline>
<codeline lineno="684"><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal">esp_err_t<sp/><ref refid="group__drivers_1gaf3d52e45780f2336048c4fa6906a8972" kindref="member">bmp280_get_iir_filter</ref>(<ref refid="group__drivers_1ga4ba5e63f50d3e97eabf7bdb5491420f4" kindref="member">bmp280_handle_t</ref><sp/>handle,<sp/><ref refid="group__drivers_1ga6f4e9c7fd7225c16ee96a6f9df8b9719" kindref="member">bmp280_iir_filters_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>iir_filter)<sp/>{</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/>bmp280_configuration_register_t<sp/>config_reg;</highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>validate<sp/>arguments<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_ARG_CHECK(<sp/>handle<sp/>);</highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>attempt<sp/>to<sp/>read<sp/>configuration<sp/>register<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_RETURN_ON_ERROR(<sp/><ref refid="group__drivers_1ga855ad80da01437df61e95e204a8f27a0" kindref="member">bmp280_get_configuration_register</ref>(handle,<sp/>&amp;config_reg),<sp/>TAG,<sp/></highlight><highlight class="stringliteral">&quot;read<sp/>configuration<sp/>register<sp/>for<sp/>get<sp/>IIR<sp/>filter<sp/>failed&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>set<sp/>standby<sp/>time<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/>*iir_filter<sp/>=<sp/>config_reg.bits.iir_filter;</highlight></codeline>
<codeline lineno="696"><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ESP_OK;</highlight></codeline>
<codeline lineno="698"><highlight class="normal">}</highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal">esp_err_t<sp/><ref refid="group__drivers_1ga49d702e3251bd23cfb8b5122cfe95a20" kindref="member">bmp280_set_iir_filter</ref>(<ref refid="group__drivers_1ga4ba5e63f50d3e97eabf7bdb5491420f4" kindref="member">bmp280_handle_t</ref><sp/>handle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group__drivers_1ga6f4e9c7fd7225c16ee96a6f9df8b9719" kindref="member">bmp280_iir_filters_t</ref><sp/>iir_filter)<sp/>{</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/>bmp280_configuration_register_t<sp/>config_reg;</highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>validate<sp/>arguments<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_ARG_CHECK(<sp/>handle<sp/>);</highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>attempt<sp/>to<sp/>read<sp/>configuration<sp/>register<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_RETURN_ON_ERROR(<sp/><ref refid="group__drivers_1ga855ad80da01437df61e95e204a8f27a0" kindref="member">bmp280_get_configuration_register</ref>(handle,<sp/>&amp;config_reg),<sp/>TAG,<sp/></highlight><highlight class="stringliteral">&quot;read<sp/>configuration<sp/>register<sp/>for<sp/>set<sp/>IIR<sp/>filter<sp/>failed&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>initialize<sp/>configuration<sp/>register<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/>config_reg.bits.iir_filter<sp/>=<sp/>iir_filter;</highlight></codeline>
<codeline lineno="711"><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>attempt<sp/>to<sp/>write<sp/>configuration<sp/>register<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_RETURN_ON_ERROR(<sp/><ref refid="group__drivers_1gadc04372e8af742e060dd363e7b15b665" kindref="member">bmp280_set_configuration_register</ref>(handle,<sp/>config_reg),<sp/>TAG,<sp/></highlight><highlight class="stringliteral">&quot;write<sp/>configuration<sp/>register<sp/>for<sp/>set<sp/>IIR<sp/>filter<sp/>failed&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="714"><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ESP_OK;</highlight></codeline>
<codeline lineno="716"><highlight class="normal">}</highlight></codeline>
<codeline lineno="717"><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="normal">esp_err_t<sp/><ref refid="group__drivers_1ga4cc4d2e4cc06abc7b1b56788e3526b86" kindref="member">bmp280_reset</ref>(<ref refid="group__drivers_1ga4ba5e63f50d3e97eabf7bdb5491420f4" kindref="member">bmp280_handle_t</ref><sp/>handle)<sp/>{</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>validate<sp/>arguments<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_ARG_CHECK(<sp/>handle<sp/>);</highlight></codeline>
<codeline lineno="721"><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>attempt<sp/>i2c<sp/>transaction<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_RETURN_ON_ERROR(<sp/>bmp280_i2c_write_byte_to(handle,<sp/>BMP280_REG_RESET,<sp/>BMP280_RESET_VALUE),<sp/>TAG,<sp/></highlight><highlight class="stringliteral">&quot;write<sp/>reset<sp/>register<sp/>for<sp/>reset<sp/>failed&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="724"><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>wait<sp/>until<sp/>finished<sp/>copying<sp/>NVP<sp/>data<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>forced<sp/>delay<sp/>before<sp/>next<sp/>transaction<sp/>-<sp/>see<sp/>datasheet<sp/>for<sp/>details</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/>vTaskDelay(pdMS_TO_TICKS(BMP280_RESET_DELAY_MS));<sp/></highlight><highlight class="comment">//<sp/>check<sp/>is<sp/>busy<sp/>in<sp/>timeout<sp/>loop...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>attempt<sp/>to<sp/>setup<sp/>device<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_RETURN_ON_ERROR(<sp/>bmp280_setup(handle),<sp/>TAG,<sp/></highlight><highlight class="stringliteral">&quot;unable<sp/>to<sp/>setup<sp/>device,<sp/>reset<sp/>failed&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ESP_OK;</highlight></codeline>
<codeline lineno="733"><highlight class="normal">}</highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal">esp_err_t<sp/><ref refid="group__drivers_1ga29361ec23d39ce227eee5cbf49902160" kindref="member">bmp280_remove</ref>(<ref refid="group__drivers_1ga4ba5e63f50d3e97eabf7bdb5491420f4" kindref="member">bmp280_handle_t</ref><sp/>handle)<sp/>{</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>validate<sp/>arguments<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_ARG_CHECK(<sp/>handle<sp/>);</highlight></codeline>
<codeline lineno="738"><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i2c_master_bus_rm_device(handle-&gt;<ref refid="structbmp280__context__t_1aebc33e9d9d97bc57c51d01fa39056a22" kindref="member">i2c_handle</ref>);</highlight></codeline>
<codeline lineno="740"><highlight class="normal">}</highlight></codeline>
<codeline lineno="741"><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal">esp_err_t<sp/><ref refid="group__drivers_1ga56d41e7e1d5e629206877e97cb556ccc" kindref="member">bmp280_delete</ref>(<ref refid="group__drivers_1ga4ba5e63f50d3e97eabf7bdb5491420f4" kindref="member">bmp280_handle_t</ref><sp/>handle){</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>validate<sp/>arguments<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_ARG_CHECK(<sp/>handle<sp/>);</highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>remove<sp/>device<sp/>from<sp/>master<sp/>bus<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/>ESP_RETURN_ON_ERROR(<sp/><ref refid="group__drivers_1ga29361ec23d39ce227eee5cbf49902160" kindref="member">bmp280_remove</ref>(handle),<sp/>TAG,<sp/></highlight><highlight class="stringliteral">&quot;unable<sp/>to<sp/>remove<sp/>device<sp/>from<sp/>i2c<sp/>master<sp/>bus,<sp/>delete<sp/>handle<sp/>failed&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="748"><highlight class="normal"></highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>validate<sp/>handle<sp/>instance<sp/>and<sp/>free<sp/>handles<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(handle-&gt;<ref refid="structbmp280__context__t_1aebc33e9d9d97bc57c51d01fa39056a22" kindref="member">i2c_handle</ref>)<sp/>{</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(handle-&gt;<ref refid="structbmp280__context__t_1aebc33e9d9d97bc57c51d01fa39056a22" kindref="member">i2c_handle</ref>);</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(handle);</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(handle-&gt;<ref refid="structbmp280__context__t_1af426a06322777dd303c01b6f98ec3981" kindref="member">dev_cal_factors</ref>)<sp/>{</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(handle-&gt;<ref refid="structbmp280__context__t_1af426a06322777dd303c01b6f98ec3981" kindref="member">dev_cal_factors</ref>);</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ESP_OK;</highlight></codeline>
<codeline lineno="759"><highlight class="normal">}</highlight></codeline>
<codeline lineno="760"><highlight class="normal"></highlight></codeline>
<codeline lineno="761"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="group__drivers_1ga987b258a57f3c4a4384e6aa865b326c6" kindref="member">bmp280_get_fw_version</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>BMP280_FW_VERSION_STR;</highlight></codeline>
<codeline lineno="763"><highlight class="normal">}</highlight></codeline>
<codeline lineno="764"><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal">int32_t<sp/><ref refid="group__drivers_1ga18945c7c6b94a2aa4187dfef889f7da8" kindref="member">bmp280_get_fw_version_number</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>BMP280_FW_VERSION_INT32;</highlight></codeline>
<codeline lineno="767"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="components/peripherals/i2c/esp_bmp280/bmp280.c"/>
  </compounddef>
</doxygen>
