.TH "components/peripherals/owb/esp_ds18b20/ds18b20.c" 3 "ESP-IDF Components by K0I05" \" -*- nroff -*-
.ad l
.nh
.SH NAME
components/peripherals/owb/esp_ds18b20/ds18b20.c
.SH SYNOPSIS
.br
.PP
\fR#include 'include/ds18b20\&.h'\fP
.br
\fR#include <string\&.h>\fP
.br
\fR#include <stdio\&.h>\fP
.br
\fR#include <math\&.h>\fP
.br
\fR#include <esp_log\&.h>\fP
.br
\fR#include <esp_check\&.h>\fP
.br
\fR#include <esp_timer\&.h>\fP
.br
\fR#include <freertos/FreeRTOS\&.h>\fP
.br
\fR#include <freertos/task\&.h>\fP
.br
\fR#include <onewire_cmd\&.h>\fP
.br
\fR#include <onewire_crc\&.h>\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBDS18B20_CMD_TEMP_CONVERT\fP   UINT8_C(0x44)"
.br
.ti -1c
.RI "#define \fBDS18B20_CMD_SCRATCHPAD_WRITE\fP   UINT8_C(0x4E)"
.br
.ti -1c
.RI "#define \fBDS18B20_CMD_SCRATCHPAD_READ\fP   UINT8_C(0xBE)"
.br
.ti -1c
.RI "#define \fBDS18B20_CMD_SCRATCHPAD_COPY\fP   UINT8_C(0x48)"
.br
.ti -1c
.RI "#define \fBDS18B20_CMD_EEPROM_RECALL\fP   UINT8_C(0xB8)"
.br
.ti -1c
.RI "#define \fBDS18B20_CMD_POWER_SUPPLY_READ\fP   UINT8_C(0xB4)"
.br
.ti -1c
.RI "#define \fBDS18B20_DEVICE_MAX\fP   UINT16_C(10)"
.br
.ti -1c
.RI "#define \fBDS18B20_POWERUP_DELAY_MS\fP   UINT16_C(20)"
.br
.ti -1c
.RI "#define \fBDS18B20_RESET_DELAY_MS\fP   UINT16_C(25)"
.br
.ti -1c
.RI "#define \fBDS18B20_APPSTART_DELAY_MS\fP   UINT16_C(10)"
.br
.ti -1c
.RI "#define \fBDS18B20_EEPROM_WRITE_DELAY_MS\fP   UINT16_C(15)"
.br
.ti -1c
.RI "#define \fBESP_ARG_CHECK\fP(VAL)"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "bool \fBds18b20_validate_address\fP (const onewire_device_address_t address)"
.br
.ti -1c
.RI "esp_err_t \fBds18b20_detect\fP (\fBonewire_bus_handle_t\fP owb_handle, \fBonewire_device_t\fP *const devices, const uint8_t device_size, uint8_t *const device_count)"
.br
.RI "Detects up to 10 DS18B20 devices on the 1-wire bus\&. "
.ti -1c
.RI "esp_err_t \fBds18b20_connected\fP (\fBds18b20_handle_t\fP handle, bool *const connected)"
.br
.RI "Checks if the DS18B20 is connected to the 1-wire bus\&. "
.ti -1c
.RI "esp_err_t \fBds18b20_init\fP (\fBonewire_device_t\fP *device, const \fBds18b20_config_t\fP *ds18b20_config, \fBds18b20_handle_t\fP *ds18b20_handle)"
.br
.RI "Initializes an DS18B20 device onto the 1-wire master bus\&. "
.ti -1c
.RI "esp_err_t \fBds18b20_get_temperature\fP (\fBds18b20_handle_t\fP handle, float *const temperature)"
.br
.RI "Triggers temperature conversion and reads temperature from DS18B20\&. "
.ti -1c
.RI "esp_err_t \fBds18b20_get_measurement\fP (\fBds18b20_handle_t\fP handle, float *const temperature)"
.br
.RI "Reads temperature from DS18B20\&. "
.ti -1c
.RI "esp_err_t \fBds18b20_trigger_temperature_conversion\fP (\fBds18b20_handle_t\fP handle)"
.br
.RI "Triggers DS18B20 temperature conversion\&. This function must be called before reading the temperature from DS18B20\&. "
.ti -1c
.RI "esp_err_t \fBds18b20_get_resolution\fP (\fBds18b20_handle_t\fP handle, \fBds18b20_resolutions_t\fP *const resolution)"
.br
.RI "Reads temperature conversion resolution from DS18B20\&. "
.ti -1c
.RI "esp_err_t \fBds18b20_set_resolution\fP (\fBds18b20_handle_t\fP handle, const \fBds18b20_resolutions_t\fP resolution)"
.br
.RI "Writes temperature conversion resolution to DS18B20\&. "
.ti -1c
.RI "esp_err_t \fBds18b20_get_alarm_thresholds\fP (\fBds18b20_handle_t\fP handle, int8_t *const high, int8_t *const low)"
.br
.RI "Reads high and low temperature alarm thresholds from DS18B20\&. "
.ti -1c
.RI "esp_err_t \fBds18b20_set_alarm_thresholds\fP (\fBds18b20_handle_t\fP handle, const int8_t high, const int8_t low)"
.br
.RI "Writes high and low temperature alarm thresholds to DS18B20\&. "
.ti -1c
.RI "esp_err_t \fBds18b20_get_power_supply_mode\fP (\fBds18b20_handle_t\fP handle, bool *const parasitic)"
.br
.RI "Reads power supply mode setting from DS18B20\&. Parasitic-powered devices are powered by the data pin (DQ) and will pull the bus low during read time slot\&. Parasitic-powered devices are not supported at this time\&. "
.ti -1c
.RI "esp_err_t \fBds18b20_delete\fP (\fBds18b20_handle_t\fP handle)"
.br
.RI "Removes an DS18B20 device from master bus and frees handle\&. "
.ti -1c
.RI "const char * \fBds18b20_get_fw_version\fP (void)"
.br
.RI "Converts DS18B20 firmware version numbers (major, minor, patch) into a string\&. "
.ti -1c
.RI "int32_t \fBds18b20_get_fw_version_number\fP (void)"
.br
.RI "Converts DS18B20 firmware version numbers (major, minor, patch) into an integer value\&. "
.in -1c
.SH "Detailed Description"
.PP 
ESP-IDF driver for DS18B20 temperature sensor

.PP
Ported from esp-open-rtos

.PP
Copyright (c) 2024 Eric Gionet (gionet.c.eric@gmail.com)

.PP
MIT Licensed as described in the file LICENSE 
.SH "Macro Definition Documentation"
.PP 
.SS "#define DS18B20_APPSTART_DELAY_MS   UINT16_C(10)"
ds18b20 delay after initialization before application start-up 
.SS "#define DS18B20_CMD_EEPROM_RECALL   UINT8_C(0xB8)"
restore alarm trigger values and configuration data from EEPROM to the scratchpad 
.SS "#define DS18B20_CMD_POWER_SUPPLY_READ   UINT8_C(0xB4)"
determine if a device is using parasitic power 
.SS "#define DS18B20_CMD_SCRATCHPAD_COPY   UINT8_C(0x48)"
copy the contents of the scratchpad to the device EEPROM 
.SS "#define DS18B20_CMD_SCRATCHPAD_READ   UINT8_C(0xBE)"
read 9 bytes of data (including CRC) from the device scratchpad 
.SS "#define DS18B20_CMD_SCRATCHPAD_WRITE   UINT8_C(0x4E)"
write 3 bytes of data to the device scratchpad at positions 2, 3 and 4 
.SS "#define DS18B20_CMD_TEMP_CONVERT   UINT8_C(0x44)"
initiate a single temperature conversion 
.SS "#define DS18B20_DEVICE_MAX   UINT16_C(10)"
maximum number of ds18b20 devices on the 1-wire bus 
.SS "#define ESP_ARG_CHECK( VAL)"
\fBValue:\fP
.nf
do { if (!(VAL)) return ESP_ERR_INVALID_ARG; } while (0)
.PP
.fi

.SH "Author"
.PP 
Generated automatically by Doxygen for ESP-IDF Components by K0I05 from the source code\&.
