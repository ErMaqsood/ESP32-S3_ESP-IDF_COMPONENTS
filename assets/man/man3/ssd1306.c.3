.TH "components/peripherals/i2c/esp_ssd1306/ssd1306.c" 3 "ESP-IDF Components by K0I05" \" -*- nroff -*-
.ad l
.nh
.SH NAME
components/peripherals/i2c/esp_ssd1306/ssd1306.c
.SH SYNOPSIS
.br
.PP
\fR#include 'include/ssd1306\&.h'\fP
.br
\fR#include 'include/font_latin_8x8\&.h'\fP
.br
\fR#include <string\&.h>\fP
.br
\fR#include <esp_log\&.h>\fP
.br
\fR#include <esp_check\&.h>\fP
.br
\fR#include <freertos/FreeRTOS\&.h>\fP
.br
\fR#include <freertos/task\&.h>\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "union \fBssd1306_out_column_t\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBSSD1306_CONTROL_BYTE_CMD_SINGLE\fP   0x80"
.br
.ti -1c
.RI "#define \fBSSD1306_CONTROL_BYTE_CMD_STREAM\fP   0x00"
.br
.ti -1c
.RI "#define \fBSSD1306_CONTROL_BYTE_DATA_SINGLE\fP   0xC0"
.br
.ti -1c
.RI "#define \fBSSD1306_CONTROL_BYTE_DATA_STREAM\fP   0x40"
.br
.ti -1c
.RI "#define \fBSSD1306_CMD_SET_CONTRAST\fP   0x81"
.br
.ti -1c
.RI "#define \fBSSD1306_CMD_DISPLAY_RAM\fP   0xA4"
.br
.ti -1c
.RI "#define \fBSSD1306_CMD_DISPLAY_ALLON\fP   0xA5"
.br
.ti -1c
.RI "#define \fBSSD1306_CMD_DISPLAY_NORMAL\fP   0xA6"
.br
.ti -1c
.RI "#define \fBSSD1306_CMD_DISPLAY_INVERTED\fP   0xA7"
.br
.ti -1c
.RI "#define \fBSSD1306_CMD_DISPLAY_OFF\fP   0xAE"
.br
.ti -1c
.RI "#define \fBSSD1306_CMD_DISPLAY_ON\fP   0xAF"
.br
.ti -1c
.RI "#define \fBSSD1306_CMD_SET_MEMORY_ADDR_MODE\fP   0x20"
.br
.ti -1c
.RI "#define \fBSSD1306_CMD_SET_HORI_ADDR_MODE\fP   0x00"
.br
.ti -1c
.RI "#define \fBSSD1306_CMD_SET_VERT_ADDR_MODE\fP   0x01"
.br
.ti -1c
.RI "#define \fBSSD1306_CMD_SET_PAGE_ADDR_MODE\fP   0x02"
.br
.ti -1c
.RI "#define \fBSSD1306_CMD_SET_COLUMN_RANGE\fP   0x21"
.br
.ti -1c
.RI "#define \fBSSD1306_CMD_SET_PAGE_RANGE\fP   0x22"
.br
.ti -1c
.RI "#define \fBSSD1306_CMD_SET_DISPLAY_START_LINE\fP   0x40"
.br
.ti -1c
.RI "#define \fBSSD1306_CMD_SET_SEGMENT_REMAP_0\fP   0xA0"
.br
.ti -1c
.RI "#define \fBSSD1306_CMD_SET_SEGMENT_REMAP_1\fP   0xA1"
.br
.ti -1c
.RI "#define \fBSSD1306_CMD_SET_MUX_RATIO\fP   0xA8"
.br
.ti -1c
.RI "#define \fBSSD1306_CMD_SET_COM_SCAN_MODE\fP   0xC8"
.br
.ti -1c
.RI "#define \fBSSD1306_CMD_SET_DISPLAY_OFFSET\fP   0xD3"
.br
.ti -1c
.RI "#define \fBSSD1306_CMD_SET_COM_PIN_MAP\fP   0xDA"
.br
.ti -1c
.RI "#define \fBSSD1306_CMD_NOP\fP   0xE3"
.br
.ti -1c
.RI "#define \fBSSD1306_CMD_SET_DISPLAY_CLK_DIV\fP   0xD5"
.br
.ti -1c
.RI "#define \fBSSD1306_CMD_SET_PRECHARGE\fP   0xD9"
.br
.ti -1c
.RI "#define \fBSSD1306_CMD_SET_VCOMH_DESELCT\fP   0xDB"
.br
.ti -1c
.RI "#define \fBSSD1306_CMD_SET_CHARGE_PUMP\fP   0x8D"
.br
.ti -1c
.RI "#define \fBSSD1306_CMD_HORIZONTAL_RIGHT\fP   0x26"
.br
.ti -1c
.RI "#define \fBSSD1306_CMD_HORIZONTAL_LEFT\fP   0x27"
.br
.ti -1c
.RI "#define \fBSSD1306_CMD_CONTINUOUS_SCROLL\fP   0x29"
.br
.ti -1c
.RI "#define \fBSSD1306_CMD_DEACTIVE_SCROLL\fP   0x2E"
.br
.ti -1c
.RI "#define \fBSSD1306_CMD_ACTIVE_SCROLL\fP   0x2F"
.br
.ti -1c
.RI "#define \fBSSD1306_CMD_VERTICAL\fP   0xA3"
.br
.ti -1c
.RI "#define \fBSSD1306_TEXTBOX_DISPLAY_MAX_LEN\fP   50"
.br
.ti -1c
.RI "#define \fBSSD1306_TEXT_DISPLAY_MAX_LEN\fP   18"
.br
.ti -1c
.RI "#define \fBSSD1306_TEXT_X2_DISPLAY_MAX_LEN\fP   8"
.br
.ti -1c
.RI "#define \fBSSD1306_TEXT_X3_DISPLAY_MAX_LEN\fP   5"
.br
.ti -1c
.RI "#define \fBESP_ARG_CHECK\fP(VAL)"
.br
.ti -1c
.RI "#define \fBPACK8\fP   \fB__attribute__\fP((aligned( __alignof__( uint8_t ) ), packed ))"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef union ssd1306_out_column_t \fBssd1306_out_column_t\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "esp_err_t \fBssd1306_load_bitmap_font\fP (const uint8_t *font, int encoding, uint8_t *bitmap, \fBssd1306_bdf_font_t\fP *const bdf_font)"
.br
.RI "Loads a BDF bitmap font and BDF font structure from a font file\&. "
.ti -1c
.RI "esp_err_t \fBssd1306_display_bdf_text\fP (\fBssd1306_handle_t\fP handle, const uint8_t *font, const char *text, int xpos, int ypos)"
.br
.RI "Displays text on the SSD1306 with BDF font support\&. "
.ti -1c
.RI "esp_err_t \fBssd1306_display_bdf_code\fP (\fBssd1306_handle_t\fP handle, const uint8_t *font, int code, int xpos, int ypos)"
.br
.RI "Displays BDF font code on the SSD1306\&. "
.ti -1c
.RI "esp_err_t \fBssd1306_set_pixel\fP (\fBssd1306_handle_t\fP handle, uint8_t xpos, uint8_t ypos, bool invert)"
.br
.RI "Sets SSD1306 pages and segments data for a pixel\&. "
.ti -1c
.RI "esp_err_t \fBssd1306_set_line\fP (\fBssd1306_handle_t\fP handle, uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, bool invert)"
.br
.RI "Sets SSD1306 pages and segments data for a line\&. "
.ti -1c
.RI "esp_err_t \fBssd1306_set_circle\fP (\fBssd1306_handle_t\fP handle, uint8_t x0, uint8_t y0, uint8_t r, bool invert)"
.br
.RI "Sets SSD1306 pages and segments data for a circle\&. "
.ti -1c
.RI "esp_err_t \fBssd1306_display_circle\fP (\fBssd1306_handle_t\fP handle, uint8_t x0, uint8_t y0, uint8_t r, bool invert)"
.br
.RI "Sets SSD1306 pages and segments data for a circle and display's the circle\&. "
.ti -1c
.RI "esp_err_t \fBssd1306_display_filled_circle\fP (\fBssd1306_handle_t\fP handle, uint8_t x0, uint8_t y0, uint8_t r, bool invert)"
.br
.RI "Sets SSD1306 pages and segments data for a filled circle and display's the filled circle\&. "
.ti -1c
.RI "esp_err_t \fBssd1306_set_rectangle\fP (\fBssd1306_handle_t\fP handle, uint8_t x, uint8_t y, uint8_t w, uint8_t h, bool invert)"
.br
.RI "Sets SSD1306 pages and segments data for a rectangle\&. "
.ti -1c
.RI "esp_err_t \fBssd1306_display_rectangle\fP (\fBssd1306_handle_t\fP handle, uint8_t x, uint8_t y, uint8_t w, uint8_t h, bool invert)"
.br
.RI "Sets SSD1306 pages and segments data for a rectangle and display's the rectangle\&. "
.ti -1c
.RI "esp_err_t \fBssd1306_display_filled_rectangle\fP (\fBssd1306_handle_t\fP handle, uint8_t x, uint8_t y, uint8_t w, uint8_t h, bool invert)"
.br
.RI "Sets SSD1306 pages and segments data for a filled rectangle and display's the filled rectangle\&. "
.ti -1c
.RI "esp_err_t \fBssd1306_enable_display\fP (\fBssd1306_handle_t\fP handle)"
.br
.RI "Turns SSD1306 display panel on\&. "
.ti -1c
.RI "esp_err_t \fBssd1306_disable_display\fP (\fBssd1306_handle_t\fP handle)"
.br
.RI "Turns SSD1306 display panel off (sleep mode)\&. "
.ti -1c
.RI "esp_err_t \fBssd1306_display_pages\fP (\fBssd1306_handle_t\fP handle)"
.br
.RI "Displays segment data for each page supported by the SSD1306 display panel\&. "
.ti -1c
.RI "esp_err_t \fBssd1306_set_pages\fP (\fBssd1306_handle_t\fP handle, uint8_t *buffer)"
.br
.RI "Sets segment data for each page supported by the SSD1306 display panel\&. "
.ti -1c
.RI "esp_err_t \fBssd1306_get_pages\fP (\fBssd1306_handle_t\fP handle, uint8_t *buffer)"
.br
.RI "Gets segment data for each page supported by the SSD1306 display panel\&. "
.ti -1c
.RI "esp_err_t \fBssd1306_set_bitmap\fP (\fBssd1306_handle_t\fP handle, uint8_t xpos, uint8_t ypos, const uint8_t *bitmap, uint8_t width, uint8_t height, bool invert)"
.br
.RI "Sets SSD1306 pages and segments data for a bitmap\&. "
.ti -1c
.RI "esp_err_t \fBssd1306_display_bitmap\fP (\fBssd1306_handle_t\fP handle, uint8_t xpos, uint8_t ypos, const uint8_t *bitmap, uint8_t width, uint8_t height, bool invert)"
.br
.RI "Displays a bitmap on the SSD1306\&. "
.ti -1c
.RI "esp_err_t \fBssd1306_display_bitmap__\fP (\fBssd1306_handle_t\fP handle, uint8_t xpos, uint8_t ypos, const uint8_t *bitmap, uint8_t width, uint8_t height, bool invert)"
.br
.ti -1c
.RI "esp_err_t \fBssd1306_display_image\fP (\fBssd1306_handle_t\fP handle, uint8_t page, uint8_t segment, const uint8_t *image, uint8_t width)"
.br
.RI "Displays an image by page and segment on the SSD1306\&. "
.ti -1c
.RI "esp_err_t \fBssd1306_display_text\fP (\fBssd1306_handle_t\fP handle, uint8_t page, const char *text, bool invert)"
.br
.RI "Displays text by page on the SSD1306 with a maximum of 16-characters\&. "
.ti -1c
.RI "esp_err_t \fBssd1306_display_text_x2\fP (\fBssd1306_handle_t\fP handle, uint8_t page, const char *text, bool invert)"
.br
.RI "Displays text x2 larger by page on the SSD1306\&. "
.ti -1c
.RI "esp_err_t \fBssd1306_display_text_x3\fP (\fBssd1306_handle_t\fP handle, uint8_t page, const char *text, bool invert)"
.br
.RI "Displays text x3 larger by page on the SSD1306\&. "
.ti -1c
.RI "esp_err_t \fBssd1306_display_textbox_banner\fP (\fBssd1306_handle_t\fP handle, uint8_t page, uint8_t segment, const char *text, uint8_t box_width, bool invert, uint8_t delay)"
.br
.RI "Displays scrolling text within a box as banner by page and segment on the SSD1306 with a maximum of 100-characters\&. "
.ti -1c
.RI "esp_err_t \fBssd1306_display_textbox_ticker\fP (\fBssd1306_handle_t\fP handle, uint8_t page, uint8_t segment, const char *text, uint8_t box_width, bool invert, uint8_t delay)"
.br
.RI "Displays scrolling text within a box as a ticker by page and segment on the SSD1306 with a maximum of 100-characters\&. "
.ti -1c
.RI "esp_err_t \fBssd1306_clear_display_page\fP (\fBssd1306_handle_t\fP handle, uint8_t page, bool invert)"
.br
.RI "Clears a page from the SSD1306 display\&. "
.ti -1c
.RI "esp_err_t \fBssd1306_clear_display\fP (\fBssd1306_handle_t\fP handle, bool invert)"
.br
.RI "Clears the entire SSD1306 display\&. "
.ti -1c
.RI "esp_err_t \fBssd1306_set_contrast\fP (\fBssd1306_handle_t\fP handle, uint8_t contrast)"
.br
.RI "Sets contrast of the SSD1306 display panel\&. "
.ti -1c
.RI "esp_err_t \fBssd1306_set_software_scroll\fP (\fBssd1306_handle_t\fP handle, uint8_t start, uint8_t end)"
.br
.RI "Sets SSD1306 start and end page for software based scrolling text\&. "
.ti -1c
.RI "esp_err_t \fBssd1306_display_software_scroll_text\fP (\fBssd1306_handle_t\fP handle, const char *text, bool invert)"
.br
.RI "Displays software based scrolling text on the SSD1306\&. "
.ti -1c
.RI "esp_err_t \fBssd1306_clear_display_software_scroll\fP (\fBssd1306_handle_t\fP handle)"
.br
.RI "Clears software based scrolling text from SSD1306 display\&. "
.ti -1c
.RI "esp_err_t \fBssd1306_set_hardware_scroll\fP (\fBssd1306_handle_t\fP handle, \fBssd1306_scroll_types_t\fP scroll, \fBssd1306_scroll_frames_t\fP frame_frequency)"
.br
.RI "Sets SSD1306 scroll orientation and frame frequency for hardware based scrolling text\&. "
.ti -1c
.RI "esp_err_t \fBssd1306_display_wrap_around\fP (\fBssd1306_handle_t\fP handle, \fBssd1306_scroll_types_t\fP scroll, uint8_t start, uint8_t end, int8_t delay)"
.br
.RI "Sets SSD1306 scroll orientation, start and end pages to wrap around the display\&. "
.ti -1c
.RI "void \fBssd1306_invert_buffer\fP (uint8_t *buf, size_t blen)"
.br
.RI "Inverts the buffer data\&. "
.ti -1c
.RI "uint8_t \fBssd1306_copy_bit\fP (uint8_t src, uint8_t src_bits, uint8_t dst, uint8_t dst_bits)"
.br
.RI "Copies bit from source to destination\&. "
.ti -1c
.RI "void \fBssd1306_flip_buffer\fP (uint8_t *buf, size_t blen)"
.br
.RI "Flips the buffer data (upsidedown)\&. "
.ti -1c
.RI "uint8_t \fBssd1306_rotate_byte\fP (uint8_t ch1)"
.br
.RI "Rotates 8-bits, as an example, 0x12 becomes 0x48\&. "
.ti -1c
.RI "esp_err_t \fBssd1306_display_fadeout\fP (\fBssd1306_handle_t\fP handle)"
.br
.RI "SSD1306 display is faded out and cleared\&. "
.ti -1c
.RI "esp_err_t \fBssd1306_init\fP (i2c_master_bus_handle_t master_handle, const \fBssd1306_config_t\fP *ssd1306_config, \fBssd1306_handle_t\fP *ssd1306_handle)"
.br
.RI "Initializes an SSD1306 device onto the I2C master bus\&. "
.ti -1c
.RI "esp_err_t \fBssd1306_remove\fP (\fBssd1306_handle_t\fP handle)"
.br
.RI "Removes an SSD1306 device from master bus\&. "
.ti -1c
.RI "esp_err_t \fBssd1306_delete\fP (\fBssd1306_handle_t\fP handle)"
.br
.RI "Removes an SSD1306 device from master bus and frees handle\&. "
.ti -1c
.RI "const char * \fBssd1306_get_fw_version\fP (void)"
.br
.RI "Converts SSD1306 firmware version numbers (major, minor, patch) into a string\&. "
.ti -1c
.RI "int32_t \fBssd1306_get_fw_version_number\fP (void)"
.br
.RI "Converts SSD1306 firmware version numbers (major, minor, patch) into an integer value\&. "
.in -1c
.SH "Detailed Description"
.PP 
ESP-IDF driver for SSD1306 display panel

.PP
Ported from esp-open-rtos

.PP
Copyright (c) 2024 Eric Gionet (gionet.c.eric@gmail.com)

.PP
MIT Licensed as described in the file LICENSE 
.SH "Macro Definition Documentation"
.PP 
.SS "#define ESP_ARG_CHECK( VAL)"
\fBValue:\fP
.nf
do { if (!(VAL)) return ESP_ERR_INVALID_ARG; } while (0)
.PP
.fi

.SH "Author"
.PP 
Generated automatically by Doxygen for ESP-IDF Components by K0I05 from the source code\&.
