.TH "components/utilities/esp_wx_utils/wx_utils.c" 3 "ESP-IDF Components by K0I05" \" -*- nroff -*-
.ad l
.nh
.SH NAME
components/utilities/esp_wx_utils/wx_utils.c
.SH SYNOPSIS
.br
.PP
\fR#include 'wx_utils\&.h'\fP
.br
\fR#include <string\&.h>\fP
.br
\fR#include <stdio\&.h>\fP
.br
\fR#include <esp_log\&.h>\fP
.br
\fR#include <esp_check\&.h>\fP
.br
\fR#include <freertos/FreeRTOS\&.h>\fP
.br
\fR#include <freertos/task\&.h>\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBWX_TEMPERATURE_MAX\fP   (float)(125\&.0)"
.br
.RI "maximum temperature range "
.ti -1c
.RI "#define \fBWX_TEMPERATURE_MIN\fP   (float)(\-40\&.0)"
.br
.RI "minimum temperature range "
.ti -1c
.RI "#define \fBWX_HUMIDITY_MAX\fP   (float)(100\&.0)"
.br
.RI "maximum humidity range "
.ti -1c
.RI "#define \fBWX_HUMIDITY_MIN\fP   (float)(0\&.0)"
.br
.RI "minimum humidity range "
.ti -1c
.RI "#define \fBESP_ARG_CHECK\fP(VAL)"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "esp_err_t \fBwx_set_temperature_range\fP (const float maximum, const float minimum)"
.br
.RI "Sets the global weather utilities maximum and minimum temperature range (\fRwx_temperature_range\fP) in degrees Celsius\&. "
.ti -1c
.RI "esp_err_t \fBwx_set_humidity_range\fP (const float maximum, const float minimum)"
.br
.RI "Sets the global weather utilities humidity maximum and minimum range (\fRwx_humidity_range\fP) in percent\&. "
.ti -1c
.RI "esp_err_t \fBwx_td_range\fP (const float temperature, const float humidity, float *const dewpoint)"
.br
.RI "Calculates dewpoint temperature from air temperature and relative humidity with range validation\&. The default temperature range is from -40 to 125 degrees Celsius and default humidity range is from 0 to 100 percent\&. 
.br
 The default ranges can be adjusted through the set range functions\&. "
.ti -1c
.RI "const double \fBwx_c_to_k\fP (const double t)"
.br
.RI "Converts degrees celsius to kelvin\&. "
.ti -1c
.RI "const double \fBwx_k_to_c\fP (const double t)"
.br
.RI "Converts kelvin to degrees celsius\&. "
.ti -1c
.RI "const double \fBwx_v\fP (const double t)"
.br
.RI "Calculates v at temperature\&. "
.ti -1c
.RI "const double \fBwx_pwi\fP (const double t)"
.br
.RI "Calculates aqueous vapor pressure of ice at temperature\&. "
.ti -1c
.RI "const double \fBwx_pws\fP (const double t)"
.br
.RI "Calculates aqueous vapor pressure of water at temperature\&. "
.ti -1c
.RI "const double \fBwx_pressure_at_sea_level\fP (const double ph, const double a, const double t)"
.br
.RI "Calculates the reduced air pressure QFF (pressure at sea level) without QFE\&. "
.ti -1c
.RI "const double \fBwx_td\fP (const double ta, const double hr)"
.br
.RI "Calculates dewpoint temperature from air temperature and relative humidity\&. "
.ti -1c
.RI "const double \fBwx_tw\fP (const double ta, const double hr, const double td, const double pa)"
.br
.RI "Calculates wetbulb temperature from air temperature, relative humidity, and dewpoint temperature\&. "
.in -1c
.SH "Detailed Description"
.PP 
ESP-IDF weather utilities (utils)

.PP
References https://docs.vaisala.com/r/M212417EN-H/en-US/GUID-EBE2B115-3C98-4C8C-9F2D-A2FF1EFECFCC https://earthscience.stackexchange.com/questions/16366/weather-forecast-based-on-pressure-temperature-and-humidity-only-for-implement https://web.archive.org/web/20110610213848/http://www.meteormetrics.com/zambretti.htm

.PP
Copyright (c) 2024 Eric Gionet (gionet.c.eric@gmail.com)

.PP
MIT Licensed as described in the file LICENSE 
.SH "Macro Definition Documentation"
.PP 
.SS "#define ESP_ARG_CHECK( VAL)"
\fBValue:\fP
.nf
do { if (!(VAL)) return ESP_ERR_INVALID_ARG; } while (0)
.PP
.fi

.SH "Author"
.PP 
Generated automatically by Doxygen for ESP-IDF Components by K0I05 from the source code\&.
