.TH "components/peripherals/i2c/esp_veml7700 Directory Reference" 3 "ESP-IDF Components by K0I05" \" -*- nroff -*-
.ad l
.nh
.SH NAME
components/peripherals/i2c/esp_veml7700 Directory Reference
.SH SYNOPSIS
.br
.PP
.SS "Directories"

.in +1c
.ti -1c
.RI "directory \fBinclude\fP"
.br
.in -1c
.SS "Files"

.in +1c
.ti -1c
.RI "file \fBveml7700\&.c\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
\fR\fP \fR\fP \fR\fP \fR\fP \fR\fP \fR\fP \fR\fP \fR\fP

.PP
This ESP32 espressif IoT development framework (esp-idf) i2c peripheral driver was developed for the Vishay VEML7700 I2C sensor\&. Information on features and functionality are documented and can be found in the \fR\fBveml7700\&.h\fP\fP header file and in the \fRdocumentation\fP folder\&.
.SH "Repository"
.PP
The component is hosted on github and is located here: https://github.com/K0I05/ESP32-S3_ESP-IDF_COMPONENTS/tree/main/components/peripherals/i2c/esp_veml7700
.SH "General Usage"
.PP
To get started, simply copy the component to your project's \fRcomponents\fP folder and reference the \fR\fBveml7700\&.h\fP\fP header file as an include\&. The component includes documentation for the peripheral such as the datasheet, application notes, and/or user manual where applicable\&.

.PP
The auto-calibrate algorithms aren't consistent and are still being worked on\&.

.PP
.PP
.nf
components
└── esp_veml7700
    ├── CMakeLists\&.txt
    ├── README\&.md
    ├── LICENSE
    ├── idf_component\&.yml
    ├── library\&.json
    ├── documentation
    │   └── datasheets, etc\&.
    ├── include
    │   └── veml7700_version\&.h
    │   └── veml7700\&.h
    └── veml7700\&.c
.fi
.PP
.SH "Typical Luminance Values"
.PP
Luminance ranges with use-case examples:

.PP
.IP "\(bu" 2
\fR10-5 lx\fP: Light from Sirius, the brightest star in the night sky
.IP "\(bu" 2
\fR10-4 lx\fP: Total starlight, overcast sky
.IP "\(bu" 2
\fR0\&.002 lx\fP: Moonless clear night sky with airglow
.IP "\(bu" 2
\fR0\&.01 lx\fP: Quarter moon, 0\&.27 lx; full moon on a clear night
.IP "\(bu" 2
\fR1 lx\fP: Full moon overhead at tropical latitudes
.IP "\(bu" 2
\fR3\&.4 lx\fP: Dark limit of civil twilight under a clear sky
.IP "\(bu" 2
\fR50 lx\fP: Family living room
.IP "\(bu" 2
\fR80 lx\fP: Hallway / bathroom
.IP "\(bu" 2
\fR100 lx\fP: Very dark overcast day
.IP "\(bu" 2
\fR320 lx to 500 lx\fP: Office lighting
.IP "\(bu" 2
\fR400 lx\fP: Sunrise or sunset on a clear day
.IP "\(bu" 2
\fR1,000 lx\fP: Overcast day; typical TV studio lighting
.IP "\(bu" 2
\fR10,000 lx to 25,000 lx\fP: Full daylight (not direct sun)
.IP "\(bu" 2
\fR32,000 lx to 130,000 lx\fP: Direct sunlight
.PP
.SH "Basic Example"
.PP
Once a driver instance is instantiated the sensor is ready for usage as shown in the below example\&. This basic implementation of the driver utilizes default configuration settings and makes a measurement request from the sensor at user defined interval and prints the results\&.

.PP
.PP
.nf
#include <veml7700\&.h>

void i2c0_veml7700_task( void *pvParameters ) {
    // initialize the xLastWakeTime variable with the current time\&.
    TickType_t          last_wake_time  = xTaskGetTickCount ();
    //
    // initialize i2c device configuration
    veml7700_config_t dev_cfg       = I2C_VEML7700_CONFIG_DEFAULT;
    veml7700_handle_t dev_hdl;
    //
    // init device
    veml7700_init(i2c0_bus_hdl, &dev_cfg, &dev_hdl);
    if (dev_hdl == NULL) {
        ESP_LOGE(APP_TAG, "veml7700 handle init failed");
        assert(dev_hdl);
    }
    //
    // optimize sensor
    //veml7700_optimize_configuration(dev_hdl);
    //
    // task loop entry point
    for ( ;; ) {
        ESP_LOGI(APP_TAG, "######################## VEML7700 \- START #########################");
        //
        // handle sensor
        float ambient_light;
        //uint16_t als_counts;
        esp_err_t result = veml7700_get_ambient_light(dev_hdl, &ambient_light);
        //esp_err_t result = veml7700_get_ambient_light_counts(dev_hdl, &als_counts);
        if(result != ESP_OK) {
            ESP_LOGE(APP_TAG, "veml7700 device read failed (%s)", esp_err_to_name(result));
        } else {
            ESP_LOGI(APP_TAG, "ambient light:     %\&.2f lux", ambient_light);
            //ESP_LOGI(APP_TAG, "ambient light:     %u counts", als_counts);
        }
        //
        ESP_LOGI(APP_TAG, "######################## VEML7700 \- END ###########################");
        //
        //
        // pause the task per defined wait period
        vTaskDelaySecUntil( &last_wake_time, I2C0_TASK_SAMPLING_RATE );
    }
    //
    // free resources
    veml7700_delete( dev_hdl );
    vTaskDelete( NULL );
}
.fi
.PP

.PP
Copyright (c) 2024 Eric Gionet (gionet.c.eric@gmail.com) 
