.TH "components/peripherals/i2c/esp_bmp280/include/bmp280.h" 3 "ESP-IDF Components by K0I05" \" -*- nroff -*-
.ad l
.nh
.SH NAME
components/peripherals/i2c/esp_bmp280/include/bmp280.h
.SH SYNOPSIS
.br
.PP
\fR#include <stdint\&.h>\fP
.br
\fR#include <stdbool\&.h>\fP
.br
\fR#include <esp_err\&.h>\fP
.br
\fR#include <driver/i2c_master\&.h>\fP
.br
\fR#include <type_utils\&.h>\fP
.br
\fR#include 'bmp280_version\&.h'\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBbmp280_cal_factors_s\fP"
.br
.RI "BMP280 temperature and pressure calibration factors structure definition\&. "
.ti -1c
.RI "struct \fBbmp280_config_s\fP"
.br
.RI "BMP280 configuration structure definition\&. "
.ti -1c
.RI "struct \fBbmp280_context_t\fP"
.br
.RI "BMP280 context structure\&. "
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBI2C_BMP280_DEV_CLK_SPD\fP   UINT32_C(100000)"
.br
.RI "bmp280 I2C default clock frequency (100KHz) "
.ti -1c
.RI "#define \fBI2C_BMP280_DEV_ADDR_LO\fP   UINT8_C(0x76)"
.br
.RI "bmp280 I2C address when ADDR pin floating/low "
.ti -1c
.RI "#define \fBI2C_BMP280_DEV_ADDR_HI\fP   UINT8_C(0x77)"
.br
.RI "bmp280 I2C address when ADDR pin high "
.ti -1c
.RI "#define \fBI2C_XFR_TIMEOUT_MS\fP   (500)"
.br
.RI "I2C transaction timeout in milliseconds\&. "
.ti -1c
.RI "#define \fBI2C_BMP280_CONFIG_DEFAULT\fP"
.br
.RI "Macro that initializes \fR\fBbmp280_config_t\fP\fP to default configuration settings\&. "
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef enum \fBbmp280_iir_filters_e\fP \fBbmp280_iir_filters_t\fP"
.br
.RI "BMP280 IIR filters coefficient enumerator definition\&. "
.ti -1c
.RI "typedef enum \fBbmp280_standby_times_e\fP \fBbmp280_standby_times_t\fP"
.br
.RI "BMP280 stand-by times enumerator definition\&. "
.ti -1c
.RI "typedef enum \fBbmp280_power_modes_e\fP \fBbmp280_power_modes_t\fP"
.br
.RI "BMP280 power modes enumerator definition\&. "
.ti -1c
.RI "typedef enum \fBbmp280_pressure_oversampling_e\fP \fBbmp280_pressure_oversampling_t\fP"
.br
.RI "BMP280 pressure oversampling enumerator definition\&. "
.ti -1c
.RI "typedef enum \fBbmp280_temperature_oversampling_e\fP \fBbmp280_temperature_oversampling_t\fP"
.br
.RI "BMP280 temperature oversampling enumerator definition\&. "
.ti -1c
.RI "typedef struct \fBbmp280_cal_factors_s\fP \fBbmp280_cal_factors_t\fP"
.br
.RI "BMP280 temperature and pressure calibration factors structure definition\&. "
.ti -1c
.RI "typedef struct \fBbmp280_config_s\fP \fBbmp280_config_t\fP"
.br
.RI "BMP280 configuration structure definition\&. "
.ti -1c
.RI "typedef struct bmp280_context_t \fBbmp280_context_t\fP"
.br
.RI "BMP280 context structure definition\&. "
.ti -1c
.RI "typedef struct \fBbmp280_context_t\fP * \fBbmp280_handle_t\fP"
.br
.RI "BMP280 handle structure definition\&. "
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBbmp280_iir_filters_e\fP { \fBBMP280_IIR_FILTER_OFF\fP = (0b000), \fBBMP280_IIR_FILTER_2\fP = (0b001), \fBBMP280_IIR_FILTER_4\fP = (0b010), \fBBMP280_IIR_FILTER_8\fP = (0b011), \fBBMP280_IIR_FILTER_16\fP = (0b100) }"
.br
.RI "BMP280 IIR filters coefficient enumerator definition\&. "
.ti -1c
.RI "enum \fBbmp280_standby_times_e\fP { \fBBMP280_STANDBY_TIME_0_5MS\fP = (0b000), \fBBMP280_STANDBY_TIME_62_5MS\fP = (0b001), \fBBMP280_STANDBY_TIME_125MS\fP = (0b010), \fBBMP280_STANDBY_TIME_250MS\fP = (0b011), \fBBMP280_STANDBY_TIME_500MS\fP = (0b100), \fBBMP280_STANDBY_TIME_1000MS\fP = (0b101), \fBBMP280_STANDBY_TIME_2000MS\fP = (0b110), \fBBMP280_STANDBY_TIME_4000MS\fP = (0b111) }"
.br
.RI "BMP280 stand-by times enumerator definition\&. "
.ti -1c
.RI "enum \fBbmp280_power_modes_e\fP { \fBBMP280_POWER_MODE_SLEEP\fP = (0b00), \fBBMP280_POWER_MODE_FORCED\fP = (0b01), \fBBMP280_POWER_MODE_FORCED1\fP = (0b10), \fBBMP280_POWER_MODE_NORMAL\fP = (0b11) }"
.br
.RI "BMP280 power modes enumerator definition\&. "
.ti -1c
.RI "enum \fBbmp280_pressure_oversampling_e\fP { \fBBMP280_PRESSURE_OVERSAMPLING_SKIPPED\fP = (0b000), \fBBMP280_PRESSURE_OVERSAMPLING_1X\fP = (0b001), \fBBMP280_PRESSURE_OVERSAMPLING_2X\fP = (0b010), \fBBMP280_PRESSURE_OVERSAMPLING_4X\fP = (0b011), \fBBMP280_PRESSURE_OVERSAMPLING_8X\fP = (0b100), \fBBMP280_PRESSURE_OVERSAMPLING_16X\fP = (0b101) }"
.br
.RI "BMP280 pressure oversampling enumerator definition\&. "
.ti -1c
.RI "enum \fBbmp280_temperature_oversampling_e\fP { \fBBMP280_TEMPERATURE_OVERSAMPLING_SKIPPED\fP = (0b000), \fBBMP280_TEMPERATURE_OVERSAMPLING_1X\fP = (0b001), \fBBMP280_TEMPERATURE_OVERSAMPLING_2X\fP = (0b010), \fBBMP280_TEMPERATURE_OVERSAMPLING_4X\fP = (0b011), \fBBMP280_TEMPERATURE_OVERSAMPLING_8X\fP = (0b100), \fBBMP280_TEMPERATURE_OVERSAMPLING_16X\fP = (0b101), \fBBMP280_TEMPERATURE_OVERSAMPLING_16X1\fP = (0b110), \fBBMP280_TEMPERATURE_OVERSAMPLING_16X2\fP = (0b111) }"
.br
.RI "BMP280 temperature oversampling enumerator definition\&. "
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "union \fB__attribute__\fP ((packed)) ahtxx_status_register_u"
.br
.RI "AHTXX status register structure definition\&. "
.ti -1c
.RI "esp_err_t \fBbmp280_get_chip_id_register\fP (\fBbmp280_handle_t\fP handle, uint8_t *const reg)"
.br
.RI "Reads chip identification register from BMP280\&. "
.ti -1c
.RI "esp_err_t \fBbmp280_get_status_register\fP (\fBbmp280_handle_t\fP handle, bmp280_status_register_t *const reg)"
.br
.RI "Reads status register from BMP280\&. "
.ti -1c
.RI "esp_err_t \fBbmp280_get_control_measurement_register\fP (\fBbmp280_handle_t\fP handle, bmp280_control_measurement_register_t *const reg)"
.br
.RI "Reads control measurement register from BMP280\&. "
.ti -1c
.RI "esp_err_t \fBbmp280_set_control_measurement_register\fP (\fBbmp280_handle_t\fP handle, const bmp280_control_measurement_register_t reg)"
.br
.RI "Writes control measurement register to BMP280\&. "
.ti -1c
.RI "esp_err_t \fBbmp280_get_configuration_register\fP (\fBbmp280_handle_t\fP handle, bmp280_configuration_register_t *const reg)"
.br
.RI "Reads configuration register from BMP280\&. "
.ti -1c
.RI "esp_err_t \fBbmp280_set_configuration_register\fP (\fBbmp280_handle_t\fP handle, const bmp280_configuration_register_t reg)"
.br
.RI "Writes configuration register to BMP280\&. "
.ti -1c
.RI "esp_err_t \fBbmp280_init\fP (i2c_master_bus_handle_t master_handle, const \fBbmp280_config_t\fP *bmp280_config, \fBbmp280_handle_t\fP *bmp280_handle)"
.br
.RI "Initializes an BMP280 device onto the master bus\&. "
.ti -1c
.RI "esp_err_t \fBbmp280_get_measurements\fP (\fBbmp280_handle_t\fP handle, float *const temperature, float *const pressure)"
.br
.RI "Reads temperature and pressure measurements from BMP280\&. "
.ti -1c
.RI "esp_err_t \fBbmp280_get_temperature\fP (\fBbmp280_handle_t\fP handle, float *const temperature)"
.br
.RI "Reads temperature measurement from BMP280\&. "
.ti -1c
.RI "esp_err_t \fBbmp280_get_pressure\fP (\fBbmp280_handle_t\fP handle, float *const pressure)"
.br
.RI "Reads pressure measurement from BMP280\&. "
.ti -1c
.RI "esp_err_t \fBbmp280_get_data_status\fP (\fBbmp280_handle_t\fP handle, bool *const ready)"
.br
.RI "Reads data status from BMP280\&. "
.ti -1c
.RI "esp_err_t \fBbmp280_get_power_mode\fP (\fBbmp280_handle_t\fP handle, \fBbmp280_power_modes_t\fP *const power_mode)"
.br
.RI "Reads power mode setting from BMP280\&. "
.ti -1c
.RI "esp_err_t \fBbmp280_set_power_mode\fP (\fBbmp280_handle_t\fP handle, const \fBbmp280_power_modes_t\fP power_mode)"
.br
.RI "Writes power mode setting to the BMP280\&. See datasheet, section 3\&.6, table 10\&. "
.ti -1c
.RI "esp_err_t \fBbmp280_get_pressure_oversampling\fP (\fBbmp280_handle_t\fP handle, \fBbmp280_pressure_oversampling_t\fP *const oversampling)"
.br
.RI "Reads pressure oversampling setting from BMP280\&. "
.ti -1c
.RI "esp_err_t \fBbmp280_set_pressure_oversampling\fP (\fBbmp280_handle_t\fP handle, const \fBbmp280_pressure_oversampling_t\fP oversampling)"
.br
.RI "Writes pressure oversampling setting to BMP280\&. See datasheet, section 3\&.3\&.1, table 4\&. "
.ti -1c
.RI "esp_err_t \fBbmp280_get_temperature_oversampling\fP (\fBbmp280_handle_t\fP handle, \fBbmp280_temperature_oversampling_t\fP *const oversampling)"
.br
.RI "Reads temperature oversampling setting from BMP280\&. "
.ti -1c
.RI "esp_err_t \fBbmp280_set_temperature_oversampling\fP (\fBbmp280_handle_t\fP handle, const \fBbmp280_temperature_oversampling_t\fP oversampling)"
.br
.RI "Writes temperature oversampling setting to BMP280\&. See datasheet, section 3\&.3\&.1, table 4\&. "
.ti -1c
.RI "esp_err_t \fBbmp280_get_standby_time\fP (\fBbmp280_handle_t\fP handle, \fBbmp280_standby_times_t\fP *const standby_time)"
.br
.RI "Reads stand-by time setting from BMP280\&. "
.ti -1c
.RI "esp_err_t \fBbmp280_set_standby_time\fP (\fBbmp280_handle_t\fP handle, const \fBbmp280_standby_times_t\fP standby_time)"
.br
.RI "Writes stand-by time setting to BMP280\&. "
.ti -1c
.RI "esp_err_t \fBbmp280_get_iir_filter\fP (\fBbmp280_handle_t\fP handle, \fBbmp280_iir_filters_t\fP *const iir_filter)"
.br
.RI "Reads IIR filter setting to BMP280\&. "
.ti -1c
.RI "esp_err_t \fBbmp280_set_iir_filter\fP (\fBbmp280_handle_t\fP handle, const \fBbmp280_iir_filters_t\fP iir_filter)"
.br
.RI "Writes IIR filter setting to BMP280\&. See datasheet, section 3\&.4, table 7\&. "
.ti -1c
.RI "esp_err_t \fBbmp280_reset\fP (\fBbmp280_handle_t\fP handle)"
.br
.RI "Issues soft-reset sensor and initializes BMP280\&. "
.ti -1c
.RI "esp_err_t \fBbmp280_remove\fP (\fBbmp280_handle_t\fP handle)"
.br
.RI "Removes an BMP280 device from master bus\&. "
.ti -1c
.RI "esp_err_t \fBbmp280_delete\fP (\fBbmp280_handle_t\fP handle)"
.br
.RI "Removes an BMP280 device from master bus and frees handle\&. "
.ti -1c
.RI "const char * \fBbmp280_get_fw_version\fP (void)"
.br
.RI "Converts BMP280 firmware version numbers (major, minor, patch) into a string\&. "
.ti -1c
.RI "int32_t \fBbmp280_get_fw_version_number\fP (void)"
.br
.RI "Converts BMP280 firmware version numbers (major, minor, patch) into an integer value\&. "
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "\fBbmp280_status_register_t\fP"
.br
.ti -1c
.RI "\fBbmp280_control_measurement_register_t\fP"
.br
.ti -1c
.RI "\fBbmp280_configuration_register_t\fP"
.br
.in -1c
.SH "Author"
.PP 
Generated automatically by Doxygen for ESP-IDF Components by K0I05 from the source code\&.
