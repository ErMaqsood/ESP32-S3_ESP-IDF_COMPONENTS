.TH "components/utilities/esp_scalar_trend/scalar_trend.h" 3 "ESP-IDF Components by K0I05" \" -*- nroff -*-
.ad l
.nh
.SH NAME
components/utilities/esp_scalar_trend/scalar_trend.h
.SH SYNOPSIS
.br
.PP
\fR#include <stdio\&.h>\fP
.br
\fR#include <esp_check\&.h>\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBscalar_trend_t\fP"
.br
.RI "Scalar trend structure\&. "
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef enum \fBscalar_trend_codes_tag\fP \fBscalar_trend_codes_t\fP"
.br
.RI "Scalar trend codes enumerator\&. "
.ti -1c
.RI "typedef struct scalar_trend_t \fBscalar_trend_t\fP"
.br
.RI "Scalar trend type definition\&. "
.ti -1c
.RI "typedef struct \fBscalar_trend_t\fP * \fBscalar_trend_handle_t\fP"
.br
.RI "Scalar trend handle definition\&. "
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBscalar_trend_codes_tag\fP { \fBSCALAR_TREND_CODE_UNKNOWN\fP = 1, \fBSCALAR_TREND_CODE_RISING\fP = 2, \fBSCALAR_TREND_CODE_STEADY\fP = 3, \fBSCALAR_TREND_CODE_FALLING\fP = 4 }"
.br
.RI "Scalar trend codes enumerator\&. "
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "const char * \fBscalar_trend_code_to_string\fP (const \fBscalar_trend_codes_t\fP code)"
.br
.RI "Converts \fR\fBscalar_trend_codes_t\fP\fP enumerator trend code to string\&. "
.ti -1c
.RI "esp_err_t \fBscalar_trend_init\fP (const uint16_t samples_size, \fBscalar_trend_handle_t\fP *scalar_trend_handle)"
.br
.RI "Initializes a scalar trend handle by size of the 1-hr samples to analyze\&. The size of the samples is calculated from the sampling rate\&. 
.br
 As an example, if the sampling rate is once every minute, the size of the samples buffer should be 60 e\&.g\&., one (1) hour\&. "
.ti -1c
.RI "esp_err_t \fBscalar_trend_analysis\fP (\fBscalar_trend_handle_t\fP scalar_trend_handle, const float sample, \fBscalar_trend_codes_t\fP *const code)"
.br
.RI "Analyzes historical samples and scalar Trend appears after one (1) hour of operation\&. The trend codes are a forecast of the 3-hr change based on the previous 1-hour history\&. "
.ti -1c
.RI "esp_err_t \fBscalar_trend_reset\fP (\fBscalar_trend_handle_t\fP scalar_trend_handle)"
.br
.RI "Purges scalar trend samples array and resets samples counter\&. "
.ti -1c
.RI "esp_err_t \fBscalar_trend_delete\fP (\fBscalar_trend_handle_t\fP scalar_trend_handle)"
.br
.RI "Frees scalar trend handle\&. "
.in -1c
.SH "Detailed Description"
.PP 
Scalar trend libary

.PP
A scalar Trend appears after one (1) hour of operation\&. The trend codes are a forecast of the 3-hr change based on the previous 1-hour history\&.

.PP
Original source: https://gist.github.com/Paraphraser/c5609f85cc7ee6ecd03ce179fb7f7edb

.PP
Original source code was modified to support the esp-idf framework and includes the left-tailed inverse of the studen's t-distribution calculation on handle initialization\&.

.PP
Copyright (c) 2024 Eric Gionet (gionet.c.eric@gmail.com)

.PP
MIT Licensed as described in the file LICENSE 
.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBscalar_trend_codes_tag\fP"

.PP
Scalar trend codes enumerator\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\f(BISCALAR_TREND_CODE_UNKNOWN \fP
1-hr Change unknown 
.TP
\f(BISCALAR_TREND_CODE_RISING \fP
rising 
.TP
\f(BISCALAR_TREND_CODE_STEADY \fP
steady 
.TP
\f(BISCALAR_TREND_CODE_FALLING \fP
falling 
.SH "Function Documentation"
.PP 
.SS "esp_err_t scalar_trend_analysis (\fBscalar_trend_handle_t\fP scalar_trend_handle, const float sample, \fBscalar_trend_codes_t\fP *const code)"

.PP
Analyzes historical samples and scalar Trend appears after one (1) hour of operation\&. The trend codes are a forecast of the 3-hr change based on the previous 1-hour history\&. 
.PP
\fBParameters\fP
.RS 4
\fIscalar_trend_handle\fP Scalar trend handle\&. 
.br
\fIsample\fP Scalar sample to push onto the samples stack\&. 
.br
\fIcode\fP Scalar trend code of one (1) hour analysis\&. Scalar trend code \fRSCALAR_TREND_UNKNOWN\fP is reported when there is an insufficient number of samples to analyze\&. 
.RE
.PP
\fBReturns\fP
.RS 4
esp_err_t ESP_OK on success\&. 
.RE
.PP

.SS "const char * scalar_trend_code_to_string (const \fBscalar_trend_codes_t\fP code)"

.PP
Converts \fR\fBscalar_trend_codes_t\fP\fP enumerator trend code to string\&. 
.PP
\fBParameters\fP
.RS 4
\fIcode\fP Scalar trend code to convert to a string\&. 
.RE
.PP
\fBReturns\fP
.RS 4
const char* String representation of the scalar trend code\&. 
.RE
.PP

.SS "esp_err_t scalar_trend_delete (\fBscalar_trend_handle_t\fP scalar_trend_handle)"

.PP
Frees scalar trend handle\&. 
.PP
\fBParameters\fP
.RS 4
\fIscalar_trend_handle\fP Scalar trend handle\&. 
.RE
.PP
\fBReturns\fP
.RS 4
esp_err_t ESP_OK on success\&. 
.RE
.PP

.SS "esp_err_t scalar_trend_init (const uint16_t samples_size, \fBscalar_trend_handle_t\fP * scalar_trend_handle)"

.PP
Initializes a scalar trend handle by size of the 1-hr samples to analyze\&. The size of the samples is calculated from the sampling rate\&. 
.br
 As an example, if the sampling rate is once every minute, the size of the samples buffer should be 60 e\&.g\&., one (1) hour\&. 
.PP
\fBParameters\fP
.RS 4
\fIsamples_size\fP Scalar trend samples buffer size\&. 
.br
\fIscalar_trend_handle\fP Scalar trend handle\&. 
.RE
.PP
\fBReturns\fP
.RS 4
esp_err_t ESP_OK on success\&. 
.RE
.PP

.SS "esp_err_t scalar_trend_reset (\fBscalar_trend_handle_t\fP scalar_trend_handle)"

.PP
Purges scalar trend samples array and resets samples counter\&. 
.PP
\fBParameters\fP
.RS 4
\fIscalar_trend_handle\fP Scalar trend handle 
.RE
.PP
\fBReturns\fP
.RS 4
esp_err_t ESP_OK on success\&. 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for ESP-IDF Components by K0I05 from the source code\&.
