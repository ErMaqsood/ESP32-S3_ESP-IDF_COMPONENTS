.TH "components/storage/esp_datalogger/datatable.c" 3 "ESP-IDF Components by K0I05" \" -*- nroff -*-
.ad l
.nh
.SH NAME
components/storage/esp_datalogger/datatable.c
.SH SYNOPSIS
.br
.PP
\fR#include 'include/datatable\&.h'\fP
.br
\fR#include <string\&.h>\fP
.br
\fR#include <stdio\&.h>\fP
.br
\fR#include <math\&.h>\fP
.br
\fR#include <esp_log\&.h>\fP
.br
\fR#include <esp_check\&.h>\fP
.br
\fR#include <esp_timer\&.h>\fP
.br
\fR#include <freertos/FreeRTOS\&.h>\fP
.br
\fR#include <freertos/task\&.h>\fP
.br
\fR#include <freertos/semphr\&.h>\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBESP_TIMEOUT_CHECK\fP(start,  len)"
.br
.ti -1c
.RI "#define \fBESP_ARG_CHECK\fP(VAL)"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "esp_err_t \fBdatatable_init\fP (const \fBdatatable_config_t\fP *datatable_config, \fBdatatable_handle_t\fP *datatable_handle)"
.br
.RI "Initializes a data-table handle\&. A data-table handle instance is required before any other data-table functions can be called\&. Once the data-table is initialized the following functions are used to configure the data-table columns and within the sampling task\&. "
.ti -1c
.RI "esp_err_t \fBdatatable_add_vector_smp_column\fP (\fBdatatable_handle_t\fP datatable_handle, const char *name_uc, const char *name_vc, uint8_t *index)"
.br
.RI "Appends a vector based data-type column as a sample to the data-table\&. "
.ti -1c
.RI "esp_err_t \fBdatatable_add_vector_avg_column\fP (\fBdatatable_handle_t\fP datatable_handle, const char *name_uc, const char *name_vc, uint8_t *index)"
.br
.RI "Appends a vector based data-type column as an average to the data-table\&. "
.ti -1c
.RI "esp_err_t \fBdatatable_add_vector_min_column\fP (\fBdatatable_handle_t\fP datatable_handle, const char *name_uc, const char *name_vc, uint8_t *index)"
.br
.RI "Appends a vector based data-type column as a v-component minimum to the data-table\&. "
.ti -1c
.RI "esp_err_t \fBdatatable_add_vector_max_column\fP (\fBdatatable_handle_t\fP datatable_handle, const char *name_uc, const char *name_vc, uint8_t *index)"
.br
.RI "Appends a vector based data-type column as a v-component maximum to the data-table\&. "
.ti -1c
.RI "esp_err_t \fBdatatable_add_vector_min_ts_column\fP (\fBdatatable_handle_t\fP datatable_handle, const char *name_uc, const char *name_vc, uint8_t *index)"
.br
.RI "Appends a vector based data-type column as a v-component minimum with timestamp to the data-table\&. "
.ti -1c
.RI "esp_err_t \fBdatatable_add_vector_max_ts_column\fP (\fBdatatable_handle_t\fP datatable_handle, const char *name_uc, const char *name_vc, uint8_t *index)"
.br
.RI "Appends a vector based data-type column as a v-component maximum with timestamp to the data-table\&. "
.ti -1c
.RI "esp_err_t \fBdatatable_add_bool_smp_column\fP (\fBdatatable_handle_t\fP datatable_handle, const char *name, uint8_t *index)"
.br
.RI "Appends a bool based data-type column as a sample process-type to the data-table\&. "
.ti -1c
.RI "esp_err_t \fBdatatable_add_float_smp_column\fP (\fBdatatable_handle_t\fP datatable_handle, const char *name, uint8_t *index)"
.br
.RI "Appends a float based data-type column as a sample process-type to the data-table\&. "
.ti -1c
.RI "esp_err_t \fBdatatable_add_float_avg_column\fP (\fBdatatable_handle_t\fP datatable_handle, const char *name, uint8_t *index)"
.br
.RI "Appends a float based data-type column as an average process-type to the data-table\&. "
.ti -1c
.RI "esp_err_t \fBdatatable_add_float_min_column\fP (\fBdatatable_handle_t\fP datatable_handle, const char *name, uint8_t *index)"
.br
.RI "Appends a float based data-type column as a minimum process-type to the data-table\&. "
.ti -1c
.RI "esp_err_t \fBdatatable_add_float_max_column\fP (\fBdatatable_handle_t\fP datatable_handle, const char *name, uint8_t *index)"
.br
.RI "Appends a float based data-type column as a maximum process-type to the data-table\&. "
.ti -1c
.RI "esp_err_t \fBdatatable_add_float_min_ts_column\fP (\fBdatatable_handle_t\fP datatable_handle, const char *name, uint8_t *index)"
.br
.RI "Appends a float based data-type column as a minimum with timestamp process-type to the data-table\&. "
.ti -1c
.RI "esp_err_t \fBdatatable_add_float_max_ts_column\fP (\fBdatatable_handle_t\fP datatable_handle, const char *name, uint8_t *index)"
.br
.RI "Appends a float based data-type column as a maximum with timestamp process-type to the data-table\&. "
.ti -1c
.RI "esp_err_t \fBdatatable_add_int16_smp_column\fP (\fBdatatable_handle_t\fP datatable_handle, const char *name, uint8_t *index)"
.br
.RI "Appends a int16 based data-type column as a sample process-type to the data-table\&. "
.ti -1c
.RI "esp_err_t \fBdatatable_add_int16_avg_column\fP (\fBdatatable_handle_t\fP datatable_handle, const char *name, uint8_t *index)"
.br
.RI "Appends a int16 based data-type column as an average process-type to the data-table\&. "
.ti -1c
.RI "esp_err_t \fBdatatable_add_int16_min_column\fP (\fBdatatable_handle_t\fP datatable_handle, const char *name, uint8_t *index)"
.br
.RI "Appends a int16 based data-type column as a minimum process-type to the data-table\&. "
.ti -1c
.RI "esp_err_t \fBdatatable_add_int16_max_column\fP (\fBdatatable_handle_t\fP datatable_handle, const char *name, uint8_t *index)"
.br
.RI "Appends a int16 based data-type column as a maximum process-type to the data-table\&. "
.ti -1c
.RI "esp_err_t \fBdatatable_add_int16_min_ts_column\fP (\fBdatatable_handle_t\fP datatable_handle, const char *name, uint8_t *index)"
.br
.RI "Appends a int16 based data-type column as a minimum with timestamp process-type to the data-table\&. "
.ti -1c
.RI "esp_err_t \fBdatatable_add_int16_max_ts_column\fP (\fBdatatable_handle_t\fP datatable_handle, const char *name, uint8_t *index)"
.br
.RI "Appends a int16 based data-type column as a maximum with timestamp process-type to the data-table\&. "
.ti -1c
.RI "esp_err_t \fBdatatable_get_columns_count\fP (\fBdatatable_handle_t\fP datatable_handle, uint8_t *count)"
.br
.RI "Gets the number of columns in the data-table\&. "
.ti -1c
.RI "esp_err_t \fBdatatable_get_rows_count\fP (\fBdatatable_handle_t\fP datatable_handle, uint8_t *count)"
.br
.RI "Gets the number of rows in the data-table\&. "
.ti -1c
.RI "esp_err_t \fBdatatable_get_column\fP (\fBdatatable_handle_t\fP datatable_handle, const uint8_t index, \fBdatatable_column_t\fP **column)"
.br
.RI "Gets the column structure from the data-table based on the column index\&. "
.ti -1c
.RI "esp_err_t \fBdatatable_get_row\fP (\fBdatatable_handle_t\fP datatable_handle, const uint8_t index, \fBdatatable_row_t\fP **row)"
.br
.RI "Gets the row structure from the data-table based on the row index\&. "
.ti -1c
.RI "esp_err_t \fBdatatable_push_vector_sample\fP (\fBdatatable_handle_t\fP datatable_handle, const uint8_t index, const float value_uc, const float value_vc)"
.br
.RI "Pushes a vector data-type sample onto the column sample data buffer stack for processing\&. "
.ti -1c
.RI "esp_err_t \fBdatatable_push_bool_sample\fP (\fBdatatable_handle_t\fP datatable_handle, const uint8_t index, const bool value)"
.br
.RI "Pushes a boolean data-type sample onto the column sample data buffer stack for processing\&. "
.ti -1c
.RI "esp_err_t \fBdatatable_push_float_sample\fP (\fBdatatable_handle_t\fP datatable_handle, const uint8_t index, const float value)"
.br
.RI "Pushes a float data-type sample onto the column sample data buffer stack for processing\&. "
.ti -1c
.RI "esp_err_t \fBdatatable_push_int16_sample\fP (\fBdatatable_handle_t\fP datatable_handle, const uint8_t index, const int16_t value)"
.br
.RI "Pushes an int16 data-type sample onto the column sample data buffer stack for processing\&. "
.ti -1c
.RI "esp_err_t \fBdatatable_sampling_task_delay\fP (\fBdatatable_handle_t\fP datatable_handle)"
.br
.RI "Delays the data-table's sampling task until the next scheduled task event\&. 
.br
 This function should be placed after the \fRfor (;;) {\fP syntax to delay the task based on the configured time-into-interval handle interval type, period, and offset parameters\&. "
.ti -1c
.RI "esp_err_t \fBdatatable_process_samples\fP (\fBdatatable_handle_t\fP datatable_handle)"
.br
.RI "Processes data-table samples on the data buffer stack in each column based on the data-table's 
.br
 configured processing interval\&. When the samples are processed, the data buffer stack is cleared for each column\&. This function must be called after data-table samples are pushed in the sampling task\&. "
.ti -1c
.RI "esp_err_t \fBdatatable_delete\fP (\fBdatatable_handle_t\fP datatable_handle)"
.br
.RI "Deletes the data-table handle to frees up resources\&. "
.ti -1c
.RI "esp_err_t \fBdatatable_to_json\fP (\fBdatatable_handle_t\fP datatable_handle, cJSON **datatable)"
.br
.RI "Converts a data-table to a \fRcJSON\fP object\&. "
.in -1c
.SH "Detailed Description"
.PP 
ESP-IDF library for DATA-TABLE

.PP
Ported from esp-open-rtos

.PP
Copyright (c) 2024 Eric Gionet (gionet.c.eric@gmail.com)

.PP
MIT Licensed as described in the file LICENSE 
.SH "Macro Definition Documentation"
.PP 
.SS "#define ESP_ARG_CHECK( VAL)"
\fBValue:\fP
.nf
do { if (!(VAL)) return ESP_ERR_INVALID_ARG; } while (0)
.PP
.fi

.SS "#define ESP_TIMEOUT_CHECK( start,  len)"
\fBValue:\fP
.nf
((uint64_t)(esp_timer_get_time() \- (start)) >= (len))
.PP
.fi

.SH "Author"
.PP 
Generated automatically by Doxygen for ESP-IDF Components by K0I05 from the source code\&.
