.TH "components/peripherals/i2c/esp_tbi2cxxx/tbi2cxxx.c" 3 "ESP-IDF Components by K0I05" \" -*- nroff -*-
.ad l
.nh
.SH NAME
components/peripherals/i2c/esp_tbi2cxxx/tbi2cxxx.c
.SH SYNOPSIS
.br
.PP
\fR#include 'include/tbi2cxxx\&.h'\fP
.br
\fR#include <string\&.h>\fP
.br
\fR#include <stdio\&.h>\fP
.br
\fR#include <math\&.h>\fP
.br
\fR#include <esp_log\&.h>\fP
.br
\fR#include <esp_check\&.h>\fP
.br
\fR#include <esp_timer\&.h>\fP
.br
\fR#include <freertos/FreeRTOS\&.h>\fP
.br
\fR#include <freertos/task\&.h>\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBTBI2CXXX_CMD_AMB_TEMP_R\fP   UINT8_C(0x06)"
.br
.ti -1c
.RI "#define \fBTBI2CXXX_CMD_OBJ_TEMP_R\fP   UINT8_C(0x07)"
.br
.ti -1c
.RI "#define \fBTBI2CXXX_CMD_EMIS_COEF_RW\fP   UINT8_C(0x24)"
.br
.ti -1c
.RI "#define \fBTBI2CXXX_CMD_SLV_ADDR_RW\fP   UINT8_C(0x2e)"
.br
.ti -1c
.RI "#define \fBTBI2CXXX_DATA_READY_DELAY_MS\fP   UINT16_C(105)"
.br
.ti -1c
.RI "#define \fBTBI2CXXX_POWERUP_DELAY_MS\fP   UINT16_C(205)"
.br
.ti -1c
.RI "#define \fBTBI2CXXX_APPSTART_DELAY_MS\fP   UINT16_C(10)"
.br
.ti -1c
.RI "#define \fBTBI2CXXX_CMD_DELAY_MS\fP   UINT16_C(5)"
.br
.ti -1c
.RI "#define \fBESP_TIMEOUT_CHECK\fP(start,  len)"
.br
.ti -1c
.RI "#define \fBESP_ARG_CHECK\fP(VAL)"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "esp_err_t \fBtbi2cxxx_init\fP (i2c_master_bus_handle_t master_handle, const \fBtbi2cxxx_config_t\fP *tbi2cxxx_config, \fBtbi2cxxx_handle_t\fP *tbi2cxxx_handle)"
.br
.RI "Initializes an TBI2CXXX device onto the I2C master bus\&. "
.ti -1c
.RI "esp_err_t \fBtbi2cxxx_get_temperatures\fP (\fBtbi2cxxx_handle_t\fP handle, float *const ambient_temperature, float *const object_temperature)"
.br
.RI "Reads ambient and object temperatures from TBI2CXXX\&. "
.ti -1c
.RI "esp_err_t \fBtbi2cxxx_get_ambient_temperature\fP (\fBtbi2cxxx_handle_t\fP handle, float *const temperature)"
.br
.RI "Reads ambient temperature from TBI2CXXX\&. "
.ti -1c
.RI "esp_err_t \fBtbi2cxxx_get_object_temperature\fP (\fBtbi2cxxx_handle_t\fP handle, float *const temperature)"
.br
.RI "Reads object temperature from TBI2CXXX\&. "
.ti -1c
.RI "esp_err_t \fBtbi2cxxx_get_emissivity\fP (\fBtbi2cxxx_handle_t\fP handle, float *const coefficient)"
.br
.RI "Reads emissivity coefficient setting from TBI2CXXX\&. "
.ti -1c
.RI "esp_err_t \fBtbi2cxxx_set_emissivity\fP (\fBtbi2cxxx_handle_t\fP handle, const float coefficient)"
.br
.RI "Writes emissivity coefficient setting to TBI2CXXX\&. "
.ti -1c
.RI "esp_err_t \fBtbi2cxxx_remove\fP (\fBtbi2cxxx_handle_t\fP handle)"
.br
.RI "Removes an TBI2CXXX device from master bus\&. "
.ti -1c
.RI "esp_err_t \fBtbi2cxxx_delete\fP (\fBtbi2cxxx_handle_t\fP handle)"
.br
.RI "Removes an TBI2CXXX device from master bus and frees handle\&. "
.ti -1c
.RI "const char * \fBtbi2cxxx_get_fw_version\fP (void)"
.br
.RI "Converts TBI2CXXX firmware version numbers (major, minor, patch, build) into a string\&. "
.ti -1c
.RI "int32_t \fBtbi2cxxx_get_fw_version_number\fP (void)"
.br
.RI "Converts TBI2CXXX firmware version numbers (major, minor, patch) into an integer value\&. "
.in -1c
.SH "Detailed Description"
.PP 
ESP-IDF driver for TBI2CXXX ir temperature sensor

.PP
Ported from esp-open-rtos

.PP
Copyright (c) 2024 Eric Gionet (gionet.c.eric@gmail.com)

.PP
MIT Licensed as described in the file LICENSE 
.SH "Macro Definition Documentation"
.PP 
.SS "#define ESP_ARG_CHECK( VAL)"
\fBValue:\fP
.nf
do { if (!(VAL)) return ESP_ERR_INVALID_ARG; } while (0)
.PP
.fi

.SS "#define ESP_TIMEOUT_CHECK( start,  len)"
\fBValue:\fP
.nf
((uint64_t)(esp_timer_get_time() \- (start)) >= (len))
.PP
.fi

.SS "#define TBI2CXXX_APPSTART_DELAY_MS   UINT16_C(10)"
tbi2cxxx delay after initialization before application start-up 
.SS "#define TBI2CXXX_CMD_DELAY_MS   UINT16_C(5)"
tbi2cxxx delay before attempting I2C transactions after a command is issued 
.SH "Author"
.PP 
Generated automatically by Doxygen for ESP-IDF Components by K0I05 from the source code\&.
