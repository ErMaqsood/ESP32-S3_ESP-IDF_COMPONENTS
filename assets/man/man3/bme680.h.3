.TH "components/peripherals/i2c/esp_bme680/include/bme680.h" 3 "ESP-IDF Components by K0I05" \" -*- nroff -*-
.ad l
.nh
.SH NAME
components/peripherals/i2c/esp_bme680/include/bme680.h
.SH SYNOPSIS
.br
.PP
\fR#include <stdint\&.h>\fP
.br
\fR#include <stdbool\&.h>\fP
.br
\fR#include <esp_err\&.h>\fP
.br
\fR#include <driver/i2c_master\&.h>\fP
.br
\fR#include <type_utils\&.h>\fP
.br
\fR#include 'bme680_version\&.h'\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBbme680_cal_factors_s\fP"
.br
.RI "BME680 calibration factors structure definition\&. "
.ti -1c
.RI "struct \fBbme680_data_s\fP"
.br
.RI "BME680 data structure definition\&. "
.ti -1c
.RI "struct \fBbme680_adc_data_s\fP"
.br
.RI "BME680 ADC data structure definition\&. "
.ti -1c
.RI "struct \fBbme680_config_s\fP"
.br
.RI "BME680 configuration structure definition\&. "
.ti -1c
.RI "struct \fBbme680_context_t\fP"
.br
.RI "BME680 context structure\&. "
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBI2C_BME680_DEV_CLK_SPD\fP   UINT32_C(100000)"
.br
.RI "bme680 I2C default clock frequency (100KHz) "
.ti -1c
.RI "#define \fBI2C_BME680_DEV_ADDR_LO\fP   UINT8_C(0x76)"
.br
.RI "bme680 I2C address when ADDR pin floating/low "
.ti -1c
.RI "#define \fBI2C_BME680_DEV_ADDR_HI\fP   UINT8_C(0x77)"
.br
.RI "bme680 I2C address when ADDR pin high "
.ti -1c
.RI "#define \fBI2C_XFR_TIMEOUT_MS\fP   (500)"
.br
.RI "I2C transaction timeout in milliseconds\&. "
.ti -1c
.RI "#define \fBBME680_HEATER_TEMP_MIN\fP   UINT8_C(200)"
.br
.ti -1c
.RI "#define \fBBME680_HEATER_TEMP_MAX\fP   UINT8_C(400)"
.br
.ti -1c
.RI "#define \fBBME680_HEATER_PROFILE_SIZE\fP   UINT8_C(10)"
.br
.ti -1c
.RI "#define \fBI2C_BME680_CONFIG_DEFAULT\fP"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef enum \fBbme680_heater_setpoints_e\fP \fBbme680_heater_setpoints_t\fP"
.br
.RI "BME680 heater set-points enumerator\&. "
.ti -1c
.RI "typedef enum \fBbme680_gas_wait_multipliers_e\fP \fBbme680_gas_wait_multipliers_t\fP"
.br
.RI "BME680 gas wait multipliers enumerator\&. "
.ti -1c
.RI "typedef enum \fBbme680_iir_filters_e\fP \fBbme680_iir_filters_t\fP"
.br
.RI "BME680 IIR filters coefficient enumerator\&. "
.ti -1c
.RI "typedef enum \fBbme680_power_modes_e\fP \fBbme680_power_modes_t\fP"
.br
.RI "BME680 power modes enumerator\&. "
.ti -1c
.RI "typedef enum \fBbme680_pressure_oversampling_e\fP \fBbme680_pressure_oversampling_t\fP"
.br
.RI "BME680 pressure oversampling enumerator\&. "
.ti -1c
.RI "typedef enum \fBbme680_temperature_oversampling_e\fP \fBbme680_temperature_oversampling_t\fP"
.br
.RI "BME680 temperature oversampling enumerator\&. "
.ti -1c
.RI "typedef enum \fBbme680_humidity_oversampling_e\fP \fBbme680_humidity_oversampling_t\fP"
.br
.RI "BME680 humidity oversampling enumerator\&. "
.ti -1c
.RI "typedef struct \fBbme680_cal_factors_s\fP \fBbme680_cal_factors_t\fP"
.br
.RI "BME680 calibration factors structure definition\&. "
.ti -1c
.RI "typedef struct \fBbme680_data_s\fP \fBbme680_data_t\fP"
.br
.RI "BME680 data structure definition\&. "
.ti -1c
.RI "typedef struct \fBbme680_adc_data_s\fP \fBbme680_adc_data_t\fP"
.br
.RI "BME680 ADC data structure definition\&. "
.ti -1c
.RI "typedef struct \fBbme680_config_s\fP \fBbme680_config_t\fP"
.br
.RI "BME680 configuration structure definition\&. "
.ti -1c
.RI "typedef struct bme680_context_t \fBbme680_context_t\fP"
.br
.RI "BME680 context structure definition\&. "
.ti -1c
.RI "typedef struct \fBbme680_context_t\fP * \fBbme680_handle_t\fP"
.br
.RI "BME680 handle structure definition\&. "
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBbme680_heater_setpoints_e\fP { \fBBME680_HEATER_SETPOINT_0\fP = (0b0000), \fBBME680_HEATER_SETPOINT_1\fP = (0b0001), \fBBME680_HEATER_SETPOINT_2\fP = (0b0010), \fBBME680_HEATER_SETPOINT_3\fP = (0b0011), \fBBME680_HEATER_SETPOINT_4\fP = (0b0100), \fBBME680_HEATER_SETPOINT_5\fP = (0b0101), \fBBME680_HEATER_SETPOINT_6\fP = (0b0110), \fBBME680_HEATER_SETPOINT_7\fP = (0b0111), \fBBME680_HEATER_SETPOINT_8\fP = (0b1000), \fBBME680_HEATER_SETPOINT_9\fP = (0b1001) }"
.br
.RI "BME680 heater set-points enumerator\&. "
.ti -1c
.RI "enum \fBbme680_gas_wait_multipliers_e\fP { \fBBME680_GAS_WAIT_MULT_1\fP = (0b00), \fBBME680_GAS_WAIT_MULT_4\fP = (0b01), \fBBME680_GAS_WAIT_MULT_16\fP = (0b10), \fBBME680_GAS_WAIT_MULT_64\fP = (0b11) }"
.br
.RI "BME680 gas wait multipliers enumerator\&. "
.ti -1c
.RI "enum \fBbme680_iir_filters_e\fP { \fBBME680_IIR_FILTER_OFF\fP = (0b000), \fBBME680_IIR_FILTER_1\fP = (0b001), \fBBME680_IIR_FILTER_3\fP = (0b010), \fBBME680_IIR_FILTER_7\fP = (0b011), \fBBME680_IIR_FILTER_15\fP = (0b100), \fBBME680_IIR_FILTER_31\fP = (0b101), \fBBME680_IIR_FILTER_63\fP = (0b110), \fBBME680_IIR_FILTER_127\fP = (0b111) }"
.br
.RI "BME680 IIR filters coefficient enumerator\&. "
.ti -1c
.RI "enum \fBbme680_power_modes_e\fP { \fBBME680_POWER_MODE_SLEEP\fP = (0b00), \fBBME680_POWER_MODE_FORCED\fP = (0b01), \fBBME680_POWER_MODE_PARALLEL\fP = (0b10), \fBBME680_POWER_MODE_SEQUENTIAL\fP = (0b11) }"
.br
.RI "BME680 power modes enumerator\&. "
.ti -1c
.RI "enum \fBbme680_pressure_oversampling_e\fP { \fBBME680_PRESSURE_OVERSAMPLING_SKIPPED\fP = (0b000), \fBBME680_PRESSURE_OVERSAMPLING_1X\fP = (0b001), \fBBME680_PRESSURE_OVERSAMPLING_2X\fP = (0b010), \fBBME680_PRESSURE_OVERSAMPLING_4X\fP = (0b011), \fBBME680_PRESSURE_OVERSAMPLING_8X\fP = (0b100), \fBBME680_PRESSURE_OVERSAMPLING_16X\fP = (0b101) }"
.br
.RI "BME680 pressure oversampling enumerator\&. "
.ti -1c
.RI "enum \fBbme680_temperature_oversampling_e\fP { \fBBME680_TEMPERATURE_OVERSAMPLING_SKIPPED\fP = (0b000), \fBBME680_TEMPERATURE_OVERSAMPLING_1X\fP = (0b001), \fBBME680_TEMPERATURE_OVERSAMPLING_2X\fP = (0b010), \fBBME680_TEMPERATURE_OVERSAMPLING_4X\fP = (0b011), \fBBME680_TEMPERATURE_OVERSAMPLING_8X\fP = (0b100), \fBBME680_TEMPERATURE_OVERSAMPLING_16X\fP = (0b101) }"
.br
.RI "BME680 temperature oversampling enumerator\&. "
.ti -1c
.RI "enum \fBbme680_humidity_oversampling_e\fP { \fBBME680_HUMIDITY_OVERSAMPLING_SKIPPED\fP = (0b000), \fBBME680_HUMIDITY_OVERSAMPLING_1X\fP = (0b001), \fBBME680_HUMIDITY_OVERSAMPLING_2X\fP = (0b010), \fBBME680_HUMIDITY_OVERSAMPLING_4X\fP = (0b011), \fBBME680_HUMIDITY_OVERSAMPLING_8X\fP = (0b100), \fBBME680_HUMIDITY_OVERSAMPLING_16X\fP = (0b101) }"
.br
.RI "BME680 humidity oversampling enumerator\&. "
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "union \fB__attribute__\fP ((packed)) ahtxx_status_register_u"
.br
.RI "AHTXX status register structure definition\&. "
.ti -1c
.RI "esp_err_t \fBbme680_get_chip_id_register\fP (\fBbme680_handle_t\fP handle, uint8_t *const reg)"
.br
.RI "Reads chip identification register from BME680\&. "
.ti -1c
.RI "esp_err_t \fBbme680_get_variant_id_register\fP (\fBbme680_handle_t\fP handle, uint8_t *const reg)"
.br
.RI "Reads variant identification register from BME680\&. "
.ti -1c
.RI "esp_err_t \fBbme680_get_status0_register\fP (\fBbme680_handle_t\fP handle, bme680_status0_register_t *const reg)"
.br
.RI "Reads status register from BME680\&. "
.ti -1c
.RI "esp_err_t \fBbme680_get_gas_lsb_register\fP (\fBbme680_handle_t\fP handle, bme680_gas_lsb_register_t *const reg)"
.br
.RI "Reads gas resistance LSB register from BME680\&. "
.ti -1c
.RI "esp_err_t \fBbme680_set_gas_lsb_register\fP (\fBbme680_handle_t\fP handle, const bme680_gas_lsb_register_t reg)"
.br
.RI "Writes gas resistance LSB register to BME680\&. "
.ti -1c
.RI "esp_err_t \fBbme680_get_control_measurement_register\fP (\fBbme680_handle_t\fP handle, bme680_control_measurement_register_t *const reg)"
.br
.RI "Reads control measurement register from BME680\&. "
.ti -1c
.RI "esp_err_t \fBbme680_set_control_measurement_register\fP (\fBbme680_handle_t\fP handle, const bme680_control_measurement_register_t reg)"
.br
.RI "Writes control measurement register to BME680\&. "
.ti -1c
.RI "esp_err_t \fBbme680_get_control_humidity_register\fP (\fBbme680_handle_t\fP handle, bme680_control_humidity_register_t *const reg)"
.br
.RI "Reads control humidity register from BME680\&. "
.ti -1c
.RI "esp_err_t \fBbme680_set_control_humidity_register\fP (\fBbme680_handle_t\fP handle, const bme680_control_humidity_register_t reg)"
.br
.RI "Writes control humidity register to BME680\&. "
.ti -1c
.RI "esp_err_t \fBbme680_get_control_gas0_register\fP (\fBbme680_handle_t\fP handle, bme680_control_gas0_register_t *const reg)"
.br
.RI "Reads control gas 0 register from BME680\&. "
.ti -1c
.RI "esp_err_t \fBbme680_set_control_gas0_register\fP (\fBbme680_handle_t\fP handle, const bme680_control_gas0_register_t reg)"
.br
.RI "Writes control gas 0 register to BME680\&. "
.ti -1c
.RI "esp_err_t \fBbme680_get_control_gas1_register\fP (\fBbme680_handle_t\fP handle, bme680_control_gas1_register_t *const reg)"
.br
.RI "Reads control gas 1 register from BME680\&. "
.ti -1c
.RI "esp_err_t \fBbme680_set_control_gas1_register\fP (\fBbme680_handle_t\fP handle, const bme680_control_gas1_register_t reg)"
.br
.RI "Writes control gas 1 register to BME680\&. "
.ti -1c
.RI "esp_err_t \fBbme680_get_configuration_register\fP (\fBbme680_handle_t\fP handle, bme680_config_register_t *const reg)"
.br
.RI "Reads configuration register from BME680\&. "
.ti -1c
.RI "esp_err_t \fBbme680_set_configuration_register\fP (\fBbme680_handle_t\fP handle, const bme680_config_register_t reg)"
.br
.RI "Writes configuration register to BME680\&. "
.ti -1c
.RI "esp_err_t \fBbme680_init\fP (i2c_master_bus_handle_t master_handle, const \fBbme680_config_t\fP *bme680_config, \fBbme680_handle_t\fP *bme680_handle)"
.br
.RI "Initializes an BME680 device onto the master bus\&. "
.ti -1c
.RI "esp_err_t \fBbme680_get_adc_signals\fP (\fBbme680_handle_t\fP handle, \fBbme680_adc_data_t\fP *const data)"
.br
.RI "Reads humidity, temperature, and pressure ADC signals from BME680\&. "
.ti -1c
.RI "esp_err_t \fBbme680_get_data\fP (\fBbme680_handle_t\fP handle, \fBbme680_data_t\fP *const data)"
.br
.RI "Reads humidity, temperature, and pressure measurements from BME680\&. "
.ti -1c
.RI "esp_err_t \fBbme680_get_data_status\fP (\fBbme680_handle_t\fP handle, bool *const ready)"
.br
.RI "Reads data status of the BME680\&. "
.ti -1c
.RI "esp_err_t \fBbme680_get_gas_measurement_index\fP (\fBbme680_handle_t\fP handle, uint8_t *const index)"
.br
.RI "Reads gas measurement index from the BME680\&. "
.ti -1c
.RI "esp_err_t \fBbme680_get_power_mode\fP (\fBbme680_handle_t\fP handle, \fBbme680_power_modes_t\fP *const power_mode)"
.br
.RI "Reads power mode setting from the BME680\&. "
.ti -1c
.RI "esp_err_t \fBbme680_set_power_mode\fP (\fBbme680_handle_t\fP handle, const \fBbme680_power_modes_t\fP power_mode)"
.br
.RI "Writes power mode setting to BME680\&. See datasheet, section 3\&.6, table 10\&. "
.ti -1c
.RI "esp_err_t \fBbme680_get_pressure_oversampling\fP (\fBbme680_handle_t\fP handle, \fBbme680_pressure_oversampling_t\fP *const oversampling)"
.br
.RI "Reads pressure oversampling setting from BME680\&. "
.ti -1c
.RI "esp_err_t \fBbme680_set_pressure_oversampling\fP (\fBbme680_handle_t\fP handle, const \fBbme680_pressure_oversampling_t\fP oversampling)"
.br
.RI "Writes pressure oversampling setting to BME680\&. See datasheet, section 3\&.3\&.1, table 4\&. "
.ti -1c
.RI "esp_err_t \fBbme680_get_temperature_oversampling\fP (\fBbme680_handle_t\fP handle, \fBbme680_temperature_oversampling_t\fP *const oversampling)"
.br
.RI "Reads temperature oversampling setting from BME680\&. "
.ti -1c
.RI "esp_err_t \fBbme680_set_temperature_oversampling\fP (\fBbme680_handle_t\fP handle, const \fBbme680_temperature_oversampling_t\fP oversampling)"
.br
.RI "Writes temperature oversampling setting to BME680\&. See datasheet, section 3\&.3\&.1, table 4\&. "
.ti -1c
.RI "esp_err_t \fBbme680_get_humidity_oversampling\fP (\fBbme680_handle_t\fP handle, \fBbme680_humidity_oversampling_t\fP *const oversampling)"
.br
.RI "Reads humidity oversampling setting from BME680\&. "
.ti -1c
.RI "esp_err_t \fBbme680_set_humidity_oversampling\fP (\fBbme680_handle_t\fP handle, const \fBbme680_humidity_oversampling_t\fP oversampling)"
.br
.RI "Writes humidity oversampling setting to BME680\&. See datasheet, section 3\&.3\&.1, table 4\&. "
.ti -1c
.RI "esp_err_t \fBbme680_get_iir_filter\fP (\fBbme680_handle_t\fP handle, \fBbme680_iir_filters_t\fP *const iir_filter)"
.br
.RI "Reads IIR filter setting from BME680\&. "
.ti -1c
.RI "esp_err_t \fBbme680_set_iir_filter\fP (\fBbme680_handle_t\fP handle, const \fBbme680_iir_filters_t\fP iir_filter)"
.br
.RI "Writes IIR filter setting to BME680\&. See datasheet, section 3\&.4, table 7\&. "
.ti -1c
.RI "esp_err_t \fBbme680_reset\fP (\fBbme680_handle_t\fP handle)"
.br
.RI "Issues soft-reset sensor and initializes registers for BME680\&. "
.ti -1c
.RI "char * \fBbme680_air_quality_to_string\fP (float iaq_score)"
.br
.RI "Air quality as a string based on the IAQ score\&. "
.ti -1c
.RI "esp_err_t \fBbme680_remove\fP (\fBbme680_handle_t\fP handle)"
.br
.RI "Removes an BME680 device from master bus\&. "
.ti -1c
.RI "esp_err_t \fBbme680_delete\fP (\fBbme680_handle_t\fP handle)"
.br
.RI "Removes an BME680 device from master bus and frees handle\&. "
.ti -1c
.RI "const char * \fBbme680_get_fw_version\fP (void)"
.br
.RI "Converts BME680 firmware version numbers (major, minor, patch, build) into a string\&. "
.ti -1c
.RI "int32_t \fBbme680_get_fw_version_number\fP (void)"
.br
.RI "Converts BME680 firmware version numbers (major, minor, patch) into an integer value\&. "
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "\fBbme680_status0_register_t\fP"
.br
.ti -1c
.RI "\fBbme680_control_measurement_register_t\fP"
.br
.ti -1c
.RI "\fBbme680_control_humidity_register_t\fP"
.br
.ti -1c
.RI "\fBbme680_control_gas1_register_t\fP"
.br
.ti -1c
.RI "\fBbme680_control_gas0_register_t\fP"
.br
.ti -1c
.RI "\fBbme680_gas_lsb_register_t\fP"
.br
.ti -1c
.RI "\fBbme680_config_register_t\fP"
.br
.in -1c
.SH "Author"
.PP 
Generated automatically by Doxygen for ESP-IDF Components by K0I05 from the source code\&.
