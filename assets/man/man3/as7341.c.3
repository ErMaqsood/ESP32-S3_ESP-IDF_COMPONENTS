.TH "components/peripherals/i2c/esp_as7341/as7341.c" 3 "ESP-IDF Components by K0I05" \" -*- nroff -*-
.ad l
.nh
.SH NAME
components/peripherals/i2c/esp_as7341/as7341.c
.SH SYNOPSIS
.br
.PP
\fR#include 'include/as7341\&.h'\fP
.br
\fR#include <string\&.h>\fP
.br
\fR#include <stdio\&.h>\fP
.br
\fR#include <math\&.h>\fP
.br
\fR#include <esp_log\&.h>\fP
.br
\fR#include <esp_check\&.h>\fP
.br
\fR#include <esp_timer\&.h>\fP
.br
\fR#include <freertos/FreeRTOS\&.h>\fP
.br
\fR#include <freertos/task\&.h>\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBAS7341_PART_ID\fP   UINT8_C(0x09)"
.br
.RI "as7341 I2C device part identifier "
.ti -1c
.RI "#define \fBAS7341_ITIME_L\fP   UINT8_C(0x63)"
.br
.RI "as7341 "
.ti -1c
.RI "#define \fBAS7341_ITIME_M\fP   UINT8_C(0x64)"
.br
.RI "as7341 "
.ti -1c
.RI "#define \fBAS7341_ITIME_H\fP   UINT8_C(0x65)"
.br
.RI "as7341 "
.ti -1c
.RI "#define \fBAS7341_CONFIG\fP   UINT8_C(0x70)"
.br
.RI "as7341 (see i2c_as7341_config_register_t) "
.ti -1c
.RI "#define \fBAS7341_DEV_STATUS\fP   UINT8_C(0x71)"
.br
.RI "as7341 (see i2c_as7341_device_status_register_t) "
.ti -1c
.RI "#define \fBAS7341_EDGE\fP   UINT8_C(0x72)"
.br
.RI "as7341 "
.ti -1c
.RI "#define \fBAS7341_GPIO1\fP   UINT8_C(0x73)"
.br
.RI "as7341 (see i2c_as7341_gpio1_register_t) "
.ti -1c
.RI "#define \fBAS7341_LED\fP   UINT8_C(0x74)"
.br
.RI "as7341 (see i2c_as7341_led_register_t) "
.ti -1c
.RI "#define \fBAS7341_ENABLE\fP   UINT8_C(0x80)"
.br
.RI "as7341 (see i2c_as7341_enable_register_t) "
.ti -1c
.RI "#define \fBAS7341_ATIME\fP   UINT8_C(0x81)"
.br
.RI "as7341 "
.ti -1c
.RI "#define \fBAS7341_WTIME\fP   UINT8_C(0x83)"
.br
.RI "as7341 "
.ti -1c
.RI "#define \fBAS7341_SP_TH_L_LSB\fP   UINT8_C(0x84)"
.br
.RI "as7341 "
.ti -1c
.RI "#define \fBAS7341_SP_TH_L_MSB\fP   UINT8_C(0x85)"
.br
.RI "as7341 "
.ti -1c
.RI "#define \fBAS7341_SP_TH_H_LSB\fP   UINT8_C(0x86)"
.br
.RI "as7341 "
.ti -1c
.RI "#define \fBIAS7341_SP_TH_H_MSB\fP   UINT8_C(0x87)"
.br
.RI "as7341 "
.ti -1c
.RI "#define \fBAS7341_AUXID\fP   UINT8_C(0x90)"
.br
.RI "as7341 "
.ti -1c
.RI "#define \fBAS7341_REVID\fP   UINT8_C(0x91)"
.br
.RI "as7341 "
.ti -1c
.RI "#define \fBAS7341_ID\fP   UINT8_C(0x92)"
.br
.RI "as7341 "
.ti -1c
.RI "#define \fBAS7341_INT_STATUS\fP   UINT8_C(0x93)"
.br
.RI "as7341 (see i2c_as7341_interrupt_status_register_t) "
.ti -1c
.RI "#define \fBAS7341_ASTATUS\fP   UINT8_C(0x94)"
.br
.RI "as7341 (see i2c_as7341_astatus_register_t) "
.ti -1c
.RI "#define \fBAS7341_CH0_ADC_DATA_L\fP   UINT8_C(0x95)"
.br
.RI "as7341 "
.ti -1c
.RI "#define \fBAS7341_CH0_ADC_DATA_H\fP   UINT8_C(0x96)"
.br
.RI "as7341 "
.ti -1c
.RI "#define \fBAS7341_CH1_ADC_DATA_L\fP   UINT8_C(0x97)"
.br
.RI "as7341 "
.ti -1c
.RI "#define \fBAS7341_CH1_ADC_DATA_H\fP   UINT8_C(0x98)"
.br
.RI "as7341 "
.ti -1c
.RI "#define \fBAS7341_CH2_ADC_DATA_L\fP   UINT8_C(0x99)"
.br
.RI "as7341 "
.ti -1c
.RI "#define \fBAS7341_CH2_ADC_DATA_H\fP   UINT8_C(0x9a)"
.br
.RI "as7341 "
.ti -1c
.RI "#define \fBAS7341_CH3_ADC_DATA_L\fP   UINT8_C(0x9b)"
.br
.RI "as7341 "
.ti -1c
.RI "#define \fBAS7341_CH3_ADC_DATA_H\fP   UINT8_C(0x9c)"
.br
.RI "as7341 "
.ti -1c
.RI "#define \fBAS7341_CH4_ADC_DATA_L\fP   UINT8_C(0x9d)"
.br
.RI "as7341 "
.ti -1c
.RI "#define \fBAS7341_CH4_ADC_DATA_H\fP   UINT8_C(0x9e)"
.br
.RI "as7341 "
.ti -1c
.RI "#define \fBAS7341_CH5_ADC_DATA_L\fP   UINT8_C(0x9f)"
.br
.RI "as7341 "
.ti -1c
.RI "#define \fBAS7341_CH5_ADC_DATA_H\fP   UINT8_C(0xa0)"
.br
.RI "as7341 "
.ti -1c
.RI "#define \fBAS7341_STATUS2\fP   UINT8_C(0xa3)"
.br
.RI "as7341 (see i2c_as7341_status2_register_t) "
.ti -1c
.RI "#define \fBAS7341_STATUS3\fP   UINT8_C(0xa4)"
.br
.RI "as7341 (see i2c_as7341_status3_register_t) "
.ti -1c
.RI "#define \fBAS7341_STATUS5\fP   UINT8_C(0xa6)"
.br
.RI "as7341 (see i2c_as7341_status5_register_t) "
.ti -1c
.RI "#define \fBAS7341_STATUS6\fP   UINT8_C(0xa7)"
.br
.RI "as7341 (see i2c_as7341_status6_register_t) "
.ti -1c
.RI "#define \fBAS7341_CONFIG0\fP   UINT8_C(0xa9)"
.br
.RI "as7341 (see i2c_as7341_config0_register_t) "
.ti -1c
.RI "#define \fBAS7341_CONFIG1\fP   UINT8_C(0xaa)"
.br
.RI "as7341 (see i2c_as7341_config1_register_t) "
.ti -1c
.RI "#define \fBAS7341_CONFIG3\fP   UINT8_C(0xac)"
.br
.RI "as7341 (see i2c_as7341_config3_register_t) "
.ti -1c
.RI "#define \fBAS7341_CONFIG6\fP   UINT8_C(0xaf)"
.br
.RI "as7341 (see i2c_as7341_config6_register_t) "
.ti -1c
.RI "#define \fBAS7341_CONFIG8\fP   UINT8_C(0xb1)"
.br
.RI "as7341 (see i2c_as7341_config8_register_t) "
.ti -1c
.RI "#define \fBAS7341_CONFIG9\fP   UINT8_C(0xb2)"
.br
.RI "as7341 (see i2c_as7341_config9_register_t) "
.ti -1c
.RI "#define \fBAS7341_CONFIG10\fP   UINT8_C(0xb3)"
.br
.RI "as7341 (see i2c_as7341_config10_register_t) "
.ti -1c
.RI "#define \fBAS7341_CONFIG12\fP   UINT8_C(0xb5)"
.br
.RI "as7341 (see i2c_as7341_config12_register_t) "
.ti -1c
.RI "#define \fBAS7341_PERS\fP   UINT8_C(0xbd)"
.br
.RI "as7341 (see i2c_as7341_pers_register_t) "
.ti -1c
.RI "#define \fBAS7341_GPIO2\fP   UINT8_C(0xbe)"
.br
.RI "as7341 (see i2c_as7341_gpio2_register_t) "
.ti -1c
.RI "#define \fBAS7341_ASTEP_L\fP   UINT8_C(0xca)"
.br
.RI "as7341 "
.ti -1c
.RI "#define \fBAS7341_ASTEP_H\fP   UINT8_C(0xcb)"
.br
.RI "as7341 "
.ti -1c
.RI "#define \fBAS7341_AGC_GAIN_MAX\fP   UINT8_C(0xcf)"
.br
.RI "as7341 (see i2c_as7341_agc_gain_register_t) "
.ti -1c
.RI "#define \fBAS7341_AZ_CONFIG\fP   UINT8_C(0xd6)"
.br
.RI "as7341 "
.ti -1c
.RI "#define \fBAS7341_FD_TIME1\fP   UINT8_C(0xd8)"
.br
.RI "as7341 "
.ti -1c
.RI "#define \fBAS7341_FD_TIME2\fP   UINT8_C(0xda)"
.br
.RI "as7341 (see i2c_as7341_fd_time2_register_t) "
.ti -1c
.RI "#define \fBAS7341_FD_CONFIG0\fP   UINT8_C(0xd7)"
.br
.RI "as7341 (see i2c_as7341_fd_config0_register_t) "
.ti -1c
.RI "#define \fBAS7341_FD_STATUS\fP   UINT8_C(0xdb)"
.br
.RI "as7341 (see i2c_as7341_fd_status_register_t) "
.ti -1c
.RI "#define \fBAS7341_INTENAB\fP   UINT8_C(0xf9)"
.br
.RI "as7341 (see i2c_as7341_interrupt_enable_register_t) "
.ti -1c
.RI "#define \fBAS7341_CONTROL\fP   UINT8_C(0xfa)"
.br
.RI "as7341 (see i2c_as7341_control_register_t) "
.ti -1c
.RI "#define \fBAS7341_DATA_POLL_TIMEOUT_MS\fP   UINT16_C(1000)"
.br
.ti -1c
.RI "#define \fBAS7341_DATA_READY_DELAY_MS\fP   UINT16_C(1)"
.br
.ti -1c
.RI "#define \fBAS7341_POWERUP_DELAY_MS\fP   UINT16_C(200)"
.br
.ti -1c
.RI "#define \fBAS7341_APPSTART_DELAY_MS\fP   UINT16_C(200)"
.br
.ti -1c
.RI "#define \fBAS7341_RESET_DELAY_MS\fP   UINT16_C(25)"
.br
.ti -1c
.RI "#define \fBAS7341_SETUP_DELAY_MS\fP   UINT16_C(15)"
.br
.ti -1c
.RI "#define \fBAS7341_CMD_DELAY_MS\fP   UINT16_C(5)"
.br
.ti -1c
.RI "#define \fBAS7341_TX_RX_DELAY_MS\fP   UINT16_C(10)"
.br
.ti -1c
.RI "#define \fBESP_TIMEOUT_CHECK\fP(start,  len)"
.br
.ti -1c
.RI "#define \fBESP_ARG_CHECK\fP(VAL)"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "esp_err_t \fBas7341_get_led_register\fP (\fBas7341_handle_t\fP handle, as7341_led_register_t *const reg)"
.br
.RI "Reads LED register (0x74) from AS7341\&. "
.ti -1c
.RI "esp_err_t \fBas7341_set_led_register\fP (\fBas7341_handle_t\fP handle, const as7341_led_register_t reg)"
.br
.RI "Writes LED register (0x74) to AS7341\&. "
.ti -1c
.RI "esp_err_t \fBas7341_get_astatus_register\fP (\fBas7341_handle_t\fP handle, as7341_astatus_register_t *const reg)"
.br
.RI "Reads ASTATUS register (0x94) from AS7341\&. "
.ti -1c
.RI "esp_err_t \fBas7341_get_status2_register\fP (\fBas7341_handle_t\fP handle, as7341_status2_register_t *const reg)"
.br
.RI "Reads status 2 register (0xA3) from AS7341\&. "
.ti -1c
.RI "esp_err_t \fBas7341_disable_enable_register\fP (\fBas7341_handle_t\fP handle)"
.br
.RI "Disables spectral readings, flicker detection, power, etc\&. "
.ti -1c
.RI "esp_err_t \fBas7341_get_enable_register\fP (\fBas7341_handle_t\fP handle, as7341_enable_register_t *const reg)"
.br
.RI "Reads enable register (0x80) from AS7341\&. "
.ti -1c
.RI "esp_err_t \fBas7341_set_enable_register\fP (\fBas7341_handle_t\fP handle, const as7341_enable_register_t reg)"
.br
.RI "Writes enable register (0x80) to AS7341\&. "
.ti -1c
.RI "esp_err_t \fBas7341_get_auxiliary_id_register\fP (\fBas7341_handle_t\fP handle, as7341_auxiliary_id_register_t *const reg)"
.br
.RI "Reads auxiliary id register (0x90) from AS7341\&. "
.ti -1c
.RI "esp_err_t \fBas7341_get_revision_id_register\fP (\fBas7341_handle_t\fP handle, as7341_revision_id_register_t *const reg)"
.br
.RI "Reads revision id register (0x91) from AS7341\&. "
.ti -1c
.RI "esp_err_t \fBas7341_get_part_id_register\fP (\fBas7341_handle_t\fP handle, as7341_part_id_register_t *const reg)"
.br
.RI "Reads part id register (0x92) from AS7341\&. "
.ti -1c
.RI "esp_err_t \fBas7341_get_config_register\fP (\fBas7341_handle_t\fP handle, as7341_config_register_t *const reg)"
.br
.RI "Reads configuration register (0x70) from AS7341\&. "
.ti -1c
.RI "esp_err_t \fBas7341_set_config_register\fP (\fBas7341_handle_t\fP handle, const as7341_config_register_t reg)"
.br
.RI "Writes configuration register (0x70) from AS7341\&. "
.ti -1c
.RI "esp_err_t \fBas7341_get_config0_register\fP (\fBas7341_handle_t\fP handle, as7341_config0_register_t *const reg)"
.br
.RI "Reads configuration 0 register (0xA9) from AS7341\&. "
.ti -1c
.RI "esp_err_t \fBas7341_set_config0_register\fP (\fBas7341_handle_t\fP handle, const as7341_config0_register_t reg)"
.br
.RI "Writes configuration 0 register (0xA9) from AS7341\&. "
.ti -1c
.RI "esp_err_t \fBas7341_get_config1_register\fP (\fBas7341_handle_t\fP handle, as7341_config1_register_t *const reg)"
.br
.RI "Reads configuration 1 (0xAA) register from AS7341\&. This register configures the 6 integrated ADC (CH0 to CH5)\&. "
.ti -1c
.RI "esp_err_t \fBas7341_set_config1_register\fP (\fBas7341_handle_t\fP handle, const as7341_config1_register_t reg)"
.br
.RI "Writes configuration 1 (0xAA) register to AS7341\&. This register configures the 6 integrated ADC (CH0 to CH5)\&. "
.ti -1c
.RI "esp_err_t \fBas7341_get_config6_register\fP (\fBas7341_handle_t\fP handle, as7341_config6_register_t *const reg)"
.br
.RI "Reads configuration 6 register (0xAF) from AS7341\&. "
.ti -1c
.RI "esp_err_t \fBas7341_set_config6_register\fP (\fBas7341_handle_t\fP handle, const as7341_config6_register_t reg)"
.br
.RI "Writes configuration 6 register (0xAF) to AS7341\&. "
.ti -1c
.RI "esp_err_t \fBas7341_get_atime_register\fP (\fBas7341_handle_t\fP handle, uint8_t *const reg)"
.br
.RI "Reads ATIME (0x81) register from AS7341\&. "
.ti -1c
.RI "esp_err_t \fBas7341_set_atime_register\fP (\fBas7341_handle_t\fP handle, const uint8_t reg)"
.br
.RI "Writes ATIME (0x81) register to AS7341\&. "
.ti -1c
.RI "esp_err_t \fBas7341_get_astep_register\fP (\fBas7341_handle_t\fP handle, uint16_t *const reg)"
.br
.RI "Reads ASTEP (0xCA, 0xCB) register from AS7341\&. "
.ti -1c
.RI "esp_err_t \fBas7341_set_astep_register\fP (\fBas7341_handle_t\fP handle, const uint16_t reg)"
.br
.RI "Writes ASTEP (0xCA, 0xCB) register to AS7341\&. "
.ti -1c
.RI "esp_err_t \fBas7341_get_flicker_detection_status_register\fP (\fBas7341_handle_t\fP handle, as7341_flicker_detection_status_register_t *const reg)"
.br
.RI "Reads flicker detection status (0xDB) register from AS7341\&. "
.ti -1c
.RI "esp_err_t \fBas7341_set_flicker_detection_status_register\fP (\fBas7341_handle_t\fP handle, const as7341_flicker_detection_status_register_t reg)"
.br
.RI "Writes flicker detection status (0xDB) register to AS7341\&. "
.ti -1c
.RI "esp_err_t \fBas7341_clear_flicker_detection_status_register\fP (\fBas7341_handle_t\fP handle)"
.br
.RI "Clears flicker detection status (0xDB) register on AS7341\&. "
.ti -1c
.RI "esp_err_t \fBas7341_enable_hi_register_bank\fP (\fBas7341_handle_t\fP handle)"
.br
.RI "Enables access to the AS7341 high register bank (0x80 to 0xFF)\&. "
.ti -1c
.RI "esp_err_t \fBas7341_enable_lo_register_bank\fP (\fBas7341_handle_t\fP handle)"
.br
.RI "Enables access to the AS7341 low register bank (0x60 to 0x74)\&. "
.ti -1c
.RI "esp_err_t \fBas7341_set_smux_command\fP (\fBas7341_handle_t\fP handle, const \fBas7341_smux_commands_t\fP command)"
.br
.RI "Writes SMUX command to AS7341\&. "
.ti -1c
.RI "esp_err_t \fBas7341_init\fP (i2c_master_bus_handle_t master_handle, const \fBas7341_config_t\fP *as7341_config, \fBas7341_handle_t\fP *as7341_handle)"
.br
.RI "Initializes an AS7341 device onto the I2C master bus\&. "
.ti -1c
.RI "esp_err_t \fBas7341_get_spectral_measurements\fP (\fBas7341_handle_t\fP handle, \fBas7341_channels_spectral_data_t\fP *const spectral_data)"
.br
.RI "Reads spectral sensors measurements, F1 to F8, Clear and NIR, from AS7341\&. "
.ti -1c
.RI "esp_err_t \fBas7341_get_basic_counts\fP (\fBas7341_handle_t\fP handle, const \fBas7341_channels_spectral_data_t\fP spectral_data, \fBas7341_channels_basic_counts_data_t\fP *const basic_counts_data)"
.br
.RI "Converts AS7341 spectral sensors measurements to basic counts\&. "
.ti -1c
.RI "esp_err_t \fBas7341_get_flicker_detection_status\fP (\fBas7341_handle_t\fP handle, \fBas7341_flicker_detection_states_t\fP *const state)"
.br
.RI "Reads flicker detection status from AS7341\&. "
.ti -1c
.RI "esp_err_t \fBas7341_get_data_status\fP (\fBas7341_handle_t\fP handle, bool *const ready)"
.br
.RI "Reads data status from AS7341\&. "
.ti -1c
.RI "esp_err_t \fBas7341_get_atime\fP (\fBas7341_handle_t\fP handle, uint8_t *const atime)"
.br
.RI "Reads the number of integration steps for the ADC integration time from AS7341\&. "
.ti -1c
.RI "esp_err_t \fBas7341_set_atime\fP (\fBas7341_handle_t\fP handle, const uint8_t atime)"
.br
.RI "Writes the number of integration steps for the ADC integration time to AS7341\&. "
.ti -1c
.RI "esp_err_t \fBas7341_get_astep\fP (\fBas7341_handle_t\fP handle, uint16_t *const astep)"
.br
.RI "Reads the number of integration time steps for the ADC integration time from AS7341\&. "
.ti -1c
.RI "esp_err_t \fBas7341_set_astep\fP (\fBas7341_handle_t\fP handle, const uint16_t astep)"
.br
.RI "Writes the number of integration time steps for the ADC integration time to AS7341\&. "
.ti -1c
.RI "esp_err_t \fBas7341_get_spectral_gain\fP (\fBas7341_handle_t\fP handle, \fBas7341_spectral_gains_t\fP *const gain)"
.br
.RI "Reads spectral gain setting from AS7341\&. "
.ti -1c
.RI "esp_err_t \fBas7341_set_spectral_gain\fP (\fBas7341_handle_t\fP handle, const \fBas7341_spectral_gains_t\fP gain)"
.br
.RI "Writes spectral gain setting to AS7341\&. "
.ti -1c
.RI "esp_err_t \fBas7341_get_ambient_light_sensing_mode\fP (\fBas7341_handle_t\fP handle, \fBas7341_als_modes_t\fP *const mode)"
.br
.RI "Reads ambient light sensing mode from AS7341\&. SPM mode (spectral measurement), normal mode, is configured by default\&. "
.ti -1c
.RI "esp_err_t \fBas7341_set_ambient_light_sensing_mode\fP (\fBas7341_handle_t\fP handle, const \fBas7341_als_modes_t\fP mode)"
.br
.RI "Writes ambient light sensing mode to AS7341\&. SPM mode (spectral measurement), normal mode, is configured by default\&. "
.ti -1c
.RI "esp_err_t \fBas7341_enable_flicker_detection\fP (\fBas7341_handle_t\fP handle)"
.br
.RI "Enables AS7341 flicker detection\&. "
.ti -1c
.RI "esp_err_t \fBas7341_disable_flicker_detection\fP (\fBas7341_handle_t\fP handle)"
.br
.RI "Disables AS7341 flicker detection\&. "
.ti -1c
.RI "esp_err_t \fBas7341_enable_smux\fP (\fBas7341_handle_t\fP handle)"
.br
.RI "Enables AS7341 supper multiplier (SMUX) special interrupt\&. "
.ti -1c
.RI "esp_err_t \fBas7341_enable_spectral_measurement\fP (\fBas7341_handle_t\fP handle)"
.br
.RI "Enables AS7341 spectral measurement\&. "
.ti -1c
.RI "esp_err_t \fBas7341_disable_spectral_measurement\fP (\fBas7341_handle_t\fP handle)"
.br
.RI "Disables AS7341 spectral measurement\&. "
.ti -1c
.RI "esp_err_t \fBas7341_enable_power\fP (\fBas7341_handle_t\fP handle)"
.br
.RI "Enables AS7341 power\&. "
.ti -1c
.RI "esp_err_t \fBas7341_disable_power\fP (\fBas7341_handle_t\fP handle)"
.br
.RI "Disables AS7341 power\&. "
.ti -1c
.RI "esp_err_t \fBas7341_enable_led\fP (\fBas7341_handle_t\fP handle)"
.br
.RI "Enables AS7341 onboard LED\&. "
.ti -1c
.RI "esp_err_t \fBas7341_disable_led\fP (\fBas7341_handle_t\fP handle)"
.br
.RI "Disables AS7341 onboard LED\&. "
.ti -1c
.RI "esp_err_t \fBas7341_remove\fP (\fBas7341_handle_t\fP handle)"
.br
.RI "Removes an AS7341 device from master bus\&. "
.ti -1c
.RI "esp_err_t \fBas7341_delete\fP (\fBas7341_handle_t\fP handle)"
.br
.RI "Removes an AS7341 device from master bus and frees handle\&. "
.ti -1c
.RI "const char * \fBas7341_get_fw_version\fP (void)"
.br
.RI "Converts AS7341 firmware version numbers (major, minor, patch, build) into a string\&. "
.ti -1c
.RI "int32_t \fBas7341_get_fw_version_number\fP (void)"
.br
.RI "Converts AS7341 firmware version numbers (major, minor, patch) into an integer value\&. "
.in -1c
.SH "Detailed Description"
.PP 
ESP-IDF driver for AS7341 11-channel spectrometer (350nm to 1000nm)

.PP
Copyright (c) 2024 Eric Gionet (gionet.c.eric@gmail.com)

.PP
MIT Licensed as described in the file LICENSE 
.SH "Macro Definition Documentation"
.PP 
.SS "#define ESP_ARG_CHECK( VAL)"
\fBValue:\fP
.nf
do { if (!(VAL)) return ESP_ERR_INVALID_ARG; } while (0)
.PP
.fi

.SS "#define ESP_TIMEOUT_CHECK( start,  len)"
\fBValue:\fP
.nf
((uint64_t)(esp_timer_get_time() \- (start)) >= (len))
.PP
.fi

.SH "Author"
.PP 
Generated automatically by Doxygen for ESP-IDF Components by K0I05 from the source code\&.
