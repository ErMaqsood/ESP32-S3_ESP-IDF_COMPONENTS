.TH "components/utilities/esp_type_utils/include/type_utils.h" 3 "ESP-IDF Components by K0I05" \" -*- nroff -*-
.ad l
.nh
.SH NAME
components/utilities/esp_type_utils/include/type_utils.h
.SH SYNOPSIS
.br
.PP
\fR#include <stdint\&.h>\fP
.br
\fR#include <stdbool\&.h>\fP
.br
\fR#include <esp_mac\&.h>\fP
.br
\fR#include 'type_utils_version\&.h'\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "union \fBbytes_to_float_t\fP"
.br
.ti -1c
.RI "union \fBbytes_to_double_t\fP"
.br
.ti -1c
.RI "union \fBbytes_to_uint64_t\fP"
.br
.ti -1c
.RI "union \fBbytes_to_int64_t\fP"
.br
.ti -1c
.RI "union \fBbytes_to_uint32_t\fP"
.br
.ti -1c
.RI "union \fBbytes_to_int32_t\fP"
.br
.ti -1c
.RI "union \fBbytes_to_uint16_t\fP"
.br
.ti -1c
.RI "union \fBbytes_to_int16_t\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBBIT8_UINT8_BUFFER_SIZE\fP   (1)"
.br
.ti -1c
.RI "#define \fBBIT16_UINT8_BUFFER_SIZE\fP   (2)"
.br
.ti -1c
.RI "#define \fBBIT24_UINT8_BUFFER_SIZE\fP   (3)"
.br
.ti -1c
.RI "#define \fBBIT32_UINT8_BUFFER_SIZE\fP   (4)"
.br
.ti -1c
.RI "#define \fBBIT40_UINT8_BUFFER_SIZE\fP   (5)"
.br
.ti -1c
.RI "#define \fBBIT48_UINT8_BUFFER_SIZE\fP   (6)"
.br
.ti -1c
.RI "#define \fBBIT56_UINT8_BUFFER_SIZE\fP   (7)"
.br
.ti -1c
.RI "#define \fBBIT64_UINT8_BUFFER_SIZE\fP   (8)"
.br
.ti -1c
.RI "#define \fBBIT72_UINT8_BUFFER_SIZE\fP   (9)"
.br
.ti -1c
.RI "#define \fBBIT80_UINT8_BUFFER_SIZE\fP   (10)"
.br
.ti -1c
.RI "#define \fBBIT88_UINT8_BUFFER_SIZE\fP   (11)"
.br
.ti -1c
.RI "#define \fBBIT96_UINT8_BUFFER_SIZE\fP   (12)"
.br
.ti -1c
.RI "#define \fBBIT104_UINT8_BUFFER_SIZE\fP   (13)"
.br
.ti -1c
.RI "#define \fBBIN8_CHAR_BUFFER_SIZE\fP   (8 + 1)"
.br
.ti -1c
.RI "#define \fBBIN16_CHAR_BUFFER_SIZE\fP   (16 + 1)"
.br
.ti -1c
.RI "#define \fBBIN32_CHAR_BUFFER_SIZE\fP   (32 + 1)"
.br
.ti -1c
.RI "#define \fBBIN64_CHAR_BUFFER_SIZE\fP   (64 + 1)"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef uint8_t \fBbit8_uint8_buffer_t\fP[BIT8_UINT8_BUFFER_SIZE]"
.br
.ti -1c
.RI "typedef uint8_t \fBbit16_uint8_buffer_t\fP[BIT16_UINT8_BUFFER_SIZE]"
.br
.ti -1c
.RI "typedef uint8_t \fBbit24_uint8_buffer_t\fP[BIT24_UINT8_BUFFER_SIZE]"
.br
.ti -1c
.RI "typedef uint8_t \fBbit32_uint8_buffer_t\fP[BIT32_UINT8_BUFFER_SIZE]"
.br
.ti -1c
.RI "typedef uint8_t \fBbit40_uint8_buffer_t\fP[BIT40_UINT8_BUFFER_SIZE]"
.br
.ti -1c
.RI "typedef uint8_t \fBbit48_uint8_buffer_t\fP[BIT48_UINT8_BUFFER_SIZE]"
.br
.ti -1c
.RI "typedef uint8_t \fBbit56_uint8_buffer_t\fP[BIT56_UINT8_BUFFER_SIZE]"
.br
.ti -1c
.RI "typedef uint8_t \fBbit64_uint8_buffer_t\fP[BIT64_UINT8_BUFFER_SIZE]"
.br
.ti -1c
.RI "typedef uint8_t \fBbit72_uint8_buffer_t\fP[BIT72_UINT8_BUFFER_SIZE]"
.br
.ti -1c
.RI "typedef uint8_t \fBbit80_uint8_buffer_t\fP[BIT80_UINT8_BUFFER_SIZE]"
.br
.ti -1c
.RI "typedef uint8_t \fBbit88_uint8_buffer_t\fP[BIT88_UINT8_BUFFER_SIZE]"
.br
.ti -1c
.RI "typedef uint8_t \fBbit96_uint8_buffer_t\fP[BIT96_UINT8_BUFFER_SIZE]"
.br
.ti -1c
.RI "typedef uint8_t \fBbit104_uint8_buffer_t\fP[BIT104_UINT8_BUFFER_SIZE]"
.br
.ti -1c
.RI "typedef char \fBbin8_char_buffer_t\fP[BIN8_CHAR_BUFFER_SIZE]"
.br
.ti -1c
.RI "typedef char \fBbin16_char_buffer_t\fP[BIN16_CHAR_BUFFER_SIZE]"
.br
.ti -1c
.RI "typedef char \fBbin32_char_buffer_t\fP[BIN32_CHAR_BUFFER_SIZE]"
.br
.ti -1c
.RI "typedef char \fBbin64_char_buffer_t\fP[BIN64_CHAR_BUFFER_SIZE]"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "uint32_t \fBget_uint32_chip_id\fP (void)"
.br
.RI "Generates a unique \fRuint32_t\fP chip identifier from e-fuse mac address\&. "
.ti -1c
.RI "uint64_t \fBget_uint64_chip_id\fP (void)"
.br
.RI "Generates a unique \fRuint64_t\fP chip identifier from e-fuse mac address\&. "
.ti -1c
.RI "uint64_t \fBget_efuse_mac\fP (void)"
.br
.RI "Gets the e-fuse mac address\&. "
.ti -1c
.RI "const char * \fBuint8_to_binary\fP (const uint8_t value)"
.br
.RI "Converts \fRuint8_t\fP type to binary as a string\&. "
.ti -1c
.RI "const char * \fBint8_to_binary\fP (const int8_t value)"
.br
.RI "Converts \fRint8_t\fP type to binary as a string\&. "
.ti -1c
.RI "const char * \fBuint16_to_binary\fP (const uint16_t value)"
.br
.RI "Converts \fRuint16_t\fP type to binary as a string\&. "
.ti -1c
.RI "const char * \fBint16_to_binary\fP (const int16_t value)"
.br
.RI "Converts \fRint16_t\fP type to binary as a string\&. "
.ti -1c
.RI "const char * \fBuint32_to_binary\fP (const uint32_t value)"
.br
.RI "Converts \fRuint32_t\fP type to binary as a string\&. "
.ti -1c
.RI "const char * \fBint32_to_binary\fP (const int32_t value)"
.br
.RI "Converts \fRint32_t\fP type to binary as a string\&. "
.ti -1c
.RI "const char * \fBuint64_to_binary\fP (const uint64_t value)"
.br
.RI "Converts \fRuint64_t\fP type to binary as a string\&. "
.ti -1c
.RI "const char * \fBint64_to_binary\fP (const int64_t value)"
.br
.RI "Converts \fRint64_t\fP type to binary as a string\&. "
.ti -1c
.RI "uint16_t \fBbytes_to_uint16\fP (const uint8_t *bytes, const bool little_endian)"
.br
.RI "Converts byte array to \fRuint16_t\fP data-type\&. "
.ti -1c
.RI "uint32_t \fBbytes_to_uint32\fP (const uint8_t *bytes, const bool little_endian)"
.br
.RI "Converts byte array to \fRuint32_t\fP data-type\&. "
.ti -1c
.RI "uint64_t \fBbytes_to_uint64\fP (const uint8_t *bytes, const bool little_endian)"
.br
.RI "Converts byte array to \fRuint64_t\fP data-type\&. "
.ti -1c
.RI "int16_t \fBbytes_to_int16\fP (const uint8_t *bytes, const bool little_endian)"
.br
.RI "Converts byte array to \fRint16_t\fP data-type\&. "
.ti -1c
.RI "int32_t \fBbytes_to_int32\fP (const uint8_t *bytes, const bool little_endian)"
.br
.RI "Converts byte array to \fRint32_t\fP data-type\&. "
.ti -1c
.RI "int64_t \fBbytes_to_int64\fP (const uint8_t *bytes, const bool little_endian)"
.br
.RI "Converts byte array to \fRint64_t\fP data-type\&. "
.ti -1c
.RI "void \fBuint16_to_bytes\fP (const uint16_t value, uint8_t *bytes, const bool little_endian)"
.br
.RI "Converts \fRuint16_t\fP data-type to a byte array\&. "
.ti -1c
.RI "void \fBuint32_to_bytes\fP (const uint32_t value, uint8_t *bytes, const bool little_endian)"
.br
.RI "Converts \fRuint32_t\fP data-type to a byte array\&. "
.ti -1c
.RI "void \fBuint64_to_bytes\fP (const uint64_t value, uint8_t *bytes, const bool little_endian)"
.br
.RI "Converts \fRuint64_t\fP data-type to a byte array\&. "
.ti -1c
.RI "void \fBint16_to_bytes\fP (const int16_t value, uint8_t *bytes, const bool little_endian)"
.br
.RI "Converts \fRint16_t\fP data-type to a byte array\&. "
.ti -1c
.RI "void \fBint32_to_bytes\fP (const int32_t value, uint8_t *bytes, const bool little_endian)"
.br
.RI "Converts \fRint32_t\fP data-type to a byte array\&. "
.ti -1c
.RI "void \fBint64_to_bytes\fP (const int64_t value, uint8_t *bytes, const bool little_endian)"
.br
.RI "Converts \fRint64_t\fP data-type to a byte array\&. "
.ti -1c
.RI "void \fBfloat_to_bytes\fP (const float value, uint8_t *bytes, const bool little_endian)"
.br
.RI "Converts \fRfloat\fP data-type to a byte array\&. "
.ti -1c
.RI "void \fBdouble_to_bytes\fP (const double value, uint8_t *bytes, const bool little_endian)"
.br
.RI "Converts \fRdouble\fP data-type to a byte array\&. "
.ti -1c
.RI "void \fBcopy_bytes\fP (const uint8_t *source, uint8_t *destination, const size_t size)"
.br
.RI "Copies bytes from source byte array to destination byte array\&. "
.ti -1c
.RI "const char * \fBtype_utils_get_fw_version\fP (void)"
.br
.RI "Converts \fRtype_utils\fP firmware version numbers (major, minor, patch) into a string\&. "
.ti -1c
.RI "int32_t \fBtype_utils_get_fw_version_number\fP (void)"
.br
.RI "Converts \fRtype_utils\fP firmware version numbers (major, minor, patch) into an integer value\&. "
.in -1c
.SH "Author"
.PP 
Generated automatically by Doxygen for ESP-IDF Components by K0I05 from the source code\&.
