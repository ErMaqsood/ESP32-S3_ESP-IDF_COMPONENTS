.TH "components/peripherals/i2c/esp_ens160/include/ens160.h" 3 "ESP-IDF Components by K0I05" \" -*- nroff -*-
.ad l
.nh
.SH NAME
components/peripherals/i2c/esp_ens160/include/ens160.h
.SH SYNOPSIS
.br
.PP
\fR#include <stdint\&.h>\fP
.br
\fR#include <stdbool\&.h>\fP
.br
\fR#include <esp_err\&.h>\fP
.br
\fR#include <driver/i2c_master\&.h>\fP
.br
\fR#include <type_utils\&.h>\fP
.br
\fR#include 'ens160_version\&.h'\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "union \fBens160_app_version_u\fP"
.br
.RI "ENS160 application version register structure\&. "
.ti -1c
.RI "struct \fBens160_air_quality_data_s\fP"
.br
.RI "ENS160 air quality data structure\&. "
.ti -1c
.RI "struct \fBens160_air_quality_raw_data_s\fP"
.br
.RI "ENS160 air quality raw data structure\&. "
.ti -1c
.RI "struct \fBens160_aqi_uba_row_s\fP"
.br
.RI "ENS160 air quality index of the UBA row definition structure\&. "
.ti -1c
.RI "struct \fBens160_config_s\fP"
.br
.RI "ENS160 configuration structure\&. "
.ti -1c
.RI "struct \fBens160_context_t\fP"
.br
.RI "ENS160 context structure\&. "
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBI2C_ENS160_DEV_CLK_SPD\fP   UINT32_C(100000)"
.br
.RI "ens160 I2C default clock frequency (100KHz) "
.ti -1c
.RI "#define \fBI2C_ENS160_DEV_ADDR_LO\fP   UINT8_C(0x52)"
.br
.RI "ens160 I2C address ADDR pin low "
.ti -1c
.RI "#define \fBI2C_ENS160_DEV_ADDR_HI\fP   UINT8_C(0x53)"
.br
.RI "ens160 I2C address ADDR pin high "
.ti -1c
.RI "#define \fBI2C_XFR_TIMEOUT_MS\fP   (500)"
.br
.RI "I2C transaction timeout in milliseconds\&. "
.ti -1c
.RI "#define \fBENS160_TVOC_MIN\fP   UINT16_C(0)"
.br
.ti -1c
.RI "#define \fBENS160_TVOC_MAX\fP   UINT16_C(65000)"
.br
.ti -1c
.RI "#define \fBENS160_ECO2_MIN\fP   UINT16_C(400)"
.br
.ti -1c
.RI "#define \fBENS160_ECO2_MAX\fP   UINT16_C(65000)"
.br
.ti -1c
.RI "#define \fBENS160_AQI_MIN\fP   UINT16_C(1)"
.br
.ti -1c
.RI "#define \fBENS160_AQI_MAX\fP   UINT16_C(5)"
.br
.ti -1c
.RI "#define \fBENS160_ERROR_MSG_SIZE\fP   (80)"
.br
.RI "ens160 I2C error message size "
.ti -1c
.RI "#define \fBENS160_ERROR_MSG_TABLE_SIZE\fP   (7)"
.br
.RI "ens160 I2C error message table size "
.ti -1c
.RI "#define \fBI2C_ENS160_CONFIG_DEFAULT\fP"
.br
.RI "Macro that initializes \fRi2c_ens160_config_t\fP to default configuration settings\&. "
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef enum \fBens160_aqi_uba_indexes_e\fP \fBens160_aqi_uba_indexes_t\fP"
.br
.RI "ENS160 air quality index of the uba enumerator\&. "
.ti -1c
.RI "typedef enum \fBens160_interrupt_pin_polarities_e\fP \fBens160_interrupt_pin_polarities_t\fP"
.br
.RI "ENS160 interrupt pin polarities enumerator\&. "
.ti -1c
.RI "typedef enum \fBens160_interrupt_pin_drivers_e\fP \fBens160_interrupt_pin_drivers_t\fP"
.br
.RI "ENS160 interrupt pin drivers enumerator\&. "
.ti -1c
.RI "typedef enum \fBens160_operating_modes_e\fP \fBens160_operating_modes_t\fP"
.br
.RI "ENS160 operating modes enumerator\&. "
.ti -1c
.RI "typedef enum \fBens160_commands_e\fP \fBens160_commands_t\fP"
.br
.RI "ENS160 commands enumerator\&. "
.ti -1c
.RI "typedef enum \fBens160_validity_flags_e\fP \fBens160_validity_flags_t\fP"
.br
.RI "ENS160 validity flags enumerator\&. "
.ti -1c
.RI "typedef union \fBens160_app_version_u\fP \fBens160_app_version_t\fP"
.br
.RI "ENS160 application version register structure\&. "
.ti -1c
.RI "typedef struct \fBens160_air_quality_data_s\fP \fBens160_air_quality_data_t\fP"
.br
.RI "ENS160 air quality data structure\&. "
.ti -1c
.RI "typedef struct \fBens160_air_quality_raw_data_s\fP \fBens160_air_quality_raw_data_t\fP"
.br
.RI "ENS160 air quality raw data structure\&. "
.ti -1c
.RI "typedef struct \fBens160_aqi_uba_row_s\fP \fBens160_aqi_uba_row_t\fP"
.br
.RI "ENS160 air quality index of the UBA row definition structure\&. "
.ti -1c
.RI "typedef struct \fBens160_config_s\fP \fBens160_config_t\fP"
.br
.RI "ENS160 configuration structure\&. "
.ti -1c
.RI "typedef struct ens160_context_t \fBens160_context_t\fP"
.br
.RI "ENS160 context structure definition\&. "
.ti -1c
.RI "typedef struct \fBens160_context_t\fP * \fBens160_handle_t\fP"
.br
.RI "ENS160 handle structure definition\&. "
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBens160_aqi_uba_indexes_e\fP { \fBENS160_AQI_UBA_INDEX_UNKNOWN\fP = 0, \fBENS160_AQI_UBA_INDEX_1\fP = 1, \fBENS160_AQI_UBA_INDEX_2\fP = 2, \fBENS160_AQI_UBA_INDEX_3\fP = 3, \fBENS160_AQI_UBA_INDEX_4\fP = 4, \fBENS160_AQI_UBA_INDEX_5\fP = 5 }"
.br
.RI "ENS160 air quality index of the uba enumerator\&. "
.ti -1c
.RI "enum \fBens160_interrupt_pin_polarities_e\fP { \fBENS160_INT_PIN_POLARITY_ACTIVE_LO\fP = 0, \fBENS160_INT_PIN_POLARITY_ACTIVE_HI\fP = 1 }"
.br
.RI "ENS160 interrupt pin polarities enumerator\&. "
.ti -1c
.RI "enum \fBens160_interrupt_pin_drivers_e\fP { \fBENS160_INT_PIN_DRIVE_OPEN_DRAIN\fP = 0, \fBENS160_INT_PIN_DRIVE_PUSH_PULL\fP = 1 }"
.br
.RI "ENS160 interrupt pin drivers enumerator\&. "
.ti -1c
.RI "enum \fBens160_operating_modes_e\fP { \fBENS160_OPMODE_DEEP_SLEEP\fP = 0x00, \fBENS160_OPMODE_IDLE\fP = 0x01, \fBENS160_OPMODE_STANDARD\fP = 0x02, \fBENS160_OPMODE_RESET\fP = 0xf0 }"
.br
.RI "ENS160 operating modes enumerator\&. "
.ti -1c
.RI "enum \fBens160_commands_e\fP { \fBENS160_CMD_NORMAL\fP = 0x00, \fBENS160_CMD_GET_FW_APPVER\fP = 0x0e, \fBENS160_CMD_CLEAR_GPR\fP = 0xcc }"
.br
.RI "ENS160 commands enumerator\&. "
.ti -1c
.RI "enum \fBens160_validity_flags_e\fP { \fBENS160_VALFLAG_NORMAL\fP = 0x00, \fBENS160_VALFLAG_WARMUP\fP = 0x01, \fBENS160_VALFLAG_INITIAL_STARTUP\fP = 0x02, \fBENS160_VALFLAG_INVALID_OUTPUT\fP = 0x03 }"
.br
.RI "ENS160 validity flags enumerator\&. "
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "union \fB__attribute__\fP ((packed)) ahtxx_status_register_u"
.br
.RI "AHTXX status register structure definition\&. "
.ti -1c
.RI "esp_err_t \fBens160_get_interrupt_config_register\fP (\fBens160_handle_t\fP handle, ens160_interrupt_config_register_t *const reg)"
.br
.RI "Reads interrupt configuration register from ENS160\&. "
.ti -1c
.RI "esp_err_t \fBens160_set_interrupt_config_register\fP (\fBens160_handle_t\fP handle, const ens160_interrupt_config_register_t reg)"
.br
.RI "Writes interrupt configuration register to ENS160\&. "
.ti -1c
.RI "esp_err_t \fBens160_get_status_register\fP (\fBens160_handle_t\fP handle, ens160_status_register_t *const reg)"
.br
.RI "Reads status register from ENS160\&. "
.ti -1c
.RI "esp_err_t \fBens160_clear_command_register\fP (\fBens160_handle_t\fP handle)"
.br
.RI "Resets command to operate normal and clears general purpose registers on ENS160\&. "
.ti -1c
.RI "esp_err_t \fBens160_get_compensation_registers\fP (\fBens160_handle_t\fP handle, float *const temperature, float *const humidity)"
.br
.RI "Reads temperature and humidity compensation registers from ENS160\&. "
.ti -1c
.RI "esp_err_t \fBens160_set_compensation_registers\fP (\fBens160_handle_t\fP handle, const float temperature, const float humidity)"
.br
.RI "Writes temperature and humidity compensation registers to ENS160\&. "
.ti -1c
.RI "esp_err_t \fBens160_get_part_id_register\fP (\fBens160_handle_t\fP handle, uint16_t *const reg)"
.br
.RI "Reads part identifier register from ENS160\&. "
.ti -1c
.RI "esp_err_t \fBens160_init\fP (i2c_master_bus_handle_t master_handle, const \fBens160_config_t\fP *ens160_config, \fBens160_handle_t\fP *ens160_handle)"
.br
.RI "Initializes an ENS160 device onto the I2C master bus\&. "
.ti -1c
.RI "esp_err_t \fBens160_get_measurement\fP (\fBens160_handle_t\fP handle, \fBens160_air_quality_data_t\fP *const data)"
.br
.RI "Reads calculated air quality measurements from ENS160\&. "
.ti -1c
.RI "esp_err_t \fBens160_get_raw_measurement\fP (\fBens160_handle_t\fP handle, \fBens160_air_quality_raw_data_t\fP *const data)"
.br
.RI "Reads raw air quality measurements from ENS160\&. "
.ti -1c
.RI "esp_err_t \fBens160_get_data_status\fP (\fBens160_handle_t\fP handle, bool *const ready)"
.br
.RI "Reads data ready status from ENS160\&. "
.ti -1c
.RI "esp_err_t \fBens160_get_gpr_data_status\fP (\fBens160_handle_t\fP handle, bool *const ready)"
.br
.RI "Reads general purpose registers data ready status from ENS160\&. "
.ti -1c
.RI "esp_err_t \fBens160_get_validity_status\fP (\fBens160_handle_t\fP handle, \fBens160_validity_flags_t\fP *const state)"
.br
.RI "Read validity flag status, device status and signal rating, from ENS160\&. "
.ti -1c
.RI "esp_err_t \fBens160_get_error_status\fP (\fBens160_handle_t\fP handle, bool *const error)"
.br
.RI "Read error status from ENS160\&. "
.ti -1c
.RI "esp_err_t \fBens160_get_mode_status\fP (\fBens160_handle_t\fP handle, bool *const mode)"
.br
.RI "Read operating mode status from ENS160\&. "
.ti -1c
.RI "esp_err_t \fBens160_get_status\fP (\fBens160_handle_t\fP handle, bool *const data_ready, bool *const gpr_data_ready, \fBens160_validity_flags_t\fP *const state, bool *const error, bool *const mode)"
.br
.RI "Reads data ready, general purpose registers data ready, validity flag, and error status from ENS160\&. "
.ti -1c
.RI "esp_err_t \fBens160_get_compensation_factors\fP (\fBens160_handle_t\fP handle, float *const temperature, float *const humidity)"
.br
.RI "Reads temperature and humidity compensation factors from ENS160\&. "
.ti -1c
.RI "esp_err_t \fBens160_set_compensation_factors\fP (\fBens160_handle_t\fP handle, const float temperature, const float humidity)"
.br
.RI "Writes temperature and humidity compensation factors to ENS160\&. "
.ti -1c
.RI "esp_err_t \fBens160_enable_standard_mode\fP (\fBens160_handle_t\fP handle)"
.br
.RI "Enables standard operating mode to ENS160 to operate as a gas sensor and respond to commands\&. "
.ti -1c
.RI "esp_err_t \fBens160_enable_idle_mode\fP (\fBens160_handle_t\fP handle)"
.br
.RI "Enables idle operating mode to ENS160 to respond to commands\&. "
.ti -1c
.RI "esp_err_t \fBens160_enable_deep_sleep_mode\fP (\fBens160_handle_t\fP handle)"
.br
.RI "Enables deep sleep operating mode to ENS160\&. "
.ti -1c
.RI "esp_err_t \fBens160_reset\fP (\fBens160_handle_t\fP handle)"
.br
.RI "Issues soft-reset and initializes ENS160 to idle mode\&. "
.ti -1c
.RI "esp_err_t \fBens160_remove\fP (\fBens160_handle_t\fP handle)"
.br
.RI "Removes an ENS160 device from master I2C bus\&. "
.ti -1c
.RI "esp_err_t \fBens160_delete\fP (\fBens160_handle_t\fP handle)"
.br
.RI "Removes an ENS160 device from master bus and frees handle\&. "
.ti -1c
.RI "\fBens160_aqi_uba_row_t\fP \fBens160_aqi_index_to_definition\fP (const \fBens160_aqi_uba_indexes_t\fP index)"
.br
.RI "Decodes ENS160 air quality index to a uba definition row\&. "
.ti -1c
.RI "const char * \fBens160_get_fw_version\fP (void)"
.br
.RI "Converts ENS160 firmware version numbers (major, minor, patch, build) into a string\&. "
.ti -1c
.RI "int32_t \fBens160_get_fw_version_number\fP (void)"
.br
.RI "Converts ENS160 firmware version numbers (major, minor, patch) into an integer value\&. "
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "\fBens160_status_register_t\fP"
.br
.ti -1c
.RI "\fBens160_interrupt_config_register_t\fP"
.br
.ti -1c
.RI "\fBens160_caqi_data_register_t\fP"
.br
.in -1c
.SH "Author"
.PP 
Generated automatically by Doxygen for ESP-IDF Components by K0I05 from the source code\&.
