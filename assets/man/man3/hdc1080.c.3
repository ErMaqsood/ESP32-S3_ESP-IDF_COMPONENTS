.TH "components/peripherals/i2c/esp_hdc1080/hdc1080.c" 3 "ESP-IDF Components by K0I05" \" -*- nroff -*-
.ad l
.nh
.SH NAME
components/peripherals/i2c/esp_hdc1080/hdc1080.c
.SH SYNOPSIS
.br
.PP
\fR#include 'include/hdc1080\&.h'\fP
.br
\fR#include <string\&.h>\fP
.br
\fR#include <stdio\&.h>\fP
.br
\fR#include <math\&.h>\fP
.br
\fR#include <esp_log\&.h>\fP
.br
\fR#include <esp_check\&.h>\fP
.br
\fR#include <freertos/FreeRTOS\&.h>\fP
.br
\fR#include <freertos/task\&.h>\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBHDC1080_REG_TEMPERATURE\fP   UINT8_C(0x00)"
.br
.RI "hdc1080 I2C temperature measurement output "
.ti -1c
.RI "#define \fBHDC1080_REG_HUMIDITY\fP   UINT8_C(0x01)"
.br
.RI "hdc1080 I2C relative humidity measurement ouput "
.ti -1c
.RI "#define \fBHDC1080_REG_CONFIGURATION\fP   UINT8_C(0x02)"
.br
.RI "hdc1080 I2C configuration and status "
.ti -1c
.RI "#define \fBHDC1080_REG_SERIAL_ID_FBP\fP   UINT8_C(0xFB)"
.br
.RI "hdc1080 I2C first 2 bytes of the serial ID of the part "
.ti -1c
.RI "#define \fBHDC1080_REG_SERIAL_ID_MBP\fP   UINT8_C(0xFC)"
.br
.RI "hdc1080 I2C mid 2 bytes of the serial ID of the part "
.ti -1c
.RI "#define \fBHDC1080_REG_SERIAL_ID_LBP\fP   UINT8_C(0xFD)"
.br
.RI "hdc1080 I2C last byte bit of the serial ID of the part "
.ti -1c
.RI "#define \fBHDC1080_REG_MANUFACTURER_ID\fP   UINT8_C(0xFE)"
.br
.RI "hdc1080 I2C ID of Texas Instruments "
.ti -1c
.RI "#define \fBHDC1080_REG_DEVICE_ID\fP   UINT8_C(0xFF)"
.br
.RI "hdc1080 I2C ID of the device "
.ti -1c
.RI "#define \fBHDC1080_MANUFACTURER_ID\fP   UINT16_C(0x5449)"
.br
.ti -1c
.RI "#define \fBHDC1080_DEVICE_ID\fP   UINT16_C(0x1050)"
.br
.ti -1c
.RI "#define \fBHDC1080_TEMPERATURE_MAX\fP   (float)(125\&.0)"
.br
.RI "hdc1080 maximum temperature range "
.ti -1c
.RI "#define \fBHDC1080_TEMPERATURE_MIN\fP   (float)(\-40\&.0)"
.br
.RI "hdc1080 minimum temperature range "
.ti -1c
.RI "#define \fBHDC1080_HUMIDITY_MAX\fP   (float)(100\&.0)"
.br
.RI "hdc1080 maximum humidity range "
.ti -1c
.RI "#define \fBHDC1080_HUMIDITY_MIN\fP   (float)(0\&.0)"
.br
.RI "hdc1080 minimum humidity range "
.ti -1c
.RI "#define \fBHDC1080_POWERUP_DELAY_MS\fP   UINT16_C(30)"
.br
.RI "hdc1080 I2C power-up delay in milliseconds "
.ti -1c
.RI "#define \fBHDC1080_APPSTART_DELAY_MS\fP   UINT16_C(15)"
.br
.RI "hdc1080 I2C application start delay in milliseconds "
.ti -1c
.RI "#define \fBHDC1080_RESET_DELAY_MS\fP   UINT16_C(20)"
.br
.ti -1c
.RI "#define \fBHDC1080_CMD_DELAY_MS\fP   UINT16_C(5)"
.br
.ti -1c
.RI "#define \fBHDC1080_RETRY_DELAY_MS\fP   UINT16_C(2)"
.br
.ti -1c
.RI "#define \fBHDC1080_TX_RX_DELAY_MS\fP   UINT16_C(10)"
.br
.ti -1c
.RI "#define \fBESP_ARG_CHECK\fP(VAL)"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "esp_err_t \fBhdc1080_get_serial_number_register\fP (\fBhdc1080_handle_t\fP handle, uint64_t *const reg)"
.br
.RI "Reads unique serial number register from HDC1080\&. "
.ti -1c
.RI "esp_err_t \fBhdc1080_get_manufacturer_id_register\fP (\fBhdc1080_handle_t\fP handle, uint16_t *const reg)"
.br
.RI "Reads manufacturer identifier register from HDC1080\&. "
.ti -1c
.RI "esp_err_t \fBhdc1080_get_device_id_register\fP (\fBhdc1080_handle_t\fP handle, uint16_t *const reg)"
.br
.RI "Reads device identifier register from HDC1080\&. "
.ti -1c
.RI "esp_err_t \fBhdc1080_get_configuration_register\fP (\fBhdc1080_handle_t\fP handle, hdc1080_configuration_register_t *const reg)"
.br
.RI "Reads configuration register from HDC1080\&. "
.ti -1c
.RI "esp_err_t \fBhdc1080_set_configuration_register\fP (\fBhdc1080_handle_t\fP handle, const hdc1080_configuration_register_t reg)"
.br
.RI "Writes configuration register to HDC1080\&. "
.ti -1c
.RI "esp_err_t \fBhdc1080_init\fP (i2c_master_bus_handle_t master_handle, const \fBhdc1080_config_t\fP *hdc1080_config, \fBhdc1080_handle_t\fP *hdc1080_handle)"
.br
.RI "Initializes an HDC1080 device onto the I2C master bus\&. "
.ti -1c
.RI "esp_err_t \fBhdc1080_get_measurement\fP (\fBhdc1080_handle_t\fP handle, float *const temperature, float *const humidity)"
.br
.RI "Reads temperature and relative humidity from HDC1080\&. "
.ti -1c
.RI "esp_err_t \fBhdc1080_get_measurements\fP (\fBhdc1080_handle_t\fP handle, float *const temperature, float *const humidity, float *const dewpoint)"
.br
.RI "Reads temperature, relative humidity, and dew-point from HDC1080\&. "
.ti -1c
.RI "esp_err_t \fBhdc1080_enable_heater\fP (\fBhdc1080_handle_t\fP handle)"
.br
.RI "Enables HDC1080 heater\&. "
.ti -1c
.RI "esp_err_t \fBhdc1080_disable_heater\fP (\fBhdc1080_handle_t\fP handle)"
.br
.RI "Disables HDC1080 heater\&. "
.ti -1c
.RI "esp_err_t \fBhdc1080_get_temperature_resolution\fP (\fBhdc1080_handle_t\fP handle, \fBhdc1080_temperature_resolutions_t\fP *const resolution)"
.br
.RI "Reads temperature measurement resolution from HDC1080\&. "
.ti -1c
.RI "esp_err_t \fBhdc1080_set_temperature_resolution\fP (\fBhdc1080_handle_t\fP handle, const \fBhdc1080_temperature_resolutions_t\fP resolution)"
.br
.RI "Writes temperature measurement resolution to HDC1080\&. "
.ti -1c
.RI "esp_err_t \fBhdc1080_get_humidity_resolution\fP (\fBhdc1080_handle_t\fP handle, \fBhdc1080_humidity_resolutions_t\fP *const resolution)"
.br
.RI "Reads relative humidity measurement resolution from HDC1080\&. "
.ti -1c
.RI "esp_err_t \fBhdc1080_set_humidity_resolution\fP (\fBhdc1080_handle_t\fP handle, const \fBhdc1080_humidity_resolutions_t\fP resolution)"
.br
.RI "Writes relative humidity measurement resolution to HDC1080\&. "
.ti -1c
.RI "esp_err_t \fBhdc1080_reset\fP (\fBhdc1080_handle_t\fP handle)"
.br
.RI "Issues soft-reset to HDC1080\&. "
.ti -1c
.RI "esp_err_t \fBhdc1080_remove\fP (\fBhdc1080_handle_t\fP handle)"
.br
.RI "Removes an HDC1080 device from master I2C bus\&. "
.ti -1c
.RI "esp_err_t \fBhdc1080_delete\fP (\fBhdc1080_handle_t\fP handle)"
.br
.RI "Removes an HDC1080 device from master bus and frees handle\&. "
.ti -1c
.RI "const char * \fBhdc1080_get_fw_version\fP (void)"
.br
.RI "Converts HDC1080 firmware version numbers (major, minor, patch) into a string\&. "
.ti -1c
.RI "int32_t \fBhdc1080_get_fw_version_number\fP (void)"
.br
.RI "Converts HDC1080 firmware version numbers (major, minor, patch) into an integer value\&. "
.in -1c
.SH "Detailed Description"
.PP 
ESP-IDF driver for HDC1080 temperature and humdity sensor

.PP
Ported from esp-open-rtos

.PP
Copyright (c) 2024 Eric Gionet (gionet.c.eric@gmail.com)

.PP
MIT Licensed as described in the file LICENSE 
.SH "Macro Definition Documentation"
.PP 
.SS "#define ESP_ARG_CHECK( VAL)"
\fBValue:\fP
.nf
do { if (!(VAL)) return ESP_ERR_INVALID_ARG; } while (0)
.PP
.fi

.SH "Author"
.PP 
Generated automatically by Doxygen for ESP-IDF Components by K0I05 from the source code\&.
