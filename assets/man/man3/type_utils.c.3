.TH "components/utilities/esp_type_utils/type_utils.c" 3 "ESP-IDF Components by K0I05" \" -*- nroff -*-
.ad l
.nh
.SH NAME
components/utilities/esp_type_utils/type_utils.c
.SH SYNOPSIS
.br
.PP
\fR#include 'type_utils\&.h'\fP
.br
\fR#include <string\&.h>\fP
.br
\fR#include <stdio\&.h>\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "uint32_t \fBget_uint32_chip_id\fP (void)"
.br
.RI "Generates a unique \fRuint32_t\fP chip identifier from e-fuse mac address\&. "
.ti -1c
.RI "uint64_t \fBget_uint64_chip_id\fP (void)"
.br
.RI "Generates a unique \fRuint64_t\fP chip identifier from e-fuse mac address\&. "
.ti -1c
.RI "uint64_t \fBget_efuse_mac\fP (void)"
.br
.RI "Gets the e-fuse mac address\&. "
.ti -1c
.RI "const char * \fBuint8_to_binary\fP (const uint8_t value)"
.br
.RI "Converts \fRuint8_t\fP type to binary as a string\&. "
.ti -1c
.RI "const char * \fBint8_to_binary\fP (const int8_t value)"
.br
.RI "Converts \fRint8_t\fP type to binary as a string\&. "
.ti -1c
.RI "const char * \fBuint16_to_binary\fP (const uint16_t value)"
.br
.RI "Converts \fRuint16_t\fP type to binary as a string\&. "
.ti -1c
.RI "const char * \fBint16_to_binary\fP (const int16_t value)"
.br
.RI "Converts \fRint16_t\fP type to binary as a string\&. "
.ti -1c
.RI "const char * \fBuint32_to_binary\fP (const uint32_t value)"
.br
.RI "Converts \fRuint32_t\fP type to binary as a string\&. "
.ti -1c
.RI "const char * \fBint32_to_binary\fP (const int32_t value)"
.br
.RI "Converts \fRint32_t\fP type to binary as a string\&. "
.ti -1c
.RI "const char * \fBuint64_to_binary\fP (const uint64_t value)"
.br
.RI "Converts \fRuint64_t\fP type to binary as a string\&. "
.ti -1c
.RI "const char * \fBint64_to_binary\fP (const int64_t value)"
.br
.RI "Converts \fRint64_t\fP type to binary as a string\&. "
.ti -1c
.RI "uint16_t \fBbytes_to_uint16\fP (const uint8_t *bytes, const bool little_endian)"
.br
.RI "Converts byte array to \fRuint16_t\fP data-type\&. "
.ti -1c
.RI "uint32_t \fBbytes_to_uint32\fP (const uint8_t *bytes, const bool little_endian)"
.br
.RI "Converts byte array to \fRuint32_t\fP data-type\&. "
.ti -1c
.RI "uint64_t \fBbytes_to_uint64\fP (const uint8_t *bytes, const bool little_endian)"
.br
.RI "Converts byte array to \fRuint64_t\fP data-type\&. "
.ti -1c
.RI "int16_t \fBbytes_to_int16\fP (const uint8_t *bytes, const bool little_endian)"
.br
.RI "Converts byte array to \fRint16_t\fP data-type\&. "
.ti -1c
.RI "int32_t \fBbytes_to_int32\fP (const uint8_t *bytes, const bool little_endian)"
.br
.RI "Converts byte array to \fRint32_t\fP data-type\&. "
.ti -1c
.RI "int64_t \fBbytes_to_int64\fP (const uint8_t *bytes, const bool little_endian)"
.br
.RI "Converts byte array to \fRint64_t\fP data-type\&. "
.ti -1c
.RI "void \fBuint16_to_bytes\fP (const uint16_t value, uint8_t *bytes, const bool little_endian)"
.br
.RI "Converts \fRuint16_t\fP data-type to a byte array\&. "
.ti -1c
.RI "void \fBuint32_to_bytes\fP (const uint32_t value, uint8_t *bytes, const bool little_endian)"
.br
.RI "Converts \fRuint32_t\fP data-type to a byte array\&. "
.ti -1c
.RI "void \fBuint64_to_bytes\fP (const uint64_t value, uint8_t *bytes, const bool little_endian)"
.br
.RI "Converts \fRuint64_t\fP data-type to a byte array\&. "
.ti -1c
.RI "void \fBint16_to_bytes\fP (const int16_t value, uint8_t *bytes, const bool little_endian)"
.br
.RI "Converts \fRint16_t\fP data-type to a byte array\&. "
.ti -1c
.RI "void \fBint32_to_bytes\fP (const int32_t value, uint8_t *bytes, const bool little_endian)"
.br
.RI "Converts \fRint32_t\fP data-type to a byte array\&. "
.ti -1c
.RI "void \fBint64_to_bytes\fP (const int64_t value, uint8_t *bytes, const bool little_endian)"
.br
.RI "Converts \fRint64_t\fP data-type to a byte array\&. "
.ti -1c
.RI "void \fBfloat_to_bytes\fP (const float value, uint8_t *bytes, const bool little_endian)"
.br
.RI "Converts \fRfloat\fP data-type to a byte array\&. "
.ti -1c
.RI "void \fBdouble_to_bytes\fP (const double value, uint8_t *bytes, const bool little_endian)"
.br
.RI "Converts \fRdouble\fP data-type to a byte array\&. "
.ti -1c
.RI "void \fBcopy_bytes\fP (const uint8_t *source, uint8_t *destination, const size_t size)"
.br
.RI "Copies bytes from source byte array to destination byte array\&. "
.ti -1c
.RI "const char * \fBtype_utils_get_fw_version\fP (void)"
.br
.RI "Converts \fRtype_utils\fP firmware version numbers (major, minor, patch) into a string\&. "
.ti -1c
.RI "int32_t \fBtype_utils_get_fw_version_number\fP (void)"
.br
.RI "Converts \fRtype_utils\fP firmware version numbers (major, minor, patch) into an integer value\&. "
.in -1c
.SH "Detailed Description"
.PP 
ESP-IDF type utilities (utils)

.PP
Ported from esp-open-rtos

.PP
Copyright (c) 2024 Eric Gionet (gionet.c.eric@gmail.com)

.PP
MIT Licensed as described in the file LICENSE 
.SH "Author"
.PP 
Generated automatically by Doxygen for ESP-IDF Components by K0I05 from the source code\&.
