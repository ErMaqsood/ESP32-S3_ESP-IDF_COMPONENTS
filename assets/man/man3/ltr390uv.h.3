.TH "components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h" 3 "ESP-IDF Components by K0I05" \" -*- nroff -*-
.ad l
.nh
.SH NAME
components/peripherals/i2c/esp_ltr390uv/include/ltr390uv.h
.SH SYNOPSIS
.br
.PP
\fR#include <stdint\&.h>\fP
.br
\fR#include <stdbool\&.h>\fP
.br
\fR#include <esp_err\&.h>\fP
.br
\fR#include <driver/i2c_master\&.h>\fP
.br
\fR#include <type_utils\&.h>\fP
.br
\fR#include 'ltr390uv_version\&.h'\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBltr390uv_config_s\fP"
.br
.RI "LTR390UV configuration structure\&. "
.ti -1c
.RI "struct \fBltr390uv_context_t\fP"
.br
.RI "LTR390UV context structure\&. "
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBI2C_LTR390UV_DEV_CLK_SPD\fP   UINT32_C(100000)"
.br
.RI "ltr390uv I2C default clock frequency (100KHz) "
.ti -1c
.RI "#define \fBI2C_LTR390UV_DEV_ADDR\fP   UINT8_C(0x53)"
.br
.RI "ltr390uv I2C address "
.ti -1c
.RI "#define \fBI2C_XFR_TIMEOUT_MS\fP   (500)"
.br
.RI "I2C transaction timeout in milliseconds\&. "
.ti -1c
.RI "#define \fBI2C_LTR390UV_CONFIG_DEFAULT\fP"
.br
.RI "Macro that initializes \fR\fBltr390uv_config_t\fP\fP to default configuration settings\&. "
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef enum \fBltr390uv_operation_modes_e\fP \fBltr390uv_operation_modes_t\fP"
.br
.RI "LTR390UV operation modes enumerator\&. "
.ti -1c
.RI "typedef enum \fBltr390uv_sensor_resolutions_e\fP \fBltr390uv_sensor_resolutions_t\fP"
.br
.RI "LTR390UV sensor resolutions enumerator\&. "
.ti -1c
.RI "typedef enum \fBltr390uv_measurement_rates_e\fP \fBltr390uv_measurement_rates_t\fP"
.br
.RI "LTR390UV measurement rates enumerator\&. "
.ti -1c
.RI "typedef enum \fBltr390uv_measurement_gains_e\fP \fBltr390uv_measurement_gains_t\fP"
.br
.RI "LTR390UV measurement gains enumerator\&. "
.ti -1c
.RI "typedef enum \fBltr390uv_ls_interrupts_e\fP \fBltr390uv_ls_interrupts_t\fP"
.br
.RI "LTR390UV light source interrupts enumerator\&. "
.ti -1c
.RI "typedef struct \fBltr390uv_config_s\fP \fBltr390uv_config_t\fP"
.br
.RI "LTR390UV configuration structure\&. "
.ti -1c
.RI "typedef struct ltr390uv_context_t \fBltr390uv_context_t\fP"
.br
.RI "LTR390UV context structure definition\&. "
.ti -1c
.RI "typedef struct \fBltr390uv_context_t\fP * \fBltr390uv_handle_t\fP"
.br
.RI "LTR390UV handle structure definition\&. "
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBltr390uv_operation_modes_e\fP { \fBLTR390UV_OM_ALS\fP = 0, \fBLTR390UV_OM_UVS\fP = 1 }"
.br
.RI "LTR390UV operation modes enumerator\&. "
.ti -1c
.RI "enum \fBltr390uv_sensor_resolutions_e\fP { \fBLTR390UV_SR_20BIT\fP = (0b000), \fBLTR390UV_SR_19BIT\fP = (0b001), \fBLTR390UV_SR_18BIT\fP = (0b010), \fBLTR390UV_SR_17BIT\fP = (0b011), \fBLTR390UV_SR_16BIT\fP = (0b100), \fBLTR390UV_SR_13BIT\fP = (0b101) }"
.br
.RI "LTR390UV sensor resolutions enumerator\&. "
.ti -1c
.RI "enum \fBltr390uv_measurement_rates_e\fP { \fBLTR390UV_MR_25MS\fP = (0b000), \fBLTR390UV_MR_50MS\fP = (0b001), \fBLTR390UV_MR_100MS\fP = (0b010), \fBLTR390UV_MR_200MS\fP = (0b011), \fBLTR390UV_MR_500MS\fP = (0b100), \fBLTR390UV_MR_1000MS\fP = (0b101), \fBLTR390UV_MR_2000MS\fP = (0b110), \fBLTR390UV_MR_2000_MS\fP = (0b111) }"
.br
.RI "LTR390UV measurement rates enumerator\&. "
.ti -1c
.RI "enum \fBltr390uv_measurement_gains_e\fP { \fBLTR390UV_MG_X1\fP = (0b000), \fBLTR390UV_MG_X3\fP = (0b001), \fBLTR390UV_MG_X6\fP = (0b010), \fBLTR390UV_MG_X9\fP = (0b011), \fBLTR390UV_MG_X18\fP = (0b100) }"
.br
.RI "LTR390UV measurement gains enumerator\&. "
.ti -1c
.RI "enum \fBltr390uv_ls_interrupts_e\fP { \fBLTR390UV_LSI_ALS\fP = (0b01), \fBLTR390UV_LSI_UVS\fP = (0b11) }"
.br
.RI "LTR390UV light source interrupts enumerator\&. "
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "union \fB__attribute__\fP ((packed)) ahtxx_status_register_u"
.br
.RI "AHTXX status register structure definition\&. "
.ti -1c
.RI "esp_err_t \fBltr390uv_get_control_register\fP (\fBltr390uv_handle_t\fP handle, ltr390uv_control_register_t *const reg)"
.br
.RI "Reads control register from LTR390UV\&. "
.ti -1c
.RI "esp_err_t \fBltr390uv_set_control_register\fP (\fBltr390uv_handle_t\fP handle, const ltr390uv_control_register_t reg)"
.br
.RI "Writes control register to LTR390UV\&. "
.ti -1c
.RI "esp_err_t \fBltr390uv_get_measure_register\fP (\fBltr390uv_handle_t\fP handle, ltr390uv_measure_register_t *const reg)"
.br
.RI "Reads ALS UVS measure register from LTR390UV\&. "
.ti -1c
.RI "esp_err_t \fBltr390uv_set_measure_register\fP (\fBltr390uv_handle_t\fP handle, const ltr390uv_measure_register_t reg)"
.br
.RI "Writes ALS UVS measure register to LTR390UV\&. "
.ti -1c
.RI "esp_err_t \fBltr390uv_get_gain_register\fP (\fBltr390uv_handle_t\fP handle, ltr390uv_gain_register_t *const reg)"
.br
.RI "Reads ALS UVS gain register from LTR390UV\&. "
.ti -1c
.RI "esp_err_t \fBltr390uv_set_gain_register\fP (\fBltr390uv_handle_t\fP handle, const ltr390uv_gain_register_t reg)"
.br
.RI "Writes ALS UVS gain register to LTR390UV\&. "
.ti -1c
.RI "esp_err_t \fBltr390uv_get_interrupt_config_register\fP (\fBltr390uv_handle_t\fP handle, ltr390uv_interrupt_config_register_t *const reg)"
.br
.RI "Reads interrupt configuration register from LTR390UV\&. "
.ti -1c
.RI "esp_err_t \fBltr390uv_set_interrupt_config_register\fP (\fBltr390uv_handle_t\fP handle, const ltr390uv_interrupt_config_register_t reg)"
.br
.RI "Writes interrupt configuration register to LTR390UV\&. "
.ti -1c
.RI "esp_err_t \fBltr390uv_get_status_register\fP (\fBltr390uv_handle_t\fP handle, ltr390uv_status_register_t *const reg)"
.br
.RI "Reads status register from LTR390UV\&. "
.ti -1c
.RI "esp_err_t \fBltr390uv_init\fP (i2c_master_bus_handle_t master_handle, const \fBltr390uv_config_t\fP *ltr390uv_config, \fBltr390uv_handle_t\fP *ltr390uv_handle)"
.br
.RI "Initializes an LTR390UV device onto the I2C master bus\&. "
.ti -1c
.RI "esp_err_t \fBltr390uv_get_ambient_light\fP (\fBltr390uv_handle_t\fP handle, float *const ambient_light)"
.br
.RI "Reads ambient light from LTR390UV\&. "
.ti -1c
.RI "esp_err_t \fBltr390uv_get_als\fP (\fBltr390uv_handle_t\fP handle, uint32_t *const sensor_counts)"
.br
.RI "Reads ALS sensor counts from LTR390UV\&. "
.ti -1c
.RI "esp_err_t \fBltr390uv_get_ultraviolet_index\fP (\fBltr390uv_handle_t\fP handle, float *const ultraviolet_index)"
.br
.RI "Reads ultraviolet index (UVI) from LTR390UV\&. "
.ti -1c
.RI "esp_err_t \fBltr390uv_get_uvs\fP (\fBltr390uv_handle_t\fP handle, uint32_t *const sensor_counts)"
.br
.RI "Reads UVS sensor counts from LTR390UV\&. "
.ti -1c
.RI "esp_err_t \fBltr390uv_get_data_status\fP (\fBltr390uv_handle_t\fP handle, bool *const ready)"
.br
.RI "Reads data ready status flag from LTR390UV\&. This flag is cleared after the register is read\&. "
.ti -1c
.RI "esp_err_t \fBltr390uv_get_power_status\fP (\fBltr390uv_handle_t\fP handle, bool *const power_on)"
.br
.RI "Reads power status flag from LTR390UV\&. This flag is cleared after the register is read\&. "
.ti -1c
.RI "esp_err_t \fBltr390uv_get_interrupt_status\fP (\fBltr390uv_handle_t\fP handle, bool *const interrupt)"
.br
.RI "Reads interrupt status flag from LTR390UV\&. This flag is cleared after the register is read\&. "
.ti -1c
.RI "esp_err_t \fBltr390uv_get_status\fP (\fBltr390uv_handle_t\fP handle, bool *const data_ready, bool *const power_on, bool *const interrupt)"
.br
.RI "Reads interrupt status flags from LTR390UV\&. The flags are cleared after the register is read\&. "
.ti -1c
.RI "esp_err_t \fBltr390uv_get_thresholds\fP (\fBltr390uv_handle_t\fP handle, uint32_t *const lower_threshold, uint32_t *const upper_threshold)"
.br
.RI "Reads UVS/ALS lower and upper thresholds from LTR390UV\&. The thresholds are used to trigger an interrupt when the light level exceeds the upper threshold or falls below the lower threshold\&. "
.ti -1c
.RI "esp_err_t \fBltr390uv_set_thresholds\fP (\fBltr390uv_handle_t\fP handle, const uint32_t lower_threshold, const uint32_t upper_threshold)"
.br
.RI "Writes UVS/ALS lower and upper thresholds to LTR390UV\&. The thresholds are used to trigger an interrupt when the light level exceeds the upper threshold or falls below the lower threshold\&. "
.ti -1c
.RI "esp_err_t \fBltr390uv_get_mode\fP (\fBltr390uv_handle_t\fP handle, \fBltr390uv_operation_modes_t\fP *const mode)"
.br
.RI "Reads operation mode from LTR390UV\&. "
.ti -1c
.RI "esp_err_t \fBltr390uv_set_mode\fP (\fBltr390uv_handle_t\fP handle, const \fBltr390uv_operation_modes_t\fP mode)"
.br
.RI "Writes operation mode to LTR390UV\&. "
.ti -1c
.RI "esp_err_t \fBltr390uv_get_resolution\fP (\fBltr390uv_handle_t\fP handle, \fBltr390uv_sensor_resolutions_t\fP *const resolution)"
.br
.RI "Reads sensor resolution from LTR390UV\&. "
.ti -1c
.RI "esp_err_t \fBltr390uv_set_resolution\fP (\fBltr390uv_handle_t\fP handle, const \fBltr390uv_sensor_resolutions_t\fP resolution)"
.br
.RI "Writes sensor resolution to LTR390UV\&. "
.ti -1c
.RI "esp_err_t \fBltr390uv_get_gain\fP (\fBltr390uv_handle_t\fP handle, \fBltr390uv_measurement_gains_t\fP *const gain)"
.br
.RI "Reads measurement gain from LTR390UV\&. "
.ti -1c
.RI "esp_err_t \fBltr390uv_set_gain\fP (\fBltr390uv_handle_t\fP handle, const \fBltr390uv_measurement_gains_t\fP gain)"
.br
.RI "Writes measurement gain to LTR390UV\&. "
.ti -1c
.RI "esp_err_t \fBltr390uv_get_rate\fP (\fBltr390uv_handle_t\fP handle, \fBltr390uv_measurement_rates_t\fP *const rate)"
.br
.RI "Reads measurement rate from LTR390UV\&. "
.ti -1c
.RI "esp_err_t \fBltr390uv_set_rate\fP (\fBltr390uv_handle_t\fP handle, const \fBltr390uv_measurement_rates_t\fP rate)"
.br
.RI "Writes measurement rate to LTR390UV\&. "
.ti -1c
.RI "esp_err_t \fBltr390uv_enable_interrupt\fP (\fBltr390uv_handle_t\fP handle, const \fBltr390uv_ls_interrupts_t\fP light_source)"
.br
.RI "Enables LTR390UV interrupts\&. "
.ti -1c
.RI "esp_err_t \fBltr390uv_disable_interrupt\fP (\fBltr390uv_handle_t\fP handle)"
.br
.RI "Disables LTR390UV interrupts\&. "
.ti -1c
.RI "esp_err_t \fBltr390uv_enable\fP (\fBltr390uv_handle_t\fP handle)"
.br
.RI "Activates LTR390UV for measurements\&. "
.ti -1c
.RI "esp_err_t \fBltr390uv_disable\fP (\fBltr390uv_handle_t\fP handle)"
.br
.RI "Places LTR390UV on standby (default)\&. "
.ti -1c
.RI "esp_err_t \fBltr390uv_reset\fP (\fBltr390uv_handle_t\fP handle)"
.br
.RI "Issues soft-reset and initializes LTR390UV\&. See datasheet for details\&. "
.ti -1c
.RI "esp_err_t \fBltr390uv_remove\fP (\fBltr390uv_handle_t\fP handle)"
.br
.RI "Removes an LTR390UV device from master bus\&. "
.ti -1c
.RI "esp_err_t \fBltr390uv_delete\fP (\fBltr390uv_handle_t\fP handle)"
.br
.RI "Removes an LTR390UV device from master bus and frees handle\&. "
.ti -1c
.RI "const char * \fBltr390uv_get_fw_version\fP (void)"
.br
.RI "Converts LTR390UV firmware version numbers (major, minor, patch) into a string\&. "
.ti -1c
.RI "int32_t \fBltr390uv_get_fw_version_number\fP (void)"
.br
.RI "Converts LTR390UV firmware version numbers (major, minor, patch) into an integer value\&. "
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "\fBltr390uv_control_register_t\fP"
.br
.ti -1c
.RI "\fBltr390uv_measure_register_t\fP"
.br
.ti -1c
.RI "\fBltr390uv_gain_register_t\fP"
.br
.ti -1c
.RI "\fBltr390uv_status_register_t\fP"
.br
.ti -1c
.RI "\fBltr390uv_interrupt_config_register_t\fP"
.br
.in -1c
.SH "Author"
.PP 
Generated automatically by Doxygen for ESP-IDF Components by K0I05 from the source code\&.
