.TH "components/peripherals/i2c/esp_ccs811/include/ccs811.h" 3 "ESP-IDF Components by K0I05" \" -*- nroff -*-
.ad l
.nh
.SH NAME
components/peripherals/i2c/esp_ccs811/include/ccs811.h
.SH SYNOPSIS
.br
.PP
\fR#include <stdint\&.h>\fP
.br
\fR#include <stdbool\&.h>\fP
.br
\fR#include <esp_err\&.h>\fP
.br
\fR#include <driver/gpio\&.h>\fP
.br
\fR#include <driver/i2c_master\&.h>\fP
.br
\fR#include <type_utils\&.h>\fP
.br
\fR#include 'ccs811_version\&.h'\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBccs811_thresholds_register_s\fP"
.br
.RI "CCS811 thresholds register structure\&. "
.ti -1c
.RI "struct \fBccs811_environmental_data_register_s\fP"
.br
.RI "CCS811 environmental data register structure\&. "
.ti -1c
.RI "struct \fBccs811_error_row_s\fP"
.br
.RI "CCS811 error row definition structure\&. "
.ti -1c
.RI "struct \fBccs811_measure_mode_row_s\fP"
.br
.RI "CCS811 measure mode row definition structure\&. "
.ti -1c
.RI "struct \fBccs811_config_t\fP"
.br
.RI "CCS811 configuration structure\&. "
.ti -1c
.RI "struct \fBccs811_context_t\fP"
.br
.RI "CCS811 context structure\&. "
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBI2C_CCS811_DEV_CLK_SPD\fP   UINT32_C(100000)"
.br
.RI "ccs811 I2C default clock frequency (100KHz) "
.ti -1c
.RI "#define \fBI2C_CCS811_DEV_ADDR_LO\fP   UINT8_C(0x5a)"
.br
.RI "ccs811 I2C address when ADDR pin floating/low "
.ti -1c
.RI "#define \fBI2C_CCS811_DEV_ADDR_HI\fP   UINT8_C(0x5b)"
.br
.RI "ccs811 I2C address when ADDR pin high "
.ti -1c
.RI "#define \fBI2C_XFR_TIMEOUT_MS\fP   (500)"
.br
.RI "I2C transaction timeout in milliseconds\&. "
.ti -1c
.RI "#define \fBCCS811_ERROR_TABLE_SIZE\fP   (6)"
.br
.RI "ccs811 I2C error table size "
.ti -1c
.RI "#define \fBCCS811_MEASURE_MODE_TABLE_SIZE\fP   (5)"
.br
.RI "ccs811 I2C measure mode table size "
.ti -1c
.RI "#define \fBI2C_CCS811_CONFIG_DEFAULT\fP"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef enum \fBccs811_drive_modes_e\fP \fBccs811_drive_modes_t\fP"
.br
.ti -1c
.RI "typedef enum \fBccs811_firmware_modes_e\fP \fBccs811_firmware_modes_t\fP"
.br
.ti -1c
.RI "typedef struct \fBccs811_thresholds_register_s\fP \fBccs811_thresholds_register_t\fP"
.br
.RI "CCS811 thresholds register structure\&. "
.ti -1c
.RI "typedef struct \fBccs811_environmental_data_register_s\fP \fBccs811_environmental_data_register_t\fP"
.br
.RI "CCS811 environmental data register structure\&. "
.ti -1c
.RI "typedef struct \fBccs811_error_row_s\fP \fBccs811_error_row_t\fP"
.br
.RI "CCS811 error row definition structure\&. "
.ti -1c
.RI "typedef struct \fBccs811_measure_mode_row_s\fP \fBccs811_measure_mode_row_t\fP"
.br
.RI "CCS811 measure mode row definition structure\&. "
.ti -1c
.RI "typedef struct ccs811_context_t \fBccs811_context_t\fP"
.br
.RI "CCS811 context structure definitions\&. "
.ti -1c
.RI "typedef struct \fBccs811_context_t\fP * \fBccs811_handle_t\fP"
.br
.RI "CCS811 handle structure definition\&. "
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBccs811_drive_modes_e\fP { \fBCCS811_DRIVE_MODE_IDLE\fP = (0b000), \fBCCS811_DRIVE_MODE_CONSTANT_POWER_IAQ\fP = (0b001), \fBCCS811_DRIVE_MODE_PULSE_HEATING_IAQ\fP = (0b010), \fBCCS811_DRIVE_MODE_LP_PULSE_HEATING_IAQ\fP = (0b011), \fBCCS811_DRIVE_MODE_CONSTANT_POWER\fP = (0b100) }"
.br
.ti -1c
.RI "enum \fBccs811_firmware_modes_e\fP { \fBCCS811_FW_MODE_BOOT\fP = 0, \fBCCS811_FW_MODE_APP\fP = 1 }"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "union \fB__attribute__\fP ((packed)) ahtxx_status_register_u"
.br
.RI "AHTXX status register structure definition\&. "
.ti -1c
.RI "esp_err_t \fBccs811_get_status_register\fP (\fBccs811_handle_t\fP handle, ccs811_status_register_t *const reg)"
.br
.RI "Reads status register from CCS811\&. "
.ti -1c
.RI "esp_err_t \fBccs811_get_measure_mode_register\fP (\fBccs811_handle_t\fP handle, ccs811_measure_mode_register_t *const reg)"
.br
.RI "Reads measure mode register from CCS811\&. "
.ti -1c
.RI "esp_err_t \fBccs811_set_measure_mode_register\fP (\fBccs811_handle_t\fP handle, const ccs811_measure_mode_register_t reg)"
.br
.RI "Writes measure mode register to CCS811\&. "
.ti -1c
.RI "esp_err_t \fBccs811_get_error_register\fP (\fBccs811_handle_t\fP handle, ccs811_error_code_register_t *const reg)"
.br
.RI "Reads error register from CCS811\&. "
.ti -1c
.RI "esp_err_t \fBccs811_set_environmental_data_register\fP (\fBccs811_handle_t\fP handle, const float temperature, const float humidity)"
.br
.RI "Writes environmental compensation factors data to CCS811 register\&. "
.ti -1c
.RI "esp_err_t \fBccs811_set_thresholds_register\fP (\fBccs811_handle_t\fP handle, const uint16_t low_to_med, const uint16_t med_to_high, const uint8_t hysteresis)"
.br
.RI "Writes eCO2 thresholds to CCS811 register\&. "
.ti -1c
.RI "esp_err_t \fBccs811_get_baseline_register\fP (\fBccs811_handle_t\fP handle, uint16_t *const reg)"
.br
.RI "Reads encoded version of the current baseline register from CCS811\&. "
.ti -1c
.RI "esp_err_t \fBccs811_set_baseline_register\fP (\fBccs811_handle_t\fP handle, const uint16_t reg)"
.br
.RI "Writes encoded version to the CCS811 baseline register\&. "
.ti -1c
.RI "esp_err_t \fBccs811_get_hardware_identifier_register\fP (\fBccs811_handle_t\fP handle, uint8_t *const reg)"
.br
.RI "Reads hardware identifier register from CCS811\&. "
.ti -1c
.RI "esp_err_t \fBccs811_get_hardware_version_register\fP (\fBccs811_handle_t\fP handle, uint8_t *const reg)"
.br
.RI "Reads hardware version register from CCS811\&. "
.ti -1c
.RI "esp_err_t \fBccs811_start_application\fP (\fBccs811_handle_t\fP handle)"
.br
.RI "Starts the CCS811 application\&. "
.ti -1c
.RI "esp_err_t \fBccs811_init\fP (i2c_master_bus_handle_t master_handle, const \fBccs811_config_t\fP *ccs811_config, \fBccs811_handle_t\fP *ccs811_handle)"
.br
.RI "Initializes a CCS811 device onto the I2C master bus\&. "
.ti -1c
.RI "esp_err_t \fBccs811_get_measurement\fP (\fBccs811_handle_t\fP handle, uint16_t *eco2, uint16_t *etvoc)"
.br
.RI "Reads air quality measurement from CCS811\&. "
.ti -1c
.RI "esp_err_t \fBccs811_set_environmental_data\fP (\fBccs811_handle_t\fP handle, const float temperature, const float humidity)"
.br
.RI "Writes environmental compensation factors data to CCS811 register\&. "
.ti -1c
.RI "esp_err_t \fBccs811_set_thresholds\fP (\fBccs811_handle_t\fP handle, const uint16_t low_to_med, const uint16_t med_to_high, const uint8_t hysteresis)"
.br
.RI "Writes eCO2 thresholds to CCS811 register\&. "
.ti -1c
.RI "esp_err_t \fBccs811_get_drive_mode\fP (\fBccs811_handle_t\fP handle, \fBccs811_drive_modes_t\fP *const mode)"
.br
.RI "Reads drive mode from CCS811\&. "
.ti -1c
.RI "esp_err_t \fBccs811_set_drive_mode\fP (\fBccs811_handle_t\fP handle, const \fBccs811_drive_modes_t\fP mode)"
.br
.RI "Writes drive mode to CCS811\&. "
.ti -1c
.RI "esp_err_t \fBccs811_get_firmware_mode\fP (\fBccs811_handle_t\fP handle, \fBccs811_firmware_modes_t\fP *const mode)"
.br
.RI "Reads firmware mode from CCS811\&. "
.ti -1c
.RI "esp_err_t \fBccs811_get_ntc_resistance\fP (\fBccs811_handle_t\fP handle, const uint32_t r_ref, uint32_t *const resistance)"
.br
.RI "Reads NTC resistance connected to CCS811 per AMS application note AN000372\&. "
.ti -1c
.RI "esp_err_t \fBccs811_get_data_status\fP (\fBccs811_handle_t\fP handle, bool *const ready)"
.br
.RI "Reads data ready status from CCS811\&. "
.ti -1c
.RI "esp_err_t \fBccs811_get_error_status\fP (\fBccs811_handle_t\fP handle, bool *const error)"
.br
.RI "Reads error status from CCS811\&. "
.ti -1c
.RI "esp_err_t \fBccs811_reset\fP (\fBccs811_handle_t\fP handle)"
.br
.RI "Issues soft-reset to CCS811\&. "
.ti -1c
.RI "esp_err_t \fBccs811_io_wake\fP (\fBccs811_handle_t\fP handle)"
.br
.RI "Wakes the CCS811 through the configured wake GPIO pin number\&. "
.ti -1c
.RI "esp_err_t \fBccs811_io_sleep\fP (\fBccs811_handle_t\fP handle)"
.br
.RI "Puts the CCS811 a sleep through the configured wake GPIO pin number\&. "
.ti -1c
.RI "esp_err_t \fBccs811_io_reset\fP (\fBccs811_handle_t\fP handle)"
.br
.RI "Resets the CCS811 through the configured reset GPIO pin number\&. "
.ti -1c
.RI "esp_err_t \fBccs811_remove\fP (\fBccs811_handle_t\fP handle)"
.br
.RI "Removes a CCS811 device from master bus\&. "
.ti -1c
.RI "esp_err_t \fBccs811_delete\fP (\fBccs811_handle_t\fP handle)"
.br
.RI "Removes an CCS811 device from master I2C bus and delete the handle\&. "
.ti -1c
.RI "const char * \fBccs811_err_to_message\fP (const ccs811_error_code_register_t error_reg)"
.br
.RI "Decodes CCS811 device error to a textual message representation\&. "
.ti -1c
.RI "const char * \fBccs811_err_to_code\fP (const ccs811_error_code_register_t error_reg)"
.br
.RI "Decodes CCS811 device error to a textual code representation\&. "
.ti -1c
.RI "const char * \fBccs811_measure_mode_description\fP (const \fBccs811_drive_modes_t\fP mode)"
.br
.RI "Decodes enumerated drive mode to a textual descriptive representation\&. "
.ti -1c
.RI "const char * \fBccs811_get_fw_version\fP (void)"
.br
.RI "Converts CCS811 firmware version numbers (major, minor, patch) into a string\&. "
.ti -1c
.RI "int32_t \fBccs811_get_fw_version_number\fP (void)"
.br
.RI "Converts CCS811 firmware version numbers (major, minor, patch) into an integer value\&. "
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "\fBccs811_status_register_t\fP"
.br
.ti -1c
.RI "\fBccs811_measure_mode_register_t\fP"
.br
.ti -1c
.RI "\fBccs811_raw_data_register_t\fP"
.br
.ti -1c
.RI "\fBccs811_threshold_value_t\fP"
.br
.ti -1c
.RI "\fBccs811_firmware_version_format_t\fP"
.br
.ti -1c
.RI "\fBccs811_error_code_register_t\fP"
.br
.in -1c
.SH "Author"
.PP 
Generated automatically by Doxygen for ESP-IDF Components by K0I05 from the source code\&.
