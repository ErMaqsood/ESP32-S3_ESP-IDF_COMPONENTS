.TH "components/peripherals/i2c/esp_mpu6050/include/mpu6050.h" 3 "ESP-IDF Components by K0I05" \" -*- nroff -*-
.ad l
.nh
.SH NAME
components/peripherals/i2c/esp_mpu6050/include/mpu6050.h
.SH SYNOPSIS
.br
.PP
\fR#include <stdint\&.h>\fP
.br
\fR#include <stdbool\&.h>\fP
.br
\fR#include <esp_err\&.h>\fP
.br
\fR#include <driver/gpio\&.h>\fP
.br
\fR#include <driver/i2c_master\&.h>\fP
.br
\fR#include <type_utils\&.h>\fP
.br
\fR#include 'mpu6050_version\&.h'\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBmpu6050_data_axes_s\fP"
.br
.RI "MPU6050 raw data axes structure\&. "
.ti -1c
.RI "struct \fBmpu6050_gyro_data_axes_s\fP"
.br
.ti -1c
.RI "struct \fBmpu6050_accel_data_axes_s\fP"
.br
.ti -1c
.RI "struct \fBmpu6050_attitude_s\fP"
.br
.ti -1c
.RI "struct \fBmpu6050_config_s\fP"
.br
.RI "MPU6050 configuration structure definition\&. "
.ti -1c
.RI "struct \fBmpu6050_context_t\fP"
.br
.RI "MPU6050 context structure\&. "
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBI2C_MPU6050_DEV_CLK_SPD\fP   UINT32_C(100000)"
.br
.RI "mpu6050 I2C default clock frequency (100KHz) "
.ti -1c
.RI "#define \fBI2C_MPU6050_DEV_ADDR_H\fP   UINT8_C(0x69)"
.br
.RI "mpu6050 I2C address when AD0 = 1 or to vcc "
.ti -1c
.RI "#define \fBI2C_MPU6050_DEV_ADDR_L\fP   UINT8_C(0x68)"
.br
.RI "mpu6050 I2C address when AD0 = 0 or to gnd "
.ti -1c
.RI "#define \fBI2C_XFR_TIMEOUT_MS\fP   (500)"
.br
.RI "I2C transaction timeout in milliseconds\&. "
.ti -1c
.RI "#define \fBI2C_MPU6050_CONFIG_DEFAULT\fP"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef enum \fBmpu6050_ext_sync_settings_e\fP \fBmpu6050_ext_sync_settings_t\fP"
.br
.RI "MPU6050 external synchronization settings enumerator\&. "
.ti -1c
.RI "typedef enum \fBmpu6050_digital_low_pass_filters_e\fP \fBmpu6050_digital_low_pass_filters_t\fP"
.br
.RI "MPU6050 digital low-pass filters enumerator\&. "
.ti -1c
.RI "typedef enum \fBmpu6050_gyro_full_scale_ranges_e\fP \fBmpu6050_gyro_full_scale_ranges_t\fP"
.br
.RI "MPU6050 gyroscope full-scale ranges enumerator\&. "
.ti -1c
.RI "typedef enum \fBmpu6050_accel_full_scale_ranges_e\fP \fBmpu6050_accel_full_scale_ranges_t\fP"
.br
.RI "MPU6050 accelerometer full-scale ranges enumerator\&. "
.ti -1c
.RI "typedef enum \fBmpu6050_gyro_clock_sources_e\fP \fBmpu6050_gyro_clock_sources_t\fP"
.br
.RI "MPU6050 gyroscope clock sources enumerator\&. "
.ti -1c
.RI "typedef enum \fBmpu6050_low_power_wake_controls_e\fP \fBmpu6050_low_power_wake_controls_t\fP"
.br
.RI "MPU6050 low-power wake controls enumerator\&. "
.ti -1c
.RI "typedef enum \fBmpu6050_irq_pin_active_level_e\fP \fBmpu6050_irq_pin_active_level_t\fP"
.br
.ti -1c
.RI "typedef enum \fBmpu6050_irq_pin_mode_e\fP \fBmpu6050_irq_pin_mode_t\fP"
.br
.ti -1c
.RI "typedef enum \fBmpu6050_irq_latch_e\fP \fBmpu6050_irq_latch_t\fP"
.br
.ti -1c
.RI "typedef enum \fBmpu6050_irq_clear_e\fP \fBmpu6050_irq_clear_t\fP"
.br
.ti -1c
.RI "typedef struct \fBmpu6050_data_axes_s\fP \fBmpu6050_data_axes_t\fP"
.br
.RI "MPU6050 raw data axes structure\&. "
.ti -1c
.RI "typedef struct \fBmpu6050_gyro_data_axes_s\fP \fBmpu6050_gyro_data_axes_t\fP"
.br
.ti -1c
.RI "typedef struct \fBmpu6050_accel_data_axes_s\fP \fBmpu6050_accel_data_axes_t\fP"
.br
.ti -1c
.RI "typedef struct \fBmpu6050_attitude_s\fP \fBmpu6050_attitude_t\fP"
.br
.ti -1c
.RI "typedef struct \fBmpu6050_config_s\fP \fBmpu6050_config_t\fP"
.br
.RI "MPU6050 configuration structure definition\&. "
.ti -1c
.RI "typedef struct mpu6050_context_t \fBmpu6050_context_t\fP"
.br
.RI "MPU6050 context structure definition\&. "
.ti -1c
.RI "typedef struct \fBmpu6050_context_t\fP * \fBmpu6050_handle_t\fP"
.br
.RI "MPU6050 handle structure definition\&. "
.ti -1c
.RI "typedef gpio_isr_t \fBmpu6050_isr_t\fP"
.br
.RI "MPU6050 interrupt service routine definition\&. "
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBmpu6050_ext_sync_settings_e\fP { \fBMPU6050_EXT_SYNC_SETTING_INPUT_DISABLED\fP = (0b000), \fBMPU6050_EXT_SYNC_SETTING_TEMP_OUT_L\fP = (0b001), \fBMPU6050_EXT_SYNC_SETTING_GYRO_XOUT_L\fP = (0b010), \fBMPU6050_EXT_SYNC_SETTING_GYRO_YOUT_L\fP = (0b011), \fBMPU6050_EXT_SYNC_SETTING_GYRO_ZOUT_L\fP = (0b100), \fBMPU6050_EXT_SYNC_SETTING_ACCEL_XOUT_L\fP = (0b101), \fBMPU6050_EXT_SYNC_SETTING_ACCEL_YOUT_L\fP = (0b110), \fBMPU6050_EXT_SYNC_SETTING_ACCEL_ZOUT_L\fP = (0b111) }"
.br
.RI "MPU6050 external synchronization settings enumerator\&. "
.ti -1c
.RI "enum \fBmpu6050_digital_low_pass_filters_e\fP { \fBMPU6050_DIGITAL_LP_FILTER_ACCEL_260KHZ_GYRO_256KHZ\fP = (0b000), \fBMPU6050_DIGITAL_LP_FILTER_ACCEL_184KHZ_GYRO_188KHZ\fP = (0b001), \fBMPU6050_DIGITAL_LP_FILTER_ACCEL_94KHZ_GYRO_98KHZ\fP = (0b010), \fBMPU6050_DIGITAL_LP_FILTER_ACCEL_44KHZ_GYRO_42KHZ\fP = (0b011), \fBMPU6050_DIGITAL_LP_FILTER_ACCEL_21KHZ_GYRO_20KHZ\fP = (0b100), \fBMPU6050_DIGITAL_LP_FILTER_ACCEL_10KHZ_GYRO_10KHZ\fP = (0b101), \fBMPU6050_DIGITAL_LP_FILTER_ACCEL_5KHZ_GYRO_5KHZ\fP = (0b110), \fBMPU6050_DIGITAL_LP_FILTER_RESERVED\fP = (0b111) }"
.br
.RI "MPU6050 digital low-pass filters enumerator\&. "
.ti -1c
.RI "enum \fBmpu6050_gyro_full_scale_ranges_e\fP { \fBMPU6050_GYRO_FS_RANGE_250DPS\fP = (0b00), \fBMPU6050_GYRO_FS_RANGE_500DPS\fP = (0b01), \fBMPU6050_GYRO_FS_RANGE_1000DPS\fP = (0b10), \fBMPU6050_GYRO_FS_RANGE_2000DPS\fP = (0b11) }"
.br
.RI "MPU6050 gyroscope full-scale ranges enumerator\&. "
.ti -1c
.RI "enum \fBmpu6050_accel_full_scale_ranges_e\fP { \fBMPU6050_ACCEL_FS_RANGE_2G\fP = (0b00), \fBMPU6050_ACCEL_FS_RANGE_4G\fP = (0b01), \fBMPU6050_ACCEL_FS_RANGE_8G\fP = (0b10), \fBMPU6050_ACCEL_FS_RANGE_16G\fP = (0b11) }"
.br
.RI "MPU6050 accelerometer full-scale ranges enumerator\&. "
.ti -1c
.RI "enum \fBmpu6050_gyro_clock_sources_e\fP { \fBMPU6050_GYRO_CS_INT_8MHZ\fP = (0b000), \fBMPU6050_GYRO_CS_PLL_X_AXIS_REF\fP = (0b001), \fBMPU6050_GYRO_CS_PLL_Y_AXIS_REF\fP = (0b010), \fBMPU6050_GYRO_CS_PLL_Z_AXIS_REF\fP = (0b011), \fBMPU6050_GYRO_CS_PLL_EXT_32_768KHZ_REF\fP = (0b100), \fBMPU6050_GYRO_CS_PLL_EXT_19_2MHZ_REF\fP = (0b101), \fBMPU6050_GYRO_CS_RESERVED\fP = (0b110), \fBMPU6050_GYRO_CS_CLOCK_STOP_IN_RESET\fP = (0b111) }"
.br
.RI "MPU6050 gyroscope clock sources enumerator\&. "
.ti -1c
.RI "enum \fBmpu6050_low_power_wake_controls_e\fP { \fBMPU6050_LP_WAKE_CONTROL_1_25HZ\fP = (0b00), \fBMPU6050_LP_WAKE_CONTROL_5HZ\fP = (0b01), \fBMPU6050_LP_WAKE_CONTROL_20HZ\fP = (0b10), \fBMPU6050_LP_WAKE_CONTROL_40HZ\fP = (0b11) }"
.br
.RI "MPU6050 low-power wake controls enumerator\&. "
.ti -1c
.RI "enum \fBmpu6050_irq_pin_active_level_e\fP { \fBMPU6050_IRQ_PIN_ACTIVE_HIGH\fP = 0, \fBMPU6050_IRQ_PIN_ACTIVE_LOW\fP = 1 }"
.br
.ti -1c
.RI "enum \fBmpu6050_irq_pin_mode_e\fP { \fBMPU6050_IRQ_PIN_PUSH_PULL\fP = 0, \fBMPU6050_IRQ_PIN_OPEN_DRAIN\fP = 1 }"
.br
.ti -1c
.RI "enum \fBmpu6050_irq_latch_e\fP { \fBMPU6050_IRQ_LATCH_50US\fP = 0, \fBMPU6050_IRQ_LATCH_UNTIL_CLEARED\fP = 1 }"
.br
.ti -1c
.RI "enum \fBmpu6050_irq_clear_e\fP { \fBMPU6050_IRQ_CLEAR_ON_ANY_READ\fP = 0, \fBMPU6050_IRQ_CLEAR_ON_STATUS_READ\fP = 1 }"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "union \fB__attribute__\fP ((packed)) ahtxx_status_register_u"
.br
.RI "AHTXX status register structure definition\&. "
.ti -1c
.RI "esp_err_t \fBmpu6050_get_sample_rate_divider_register\fP (\fBmpu6050_handle_t\fP handle, uint8_t *const reg)"
.br
.RI "Reads sample rate divider register from MPU6050\&. "
.ti -1c
.RI "esp_err_t \fBmpu6050_set_sample_rate_divider_register\fP (\fBmpu6050_handle_t\fP handle, const uint8_t reg)"
.br
.RI "Writes sample rate divider register to MPU6050\&. "
.ti -1c
.RI "esp_err_t \fBmpu6050_get_config_register\fP (\fBmpu6050_handle_t\fP handle, mpu6050_config_register_t *const reg)"
.br
.RI "Reads configuration register from MPU6050\&. "
.ti -1c
.RI "esp_err_t \fBmpu6050_set_config_register\fP (\fBmpu6050_handle_t\fP handle, const mpu6050_config_register_t reg)"
.br
.RI "Writes configuration register to MPU6050\&. "
.ti -1c
.RI "esp_err_t \fBmpu6050_get_gyro_config_register\fP (\fBmpu6050_handle_t\fP handle, mpu6050_gyro_config_register_t *const reg)"
.br
.RI "Reads gyroscope configuration register from MPU6050\&. "
.ti -1c
.RI "esp_err_t \fBmpu6050_set_gyro_config_register\fP (\fBmpu6050_handle_t\fP handle, const mpu6050_gyro_config_register_t reg)"
.br
.RI "Writes gyroscope configuration register to MPU6050\&. "
.ti -1c
.RI "esp_err_t \fBmpu6050_get_accel_config_register\fP (\fBmpu6050_handle_t\fP handle, mpu6050_accel_config_register_t *const reg)"
.br
.RI "Reads accelerometer configuration register from MPU6050\&. "
.ti -1c
.RI "esp_err_t \fBmpu6050_set_accel_config_register\fP (\fBmpu6050_handle_t\fP handle, const mpu6050_accel_config_register_t reg)"
.br
.RI "Writes accelerometer configuration register to MPU6050\&. "
.ti -1c
.RI "esp_err_t \fBmpu6050_get_interrupt_enable_register\fP (\fBmpu6050_handle_t\fP handle, mpu6050_interrupt_enable_register_t *const reg)"
.br
.RI "Reads interrupt enable register from MPU6050\&. "
.ti -1c
.RI "esp_err_t \fBmpu6050_set_interrupt_enable_register\fP (\fBmpu6050_handle_t\fP handle, const mpu6050_interrupt_enable_register_t reg)"
.br
.RI "Writes interrupt enable register to MPU6050\&. "
.ti -1c
.RI "esp_err_t \fBmpu6050_get_interrupt_pin_config_register\fP (\fBmpu6050_handle_t\fP handle, mpu6050_interrupt_pin_config_register_t *const reg)"
.br
.RI "Reads interrupt pin configuration register from MPU6050\&. "
.ti -1c
.RI "esp_err_t \fBmpu6050_set_interrupt_pin_config_register\fP (\fBmpu6050_handle_t\fP handle, const mpu6050_interrupt_pin_config_register_t reg)"
.br
.RI "Writes interrupt pin configuration register to MPU6050\&. "
.ti -1c
.RI "esp_err_t \fBmpu6050_get_interrupt_status_register\fP (\fBmpu6050_handle_t\fP handle, mpu6050_interrupt_status_register_t *const reg)"
.br
.RI "Reads interrupt status register from MPU6050\&. "
.ti -1c
.RI "esp_err_t \fBmpu6050_get_signal_path_reset_register\fP (\fBmpu6050_handle_t\fP handle, mpu6050_signal_path_reset_register_t *const reg)"
.br
.RI "Reads signal path reset register from MPU6050\&. "
.ti -1c
.RI "esp_err_t \fBmpu6050_set_signal_path_reset_register\fP (\fBmpu6050_handle_t\fP handle, const mpu6050_signal_path_reset_register_t reg)"
.br
.RI "Writes signal path reset register to MPU6050\&. "
.ti -1c
.RI "esp_err_t \fBmpu6050_get_user_control_register\fP (\fBmpu6050_handle_t\fP handle, mpu6050_user_control_register_t *const reg)"
.br
.RI "Reads user control register from MPU6050\&. "
.ti -1c
.RI "esp_err_t \fBmpu6050_set_user_control_register\fP (\fBmpu6050_handle_t\fP handle, const mpu6050_user_control_register_t reg)"
.br
.RI "Writes user control register to MPU6050\&. "
.ti -1c
.RI "esp_err_t \fBmpu6050_get_power_management1_register\fP (\fBmpu6050_handle_t\fP handle, mpu6050_power_management1_register_t *const reg)"
.br
.RI "Reads power management 1 register from MPU6050\&. "
.ti -1c
.RI "esp_err_t \fBmpu6050_set_power_management1_register\fP (\fBmpu6050_handle_t\fP handle, const mpu6050_power_management1_register_t reg)"
.br
.RI "Writes power management 1 register to MPU6050\&. "
.ti -1c
.RI "esp_err_t \fBmpu6050_get_power_management2_register\fP (\fBmpu6050_handle_t\fP handle, mpu6050_power_management2_register_t *const reg)"
.br
.RI "Reads power management 2 register from MPU6050\&. "
.ti -1c
.RI "esp_err_t \fBmpu6050_set_power_management2_register\fP (\fBmpu6050_handle_t\fP handle, const mpu6050_power_management2_register_t reg)"
.br
.RI "Writes power management 2 register to MPU6050\&. "
.ti -1c
.RI "esp_err_t \fBmpu6050_get_who_am_i_register\fP (\fBmpu6050_handle_t\fP handle, mpu6050_who_am_i_register_t *const reg)"
.br
.RI "Reads who am i (i\&.e\&. device identifier) register from MPU6050\&. "
.ti -1c
.RI "esp_err_t \fBmpu6050_configure_interrupts\fP (\fBmpu6050_handle_t\fP handle, const \fBmpu6050_config_t\fP *const config)"
.br
.RI "Configures interrupt pin behavior and setup target GPIO\&. "
.ti -1c
.RI "esp_err_t \fBmpu6050_init\fP (i2c_master_bus_handle_t master_handle, const \fBmpu6050_config_t\fP *mpu6050_config, \fBmpu6050_handle_t\fP *mpu6050_handle)"
.br
.RI "Initializes an MPU6050 device onto the I2C master bus\&. "
.ti -1c
.RI "esp_err_t \fBmpu6050_get_status\fP (\fBmpu6050_handle_t\fP handle, bool *fifo_overflow, bool *i2c_master, bool *data_ready)"
.br
.RI "Reads status for FIFO buffer overflow, I2C master, and data ready interrupts\&. "
.ti -1c
.RI "esp_err_t \fBmpu6050_get_data_status\fP (\fBmpu6050_handle_t\fP handle, bool *ready)"
.br
.RI "Reads interrupt status for data ready interrupt\&. "
.ti -1c
.RI "esp_err_t \fBmpu6050_get_motion\fP (\fBmpu6050_handle_t\fP handle, \fBmpu6050_gyro_data_axes_t\fP *gyro_data, \fBmpu6050_accel_data_axes_t\fP *accel_data, float *temperature)"
.br
.RI "Reads gyroscope, accelerometer, and temperature measurements\&. "
.ti -1c
.RI "esp_err_t \fBmpu6050_get_rotation\fP (\fBmpu6050_handle_t\fP handle, \fBmpu6050_gyro_data_axes_t\fP *gyro_data)"
.br
.ti -1c
.RI "esp_err_t \fBmpu6050_get_acceleration\fP (\fBmpu6050_handle_t\fP handle, \fBmpu6050_accel_data_axes_t\fP *accel_data)"
.br
.ti -1c
.RI "esp_err_t \fBmpu6050_get_temperature\fP (\fBmpu6050_handle_t\fP handle, float *temperature)"
.br
.ti -1c
.RI "esp_err_t \fBmpu6050_reset_signal_condition\fP (\fBmpu6050_handle_t\fP handle)"
.br
.ti -1c
.RI "esp_err_t \fBmpu6050_reset_fifo\fP (\fBmpu6050_handle_t\fP handle)"
.br
.ti -1c
.RI "esp_err_t \fBmpu6050_reset_sensors\fP (\fBmpu6050_handle_t\fP handle)"
.br
.ti -1c
.RI "esp_err_t \fBmpu6050_register_isr\fP (\fBmpu6050_handle_t\fP handle, const \fBmpu6050_isr_t\fP isr)"
.br
.RI "Registers an Interrupt Service Routine to handle MPU6050 interrupts\&. "
.ti -1c
.RI "esp_err_t \fBmpu6050_reset\fP (\fBmpu6050_handle_t\fP handle)"
.br
.RI "Issues soft-reset to MPU6050 and initializes MPU6050 device handle registers\&. However, device configuration registers must be configured before reading data registers\&. "
.ti -1c
.RI "esp_err_t \fBmpu6050_remove\fP (\fBmpu6050_handle_t\fP handle)"
.br
.RI "Removes an MPU6050 device from master bus\&. "
.ti -1c
.RI "esp_err_t \fBmpu6050_delete\fP (\fBmpu6050_handle_t\fP handle)"
.br
.RI "Removes an MPU6050 device from master bus and frees handle\&. "
.ti -1c
.RI "const char * \fBmpu6050_get_fw_version\fP (void)"
.br
.RI "Converts MPU6050 firmware version numbers (major, minor, patch, build) into a string\&. "
.ti -1c
.RI "int32_t \fBmpu6050_get_fw_version_number\fP (void)"
.br
.RI "Converts MPU6050 firmware version numbers (major, minor, patch) into an integer value\&. "
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "\fBmpu6050_self_test_register_t\fP"
.br
.ti -1c
.RI "\fBmpu6050_self_test_a_register_t\fP"
.br
.ti -1c
.RI "\fBmpu6050_config_register_t\fP"
.br
.ti -1c
.RI "\fBmpu6050_gyro_config_register_t\fP"
.br
.ti -1c
.RI "\fBmpu6050_accel_config_register_t\fP"
.br
.ti -1c
.RI "\fBmpu6050_fifo_enable_register_t\fP"
.br
.ti -1c
.RI "\fBmpu6050_interrupt_enable_register_t\fP"
.br
.ti -1c
.RI "\fBmpu6050_interrupt_pin_config_register_t\fP"
.br
.ti -1c
.RI "\fBmpu6050_interrupt_status_register_t\fP"
.br
.ti -1c
.RI "\fBmpu6050_signal_path_reset_register_t\fP"
.br
.ti -1c
.RI "\fBmpu6050_user_control_register_t\fP"
.br
.ti -1c
.RI "\fBmpu6050_power_management1_register_t\fP"
.br
.ti -1c
.RI "\fBmpu6050_power_management2_register_t\fP"
.br
.ti -1c
.RI "\fBmpu6050_who_am_i_register_t\fP"
.br
.in -1c
.SH "Author"
.PP 
Generated automatically by Doxygen for ESP-IDF Components by K0I05 from the source code\&.
