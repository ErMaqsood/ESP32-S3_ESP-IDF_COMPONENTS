.TH "components/peripherals/i2c/esp_veml6040/veml6040.c" 3 "ESP-IDF Components by K0I05" \" -*- nroff -*-
.ad l
.nh
.SH NAME
components/peripherals/i2c/esp_veml6040/veml6040.c
.SH SYNOPSIS
.br
.PP
\fR#include 'include/veml6040\&.h'\fP
.br
\fR#include <string\&.h>\fP
.br
\fR#include <stdio\&.h>\fP
.br
\fR#include <math\&.h>\fP
.br
\fR#include <esp_log\&.h>\fP
.br
\fR#include <esp_check\&.h>\fP
.br
\fR#include <freertos/FreeRTOS\&.h>\fP
.br
\fR#include <freertos/task\&.h>\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBVEML6040_POLY_COEF_A\fP   (6\&.0135e\-13)"
.br
.ti -1c
.RI "#define \fBVEML6040_POLY_COEF_B\fP   (\-9\&.3924e\-9)"
.br
.ti -1c
.RI "#define \fBVEML6040_POLY_COEF_C\fP   (8\&.1488e\-5)"
.br
.ti -1c
.RI "#define \fBVEML6040_POLY_COEF_D\fP   (1\&.0023)"
.br
.ti -1c
.RI "#define \fBVEML6040_CMD_CONF\fP   UINT8_C(0x00)"
.br
.ti -1c
.RI "#define \fBVEML6040_CMD_R_DATA\fP   UINT8_C(0x08)"
.br
.ti -1c
.RI "#define \fBVEML6040_CMD_G_DATA\fP   UINT8_C(0x09)"
.br
.ti -1c
.RI "#define \fBVEML6040_CMD_B_DATA\fP   UINT8_C(0x0a)"
.br
.ti -1c
.RI "#define \fBVEML6040_CMD_W_DATA\fP   UINT8_C(0x0b)"
.br
.ti -1c
.RI "#define \fBVEML6040_POWERUP_DELAY_MS\fP   UINT16_C(5)"
.br
.ti -1c
.RI "#define \fBVEML6040_APPSTART_DELAY_MS\fP   UINT16_C(10)"
.br
.ti -1c
.RI "#define \fBVEML6040_CMD_DELAY_MS\fP   UINT16_C(5)"
.br
.ti -1c
.RI "#define \fBVEML6040_RETRY_DELAY_MS\fP   UINT16_C(2)"
.br
.ti -1c
.RI "#define \fBVEML6040_TX_RX_DELAY_MS\fP   UINT16_C(10)"
.br
.ti -1c
.RI "#define \fBVEML6040_IT_TIMES_COUNT\fP   UINT8_C(6)"
.br
.ti -1c
.RI "#define \fBVEML6040_IT_OPTIONS_COUNT\fP   UINT8_C(4)"
.br
.ti -1c
.RI "#define \fBVEML6040_IT_OPT_ENUM_INDEX\fP   UINT8_C(0)"
.br
.ti -1c
.RI "#define \fBVEML6040_IT_OPT_IT_INDEX\fP   UINT8_C(1)"
.br
.ti -1c
.RI "#define \fBVEML6040_IT_OPT_SVTY_INDEX\fP   UINT8_C(2)"
.br
.ti -1c
.RI "#define \fBVEML6040_IT_OPT_MXLX_INDEX\fP   UINT8_C(3)"
.br
.ti -1c
.RI "#define \fBESP_ARG_CHECK\fP(VAL)"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "esp_err_t \fBveml6040_get_configuration_register\fP (\fBveml6040_handle_t\fP handle, veml6040_config_register_t *const reg)"
.br
.RI "Reads configuration register from VEML6040\&. "
.ti -1c
.RI "esp_err_t \fBveml6040_set_configuration_register\fP (\fBveml6040_handle_t\fP handle, const veml6040_config_register_t reg)"
.br
.RI "Writes configuration register to VEML6040\&. "
.ti -1c
.RI "esp_err_t \fBveml6040_init\fP (i2c_master_bus_handle_t master_handle, const \fBveml6040_config_t\fP *veml6040_config, \fBveml6040_handle_t\fP *veml6040_handle)"
.br
.RI "Initializes an VEML6040 device onto the I2C master bus\&. "
.ti -1c
.RI "esp_err_t \fBveml6040_get_red_als\fP (\fBveml6040_handle_t\fP handle, float *const als)"
.br
.RI "Reads red illuminance channel from VEML6040\&. "
.ti -1c
.RI "esp_err_t \fBveml6040_get_green_als\fP (\fBveml6040_handle_t\fP handle, float *const als)"
.br
.RI "Reads green illuminance channel from VEML6040\&. "
.ti -1c
.RI "esp_err_t \fBveml6040_get_blue_als\fP (\fBveml6040_handle_t\fP handle, float *const als)"
.br
.RI "Reads blue illuminance channel from VEML6040\&. "
.ti -1c
.RI "esp_err_t \fBveml6040_get_white_als\fP (\fBveml6040_handle_t\fP handle, float *const als)"
.br
.RI "Reads white illuminance channel from VEML6040\&. "
.ti -1c
.RI "esp_err_t \fBveml6040_get_als\fP (\fBveml6040_handle_t\fP handle, float *const red_als, float *const green_als, float *const blue_als, float *const white_als)"
.br
.RI "Reads red, green, blue, and white illuminance channels from VEML6040\&. "
.ti -1c
.RI "esp_err_t \fBveml6040_get_integration_time\fP (\fBveml6040_handle_t\fP handle, \fBveml6040_integration_times_t\fP *const integration_time)"
.br
.RI "Reads integration time from VEML6040\&. "
.ti -1c
.RI "esp_err_t \fBveml6040_set_integration_time\fP (\fBveml6040_handle_t\fP handle, const \fBveml6040_integration_times_t\fP integration_time)"
.br
.RI "Writes integration time to VEML6040\&. "
.ti -1c
.RI "esp_err_t \fBveml6040_get_trigger_method\fP (\fBveml6040_handle_t\fP handle, \fBveml6040_triggers_t\fP *const trigger_method)"
.br
.RI "Reads trigger method from VEML6040\&. "
.ti -1c
.RI "esp_err_t \fBveml6040_set_trigger_method\fP (\fBveml6040_handle_t\fP handle, const \fBveml6040_triggers_t\fP trigger_method)"
.br
.RI "Write trigger method to VEML6040\&. "
.ti -1c
.RI "esp_err_t \fBveml6040_get_mode\fP (\fBveml6040_handle_t\fP handle, \fBveml6040_modes_t\fP *const mode)"
.br
.RI "Reads mode from VEML6040\&. "
.ti -1c
.RI "esp_err_t \fBveml6040_set_mode\fP (\fBveml6040_handle_t\fP handle, const \fBveml6040_modes_t\fP mode)"
.br
.RI "Writes mode to VEML6040\&. "
.ti -1c
.RI "esp_err_t \fBveml6040_disable\fP (\fBveml6040_handle_t\fP handle)"
.br
.RI "Shuts down VEML6040 until woken\&. "
.ti -1c
.RI "esp_err_t \fBveml6040_enable\fP (\fBveml6040_handle_t\fP handle)"
.br
.RI "Wakes up VEML6040 from shutdown\&. "
.ti -1c
.RI "esp_err_t \fBveml6040_remove\fP (\fBveml6040_handle_t\fP handle)"
.br
.RI "Removes an VEML6040 device from master bus\&. "
.ti -1c
.RI "esp_err_t \fBveml6040_delete\fP (\fBveml6040_handle_t\fP handle)"
.br
.RI "Removes an VEML6040 device from master I2C bus and delete the handle\&. "
.ti -1c
.RI "const char * \fBveml6040_get_fw_version\fP (void)"
.br
.RI "Converts VEML6040 firmware version numbers (major, minor, patch) into a string\&. "
.ti -1c
.RI "int32_t \fBveml6040_get_fw_version_number\fP (void)"
.br
.RI "Converts VEML6040 firmware version numbers (major, minor, patch) into an integer value\&. "
.in -1c
.SH "Detailed Description"
.PP 
ESP-IDF driver for VEML6040 colour sensor

.PP
Ported from esp-open-rtos

.PP
Copyright (c) 2024 Eric Gionet (gionet.c.eric@gmail.com)

.PP
MIT Licensed as described in the file LICENSE 
.SH "Macro Definition Documentation"
.PP 
.SS "#define ESP_ARG_CHECK( VAL)"
\fBValue:\fP
.nf
do { if (!(VAL)) return ESP_ERR_INVALID_ARG; } while (0)
.PP
.fi

.SS "#define VEML6040_APPSTART_DELAY_MS   UINT16_C(10)"
veml7700 delay after initialization before application start-up 
.SS "#define VEML6040_CMD_DELAY_MS   UINT16_C(5)"
veml7700 delay before attempting I2C transactions after a command is issued 
.SS "#define VEML6040_IT_OPT_ENUM_INDEX   UINT8_C(0)"
integration time enumerator 
.SS "#define VEML6040_IT_OPT_IT_INDEX   UINT8_C(1)"
integration time in milliseconds 
.SS "#define VEML6040_IT_OPT_MXLX_INDEX   UINT8_C(3)"
integration time maximum lux value 
.SS "#define VEML6040_IT_OPT_SVTY_INDEX   UINT8_C(2)"
integration time gain sensitivity 
.SS "#define VEML6040_IT_OPTIONS_COUNT   UINT8_C(4)"
Possible integration time values count 
.SS "#define VEML6040_IT_TIMES_COUNT   UINT8_C(6)"
Possible integration time values count 
.SS "#define VEML6040_POWERUP_DELAY_MS   UINT16_C(5)"
veml7700 delay on power-up before attempting I2C transactions 
.SS "#define VEML6040_RETRY_DELAY_MS   UINT16_C(2)"
veml7700 delay between an I2C receive transaction retry 
.SS "#define VEML6040_TX_RX_DELAY_MS   UINT16_C(10)"
veml7700 delay after attempting an I2C transmit transaction and attempting an I2C receive transaction 
.SH "Author"
.PP 
Generated automatically by Doxygen for ESP-IDF Components by K0I05 from the source code\&.
