.TH "components/peripherals/i2c/esp_mlx90614/mlx90614.c" 3 "ESP-IDF Components by K0I05" \" -*- nroff -*-
.ad l
.nh
.SH NAME
components/peripherals/i2c/esp_mlx90614/mlx90614.c
.SH SYNOPSIS
.br
.PP
\fR#include 'include/mlx90614\&.h'\fP
.br
\fR#include <string\&.h>\fP
.br
\fR#include <stdio\&.h>\fP
.br
\fR#include <esp_log\&.h>\fP
.br
\fR#include <esp_check\&.h>\fP
.br
\fR#include <freertos/FreeRTOS\&.h>\fP
.br
\fR#include <freertos/task\&.h>\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBMLX90614_CMD_RAM_READ_AMB\fP   UINT8_C(0x03)"
.br
.ti -1c
.RI "#define \fBMLX90614_CMD_RAM_READ_RAWIR1\fP   UINT8_C(0x04)"
.br
.ti -1c
.RI "#define \fBMLX90614_CMD_RAM_READ_RAWIR2\fP   UINT8_C(0x05)"
.br
.ti -1c
.RI "#define \fBMLX90614_CMD_RAM_READ_TA\fP   UINT8_C(0x06)"
.br
.ti -1c
.RI "#define \fBMLX90614_CMD_RAM_READ_TOBJ1\fP   UINT8_C(0x07)"
.br
.ti -1c
.RI "#define \fBMLX90614_CMD_RAM_READ_TOBJ2\fP   UINT8_C(0x08)"
.br
.ti -1c
.RI "#define \fBMLX90614_CMD_EEPROM_RDWR_TOMAX\fP   UINT8_C(0x20)"
.br
.ti -1c
.RI "#define \fBMLX90614_CMD_EEPROM_RDWR_TOMIN\fP   UINT8_C(0x21)"
.br
.ti -1c
.RI "#define \fBMLX90614_CMD_EEPROM_RDWR_PWMCTRL\fP   UINT8_C(0x22)"
.br
.ti -1c
.RI "#define \fBMLX90614_CMD_EEPROM_RDWR_TARANGE\fP   UINT8_C(0x23)"
.br
.ti -1c
.RI "#define \fBMLX90614_CMD_EEPROM_RDWR_EMISS\fP   UINT8_C(0x24)"
.br
.ti -1c
.RI "#define \fBMLX90614_CMD_EEPROM_RDWR_CFGREG\fP   UINT8_C(0x25)"
.br
.ti -1c
.RI "#define \fBMLX90614_CMD_EEPROM_RDWR_SMBADDR\fP   UINT8_C(0x2E)"
.br
.ti -1c
.RI "#define \fBMLX90614_CMD_EEPROM_RD_IDNUM1\fP   UINT8_C(0x3C)"
.br
.ti -1c
.RI "#define \fBMLX90614_CMD_EEPROM_RD_IDNUM2\fP   UINT8_C(0x3D)"
.br
.ti -1c
.RI "#define \fBMLX90614_CMD_EEPROM_RD_IDNUM3\fP   UINT8_C(0x3E)"
.br
.ti -1c
.RI "#define \fBMLX90614_CMD_EEPROM_RD_IDNUM4\fP   UINT8_C(0x3F)"
.br
.ti -1c
.RI "#define \fBMLX90614_CMD_READ_FLAGS_REG\fP   UINT8_C(0xF0)"
.br
.ti -1c
.RI "#define \fBMLX90614_CMD_SLEEP\fP   UINT8_C(0xFF)"
.br
.ti -1c
.RI "#define \fBMLX90614_CMD_EEPROM_CLR_CELL\fP   UINT8_C(0x00)"
.br
.ti -1c
.RI "#define \fBMLX90614_CRC8_POLYNOM\fP   UINT8_C(7)"
.br
.RI "mlx90614 I2C CRC8 polynomial "
.ti -1c
.RI "#define \fBMLX90614_POWERUP_DELAY_MS\fP   UINT16_C(10)"
.br
.ti -1c
.RI "#define \fBMLX90614_APPSTART_DELAY_MS\fP   UINT16_C(10)"
.br
.ti -1c
.RI "#define \fBMLX90614_CMD_DELAY_MS\fP   UINT16_C(5)"
.br
.ti -1c
.RI "#define \fBMLX90614_EEPROM_RDWR_DELAY_MS\fP   UINT16_C(10)"
.br
.ti -1c
.RI "#define \fBMLX90614_TX_RX_DELAY_MS\fP   UINT16_C(10)"
.br
.ti -1c
.RI "#define \fBESP_ARG_CHECK\fP(VAL)"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "esp_err_t \fBmlx90614_get_config_register\fP (\fBmlx90614_handle_t\fP handle, mlx90614_config_register_t *const reg)"
.br
.RI "Reads configuration register from MLX90614\&. "
.ti -1c
.RI "esp_err_t \fBmlx90614_set_config_register\fP (\fBmlx90614_handle_t\fP handle, const mlx90614_config_register_t reg)"
.br
.RI "Writes configuration register to MLX90614\&. "
.ti -1c
.RI "esp_err_t \fBmlx90614_get_pwmctrl_register\fP (\fBmlx90614_handle_t\fP handle, mlx90614_pwmctrl_register_t *const reg)"
.br
.RI "Reads PWM control register from MLX90614\&. "
.ti -1c
.RI "esp_err_t \fBmlx90614_set_pwmctrl_register\fP (\fBmlx90614_handle_t\fP handle, const mlx90614_pwmctrl_register_t reg)"
.br
.RI "Writes PWM control register to MLX90614\&. "
.ti -1c
.RI "esp_err_t \fBmlx90614_get_flags_register\fP (\fBmlx90614_handle_t\fP handle, mlx90614_flags_register_t *const reg)"
.br
.RI "Reads flags register from MLX90614\&. "
.ti -1c
.RI "esp_err_t \fBmlx90614_init\fP (i2c_master_bus_handle_t master_handle, const \fBmlx90614_config_t\fP *mlx90614_config, \fBmlx90614_handle_t\fP *mlx90614_handle)"
.br
.RI "Initializes an MLX90614 device onto the master bus\&. "
.ti -1c
.RI "esp_err_t \fBmlx90614_get_temperatures\fP (\fBmlx90614_handle_t\fP handle, float *const ambient_temperature, float *const object1_temperature, float *const object2_temperature)"
.br
.RI "Reads all three temperatures (ambient, object 1 and object 2) from the MLX90614\&. "
.ti -1c
.RI "esp_err_t \fBmlx90614_get_ambient_temperature\fP (\fBmlx90614_handle_t\fP handle, float *const ambient_temperature)"
.br
.RI "Reads the ambient temperature from MLX90614\&. "
.ti -1c
.RI "esp_err_t \fBmlx90614_get_object1_temperature\fP (\fBmlx90614_handle_t\fP handle, float *const object1_temperature)"
.br
.RI "Reads object 1 temperature from mlx90614\&. "
.ti -1c
.RI "esp_err_t \fBmlx90614_get_object2_temperature\fP (\fBmlx90614_handle_t\fP handle, float *const object2_temperature)"
.br
.RI "Reads object 2 temperature from MLX90614\&. "
.ti -1c
.RI "esp_err_t \fBmlx90614_get_ir_channel1\fP (\fBmlx90614_handle_t\fP handle, int16_t *const ir_channel1)"
.br
.RI "Reads IR channel 1 from MLX90614\&. "
.ti -1c
.RI "esp_err_t \fBmlx90614_get_ir_channel2\fP (\fBmlx90614_handle_t\fP handle, int16_t *const ir_channel2)"
.br
.RI "Reads IR channel 2 from MLX90614\&. "
.ti -1c
.RI "esp_err_t \fBmlx90614_get_ambient_temperature_range\fP (\fBmlx90614_handle_t\fP handle, float *const ambient_temperature_range)"
.br
.RI "Reads ambient temperature range from MLX90614\&. "
.ti -1c
.RI "esp_err_t \fBmlx90614_get_emissivity\fP (\fBmlx90614_handle_t\fP handle, float *const coefficient)"
.br
.RI "Reads emissivity coefficient (0\&.1 to 1\&.0) setting from MLX90614\&. "
.ti -1c
.RI "esp_err_t \fBmlx90614_set_emissivity\fP (\fBmlx90614_handle_t\fP handle, const float coefficient)"
.br
.RI "Writes emissivity coefficient (0\&.1 to 1\&.0) setting to MLX90614\&. "
.ti -1c
.RI "esp_err_t \fBmlx90614_get_object_maximum_temperature\fP (\fBmlx90614_handle_t\fP handle, float *const temperature)"
.br
.RI "Reads maximum object temperature setting from MLX90614\&. "
.ti -1c
.RI "esp_err_t \fBmlx90614_set_object_maximum_temperature\fP (\fBmlx90614_handle_t\fP handle, const float temperature)"
.br
.RI "Writes maximum object temperature setting to MLX90614\&. "
.ti -1c
.RI "esp_err_t \fBmlx90614_get_object_minimum_temperature\fP (\fBmlx90614_handle_t\fP handle, float *const temperature)"
.br
.RI "Reads minimum object temperature setting from MLX90614\&. "
.ti -1c
.RI "esp_err_t \fBmlx90614_set_object_minimum_temperature\fP (\fBmlx90614_handle_t\fP handle, const float temperature)"
.br
.RI "Writes minimum object temperature setting to MLX90614\&. "
.ti -1c
.RI "esp_err_t \fBmlx90614_get_address\fP (\fBmlx90614_handle_t\fP handle, uint8_t *const address)"
.br
.RI "Reads I2C address setting from MLX90614\&. "
.ti -1c
.RI "esp_err_t \fBmlx90614_set_address\fP (\fBmlx90614_handle_t\fP handle, const uint8_t address)"
.br
.RI "Writes I2C address setting to MLX90614\&. "
.ti -1c
.RI "esp_err_t \fBmlx90614_sleep\fP (\fBmlx90614_handle_t\fP handle)"
.br
.RI "Puts the MLX90614 into sleep mode\&. "
.ti -1c
.RI "esp_err_t \fBmlx90614_wakeup\fP (\fBmlx90614_handle_t\fP handle)"
.br
.RI "Wakes-up the MLX90614 from sleep mode\&. "
.ti -1c
.RI "esp_err_t \fBmlx90614_remove\fP (\fBmlx90614_handle_t\fP handle)"
.br
.RI "Removes an MLX90614 device from master bus\&. "
.ti -1c
.RI "esp_err_t \fBmlx90614_delete\fP (\fBmlx90614_handle_t\fP handle)"
.br
.RI "Removes an MLX90614 device from master bus and frees handle\&. "
.ti -1c
.RI "const char * \fBmlx90614_get_fw_version\fP (void)"
.br
.RI "Converts MLX90614 firmware version numbers (major, minor, patch, build) into a string\&. "
.ti -1c
.RI "int32_t \fBmlx90614_get_fw_version_number\fP (void)"
.br
.RI "Converts MLX90614 firmware version numbers (major, minor, patch) into an integer value\&. "
.in -1c
.SH "Detailed Description"
.PP 
ESP-IDF driver for MLX90614 IR sensor

.PP
Ported from esp-open-rtos

.PP
Copyright (c) 2024 Eric Gionet (gionet.c.eric@gmail.com)

.PP
MIT Licensed as described in the file LICENSE 
.SH "Macro Definition Documentation"
.PP 
.SS "#define ESP_ARG_CHECK( VAL)"
\fBValue:\fP
.nf
do { if (!(VAL)) return ESP_ERR_INVALID_ARG; } while (0)
.PP
.fi

.SH "Author"
.PP 
Generated automatically by Doxygen for ESP-IDF Components by K0I05 from the source code\&.
