.TH "components/peripherals/i2c/esp_hmc5883l/include/hmc5883l.h" 3 "ESP-IDF Components by K0I05" \" -*- nroff -*-
.ad l
.nh
.SH NAME
components/peripherals/i2c/esp_hmc5883l/include/hmc5883l.h
.SH SYNOPSIS
.br
.PP
\fR#include <stdint\&.h>\fP
.br
\fR#include <stdbool\&.h>\fP
.br
\fR#include <esp_err\&.h>\fP
.br
\fR#include <driver/i2c_master\&.h>\fP
.br
\fR#include <type_utils\&.h>\fP
.br
\fR#include 'hmc5883l_version\&.h'\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBhmc5883l_axes_data_s\fP"
.br
.ti -1c
.RI "struct \fBhmc5883l_magnetic_axes_data_s\fP"
.br
.ti -1c
.RI "struct \fBhmc5883l_offset_axes_data_s\fP"
.br
.ti -1c
.RI "struct \fBhmc5883l_gain_error_axes_data_s\fP"
.br
.ti -1c
.RI "struct \fBhmc5883l_config_s\fP"
.br
.RI "HMC5883L device configuration structure\&. "
.ti -1c
.RI "struct \fBhmc5883l_context_t\fP"
.br
.RI "HMC5883L context structure\&. "
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBI2C_HMC5883L_DEV_CLK_SPD\fP   UINT32_C(100000)"
.br
.RI "hmc5883l I2C default clock frequency (100KHz) "
.ti -1c
.RI "#define \fBI2C_HMC5883L_DEV_ADDR\fP   UINT8_C(0x1e)"
.br
.RI "hmc5883l I2C address when ADDR pin floating/low "
.ti -1c
.RI "#define \fBI2C_XFR_TIMEOUT_MS\fP   (500)"
.br
.RI "I2C transaction timeout in milliseconds\&. "
.ti -1c
.RI "#define \fBI2C_HMC5883L_CONFIG_DEFAULT\fP"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef enum \fBhmc5883l_calibration_options_e\fP \fBhmc5883l_calibration_options_t\fP"
.br
.ti -1c
.RI "typedef enum \fBhmc5883l_modes_e\fP \fBhmc5883l_modes_t\fP"
.br
.ti -1c
.RI "typedef enum \fBhmc5883l_sample_averages_e\fP \fBhmc5883l_sample_averages_t\fP"
.br
.ti -1c
.RI "typedef enum \fBhmc5883l_data_rates_e\fP \fBhmc5883l_data_rates_t\fP"
.br
.ti -1c
.RI "typedef enum \fBhmc5883l_biases_e\fP \fBhmc5883l_biases_t\fP"
.br
.ti -1c
.RI "typedef enum \fBhmc5883l_gains_e\fP \fBhmc5883l_gains_t\fP"
.br
.ti -1c
.RI "typedef struct \fBhmc5883l_axes_data_s\fP \fBhmc5883l_axes_data_t\fP"
.br
.ti -1c
.RI "typedef struct \fBhmc5883l_magnetic_axes_data_s\fP \fBhmc5883l_magnetic_axes_data_t\fP"
.br
.ti -1c
.RI "typedef struct \fBhmc5883l_offset_axes_data_s\fP \fBhmc5883l_offset_axes_data_t\fP"
.br
.ti -1c
.RI "typedef struct \fBhmc5883l_gain_error_axes_data_s\fP \fBhmc5883l_gain_error_axes_data_t\fP"
.br
.ti -1c
.RI "typedef struct \fBhmc5883l_config_s\fP \fBhmc5883l_config_t\fP"
.br
.RI "HMC5883L device configuration structure\&. "
.ti -1c
.RI "typedef struct hmc5883l_context_t \fBhmc5883l_context_t\fP"
.br
.RI "HMC5883L context structure definition\&. "
.ti -1c
.RI "typedef struct \fBhmc5883l_context_t\fP * \fBhmc5883l_handle_t\fP"
.br
.RI "HMC5883L handle structure definition\&. "
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBhmc5883l_calibration_options_e\fP { \fBHMC5883L_CAL_GAIN_DIFF\fP = 1, \fBHMC5883L_CAL_AXES_MEAN\fP = 2, \fBHMC5883L_CAL_BOTH\fP = 3 }"
.br
.ti -1c
.RI "enum \fBhmc5883l_modes_e\fP { \fBHMC5883L_MODE_CONTINUOUS\fP = (0b00), \fBHMC5883L_MODE_SINGLE\fP = (0b01), \fBHMC5883L_MODE_IDLE\fP = (0b10), \fBHMC5883L_MODE_IDLE2\fP = (0b11) }"
.br
.ti -1c
.RI "enum \fBhmc5883l_sample_averages_e\fP { \fBHMC5883L_SAMPLE_1\fP = (0b00), \fBHMC5883L_SAMPLE_2\fP = (0b01), \fBHMC5883L_SAMPLE_4\fP = (0b10), \fBHMC5883L_SAMPLE_8\fP = (0b11) }"
.br
.ti -1c
.RI "enum \fBhmc5883l_data_rates_e\fP { \fBHMC5883L_DATA_RATE_00_75\fP = (0b000), \fBHMC5883L_DATA_RATE_01_50\fP = (0b001), \fBHMC5883L_DATA_RATE_03_00\fP = (0b010), \fBHMC5883L_DATA_RATE_07_50\fP = (0b011), \fBHMC5883L_DATA_RATE_15_00\fP = (0b100), \fBHMC5883L_DATA_RATE_30_00\fP = (0b101), \fBHMC5883L_DATA_RATE_75_00\fP = (0b110), \fBHMC5883L_DATA_RATE_RESERVED\fP = (0b111) }"
.br
.ti -1c
.RI "enum \fBhmc5883l_biases_e\fP { \fBHMC5883L_BIAS_NORMAL\fP = (0b00), \fBHMC5883L_BIAS_POSITIVE\fP = (0b01), \fBHMC5883L_BIAS_NEGATIVE\fP = (0b10), \fBHMC5883L_BIAS_RESERVED\fP = (0b11) }"
.br
.ti -1c
.RI "enum \fBhmc5883l_gains_e\fP { \fBHMC5883L_GAIN_1370\fP = (0b000), \fBHMC5883L_GAIN_1090\fP = (0b001), \fBHMC5883L_GAIN_820\fP = (0b010), \fBHMC5883L_GAIN_660\fP = (0b011), \fBHMC5883L_GAIN_440\fP = (0b100), \fBHMC5883L_GAIN_390\fP = (0b101), \fBHMC5883L_GAIN_330\fP = (0b110), \fBHMC5883L_GAIN_230\fP = (0b111) }"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "union \fB__attribute__\fP ((packed)) ahtxx_status_register_u"
.br
.RI "AHTXX status register structure definition\&. "
.ti -1c
.RI "esp_err_t \fBhmc5883l_get_configuration1_register\fP (\fBhmc5883l_handle_t\fP handle, hmc5883l_configuration1_register_t *const reg)"
.br
.RI "Reads configuration 1 register from HMC5883L\&. "
.ti -1c
.RI "esp_err_t \fBhmc5883l_set_configuration1_register\fP (\fBhmc5883l_handle_t\fP handle, const hmc5883l_configuration1_register_t reg)"
.br
.RI "Writes configuration 1 register to HMC5883L\&. "
.ti -1c
.RI "esp_err_t \fBhmc5883l_get_configuration2_register\fP (\fBhmc5883l_handle_t\fP handle, hmc5883l_configuration2_register_t *const reg)"
.br
.RI "Reads configuration 2 register from HMC5883L\&. "
.ti -1c
.RI "esp_err_t \fBhmc5883l_set_configuration2_register\fP (\fBhmc5883l_handle_t\fP handle, const hmc5883l_configuration2_register_t reg)"
.br
.RI "Writes configuration 2 register to HMC5883L\&. "
.ti -1c
.RI "esp_err_t \fBhmc5883l_get_mode_register\fP (\fBhmc5883l_handle_t\fP handle, hmc5883l_mode_register_t *const reg)"
.br
.RI "Reads mode register from HMC5883L\&. "
.ti -1c
.RI "esp_err_t \fBhmc5883l_set_mode_register\fP (\fBhmc5883l_handle_t\fP handle, const hmc5883l_mode_register_t reg)"
.br
.RI "Writes mode register to HMC5883L\&. "
.ti -1c
.RI "esp_err_t \fBhmc5883l_get_status_register\fP (\fBhmc5883l_handle_t\fP handle, hmc5883l_status_register_t *const reg)"
.br
.RI "Reads status register from HMC5883L\&. "
.ti -1c
.RI "esp_err_t \fBhmc5883l_init\fP (i2c_master_bus_handle_t master_handle, const \fBhmc5883l_config_t\fP *hmc5883l_config, \fBhmc5883l_handle_t\fP *hmc5883l_handle)"
.br
.RI "Initializes an HMC5883L device onto the I2C master bus\&. "
.ti -1c
.RI "esp_err_t \fBhmc5883l_get_fixed_magnetic_axes\fP (\fBhmc5883l_handle_t\fP handle, \fBhmc5883l_axes_data_t\fP *const axes_data)"
.br
.RI "Reads uncompensated axes measurements from HMC5883L\&. "
.ti -1c
.RI "esp_err_t \fBhmc5883l_get_magnetic_axes\fP (\fBhmc5883l_handle_t\fP handle, \fBhmc5883l_magnetic_axes_data_t\fP *const axes_data)"
.br
.RI "Reads compensated magnetic axes measurements from HMC5883L\&. "
.ti -1c
.RI "esp_err_t \fBhmc5883l_get_calibrated_offsets\fP (\fBhmc5883l_handle_t\fP handle, const \fBhmc5883l_calibration_options_t\fP option)"
.br
.ti -1c
.RI "esp_err_t \fBhmc5883l_get_data_status\fP (\fBhmc5883l_handle_t\fP handle, bool *const ready, bool *const locked)"
.br
.RI "Reads data status from HMC5883L\&. "
.ti -1c
.RI "esp_err_t \fBhmc5883l_get_mode\fP (\fBhmc5883l_handle_t\fP handle, \fBhmc5883l_modes_t\fP *const mode)"
.br
.RI "Reads operating mode setting from HMC5883L\&. "
.ti -1c
.RI "esp_err_t \fBhmc5883l_set_mode\fP (\fBhmc5883l_handle_t\fP handle, const \fBhmc5883l_modes_t\fP mode)"
.br
.RI "Writes operating mode setting to HMC5883L\&. "
.ti -1c
.RI "esp_err_t \fBhmc5883l_get_samples_averaged\fP (\fBhmc5883l_handle_t\fP handle, \fBhmc5883l_sample_averages_t\fP *const sample)"
.br
.RI "Reads samples averaged setting from HMC5883L\&. "
.ti -1c
.RI "esp_err_t \fBhmc5883l_set_samples_averaged\fP (\fBhmc5883l_handle_t\fP handle, const \fBhmc5883l_sample_averages_t\fP sample)"
.br
.RI "Writes samples averaged setting to HMC5883L\&. "
.ti -1c
.RI "esp_err_t \fBhmc5883l_get_data_rate\fP (\fBhmc5883l_handle_t\fP handle, \fBhmc5883l_data_rates_t\fP *const rate)"
.br
.RI "Reads data rate setting from HMC5883L\&. "
.ti -1c
.RI "esp_err_t \fBhmc5883l_set_data_rate\fP (\fBhmc5883l_handle_t\fP handle, const \fBhmc5883l_data_rates_t\fP rate)"
.br
.RI "Writes data rate setting to HMC5883L\&. "
.ti -1c
.RI "esp_err_t \fBhmc5883l_get_bias\fP (\fBhmc5883l_handle_t\fP handle, \fBhmc5883l_biases_t\fP *const bias)"
.br
.RI "Reads measurement mode bias setting from HMC5883L\&. "
.ti -1c
.RI "esp_err_t \fBhmc5883l_set_bias\fP (\fBhmc5883l_handle_t\fP handle, const \fBhmc5883l_biases_t\fP bias)"
.br
.RI "Writes measurement mode bias setting to HMC5883L\&. "
.ti -1c
.RI "esp_err_t \fBhmc5883l_get_gain\fP (\fBhmc5883l_handle_t\fP handle, \fBhmc5883l_gains_t\fP *const gain)"
.br
.RI "Reads gain setting from HMC5883L\&. "
.ti -1c
.RI "esp_err_t \fBhmc5883l_set_gain\fP (\fBhmc5883l_handle_t\fP handle, const \fBhmc5883l_gains_t\fP gain)"
.br
.RI "Writes gain setting to HMC5883L\&. "
.ti -1c
.RI "esp_err_t \fBhmc5883l_get_gain_sensitivity\fP (\fBhmc5883l_handle_t\fP handle, float *const sensitivity)"
.br
.RI "Reads gain sensitivity setting from HMC5883L\&. "
.ti -1c
.RI "esp_err_t \fBhmc5883l_remove\fP (\fBhmc5883l_handle_t\fP handle)"
.br
.RI "Removes an HMC5883L device from master bus\&. "
.ti -1c
.RI "esp_err_t \fBhmc5883l_delete\fP (\fBhmc5883l_handle_t\fP handle)"
.br
.RI "Removes an HMC5883L device from master bus and frees handle\&. "
.ti -1c
.RI "const char * \fBhmc5883l_get_fw_version\fP (void)"
.br
.RI "Converts HMC5883L firmware version numbers (major, minor, patch, build) into a string\&. "
.ti -1c
.RI "int32_t \fBhmc5883l_get_fw_version_number\fP (void)"
.br
.RI "Converts HMC5883L firmware version numbers (major, minor, patch) into an integer value\&. "
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "\fBhmc5883l_configuration1_register_t\fP"
.br
.ti -1c
.RI "\fBhmc5883l_configuration2_register_t\fP"
.br
.ti -1c
.RI "\fBhmc5883l_mode_register_t\fP"
.br
.ti -1c
.RI "\fBhmc5883l_status_register_t\fP"
.br
.in -1c
.SH "Author"
.PP 
Generated automatically by Doxygen for ESP-IDF Components by K0I05 from the source code\&.
