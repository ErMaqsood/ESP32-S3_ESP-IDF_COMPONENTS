.TH "onewire_bus_t" 3 "ESP-IDF Components by K0I05" \" -*- nroff -*-
.ad l
.nh
.SH NAME
onewire_bus_t \- 1-Wire bus interface definition  

.SH SYNOPSIS
.br
.PP
.PP
\fR#include <onewire_bus_interface\&.h>\fP
.SS "Data Fields"

.in +1c
.ti -1c
.RI "esp_err_t(* \fBwrite_bytes\fP )(\fBonewire_bus_t\fP *bus, const uint8_t *tx_data, uint8_t tx_data_size)"
.br
.RI "Write bytes to 1-wire bus\&. "
.ti -1c
.RI "esp_err_t(* \fBread_bytes\fP )(\fBonewire_bus_t\fP *bus, uint8_t *rx_buf, size_t rx_buf_size)"
.br
.RI "Read bytes from 1-wire bus\&. "
.ti -1c
.RI "esp_err_t(* \fBwrite_bit\fP )(\fBonewire_bus_handle_t\fP handle, uint8_t tx_bit)"
.br
.RI "Write a bit to 1-wire bus, this is a blocking function\&. "
.ti -1c
.RI "esp_err_t(* \fBread_bit\fP )(\fBonewire_bus_handle_t\fP handle, uint8_t *rx_bit)"
.br
.RI "Read a bit from 1-wire bus\&. "
.ti -1c
.RI "esp_err_t(* \fBreset\fP )(\fBonewire_bus_t\fP *bus)"
.br
.RI "Send reset pulse to the bus, and check if there are devices attached to the bus\&. "
.ti -1c
.RI "esp_err_t(* \fBdel\fP )(\fBonewire_bus_t\fP *bus)"
.br
.RI "Free 1-Wire bus resources\&. "
.in -1c
.SH "Detailed Description"
.PP 
1-Wire bus interface definition 
.SH "Field Documentation"
.PP 
.SS "esp_err_t(* del) (\fBonewire_bus_t\fP *bus)"

.PP
Free 1-Wire bus resources\&. 
.PP
\fBParameters\fP
.RS 4
\fIbus\fP 1-Wire bus handle
.RE
.PP
\fBReturns\fP
.RS 4
.IP "\(bu" 2
ESP_OK: Free resources successfully
.IP "\(bu" 2
ESP_FAIL: Free resources failed because error occurred 
.PP
.RE
.PP

.SS "esp_err_t(* read_bit) (\fBonewire_bus_handle_t\fP handle, uint8_t *rx_bit)"

.PP
Read a bit from 1-wire bus\&. 
.PP
\fBParameters\fP
.RS 4
\fIhandle\fP 1-wire bus handle 
.br
\fIrx_bit\fP received bit, 0 for zero bit, 1 for one bit 
.RE
.PP
\fBReturns\fP
.RS 4
.IP "\(bu" 2
ESP_OK Read bit from 1-wire bus successfully\&.
.IP "\(bu" 2
ESP_ERR_INVALID_ARG Invalid argument\&. 
.PP
.RE
.PP

.SS "esp_err_t(* read_bytes) (\fBonewire_bus_t\fP *bus, uint8_t *rx_buf, size_t rx_buf_size)"

.PP
Read bytes from 1-wire bus\&. 
.PP
\fBParameters\fP
.RS 4
\fIbus\fP 1-wire bus handle 
.br
\fIrx_buf\fP pointer to buffer to store received data 
.br
\fIrx_buf_size\fP size of buffer to store received data, in bytes 
.RE
.PP
\fBReturns\fP
.RS 4
.IP "\(bu" 2
ESP_OK: Read bytes from 1-Wire bus successfully
.IP "\(bu" 2
ESP_ERR_INVALID_ARG: Read bytes from 1-Wire bus failed because of invalid argument
.IP "\(bu" 2
ESP_FAIL: Read bytes from 1-Wire bus failed because of other errors 
.PP
.RE
.PP

.SS "esp_err_t(* reset) (\fBonewire_bus_t\fP *bus)"

.PP
Send reset pulse to the bus, and check if there are devices attached to the bus\&. 
.PP
\fBParameters\fP
.RS 4
\fIbus\fP 1-Wire bus handle
.RE
.PP
\fBReturns\fP
.RS 4
.IP "\(bu" 2
ESP_OK: Reset 1-Wire bus successfully and find device on the bus
.IP "\(bu" 2
ESP_ERR_NOT_FOUND: Reset 1-Wire bus successfully but no device found on the bus
.IP "\(bu" 2
ESP_FAIL: Reset 1-Wire bus failed because of other errors 
.PP
.RE
.PP

.SS "esp_err_t(* write_bit) (\fBonewire_bus_handle_t\fP handle, uint8_t tx_bit)"

.PP
Write a bit to 1-wire bus, this is a blocking function\&. 
.PP
\fBParameters\fP
.RS 4
\fIhandle\fP 1-wire bus handle 
.br
\fItx_bit\fP bit to transmit, 0 for zero bit, other for one bit 
.RE
.PP
\fBReturns\fP
.RS 4
.IP "\(bu" 2
ESP_OK Write bit to 1-wire bus successfully\&.
.IP "\(bu" 2
ESP_ERR_INVALID_ARG Invalid argument\&. 
.PP
.RE
.PP

.SS "esp_err_t(* write_bytes) (\fBonewire_bus_t\fP *bus, const uint8_t *tx_data, uint8_t tx_data_size)"

.PP
Write bytes to 1-wire bus\&. 
.PP
\fBNote\fP
.RS 4
This is a blocking function
.RE
.PP
\fBParameters\fP
.RS 4
\fIbus\fP 1-Wire bus handle 
.br
\fItx_data\fP pointer to data to be sent 
.br
\fItx_data_size\fP size of data to be sent, in bytes 
.RE
.PP
\fBReturns\fP
.RS 4
.IP "\(bu" 2
ESP_OK: Write bytes to 1-Wire bus successfully
.IP "\(bu" 2
ESP_ERR_INVALID_ARG: Write bytes to 1-Wire bus failed because of invalid argument
.IP "\(bu" 2
ESP_FAIL: Write bytes to 1-Wire bus failed because of other errors 
.PP
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for ESP-IDF Components by K0I05 from the source code\&.
