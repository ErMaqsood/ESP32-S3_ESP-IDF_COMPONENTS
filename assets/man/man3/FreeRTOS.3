.TH "FreeRTOS" 3 "ESP-IDF Components by K0I05" \" -*- nroff -*-
.ad l
.nh
.SH NAME
FreeRTOS \- task extension
.SH SYNOPSIS
.br
.PP
.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBtime_into_interval_config_tag\fP"
.br
.RI "Time-into-interval configuration structure\&. "
.ti -1c
.RI "struct \fBtime_into_interval_t\fP"
.br
.RI "Time-into-interval structure\&. "
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef enum \fBtime_into_interval_types_tag\fP \fBtime_into_interval_types_t\fP"
.br
.RI "Time into interval types enumerator\&. "
.ti -1c
.RI "typedef struct \fBtime_into_interval_config_tag\fP \fBtime_into_interval_config_t\fP"
.br
.RI "Time-into-interval configuration structure\&. "
.ti -1c
.RI "typedef struct time_into_interval_t \fBtime_into_interval_t\fP"
.br
.RI "Time-into-interval definition\&. "
.ti -1c
.RI "typedef struct \fBtime_into_interval_t\fP * \fBtime_into_interval_handle_t\fP"
.br
.RI "Time-into-interval handle definition\&. "
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBtime_into_interval_types_tag\fP { \fBTIME_INTO_INTERVAL_SEC\fP, \fBTIME_INTO_INTERVAL_MIN\fP, \fBTIME_INTO_INTERVAL_HR\fP }"
.br
.RI "Time into interval types enumerator\&. "
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "uint64_t \fBtime_into_interval_normalize_interval_to_sec\fP (const \fBtime_into_interval_types_t\fP interval_type, const uint16_t interval)"
.br
.RI "Normalizes time-into-interval period or offset to seconds\&. "
.ti -1c
.RI "uint64_t \fBtime_into_interval_normalize_interval_to_msec\fP (const \fBtime_into_interval_types_t\fP interval_type, const uint16_t interval)"
.br
.RI "Normalizes time-into-interval period or offset to milliseconds\&. "
.ti -1c
.RI "uint64_t \fBtime_into_interval_get_epoch_timestamp\fP (void)"
.br
.RI "Gets unix epoch timestamp (UTC) in seconds from system clock\&. "
.ti -1c
.RI "uint64_t \fBtime_into_interval_get_epoch_timestamp_msec\fP (void)"
.br
.RI "Gets unix epoch timestamp (UTC) in milliseconds from system clock\&. "
.ti -1c
.RI "uint64_t \fBtime_into_interval_get_epoch_timestamp_usec\fP (void)"
.br
.RI "Gets unix epoch timestamp (UTC) in micro-seconds from system clock\&. "
.ti -1c
.RI "esp_err_t \fBtime_into_interval_set_epoch_timestamp_event\fP (const \fBtime_into_interval_types_t\fP interval_type, const uint16_t interval_period, const uint16_t interval_offset, uint64_t *epoch_timestamp)"
.br
.RI "Sets the next epoch event timestamp in milli-seconds from system clock based on the time interval type, period, and offset\&. "
.ti -1c
.RI "esp_err_t \fBtime_into_interval_init\fP (const \fBtime_into_interval_config_t\fP *time_into_interval_config, \fBtime_into_interval_handle_t\fP *time_into_interval_handle)"
.br
.RI "Initializes a time-into-interval handle\&. A time-into-interval is used within a FreeRTOS task subroutine for conditional or task delay based on the configured interval type, period, and offset that is synchronized to the system clock\&. "
.ti -1c
.RI "bool \fBtime_into_interval\fP (\fBtime_into_interval_handle_t\fP time_into_interval_handle)"
.br
.RI "Validates time-into-interval condition based on the configured interval type, period, and offset parameters that is synchronized to the system clock and returns true when the interval has elapsed\&. "
.ti -1c
.RI "esp_err_t \fBtime_into_interval_delay\fP (\fBtime_into_interval_handle_t\fP time_into_interval_handle)"
.br
.RI "Delays the task until the next scheduled task event\&. This function should be placed after the \fRfor (;;) {\fP syntax to delay the task based on the configured interval type, period, and offset parameters\&. "
.ti -1c
.RI "esp_err_t \fBtime_into_interval_get_last_event\fP (\fBtime_into_interval_handle_t\fP time_into_interval_handle, uint64_t *epoch_timestamp)"
.br
.RI "Gets epoch timestamp (UTC) of the last event in milli-seconds\&. "
.ti -1c
.RI "esp_err_t \fBtime_into_interval_delete\fP (\fBtime_into_interval_handle_t\fP time_into_interval_handle)"
.br
.RI "Deletes the time-into-interval handle and frees up resources\&. "
.ti -1c
.RI "const char * \fBtime_into_interval_get_fw_version\fP (void)"
.br
.RI "Converts time-into-interval firmware version numbers (major, minor, patch) into a string\&. "
.ti -1c
.RI "int32_t \fBtime_into_interval_get_fw_version_number\fP (void)"
.br
.RI "Converts time-into-interval firmware version numbers (major, minor, patch) into an integer value\&. "
.in -1c
.SH "Detailed Description"
.PP 
ESP-IDF FreeRTOS task extension

.PP
Copyright (c) 2024 Eric Gionet (gionet.c.eric@gmail.com)

.PP
MIT Licensed as described in the file LICENSE 
.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBtime_into_interval_types_tag\fP"

.PP
Time into interval types enumerator\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\f(BITIME_INTO_INTERVAL_SEC \fP
Time-into-interval in seconds\&. 
.TP
\f(BITIME_INTO_INTERVAL_MIN \fP
Time-into-interval in minutes\&. 
.TP
\f(BITIME_INTO_INTERVAL_HR \fP
Time-into-interval in hours\&. 
.SH "Function Documentation"
.PP 
.SS "bool time_into_interval (\fBtime_into_interval_handle_t\fP time_into_interval_handle)"

.PP
Validates time-into-interval condition based on the configured interval type, period, and offset parameters that is synchronized to the system clock and returns true when the interval has elapsed\&. 
.PP
\fBParameters\fP
.RS 4
\fItime_into_interval_handle\fP Time-into-interval handle\&. 
.RE
.PP
\fBReturns\fP
.RS 4
true when time-into-interval condition is valid\&. 

.PP
false when time-into-interval handle or condition is not valid\&. 
.RE
.PP

.SS "esp_err_t time_into_interval_delay (\fBtime_into_interval_handle_t\fP time_into_interval_handle)"

.PP
Delays the task until the next scheduled task event\&. This function should be placed after the \fRfor (;;) {\fP syntax to delay the task based on the configured interval type, period, and offset parameters\&. 
.PP
\fBParameters\fP
.RS 4
\fItime_into_interval_handle\fP Time-into-interval handle\&. 
.RE
.PP
\fBReturns\fP
.RS 4
esp_err_t ESP_OK on success\&. 
.RE
.PP

.SS "esp_err_t time_into_interval_delete (\fBtime_into_interval_handle_t\fP time_into_interval_handle)"

.PP
Deletes the time-into-interval handle and frees up resources\&. 
.PP
\fBParameters\fP
.RS 4
\fItime_into_interval_handle\fP Time-into-interval handle\&. 
.RE
.PP
\fBReturns\fP
.RS 4
esp_err_t ESP_OK on success\&. 
.RE
.PP

.SS "uint64_t time_into_interval_get_epoch_timestamp (void )"

.PP
Gets unix epoch timestamp (UTC) in seconds from system clock\&. 
.PP
\fBReturns\fP
.RS 4
uint64_t Unix epoch timestamp (UTC) in seconds or it will return 0-seconds when there is an issue accessing the system clock\&. 
.RE
.PP

.SS "uint64_t time_into_interval_get_epoch_timestamp_msec (void )"

.PP
Gets unix epoch timestamp (UTC) in milliseconds from system clock\&. 
.PP
\fBReturns\fP
.RS 4
uint64_t Unix epoch timestamp (UTC) in milliseconds or it will return 0-milli-seconds when there is an issue accessing the system clock\&. 
.RE
.PP

.SS "uint64_t time_into_interval_get_epoch_timestamp_usec (void )"

.PP
Gets unix epoch timestamp (UTC) in micro-seconds from system clock\&. 
.PP
\fBReturns\fP
.RS 4
uint64_t Unix epoch timestamp (UTC) in micro-seconds or it will return 0-micro-seconds when there is an issue accessing the system clock\&. 
.RE
.PP

.SS "const char * time_into_interval_get_fw_version (void )"

.PP
Converts time-into-interval firmware version numbers (major, minor, patch) into a string\&. 
.PP
\fBReturns\fP
.RS 4
char* time-into-interval firmware version as a string that is formatted as X\&.X\&.X (e\&.g\&. 4\&.0\&.0)\&. 
.RE
.PP

.SS "int32_t time_into_interval_get_fw_version_number (void )"

.PP
Converts time-into-interval firmware version numbers (major, minor, patch) into an integer value\&. 
.PP
\fBReturns\fP
.RS 4
int32_t time-into-interval firmware version number\&. 
.RE
.PP

.SS "esp_err_t time_into_interval_get_last_event (\fBtime_into_interval_handle_t\fP time_into_interval_handle, uint64_t * epoch_timestamp)"

.PP
Gets epoch timestamp (UTC) of the last event in milli-seconds\&. 
.PP
\fBParameters\fP
.RS 4
\fItime_into_interval_handle\fP Time-into-interval handle\&. 
.br
\fIepoch_timestamp\fP Unix epoch timestamp (UTC) in milli-seconds of the last event\&. 
.RE
.PP
\fBReturns\fP
.RS 4
esp_err_t ESP_OK on success\&. 
.RE
.PP

.SS "esp_err_t time_into_interval_init (const \fBtime_into_interval_config_t\fP * time_into_interval_config, \fBtime_into_interval_handle_t\fP * time_into_interval_handle)"

.PP
Initializes a time-into-interval handle\&. A time-into-interval is used within a FreeRTOS task subroutine for conditional or task delay based on the configured interval type, period, and offset that is synchronized to the system clock\&. As an example, if a 5-second interval is configured, the \fRtime_into_interval\fP function will return true every 5-seconds based on the system clock i\&.e\&. 12:00:00, 12:00:05, 12:00:10, etc\&. The \fRtime_into_interval_delay\fP would delay a task for 5-seconds and behaves like a task scheduler that is synchronized to the system clock\&.

.PP
The interval offset is used to offset the start of the interval period\&. As an example, if a 5-minute interval with 1-minute offset is configured, the \fRtime_into_interval\fP function will return true every 5-minutes at 1-minute into the interval based on the system clock i\&.e\&. 12:01:00, 12:06:00, 12:11:00, etc\&.

.PP
\fBParameters\fP
.RS 4
\fI\fBtime_into_interval_config_t\fP\fP Time-into-interval configuration\&. 
.br
\fItime_into_interval_handle\fP Time-into-interval handle\&. 
.RE
.PP
\fBReturns\fP
.RS 4
esp_err_t ESP_OK on success\&. 
.RE
.PP

.SS "uint64_t time_into_interval_normalize_interval_to_msec (const \fBtime_into_interval_types_t\fP interval_type, const uint16_t interval)"

.PP
Normalizes time-into-interval period or offset to milliseconds\&. 
.PP
\fBParameters\fP
.RS 4
\fIinterval_type\fP Time-into-interval type of interval period or offset\&. 
.br
\fIinterval\fP Time-into-interval period or offset for interval type\&. 
.RE
.PP
\fBReturns\fP
.RS 4
uint64_t Normalized time-into-interval period or offset in milli-seconds\&. 
.RE
.PP

.SS "uint64_t time_into_interval_normalize_interval_to_sec (const \fBtime_into_interval_types_t\fP interval_type, const uint16_t interval)"

.PP
Normalizes time-into-interval period or offset to seconds\&. 
.PP
\fBParameters\fP
.RS 4
\fIinterval_type\fP Time-into-interval type of interval period or offset\&. 
.br
\fIinterval\fP Time-into-interval period or offset for interval type\&. 
.RE
.PP
\fBReturns\fP
.RS 4
uint64_t Normalized time-into-interval period or offset in seconds\&. 
.RE
.PP

.SS "esp_err_t time_into_interval_set_epoch_timestamp_event (const \fBtime_into_interval_types_t\fP interval_type, const uint16_t interval_period, const uint16_t interval_offset, uint64_t * epoch_timestamp)"

.PP
Sets the next epoch event timestamp in milli-seconds from system clock based on the time interval type, period, and offset\&. The interval should be divisible by 60 i\&.e\&. no remainder if the interval type and period is every 10-seconds, the event will trigger on-time with the system clock i\&.e\&. 09:00:00, 09:00:10, 09:00:20, etc\&.

.PP
The interval offset is used to offset the start of the interval period\&. If the interval type and period is every 5-minutes with a 1-minute offset, the event will trigger on-time with the system clock i\&.e\&. 09:01:00, 09:06:00, 09:11:00, etc\&.

.PP
\fBParameters\fP
.RS 4
\fIinterval_type\fP Time into interval type (seconds, minutes, hours, etc\&.)\&. 
.br
\fIinterval_period\fP Time into interval period for interval type\&. 
.br
\fIinterval_offset\fP Time into interval offset for interval type\&. 
.br
\fIepoch_timestamp\fP Unix epoch timestamp (UTC) of next event in milli-seconds\&. 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for ESP-IDF Components by K0I05 from the source code\&.
