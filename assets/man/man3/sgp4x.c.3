.TH "components/peripherals/i2c/esp_sgp4x/sgp4x.c" 3 "ESP-IDF Components by K0I05" \" -*- nroff -*-
.ad l
.nh
.SH NAME
components/peripherals/i2c/esp_sgp4x/sgp4x.c
.SH SYNOPSIS
.br
.PP
\fR#include 'include/sgp4x\&.h'\fP
.br
\fR#include <string\&.h>\fP
.br
\fR#include <stdio\&.h>\fP
.br
\fR#include <math\&.h>\fP
.br
\fR#include <esp_log\&.h>\fP
.br
\fR#include <esp_check\&.h>\fP
.br
\fR#include <esp_timer\&.h>\fP
.br
\fR#include <freertos/FreeRTOS\&.h>\fP
.br
\fR#include <freertos/task\&.h>\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBSGP4X_CRC8_G_POLYNOM\fP   UINT8_C(0x31)"
.br
.RI "sgp4x I2C CRC8 polynomial "
.ti -1c
.RI "#define \fBSGP4X_CMD_RESET\fP   UINT16_C(0x0006)"
.br
.ti -1c
.RI "#define \fBSGP4X_CMD_RESET_\fP   UINT8_C(0x06)"
.br
.RI "sgp4x I2C soft-reset command - for some reason this is an 1-byte command "
.ti -1c
.RI "#define \fBSGP4X_CMD_SERIAL_NUMBER\fP   UINT16_C(0x3682)"
.br
.RI "sgp4x I2C serial number request command "
.ti -1c
.RI "#define \fBSGP4X_CMD_EXEC_CONDITIONING\fP   UINT16_C(0x2612)"
.br
.RI "sgp4x I2C "
.ti -1c
.RI "#define \fBSGP4X_CMD_MEAS_RAW_SIGNALS\fP   UINT16_C(0x2619)"
.br
.RI "sgp4x I2C "
.ti -1c
.RI "#define \fBSGP4X_CMD_EXEC_SELF_TEST\fP   UINT16_C(0x280e)"
.br
.RI "sgp4x I2C "
.ti -1c
.RI "#define \fBSGP4X_CMD_TURN_HEATER_OFF\fP   UINT16_C(0x3615)"
.br
.RI "sgp4x I2C "
.ti -1c
.RI "#define \fBSGP4X_HUMIDITY_COMP_DEFAULT\fP   (float)(50\&.0)"
.br
.ti -1c
.RI "#define \fBSGP4X_TEMPERATURE_COMP_DEFAULT\fP   (float)(25\&.0)"
.br
.ti -1c
.RI "#define \fBSGP4X_TEMPERATURE_MAX\fP   (float)(130\&.0)"
.br
.ti -1c
.RI "#define \fBSGP4X_TEMPERATURE_MIN\fP   (float)(\-45\&.0)"
.br
.ti -1c
.RI "#define \fBSGP4X_HUMIDITY_MAX\fP   (float)(100\&.0)"
.br
.ti -1c
.RI "#define \fBSGP4X_HUMIDITY_MIN\fP   (float)(0\&.0)"
.br
.ti -1c
.RI "#define \fBSGP4X_CONDITIONING_TIMEOUT_MS\fP   UINT16_C(1000)"
.br
.ti -1c
.RI "#define \fBSGP4X_POWERUP_DELAY_MS\fP   UINT16_C(10)"
.br
.ti -1c
.RI "#define \fBSGP4X_APPSTART_DELAY_MS\fP   UINT16_C(10)"
.br
.ti -1c
.RI "#define \fBSGP4X_CMD_DELAY_MS\fP   UINT16_C(5)"
.br
.ti -1c
.RI "#define \fBSGP4X_RETRY_DELAY_MS\fP   UINT16_C(2)"
.br
.ti -1c
.RI "#define \fBESP_ARG_CHECK\fP(VAL)"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "esp_err_t \fBsgp4x_init\fP (i2c_master_bus_handle_t master_handle, const \fBsgp4x_config_t\fP *sgp4x_config, \fBsgp4x_handle_t\fP *sgp4x_handle)"
.br
.RI "Initializes an SGP4X device onto the I2C master bus\&. "
.ti -1c
.RI "esp_err_t \fBsgp4x_execute_compensated_conditioning\fP (\fBsgp4x_handle_t\fP handle, const float temperature, const float humidity, uint16_t *sraw_voc)"
.br
.RI "Starts the conditioning with temperature and humidity compensation, i\&.e\&., the VOC pixel will be operated at the same temperature as it is by calling the sgp41_measure_raw_signals function while the NOx pixel will be operated at a different temperature for conditioning\&. The conditioning should be ran when the device is initially powered for 10-seconds but do not run the conditioning longer than 10-seconds, otherwise damage may occur to the SGP4X\&. "
.ti -1c
.RI "esp_err_t \fBsgp4x_execute_conditioning\fP (\fBsgp4x_handle_t\fP handle, uint16_t *sraw_voc)"
.br
.RI "Starts the conditioning, i\&.e\&., the VOC pixel will be operated at the same temperature as it is by calling the sgp41_measure_raw_signals function while the NOx pixel will be operated at a different temperature for conditioning\&. The conditioning should be ran when the device is initially powered for 10-seconds but do not run the conditioning longer than 10-seconds, otherwise damage may occur to the SGP4X\&. "
.ti -1c
.RI "esp_err_t \fBsgp4x_measure_compensated_signals\fP (\fBsgp4x_handle_t\fP handle, const float temperature, const float humidity, uint16_t *sraw_voc, uint16_t *sraw_nox)"
.br
.RI "Starts and/or continues the VOC and NOX measurement mode with temperature and humidity compensation\&. "
.ti -1c
.RI "esp_err_t \fBsgp4x_measure_signals\fP (\fBsgp4x_handle_t\fP handle, uint16_t *sraw_voc, uint16_t *sraw_nox)"
.br
.RI "Starts and/or continues the VOC and NOX measurement mode using default temperature and humidity compensation\&. "
.ti -1c
.RI "esp_err_t \fBsgp4x_execute_self_test\fP (\fBsgp4x_handle_t\fP handle, sgp4x_self_test_result_t *const result)"
.br
.RI "Performs the built-in self-test that checks for integrity of both hotplate and MOX material\&. "
.ti -1c
.RI "esp_err_t \fBsgp4x_turn_heater_off\fP (\fBsgp4x_handle_t\fP handle)"
.br
.RI "Turns the hotplate off, stops the measurement, and SGP4X enters idle mode\&. "
.ti -1c
.RI "esp_err_t \fBsgp4x_reset\fP (\fBsgp4x_handle_t\fP handle)"
.br
.RI "Issues soft-reset and initializes SGP4X\&. See datasheet for details\&. "
.ti -1c
.RI "esp_err_t \fBsgp4x_remove\fP (\fBsgp4x_handle_t\fP handle)"
.br
.RI "Removes an SGP4X device from master bus\&. "
.ti -1c
.RI "esp_err_t \fBsgp4x_delete\fP (\fBsgp4x_handle_t\fP handle)"
.br
.RI "Removes an SGP4X device from master bus and frees handle\&. "
.ti -1c
.RI "const char * \fBsgp4x_get_fw_version\fP (void)"
.br
.RI "Converts SGP4X firmware version numbers (major, minor, patch) into a string\&. "
.ti -1c
.RI "int32_t \fBsgp4x_get_fw_version_number\fP (void)"
.br
.RI "Converts SGP4X firmware version numbers (major, minor, patch) into an integer value\&. "
.in -1c
.SH "Detailed Description"
.PP 
ESP-IDF driver for SGP4X sensor

.PP
Ported from esp-open-rtos

.PP
Copyright (c) 2024 Eric Gionet (gionet.c.eric@gmail.com)

.PP
MIT Licensed as described in the file LICENSE 
.SH "Macro Definition Documentation"
.PP 
.SS "#define ESP_ARG_CHECK( VAL)"
\fBValue:\fP
.nf
do { if (!(VAL)) return ESP_ERR_INVALID_ARG; } while (0)
.PP
.fi

.SS "#define SGP4X_APPSTART_DELAY_MS   UINT16_C(10)"
delay after initialization before application start-up 
.SS "#define SGP4X_CMD_DELAY_MS   UINT16_C(5)"
delay before attempting I2C transactions after a command is issued 
.SS "#define SGP4X_CONDITIONING_TIMEOUT_MS   UINT16_C(1000)"
conditioning timeout 1-sec, 10-sec in total and maximum 
.SH "Author"
.PP 
Generated automatically by Doxygen for ESP-IDF Components by K0I05 from the source code\&.
