.TH "components/storage/esp_nvs_ext Directory Reference" 3 "ESP-IDF Components by K0I05" \" -*- nroff -*-
.ad l
.nh
.SH NAME
components/storage/esp_nvs_ext Directory Reference
.SH SYNOPSIS
.br
.PP
.SS "Directories"

.in +1c
.ti -1c
.RI "directory \fBinclude\fP"
.br
.in -1c
.SS "Files"

.in +1c
.ti -1c
.RI "file \fBnvs_ext\&.c\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
\fR\fP \fR\fP \fR\fP \fR\fP \fR\fP \fR\fP \fR\fP \fR\fP

.PP
The NVS extension simplifies the process of reading and writing information to non-volatile storage\&. The NVS extension supports common data-types such as \fRuint8_t\fP to \fRuint64_t\fP, \fRint8_t\fP to \fRint64_t\fP, \fRfloat\fP and \fRdouble\fP, \fRstring\fP, and \fRstruct\fP\&. The library can be used as is but you can implement wrappers if the information will be stored to a common key to reference the key-value pairs\&.
.SH "Repository"
.PP
The component is hosted on github and is located here: https://github.com/K0I05/ESP32-S3_ESP-IDF_COMPONENTS/tree/b34d78b383ce366b4954c946b7181bafb1c9ebb3/components/storage/esp_nvs_ext
.SH "General Usage"
.PP
To get started, simply copy the component to your project's \fRcomponents\fP folder and reference the \fR\fBnvs_ext\&.h\fP\fP header file as an include\&. The component includes documentation for the peripheral such as the datasheet, application notes, and/or user manual where applicable\&.

.PP
.PP
.nf
components
└── esp_nvs_ext
    ├── CMakeLists\&.txt
    ├── README\&.md
    ├── LICENSE
    ├── idf_component\&.yml
    ├── library\&.json
    ├── documentation
    │   └── datasheets, etc\&.
    ├── include
    │   └── nvs_ext_version\&.h
    │   └── nvs_ext\&.h
    └── nvs_ext\&.c
.fi
.PP
.SH "Basic Example"
.PP
Once the component is referenced as an include, the extended i2c functions should be visible and available for usage\&. A wrapper example for a \fRstruct\fP data-type is presented below\&. The example uses a \fRstruct\fP to preserve system state information that is updated on system boot-up\&.

.PP
.PP
.nf
#include <nvs_ext\&.h>

/* System state structure */
typedef struct system_state_tag {
    uint16_t    reboot_counter;         
    uint64_t    reboot_timestamp;       
    uint64_t    system_uptime;          
} system_state_t;

/* global variables */
static system_state_t  *s_system_state = NULL;
.fi
.PP

.PP
The \fRstruct\fP wrapper functions are declared below using a common key named \fRsystem_state\fP\&.

.PP
.PP
.nf
static inline esp_err_t nvs_write_system_state(system_state_t *system_state) {
    return nvs_write_struct("system_state", system_state, sizeof(system_state_t));
}

static inline esp_err_t nvs_read_system_state(system_state_t **system_state) {
    return nvs_read_struct("system_state", (void **)system_state, sizeof(system_state_t));
}
.fi
.PP

.PP
The system state \fRstruct\fP is initialized and saved to NVS on system boot-up as shown below\&.

.PP
.PP
.nf
static inline void init_system_state(void) {
    s_system_state = (system_state_t*)calloc(1, sizeof(system_state_t));

    /* attempt to read system state structure from nvs */
    if(nvs_read_system_state(&s_system_state) != ESP_OK) {
        /* assume system state structure doesn't exist \- initialize attributes */
        s_system_state\->reboot_counter  += 1;
        s_system_state\->system_uptime    = time_into_interval_get_epoch_timestamp();
        s_system_state\->reboot_timestamp = time_into_interval_get_epoch_timestamp();
    } else {
        /* assume system state structure exists \- update attributes */
        s_system_state\->reboot_counter  += 1;
        s_system_state\->system_uptime    = time_into_interval_get_epoch_timestamp() \- s_system_state\->reboot_timestamp;
        s_system_state\->reboot_timestamp = time_into_interval_get_epoch_timestamp();
    }

    /* attempt to write system state structure to nvs */
    nvs_write_system_state(s_system_state);

    /* print system state structure */
    ESP_LOGW(TAG, "Boot Count: %u", s_system_state\->reboot_counter);
    ESP_LOGW(TAG, "Up\-Time:    %llu", s_system_state\->system_uptime);
    ESP_LOGW(TAG, "Timestamp:  %llu", s_system_state\->reboot_timestamp);
}
.fi
.PP

.PP
Copyright (c) 2024 Eric Gionet (gionet.c.eric@gmail.com) 
