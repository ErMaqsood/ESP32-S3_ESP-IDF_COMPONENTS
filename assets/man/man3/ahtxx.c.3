.TH "components/peripherals/i2c/esp_ahtxx/ahtxx.c" 3 "ESP-IDF Components by K0I05" \" -*- nroff -*-
.ad l
.nh
.SH NAME
components/peripherals/i2c/esp_ahtxx/ahtxx.c
.SH SYNOPSIS
.br
.PP
\fR#include 'include/ahtxx\&.h'\fP
.br
\fR#include <string\&.h>\fP
.br
\fR#include <stdio\&.h>\fP
.br
\fR#include <math\&.h>\fP
.br
\fR#include <esp_log\&.h>\fP
.br
\fR#include <esp_check\&.h>\fP
.br
\fR#include <esp_timer\&.h>\fP
.br
\fR#include <freertos/FreeRTOS\&.h>\fP
.br
\fR#include <freertos/task\&.h>\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBAHTXX_CRC8_MASK\fP   UINT8_C(0x80)"
.br
.ti -1c
.RI "#define \fBAHTXX_CRC8_INIT\fP   UINT8_C(0xff)"
.br
.ti -1c
.RI "#define \fBAHTXX_CRC8_POLYNOM\fP   UINT8_C(0x31)"
.br
.ti -1c
.RI "#define \fBAHTXX_STATUS_WORD\fP   UINT8_C(0x18)"
.br
.ti -1c
.RI "#define \fBAHTXX_REG_1B\fP   UINT8_C(0x1b)"
.br
.ti -1c
.RI "#define \fBAHTXX_REG_1C\fP   UINT8_C(0x1c)"
.br
.ti -1c
.RI "#define \fBAHTXX_REG_1E\fP   UINT8_C(0x1e)"
.br
.ti -1c
.RI "#define \fBAHTXX_CTRL_CALI\fP   UINT8_C(0x08)"
.br
.ti -1c
.RI "#define \fBAHTXX_CTRL_MEAS\fP   UINT8_C(0x33)"
.br
.ti -1c
.RI "#define \fBAHTXX_CTRL_NOP\fP   UINT8_C(0x00)"
.br
.ti -1c
.RI "#define \fBAHTXX_CMD_AHT10_INIT\fP   UINT8_C(0xe1)"
.br
.ti -1c
.RI "#define \fBAHTXX_CMD_AHT20_INIT\fP   UINT8_C(0xbe)"
.br
.ti -1c
.RI "#define \fBAHTXX_CMD_STATUS\fP   UINT8_C(0x71)"
.br
.ti -1c
.RI "#define \fBAHTXX_CMD_TRIGGER_MEAS\fP   UINT8_C(0xac)"
.br
.ti -1c
.RI "#define \fBAHTXX_CMD_RESET\fP   UINT8_C(0xba)"
.br
.ti -1c
.RI "#define \fBAHTXX_DATA_POLL_TIMEOUT_MS\fP   UINT16_C(100)"
.br
.ti -1c
.RI "#define \fBAHTXX_DATA_READY_DELAY_MS\fP   UINT16_C(2)"
.br
.ti -1c
.RI "#define \fBAHTXX_POWERUP_DELAY_MS\fP   UINT16_C(120)"
.br
.ti -1c
.RI "#define \fBAHTXX_RESET_DELAY_MS\fP   UINT16_C(25)"
.br
.ti -1c
.RI "#define \fBAHTXX_SETUP_DELAY_MS\fP   UINT16_C(15)"
.br
.ti -1c
.RI "#define \fBAHTXX_APPSTART_DELAY_MS\fP   UINT16_C(10)"
.br
.ti -1c
.RI "#define \fBAHTXX_RETRY_DELAY_MS\fP   UINT16_C(2)"
.br
.ti -1c
.RI "#define \fBAHTXX_CMD_DELAY_MS\fP   UINT16_C(5)"
.br
.ti -1c
.RI "#define \fBAHTXX_MEAS_PROC_DELAY_MS\fP   UINT16_C(80)"
.br
.ti -1c
.RI "#define \fBAHTXX_TX_RX_DELAY_MS\fP   UINT16_C(10)"
.br
.ti -1c
.RI "#define \fBESP_TIMEOUT_CHECK\fP(start,  len)"
.br
.ti -1c
.RI "#define \fBESP_ARG_CHECK\fP(VAL)"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "esp_err_t \fBahtxx_get_status_register\fP (\fBahtxx_handle_t\fP handle, ahtxx_status_register_t *const reg)"
.br
.RI "Reads status register from AHTXX\&. "
.ti -1c
.RI "esp_err_t \fBahtxx_init\fP (const i2c_master_bus_handle_t master_handle, const \fBahtxx_config_t\fP *ahtxx_config, \fBahtxx_handle_t\fP *const ahtxx_handle)"
.br
.RI "Initializes an AHTXX device onto the I2C master bus\&. "
.ti -1c
.RI "esp_err_t \fBahtxx_get_measurement\fP (\fBahtxx_handle_t\fP handle, float *const temperature, float *const humidity)"
.br
.RI "Reads temperature and relative humidity from AHTXX\&. "
.ti -1c
.RI "esp_err_t \fBahtxx_get_measurements\fP (\fBahtxx_handle_t\fP handle, float *const temperature, float *const humidity, float *const dewpoint)"
.br
.RI "Similar to \fRi2c_aht2x_read_measurement\fP but it includes dewpoint in the results\&. "
.ti -1c
.RI "esp_err_t \fBahtxx_get_busy_status\fP (\fBahtxx_handle_t\fP handle, bool *const busy)"
.br
.RI "Reads busy status flag from AHTXX\&. "
.ti -1c
.RI "esp_err_t \fBahtxx_get_calibration_status\fP (\fBahtxx_handle_t\fP handle, bool *const calibrated)"
.br
.RI "Reads calibration status flag from AHTXX\&. "
.ti -1c
.RI "esp_err_t \fBahtxx_get_status\fP (\fBahtxx_handle_t\fP handle, bool *const busy, bool *const calibrated)"
.br
.RI "Reads busy and calibrated status flags from AHTXX\&. "
.ti -1c
.RI "esp_err_t \fBahtxx_reset\fP (\fBahtxx_handle_t\fP handle)"
.br
.RI "Issues soft-reset and initializes AHTXX\&. See datasheet for details\&. "
.ti -1c
.RI "esp_err_t \fBahtxx_remove\fP (\fBahtxx_handle_t\fP handle)"
.br
.RI "Removes an AHTXX device from master bus\&. "
.ti -1c
.RI "esp_err_t \fBahtxx_delete\fP (\fBahtxx_handle_t\fP handle)"
.br
.RI "Removes an AHTXX device from master bus and frees handle\&. "
.ti -1c
.RI "const char * \fBahtxx_get_fw_version\fP (void)"
.br
.RI "Converts AHTXX firmware version numbers (major, minor, patch, build) into a string\&. "
.ti -1c
.RI "int32_t \fBahtxx_get_fw_version_number\fP (void)"
.br
.RI "Converts AHTXX firmware version numbers (major, minor, patch) into an integer value\&. "
.in -1c
.SH "Detailed Description"
.PP 
ESP-IDF driver for AHTXX temperature and humidity sensor

.PP
https://github.com/libdriver/aht30/blob/main/src/driver_aht30.c

.PP
Ported from esp-open-rtos

.PP
Copyright (c) 2024 Eric Gionet (gionet.c.eric@gmail.com)

.PP
MIT Licensed as described in the file LICENSE 
.SH "Macro Definition Documentation"
.PP 
.SS "#define AHTXX_APPSTART_DELAY_MS   UINT16_C(10)"
ahtxx delay after initialization before application start-up 
.SS "#define AHTXX_CMD_AHT10_INIT   UINT8_C(0xe1)"
aht10 initialization command + 0x08 + 0x00 
.SS "#define AHTXX_CMD_AHT20_INIT   UINT8_C(0xbe)"
aht20 initialization command + 0x08 + 0x00 
.SS "#define AHTXX_CMD_DELAY_MS   UINT16_C(5)"
ahtxx delay before attempting command transactions after a command is issued 
.SS "#define AHTXX_CMD_RESET   UINT8_C(0xba)"
ahtxx soft-reset command 
.SS "#define AHTXX_CMD_STATUS   UINT8_C(0x71)"
ahtxx status register command 
.SS "#define AHTXX_CMD_TRIGGER_MEAS   UINT8_C(0xac)"
ahtxx measurement trigger command + 0x33 + 0x00 
.SS "#define AHTXX_CRC8_INIT   UINT8_C(0xff)"
ahtxx CRC8 initialization 
.SS "#define AHTXX_CRC8_MASK   UINT8_C(0x80)"
dependency includes constant definitions ahtxx CRC8 mask 
.SS "#define AHTXX_CRC8_POLYNOM   UINT8_C(0x31)"
ahtxx CRC8 polynomial 
.SS "#define AHTXX_MEAS_PROC_DELAY_MS   UINT16_C(80)"
ahtxx delay before attempting read transaction after a measurement trigger command is issued 
.SS "#define AHTXX_RETRY_DELAY_MS   UINT16_C(2)"
ahtxx delay between an I2C receive transaction retry 
.SS "#define AHTXX_STATUS_WORD   UINT8_C(0x18)"
ahtxx initialization status word (default) 
.SS "#define AHTXX_TX_RX_DELAY_MS   UINT16_C(10)"
ahtxx delay after attempting a transmit transaction and attempting a receive transaction 
.SS "#define ESP_ARG_CHECK( VAL)"
\fBValue:\fP
.nf
do { if (!(VAL)) return ESP_ERR_INVALID_ARG; } while (0)
.PP
.fi

.SS "#define ESP_TIMEOUT_CHECK( start,  len)"
\fBValue:\fP
.nf
((uint64_t)(esp_timer_get_time() \- (start)) >= (len))
.PP
.fi
macro definitions 
.SH "Author"
.PP 
Generated automatically by Doxygen for ESP-IDF Components by K0I05 from the source code\&.
