.TH "components/utilities/esp_uuid/uuid.c" 3 "ESP-IDF Components by K0I05" \" -*- nroff -*-
.ad l
.nh
.SH NAME
components/utilities/esp_uuid/uuid.c
.SH SYNOPSIS
.br
.PP
\fR#include 'include/uuid\&.h'\fP
.br
\fR#include <string\&.h>\fP
.br
\fR#include <stdio\&.h>\fP
.br
\fR#include <stdarg\&.h>\fP
.br
\fR#include <esp_timer\&.h>\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBUUID_ARGS_SIZE\fP   2"
.br
.ti -1c
.RI "#define \fBUUID_RANDOM_SIZE\fP   4"
.br
.ti -1c
.RI "#define \fBUUID_BUFFER_SIZE\fP   37"
.br
.ti -1c
.RI "#define \fBUUID_HASH_MAX_SIZE\fP   60"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBuuid_init\fP (void)"
.br
.RI "Initialize UUID generator with default seed values from hash algorithm\&. "
.ti -1c
.RI "void \fBuuid_seed\fP (uint8_t size,\&.\&.\&.)"
.br
.RI "Seed the UUID generator with a variable number of arguments\&. The total number of arguments must be between 1 and 2\&. Otherwise, the generator will be seeded with default values (1 and 2)\&. "
.ti -1c
.RI "const char * \fBuuid_generate\fP (void)"
.br
.RI "Generate a UUID (i\&.e\&. d29b226d-04b5-e3ae-cd63-e6ec0d5611ab)\&. "
.ti -1c
.RI "void \fBuuid_set_mode\fP (const \fBuuid_modes_t\fP mode)"
.br
.RI "Set the UUID mode to either variant-4 or random\&. "
.ti -1c
.RI "\fBuuid_modes_t\fP \fBuuid_get_mode\fP (void)"
.br
.RI "Get the current UUID mode\&. "
.ti -1c
.RI "const char * \fBuuid_get_fw_version\fP (void)"
.br
.RI "Converts \fRuuid\fP firmware version numbers (major, minor, patch) into a string\&. "
.ti -1c
.RI "int32_t \fBuuid_get_fw_version_number\fP (void)"
.br
.RI "Converts \fRuuid\fP firmware version numbers (major, minor, patch) into an integer value\&. "
.in -1c
.SH "Detailed Description"
.PP 
ESP-IDF UUID generator

.PP
Motivated by: https://github.com/RobTillaart/UUID/blob/master/README.md

.PP
Copyright (c) 2024 Eric Gionet (gionet.c.eric@gmail.com)

.PP
MIT Licensed as described in the file LICENSE 
.SH "Author"
.PP 
Generated automatically by Doxygen for ESP-IDF Components by K0I05 from the source code\&.
