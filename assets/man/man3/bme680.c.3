.TH "components/peripherals/i2c/esp_bme680/bme680.c" 3 "ESP-IDF Components by K0I05" \" -*- nroff -*-
.ad l
.nh
.SH NAME
components/peripherals/i2c/esp_bme680/bme680.c
.SH SYNOPSIS
.br
.PP
\fR#include 'include/bme680\&.h'\fP
.br
\fR#include <string\&.h>\fP
.br
\fR#include <stdio\&.h>\fP
.br
\fR#include <math\&.h>\fP
.br
\fR#include <sdkconfig\&.h>\fP
.br
\fR#include <esp_types\&.h>\fP
.br
\fR#include <esp_log\&.h>\fP
.br
\fR#include <esp_check\&.h>\fP
.br
\fR#include <esp_timer\&.h>\fP
.br
\fR#include <freertos/FreeRTOS\&.h>\fP
.br
\fR#include <freertos/task\&.h>\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBBME680_REG_STATUS0\fP   UINT8_C(0x1D)"
.br
.ti -1c
.RI "#define \fBBME680_REG_RESET\fP   UINT8_C(0xE0)"
.br
.ti -1c
.RI "#define \fBBME680_REG_ID\fP   UINT8_C(0xD0)"
.br
.ti -1c
.RI "#define \fBBME680_REG_CONFIG\fP   UINT8_C(0x75)"
.br
.ti -1c
.RI "#define \fBBME680_REG_CTRL_MEAS\fP   UINT8_C(0x74)"
.br
.ti -1c
.RI "#define \fBBME680_REG_CTRL_HUMI\fP   UINT8_C(0x72)"
.br
.ti -1c
.RI "#define \fBBME680_REG_CTRL_GAS1\fP   UINT8_C(0x71)"
.br
.ti -1c
.RI "#define \fBBME680_REG_CTRL_GAS0\fP   UINT8_C(0x70)"
.br
.ti -1c
.RI "#define \fBBME680_REG_GAS_WAIT\fP   UINT8_C(0x64)"
.br
.ti -1c
.RI "#define \fBBME680_REG_RES_HEAT\fP   UINT8_C(0x5A)"
.br
.ti -1c
.RI "#define \fBBME680_REG_IDAC_HEAT\fP   UINT8_C(0x50)"
.br
.ti -1c
.RI "#define \fBBME680_REG_GAS_R_LSB\fP   UINT8_C(0x2B)"
.br
.ti -1c
.RI "#define \fBBME680_REG_GAS_R_MSB\fP   UINT8_C(0x2A)"
.br
.ti -1c
.RI "#define \fBBME680_REG_GAS_R\fP   UINT8_C(BME680_REG_GAS_R_MSB)"
.br
.ti -1c
.RI "#define \fBBME680_REG_HUMI_LSB\fP   UINT8_C(0x26)"
.br
.ti -1c
.RI "#define \fBBME680_REG_HUMI_MSB\fP   UINT8_C(0x25)"
.br
.ti -1c
.RI "#define \fBBME680_REG_HUMI\fP   UINT8_C(BME680_REG_HUMI_MSB)"
.br
.ti -1c
.RI "#define \fBBME680_REG_TEMP_XLSB\fP   UINT8_C(0x24)"
.br
.ti -1c
.RI "#define \fBBME680_REG_TEMP_LSB\fP   UINT8_C(0x23)"
.br
.ti -1c
.RI "#define \fBBME680_REG_TEMP_MSB\fP   UINT8_C(0x22)"
.br
.ti -1c
.RI "#define \fBBME680_REG_TEMP\fP   UINT8_C(BME680_REG_TEMP_MSB)"
.br
.ti -1c
.RI "#define \fBBME680_REG_PRESS_XLSB\fP   UINT8_C(0x21)"
.br
.ti -1c
.RI "#define \fBBME680_REG_PRESS_LSB\fP   UINT8_C(0x20)"
.br
.ti -1c
.RI "#define \fBBME680_REG_PRESS_MSB\fP   UINT8_C(0x1F)"
.br
.ti -1c
.RI "#define \fBBME680_REG_PRESS\fP   UINT8_C(BME680_REG_PRESS_MSB)"
.br
.ti -1c
.RI "#define \fBBME680_RESET_VALUE\fP   UINT8_C(0xB6)"
.br
.ti -1c
.RI "#define \fBBME680_REG_SHD_HEATR_DUR\fP   UINT8_C(0x6E)  /* Shared heating duration address */"
.br
.ti -1c
.RI "#define \fBBME680_REG_VARIANT_ID\fP   UINT8_C(0xF0)"
.br
.ti -1c
.RI "#define \fBBME680_VARIANT_GAS_LOW\fP   UINT8_C(0x00)  /* Low Gas variant */"
.br
.ti -1c
.RI "#define \fBBME680_VARIANT_GAS_HIGH\fP   UINT8_C(0x01)  /* High Gas variant */"
.br
.ti -1c
.RI "#define \fBBME680_ENABLE_GAS_MEAS_L\fP   UINT8_C(0x01) /* Enable gas measurement low */"
.br
.ti -1c
.RI "#define \fBBME680_ENABLE_GAS_MEAS_H\fP   UINT8_C(0x02) /* Enable gas measurement high */"
.br
.ti -1c
.RI "#define \fBBME680_REG_MEAS_STATUS_1\fP   UINT8_C(0x2e)"
.br
.ti -1c
.RI "#define \fBBME680_REG_MEAS_INDEX_1\fP   UINT8_C(0x2f)"
.br
.ti -1c
.RI "#define \fBBME680_REG_MEAS_STATUS_2\fP   UINT8_C(0x3f)"
.br
.ti -1c
.RI "#define \fBBME680_REG_MEAS_INDEX_2\fP   UINT8_C(0x40)"
.br
.ti -1c
.RI "#define \fBBME680_CHIP_ID\fP   UINT8_C(0x61)"
.br
.ti -1c
.RI "#define \fBBME680_AQI_TEMP_CORR\fP   (\-3)"
.br
.ti -1c
.RI "#define \fBBME680_DATA_POLL_TIMEOUT_MS\fP   UINT16_C(250)"
.br
.ti -1c
.RI "#define \fBBME680_DATA_READY_DELAY_MS\fP   UINT16_C(1)"
.br
.ti -1c
.RI "#define \fBBME680_POWERUP_DELAY_MS\fP   UINT16_C(25)"
.br
.ti -1c
.RI "#define \fBBME680_APPSTART_DELAY_MS\fP   UINT16_C(25)"
.br
.ti -1c
.RI "#define \fBBME680_RESET_DELAY_MS\fP   UINT16_C(25)"
.br
.ti -1c
.RI "#define \fBBME680_CMD_DELAY_MS\fP   UINT16_C(5)"
.br
.ti -1c
.RI "#define \fBBME680_TX_RX_DELAY_MS\fP   UINT16_C(10)"
.br
.ti -1c
.RI "#define \fBESP_TIMEOUT_CHECK\fP(start,  len)"
.br
.ti -1c
.RI "#define \fBESP_ARG_CHECK\fP(VAL)"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "esp_err_t \fBbme680_get_chip_id_register\fP (\fBbme680_handle_t\fP handle, uint8_t *const reg)"
.br
.RI "Reads chip identification register from BME680\&. "
.ti -1c
.RI "esp_err_t \fBbme680_get_variant_id_register\fP (\fBbme680_handle_t\fP handle, uint8_t *const reg)"
.br
.RI "Reads variant identification register from BME680\&. "
.ti -1c
.RI "esp_err_t \fBbme680_get_status0_register\fP (\fBbme680_handle_t\fP handle, bme680_status0_register_t *const reg)"
.br
.RI "Reads status register from BME680\&. "
.ti -1c
.RI "esp_err_t \fBbme680_get_gas_lsb_register\fP (\fBbme680_handle_t\fP handle, bme680_gas_lsb_register_t *const reg)"
.br
.RI "Reads gas resistance LSB register from BME680\&. "
.ti -1c
.RI "esp_err_t \fBbme680_set_gas_lsb_register\fP (\fBbme680_handle_t\fP handle, const bme680_gas_lsb_register_t reg)"
.br
.RI "Writes gas resistance LSB register to BME680\&. "
.ti -1c
.RI "esp_err_t \fBbme680_get_control_measurement_register\fP (\fBbme680_handle_t\fP handle, bme680_control_measurement_register_t *const reg)"
.br
.RI "Reads control measurement register from BME680\&. "
.ti -1c
.RI "esp_err_t \fBbme680_set_control_measurement_register\fP (\fBbme680_handle_t\fP handle, const bme680_control_measurement_register_t reg)"
.br
.RI "Writes control measurement register to BME680\&. "
.ti -1c
.RI "esp_err_t \fBbme680_get_control_humidity_register\fP (\fBbme680_handle_t\fP handle, bme680_control_humidity_register_t *const reg)"
.br
.RI "Reads control humidity register from BME680\&. "
.ti -1c
.RI "esp_err_t \fBbme680_set_control_humidity_register\fP (\fBbme680_handle_t\fP handle, const bme680_control_humidity_register_t reg)"
.br
.RI "Writes control humidity register to BME680\&. "
.ti -1c
.RI "esp_err_t \fBbme680_get_control_gas0_register\fP (\fBbme680_handle_t\fP handle, bme680_control_gas0_register_t *const reg)"
.br
.RI "Reads control gas 0 register from BME680\&. "
.ti -1c
.RI "esp_err_t \fBbme680_set_control_gas0_register\fP (\fBbme680_handle_t\fP handle, const bme680_control_gas0_register_t reg)"
.br
.RI "Writes control gas 0 register to BME680\&. "
.ti -1c
.RI "esp_err_t \fBbme680_get_control_gas1_register\fP (\fBbme680_handle_t\fP handle, bme680_control_gas1_register_t *const reg)"
.br
.RI "Reads control gas 1 register from BME680\&. "
.ti -1c
.RI "esp_err_t \fBbme680_set_control_gas1_register\fP (\fBbme680_handle_t\fP handle, const bme680_control_gas1_register_t reg)"
.br
.RI "Writes control gas 1 register to BME680\&. "
.ti -1c
.RI "esp_err_t \fBbme680_get_configuration_register\fP (\fBbme680_handle_t\fP handle, bme680_config_register_t *const reg)"
.br
.RI "Reads configuration register from BME680\&. "
.ti -1c
.RI "esp_err_t \fBbme680_set_configuration_register\fP (\fBbme680_handle_t\fP handle, const bme680_config_register_t reg)"
.br
.RI "Writes configuration register to BME680\&. "
.ti -1c
.RI "esp_err_t \fBbme680_init\fP (i2c_master_bus_handle_t master_handle, const \fBbme680_config_t\fP *bme680_config, \fBbme680_handle_t\fP *bme680_handle)"
.br
.RI "Initializes an BME680 device onto the master bus\&. "
.ti -1c
.RI "char * \fBbme680_air_quality_to_string\fP (float iaq_score)"
.br
.RI "Air quality as a string based on the IAQ score\&. "
.ti -1c
.RI "esp_err_t \fBbme680_get_adc_signals\fP (\fBbme680_handle_t\fP handle, \fBbme680_adc_data_t\fP *const data)"
.br
.RI "Reads humidity, temperature, and pressure ADC signals from BME680\&. "
.ti -1c
.RI "esp_err_t \fBbme680_get_data\fP (\fBbme680_handle_t\fP handle, \fBbme680_data_t\fP *const data)"
.br
.RI "Reads humidity, temperature, and pressure measurements from BME680\&. "
.ti -1c
.RI "esp_err_t \fBbme680_get_data_status\fP (\fBbme680_handle_t\fP handle, bool *const ready)"
.br
.RI "Reads data status of the BME680\&. "
.ti -1c
.RI "esp_err_t \fBbme680_get_gas_measurement_index\fP (\fBbme680_handle_t\fP handle, uint8_t *const index)"
.br
.RI "Reads gas measurement index from the BME680\&. "
.ti -1c
.RI "esp_err_t \fBbme680_get_power_mode\fP (\fBbme680_handle_t\fP handle, \fBbme680_power_modes_t\fP *const power_mode)"
.br
.RI "Reads power mode setting from the BME680\&. "
.ti -1c
.RI "esp_err_t \fBbme680_set_power_mode\fP (\fBbme680_handle_t\fP handle, const \fBbme680_power_modes_t\fP power_mode)"
.br
.RI "Writes power mode setting to BME680\&. See datasheet, section 3\&.6, table 10\&. "
.ti -1c
.RI "esp_err_t \fBbme680_get_pressure_oversampling\fP (\fBbme680_handle_t\fP handle, \fBbme680_pressure_oversampling_t\fP *const oversampling)"
.br
.RI "Reads pressure oversampling setting from BME680\&. "
.ti -1c
.RI "esp_err_t \fBbme680_set_pressure_oversampling\fP (\fBbme680_handle_t\fP handle, const \fBbme680_pressure_oversampling_t\fP oversampling)"
.br
.RI "Writes pressure oversampling setting to BME680\&. See datasheet, section 3\&.3\&.1, table 4\&. "
.ti -1c
.RI "esp_err_t \fBbme680_get_temperature_oversampling\fP (\fBbme680_handle_t\fP handle, \fBbme680_temperature_oversampling_t\fP *const oversampling)"
.br
.RI "Reads temperature oversampling setting from BME680\&. "
.ti -1c
.RI "esp_err_t \fBbme680_set_temperature_oversampling\fP (\fBbme680_handle_t\fP handle, const \fBbme680_temperature_oversampling_t\fP oversampling)"
.br
.RI "Writes temperature oversampling setting to BME680\&. See datasheet, section 3\&.3\&.1, table 4\&. "
.ti -1c
.RI "esp_err_t \fBbme680_get_humidity_oversampling\fP (\fBbme680_handle_t\fP handle, \fBbme680_humidity_oversampling_t\fP *const oversampling)"
.br
.RI "Reads humidity oversampling setting from BME680\&. "
.ti -1c
.RI "esp_err_t \fBbme680_set_humidity_oversampling\fP (\fBbme680_handle_t\fP handle, const \fBbme680_humidity_oversampling_t\fP oversampling)"
.br
.RI "Writes humidity oversampling setting to BME680\&. See datasheet, section 3\&.3\&.1, table 4\&. "
.ti -1c
.RI "esp_err_t \fBbme680_get_iir_filter\fP (\fBbme680_handle_t\fP handle, \fBbme680_iir_filters_t\fP *const iir_filter)"
.br
.RI "Reads IIR filter setting from BME680\&. "
.ti -1c
.RI "esp_err_t \fBbme680_set_iir_filter\fP (\fBbme680_handle_t\fP handle, const \fBbme680_iir_filters_t\fP iir_filter)"
.br
.RI "Writes IIR filter setting to BME680\&. See datasheet, section 3\&.4, table 7\&. "
.ti -1c
.RI "esp_err_t \fBbme680_reset\fP (\fBbme680_handle_t\fP handle)"
.br
.RI "Issues soft-reset sensor and initializes registers for BME680\&. "
.ti -1c
.RI "esp_err_t \fBbme680_remove\fP (\fBbme680_handle_t\fP handle)"
.br
.RI "Removes an BME680 device from master bus\&. "
.ti -1c
.RI "esp_err_t \fBbme680_delete\fP (\fBbme680_handle_t\fP handle)"
.br
.RI "Removes an BME680 device from master bus and frees handle\&. "
.ti -1c
.RI "const char * \fBbme680_get_fw_version\fP (void)"
.br
.RI "Converts BME680 firmware version numbers (major, minor, patch, build) into a string\&. "
.ti -1c
.RI "int32_t \fBbme680_get_fw_version_number\fP (void)"
.br
.RI "Converts BME680 firmware version numbers (major, minor, patch) into an integer value\&. "
.in -1c
.SH "Detailed Description"
.PP 
ESP-IDF driver for BME680 temperature, humidity, pressure, and gas sensor

.PP
Ported from esp-open-rtos

.PP
https://github.com/boschsensortec/BME68x_SensorAPI/blob/master/bme68x.c

.PP
iaq: https://github.com/3KUdelta/heltec_wifi_kit_32_BME680/blob/master/Wifi_Kit_32_BME680.ino

.PP
Copyright (c) 2024 Eric Gionet (gionet.c.eric@gmail.com)

.PP
MIT Licensed as described in the file LICENSE 
.SH "Macro Definition Documentation"
.PP 
.SS "#define BME680_REG_GAS_WAIT   UINT8_C(0x64)"
gas_wait_x: 0x64 to 0x6D 
.SS "#define BME680_REG_IDAC_HEAT   UINT8_C(0x50)"
idac_heat_x: 0x50 to 0x59 
.SS "#define BME680_REG_RES_HEAT   UINT8_C(0x5A)"
res_heat_x: 0x5A to 0x63 
.SS "#define BME680_REG_RESET   UINT8_C(0xE0)"
reset value: 0xB6 
.SS "#define BME680_REG_STATUS0   UINT8_C(0x1D)"
possible BME680 registers 
.SS "#define ESP_ARG_CHECK( VAL)"
\fBValue:\fP
.nf
do { if (!(VAL)) return ESP_ERR_INVALID_ARG; } while (0)
.PP
.fi

.SS "#define ESP_TIMEOUT_CHECK( start,  len)"
\fBValue:\fP
.nf
((uint64_t)(esp_timer_get_time() \- (start)) >= (len))
.PP
.fi

.SH "Author"
.PP 
Generated automatically by Doxygen for ESP-IDF Components by K0I05 from the source code\&.
