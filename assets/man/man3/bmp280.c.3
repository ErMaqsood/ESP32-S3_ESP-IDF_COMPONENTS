.TH "components/peripherals/i2c/esp_bmp280/bmp280.c" 3 "ESP-IDF Components by K0I05" \" -*- nroff -*-
.ad l
.nh
.SH NAME
components/peripherals/i2c/esp_bmp280/bmp280.c
.SH SYNOPSIS
.br
.PP
\fR#include 'include/bmp280\&.h'\fP
.br
\fR#include <string\&.h>\fP
.br
\fR#include <stdio\&.h>\fP
.br
\fR#include <sdkconfig\&.h>\fP
.br
\fR#include <esp_types\&.h>\fP
.br
\fR#include <esp_log\&.h>\fP
.br
\fR#include <esp_check\&.h>\fP
.br
\fR#include <esp_timer\&.h>\fP
.br
\fR#include <freertos/FreeRTOS\&.h>\fP
.br
\fR#include <freertos/task\&.h>\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBBMP280_REG_TEMP_XLSB\fP   UINT8_C(0xFC)"
.br
.ti -1c
.RI "#define \fBBMP280_REG_TEMP_LSB\fP   UINT8_C(0xFB)"
.br
.ti -1c
.RI "#define \fBBMP280_REG_TEMP_MSB\fP   UINT8_C(0xFA)"
.br
.ti -1c
.RI "#define \fBBMP280_REG_TEMP\fP   (BMP280_REG_TEMP_MSB)"
.br
.ti -1c
.RI "#define \fBBMP280_REG_PRESS_XLSB\fP   UINT8_C(0xF9)"
.br
.ti -1c
.RI "#define \fBBMP280_REG_PRESS_LSB\fP   UINT8_C(0xF8)"
.br
.ti -1c
.RI "#define \fBBMP280_REG_PRESS_MSB\fP   UINT8_C(0xF7)"
.br
.ti -1c
.RI "#define \fBBMP280_REG_PRESSURE\fP   (BMP280_REG_PRESS_MSB)"
.br
.ti -1c
.RI "#define \fBBMP280_REG_CONFIG\fP   UINT8_C(0xF5)"
.br
.ti -1c
.RI "#define \fBBMP280_REG_CTRL\fP   UINT8_C(0xF4)"
.br
.ti -1c
.RI "#define \fBBMP280_REG_STATUS\fP   UINT8_C(0xF3)"
.br
.ti -1c
.RI "#define \fBBMP280_REG_CTRL_HUM\fP   UINT8_C(0xF2)"
.br
.ti -1c
.RI "#define \fBBMP280_REG_RESET\fP   UINT8_C(0xE0)"
.br
.ti -1c
.RI "#define \fBBMP280_REG_ID\fP   UINT8_C(0xD0)"
.br
.ti -1c
.RI "#define \fBBMP280_REG_CALIB\fP   UINT8_C(0x88)"
.br
.ti -1c
.RI "#define \fBBMP280_REG_HUM_CALIB\fP   UINT8_C(0x88)"
.br
.ti -1c
.RI "#define \fBBMP280_RESET_VALUE\fP   UINT8_C(0xB6)"
.br
.ti -1c
.RI "#define \fBBMP280_TYPE_BMP280\fP   UINT8_C(0x58)"
.br
.RI "BMP280\&. "
.ti -1c
.RI "#define \fBBMP280_TYPE_BME280\fP   UINT8_C(0x60)"
.br
.RI "BME280\&. "
.ti -1c
.RI "#define \fBBMP280_DATA_POLL_TIMEOUT_MS\fP   UINT16_C(250)"
.br
.ti -1c
.RI "#define \fBBMP280_DATA_READY_DELAY_MS\fP   UINT16_C(1)"
.br
.ti -1c
.RI "#define \fBBMP280_POWERUP_DELAY_MS\fP   UINT16_C(25)"
.br
.ti -1c
.RI "#define \fBBMP280_APPSTART_DELAY_MS\fP   UINT16_C(25)"
.br
.ti -1c
.RI "#define \fBBMP280_RESET_DELAY_MS\fP   UINT16_C(25)"
.br
.ti -1c
.RI "#define \fBBMP280_CMD_DELAY_MS\fP   UINT16_C(5)"
.br
.ti -1c
.RI "#define \fBBMP280_TX_RX_DELAY_MS\fP   UINT16_C(10)"
.br
.ti -1c
.RI "#define \fBESP_TIMEOUT_CHECK\fP(start,  len)"
.br
.ti -1c
.RI "#define \fBESP_ARG_CHECK\fP(VAL)"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "esp_err_t \fBbmp280_get_chip_id_register\fP (\fBbmp280_handle_t\fP handle, uint8_t *const reg)"
.br
.RI "Reads chip identification register from BMP280\&. "
.ti -1c
.RI "esp_err_t \fBbmp280_get_status_register\fP (\fBbmp280_handle_t\fP handle, bmp280_status_register_t *const reg)"
.br
.RI "Reads status register from BMP280\&. "
.ti -1c
.RI "esp_err_t \fBbmp280_get_control_measurement_register\fP (\fBbmp280_handle_t\fP handle, bmp280_control_measurement_register_t *const reg)"
.br
.RI "Reads control measurement register from BMP280\&. "
.ti -1c
.RI "esp_err_t \fBbmp280_set_control_measurement_register\fP (\fBbmp280_handle_t\fP handle, const bmp280_control_measurement_register_t reg)"
.br
.RI "Writes control measurement register to BMP280\&. "
.ti -1c
.RI "esp_err_t \fBbmp280_get_configuration_register\fP (\fBbmp280_handle_t\fP handle, bmp280_configuration_register_t *const reg)"
.br
.RI "Reads configuration register from BMP280\&. "
.ti -1c
.RI "esp_err_t \fBbmp280_set_configuration_register\fP (\fBbmp280_handle_t\fP handle, const bmp280_configuration_register_t reg)"
.br
.RI "Writes configuration register to BMP280\&. "
.ti -1c
.RI "esp_err_t \fBbmp280_init\fP (i2c_master_bus_handle_t master_handle, const \fBbmp280_config_t\fP *bmp280_config, \fBbmp280_handle_t\fP *bmp280_handle)"
.br
.RI "Initializes an BMP280 device onto the master bus\&. "
.ti -1c
.RI "esp_err_t \fBbmp280_get_measurements\fP (\fBbmp280_handle_t\fP handle, float *const temperature, float *const pressure)"
.br
.RI "Reads temperature and pressure measurements from BMP280\&. "
.ti -1c
.RI "esp_err_t \fBbmp280_get_temperature\fP (\fBbmp280_handle_t\fP handle, float *const temperature)"
.br
.RI "Reads temperature measurement from BMP280\&. "
.ti -1c
.RI "esp_err_t \fBbmp280_get_pressure\fP (\fBbmp280_handle_t\fP handle, float *const pressure)"
.br
.RI "Reads pressure measurement from BMP280\&. "
.ti -1c
.RI "esp_err_t \fBbmp280_get_data_status\fP (\fBbmp280_handle_t\fP handle, bool *const ready)"
.br
.RI "Reads data status from BMP280\&. "
.ti -1c
.RI "esp_err_t \fBbmp280_get_power_mode\fP (\fBbmp280_handle_t\fP handle, \fBbmp280_power_modes_t\fP *const power_mode)"
.br
.RI "Reads power mode setting from BMP280\&. "
.ti -1c
.RI "esp_err_t \fBbmp280_set_power_mode\fP (\fBbmp280_handle_t\fP handle, const \fBbmp280_power_modes_t\fP power_mode)"
.br
.RI "Writes power mode setting to the BMP280\&. See datasheet, section 3\&.6, table 10\&. "
.ti -1c
.RI "esp_err_t \fBbmp280_get_pressure_oversampling\fP (\fBbmp280_handle_t\fP handle, \fBbmp280_pressure_oversampling_t\fP *const oversampling)"
.br
.RI "Reads pressure oversampling setting from BMP280\&. "
.ti -1c
.RI "esp_err_t \fBbmp280_set_pressure_oversampling\fP (\fBbmp280_handle_t\fP handle, const \fBbmp280_pressure_oversampling_t\fP oversampling)"
.br
.RI "Writes pressure oversampling setting to BMP280\&. See datasheet, section 3\&.3\&.1, table 4\&. "
.ti -1c
.RI "esp_err_t \fBbmp280_get_temperature_oversampling\fP (\fBbmp280_handle_t\fP handle, \fBbmp280_temperature_oversampling_t\fP *const oversampling)"
.br
.RI "Reads temperature oversampling setting from BMP280\&. "
.ti -1c
.RI "esp_err_t \fBbmp280_set_temperature_oversampling\fP (\fBbmp280_handle_t\fP handle, const \fBbmp280_temperature_oversampling_t\fP oversampling)"
.br
.RI "Writes temperature oversampling setting to BMP280\&. See datasheet, section 3\&.3\&.1, table 4\&. "
.ti -1c
.RI "esp_err_t \fBbmp280_get_standby_time\fP (\fBbmp280_handle_t\fP handle, \fBbmp280_standby_times_t\fP *const standby_time)"
.br
.RI "Reads stand-by time setting from BMP280\&. "
.ti -1c
.RI "esp_err_t \fBbmp280_set_standby_time\fP (\fBbmp280_handle_t\fP handle, const \fBbmp280_standby_times_t\fP standby_time)"
.br
.RI "Writes stand-by time setting to BMP280\&. "
.ti -1c
.RI "esp_err_t \fBbmp280_get_iir_filter\fP (\fBbmp280_handle_t\fP handle, \fBbmp280_iir_filters_t\fP *const iir_filter)"
.br
.RI "Reads IIR filter setting to BMP280\&. "
.ti -1c
.RI "esp_err_t \fBbmp280_set_iir_filter\fP (\fBbmp280_handle_t\fP handle, const \fBbmp280_iir_filters_t\fP iir_filter)"
.br
.RI "Writes IIR filter setting to BMP280\&. See datasheet, section 3\&.4, table 7\&. "
.ti -1c
.RI "esp_err_t \fBbmp280_reset\fP (\fBbmp280_handle_t\fP handle)"
.br
.RI "Issues soft-reset sensor and initializes BMP280\&. "
.ti -1c
.RI "esp_err_t \fBbmp280_remove\fP (\fBbmp280_handle_t\fP handle)"
.br
.RI "Removes an BMP280 device from master bus\&. "
.ti -1c
.RI "esp_err_t \fBbmp280_delete\fP (\fBbmp280_handle_t\fP handle)"
.br
.RI "Removes an BMP280 device from master bus and frees handle\&. "
.ti -1c
.RI "const char * \fBbmp280_get_fw_version\fP (void)"
.br
.RI "Converts BMP280 firmware version numbers (major, minor, patch) into a string\&. "
.ti -1c
.RI "int32_t \fBbmp280_get_fw_version_number\fP (void)"
.br
.RI "Converts BMP280 firmware version numbers (major, minor, patch) into an integer value\&. "
.in -1c
.SH "Detailed Description"
.PP 
ESP-IDF driver for BMP280 temperature and pressure sensor

.PP
Ported from esp-open-rtos

.PP
Copyright (c) 2024 Eric Gionet (gionet.c.eric@gmail.com)

.PP
MIT Licensed as described in the file LICENSE

.PP
ESP-IDF driver for BMP390 temperature and pressure sensor

.PP
Ported from esp-open-rtos

.PP
Copyright (c) 2024 Eric Gionet (gionet.c.eric@gmail.com)

.PP
MIT Licensed as described in the file LICENSE 
.SH "Macro Definition Documentation"
.PP 
.SS "#define BMP280_REG_TEMP_XLSB   UINT8_C(0xFC)"
possible BMP280 registers 
.SS "#define ESP_ARG_CHECK( VAL)"
\fBValue:\fP
.nf
do { if (!(VAL)) return ESP_ERR_INVALID_ARG; } while (0)
.PP
.fi

.SS "#define ESP_TIMEOUT_CHECK( start,  len)"
\fBValue:\fP
.nf
((uint64_t)(esp_timer_get_time() \- (start)) >= (len))
.PP
.fi

.SH "Author"
.PP 
Generated automatically by Doxygen for ESP-IDF Components by K0I05 from the source code\&.
