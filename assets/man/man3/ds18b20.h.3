.TH "components/peripherals/owb/esp_ds18b20/include/ds18b20.h" 3 "ESP-IDF Components by K0I05" \" -*- nroff -*-
.ad l
.nh
.SH NAME
components/peripherals/owb/esp_ds18b20/include/ds18b20.h
.SH SYNOPSIS
.br
.PP
\fR#include <stdint\&.h>\fP
.br
\fR#include <stdbool\&.h>\fP
.br
\fR#include <esp_err\&.h>\fP
.br
\fR#include <onewire_bus\&.h>\fP
.br
\fR#include <onewire_device\&.h>\fP
.br
\fR#include 'ds18b20_version\&.h'\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBds18b20_config_s\fP"
.br
.RI "DS18B20 device configuration structure\&. "
.ti -1c
.RI "struct \fBds18b20_context_t\fP"
.br
.RI "DS18B20 context structure\&. "
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBOWB_DS18B20_CONFIG_DEFAULT\fP"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef enum \fBds18b20_resolutions_e\fP \fBds18b20_resolutions_t\fP"
.br
.RI "DS18B20 supported resolutions enumerator\&. "
.ti -1c
.RI "typedef struct \fBds18b20_config_s\fP \fBds18b20_config_t\fP"
.br
.RI "DS18B20 device configuration structure\&. "
.ti -1c
.RI "typedef struct ds18b20_context_t \fBds18b20_context_t\fP"
.br
.RI "DS18B20 context structure definition\&. "
.ti -1c
.RI "typedef struct \fBds18b20_context_t\fP * \fBds18b20_handle_t\fP"
.br
.RI "DS18B20 handle structure definition\&. "
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBds18b20_resolutions_e\fP { \fBDS18B20_RESOLUTION_9BIT\fP = 0b00, \fBDS18B20_RESOLUTION_10BIT\fP = 0b01, \fBDS18B20_RESOLUTION_11BIT\fP = 0b10, \fBDS18B20_RESOLUTION_12BIT\fP = 0b11 }"
.br
.RI "DS18B20 supported resolutions enumerator\&. "
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "union \fB__attribute__\fP ((packed)) ahtxx_status_register_u"
.br
.RI "AHTXX status register structure definition\&. "
.ti -1c
.RI "bool \fBods18b20_validate_address\fP (const onewire_device_address_t address)"
.br
.RI "Checks 1-wire device address against the ROM ID (i\&.e\&. family code of DS18B20 is 0x28) to determine if the device is a DS18B20\&. "
.ti -1c
.RI "esp_err_t \fBds18b20_detect\fP (\fBonewire_bus_handle_t\fP owb_handle, \fBonewire_device_t\fP *const devices, const uint8_t device_size, uint8_t *const device_count)"
.br
.RI "Detects up to 10 DS18B20 devices on the 1-wire bus\&. "
.ti -1c
.RI "esp_err_t \fBds18b20_connected\fP (\fBds18b20_handle_t\fP handle, bool *const connected)"
.br
.RI "Checks if the DS18B20 is connected to the 1-wire bus\&. "
.ti -1c
.RI "esp_err_t \fBds18b20_init\fP (\fBonewire_device_t\fP *device, const \fBds18b20_config_t\fP *ds18b20_config, \fBds18b20_handle_t\fP *ds18b20_handle)"
.br
.RI "Initializes an DS18B20 device onto the 1-wire master bus\&. "
.ti -1c
.RI "esp_err_t \fBds18b20_get_temperature\fP (\fBds18b20_handle_t\fP handle, float *const temperature)"
.br
.RI "Triggers temperature conversion and reads temperature from DS18B20\&. "
.ti -1c
.RI "esp_err_t \fBds18b20_get_measurement\fP (\fBds18b20_handle_t\fP handle, float *const temperature)"
.br
.RI "Reads temperature from DS18B20\&. "
.ti -1c
.RI "esp_err_t \fBds18b20_trigger_temperature_conversion\fP (\fBds18b20_handle_t\fP handle)"
.br
.RI "Triggers DS18B20 temperature conversion\&. This function must be called before reading the temperature from DS18B20\&. "
.ti -1c
.RI "esp_err_t \fBds18b20_get_resolution\fP (\fBds18b20_handle_t\fP handle, \fBds18b20_resolutions_t\fP *const resolution)"
.br
.RI "Reads temperature conversion resolution from DS18B20\&. "
.ti -1c
.RI "esp_err_t \fBds18b20_set_resolution\fP (\fBds18b20_handle_t\fP handle, const \fBds18b20_resolutions_t\fP resolution)"
.br
.RI "Writes temperature conversion resolution to DS18B20\&. "
.ti -1c
.RI "esp_err_t \fBds18b20_get_alarm_thresholds\fP (\fBds18b20_handle_t\fP handle, int8_t *const high, int8_t *const low)"
.br
.RI "Reads high and low temperature alarm thresholds from DS18B20\&. "
.ti -1c
.RI "esp_err_t \fBds18b20_set_alarm_thresholds\fP (\fBds18b20_handle_t\fP handle, const int8_t high, const int8_t low)"
.br
.RI "Writes high and low temperature alarm thresholds to DS18B20\&. "
.ti -1c
.RI "esp_err_t \fBds18b20_alarm_triggered\fP (\fBds18b20_handle_t\fP handle, bool *const alarm)"
.br
.RI "Check if the DS18B20 temperature alarm triggered\&. "
.ti -1c
.RI "esp_err_t \fBds18b20_get_power_supply_mode\fP (\fBds18b20_handle_t\fP handle, bool *const parasitic)"
.br
.RI "Reads power supply mode setting from DS18B20\&. Parasitic-powered devices are powered by the data pin (DQ) and will pull the bus low during read time slot\&. Parasitic-powered devices are not supported at this time\&. "
.ti -1c
.RI "esp_err_t \fBds18b20_delete\fP (\fBds18b20_handle_t\fP handle)"
.br
.RI "Removes an DS18B20 device from master bus and frees handle\&. "
.ti -1c
.RI "const char * \fBds18b20_get_fw_version\fP (void)"
.br
.RI "Converts DS18B20 firmware version numbers (major, minor, patch) into a string\&. "
.ti -1c
.RI "int32_t \fBds18b20_get_fw_version_number\fP (void)"
.br
.RI "Converts DS18B20 firmware version numbers (major, minor, patch) into an integer value\&. "
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "\fBds18b20_configuration_register_t\fP"
.br
.ti -1c
.RI "\fBds18b20_scratchpad_t\fP"
.br
.in -1c
.SH "Author"
.PP 
Generated automatically by Doxygen for ESP-IDF Components by K0I05 from the source code\&.
