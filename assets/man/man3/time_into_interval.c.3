.TH "components/schedule/esp_time_into_interval/time_into_interval.c" 3 "ESP-IDF Components by K0I05" \" -*- nroff -*-
.ad l
.nh
.SH NAME
components/schedule/esp_time_into_interval/time_into_interval.c
.SH SYNOPSIS
.br
.PP
\fR#include 'include/time_into_interval\&.h'\fP
.br
\fR#include <string\&.h>\fP
.br
\fR#include <time\&.h>\fP
.br
\fR#include <sys/time\&.h>\fP
.br
\fR#include <stdio\&.h>\fP
.br
\fR#include <sdkconfig\&.h>\fP
.br
\fR#include <esp_types\&.h>\fP
.br
\fR#include <esp_log\&.h>\fP
.br
\fR#include <esp_check\&.h>\fP
.br
\fR#include <esp_timer\&.h>\fP
.br
\fR#include <freertos/FreeRTOS\&.h>\fP
.br
\fR#include <freertos/task\&.h>\fP
.br
\fR#include <freertos/semphr\&.h>\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBTIME_INTO_INTERVAL_NAME_MAX_LEN\fP   (25)"
.br
.RI "25-characters for user-defined time-into-interval name "
.ti -1c
.RI "#define \fBESP_ARG_CHECK\fP(VAL)"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "uint64_t \fBtime_into_interval_normalize_interval_to_sec\fP (const \fBtime_into_interval_types_t\fP interval_type, const uint16_t interval)"
.br
.RI "Normalizes time-into-interval period or offset to seconds\&. "
.ti -1c
.RI "uint64_t \fBtime_into_interval_normalize_interval_to_msec\fP (const \fBtime_into_interval_types_t\fP interval_type, const uint16_t interval)"
.br
.RI "Normalizes time-into-interval period or offset to milliseconds\&. "
.ti -1c
.RI "uint64_t \fBtime_into_interval_get_epoch_timestamp\fP (void)"
.br
.RI "Gets unix epoch timestamp (UTC) in seconds from system clock\&. "
.ti -1c
.RI "uint64_t \fBtime_into_interval_get_epoch_timestamp_msec\fP (void)"
.br
.RI "Gets unix epoch timestamp (UTC) in milliseconds from system clock\&. "
.ti -1c
.RI "uint64_t \fBtime_into_interval_get_epoch_timestamp_usec\fP (void)"
.br
.RI "Gets unix epoch timestamp (UTC) in micro-seconds from system clock\&. "
.ti -1c
.RI "esp_err_t \fBtime_into_interval_set_epoch_timestamp_event\fP (const \fBtime_into_interval_types_t\fP interval_type, const uint16_t interval_period, const uint16_t interval_offset, uint64_t *epoch_timestamp)"
.br
.RI "Sets the next epoch event timestamp in milli-seconds from system clock based on the time interval type, period, and offset\&. "
.ti -1c
.RI "esp_err_t \fBtime_into_interval_init\fP (const \fBtime_into_interval_config_t\fP *time_into_interval_config, \fBtime_into_interval_handle_t\fP *time_into_interval_handle)"
.br
.RI "Initializes a time-into-interval handle\&. A time-into-interval is used within a FreeRTOS task subroutine for conditional or task delay based on the configured interval type, period, and offset that is synchronized to the system clock\&. "
.ti -1c
.RI "bool \fBtime_into_interval\fP (\fBtime_into_interval_handle_t\fP time_into_interval_handle)"
.br
.RI "Validates time-into-interval condition based on the configured interval type, period, and offset parameters that is synchronized to the system clock and returns true when the interval has elapsed\&. "
.ti -1c
.RI "esp_err_t \fBtime_into_interval_delay\fP (\fBtime_into_interval_handle_t\fP time_into_interval_handle)"
.br
.RI "Delays the task until the next scheduled task event\&. This function should be placed after the \fRfor (;;) {\fP syntax to delay the task based on the configured interval type, period, and offset parameters\&. "
.ti -1c
.RI "esp_err_t \fBtime_into_interval_get_last_event\fP (\fBtime_into_interval_handle_t\fP time_into_interval_handle, uint64_t *epoch_timestamp)"
.br
.RI "Gets epoch timestamp (UTC) of the last event in milli-seconds\&. "
.ti -1c
.RI "esp_err_t \fBtime_into_interval_delete\fP (\fBtime_into_interval_handle_t\fP time_into_interval_handle)"
.br
.RI "Deletes the time-into-interval handle and frees up resources\&. "
.ti -1c
.RI "const char * \fBtime_into_interval_get_fw_version\fP (void)"
.br
.RI "Converts time-into-interval firmware version numbers (major, minor, patch) into a string\&. "
.ti -1c
.RI "int32_t \fBtime_into_interval_get_fw_version_number\fP (void)"
.br
.RI "Converts time-into-interval firmware version numbers (major, minor, patch) into an integer value\&. "
.in -1c
.SH "Detailed Description"
.PP 
ESP-IDF FreeRTOS task extension

.PP
Ported from esp-open-rtos

.PP
Copyright (c) 2024 Eric Gionet (gionet.c.eric@gmail.com)

.PP
MIT Licensed as described in the file LICENSE 
.SH "Macro Definition Documentation"
.PP 
.SS "#define ESP_ARG_CHECK( VAL)"
\fBValue:\fP
.nf
do { if (!(VAL)) return ESP_ERR_INVALID_ARG; } while (0)
.PP
.fi

.SH "Author"
.PP 
Generated automatically by Doxygen for ESP-IDF Components by K0I05 from the source code\&.
