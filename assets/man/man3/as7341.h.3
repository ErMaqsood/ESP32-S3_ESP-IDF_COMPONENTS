.TH "components/peripherals/i2c/esp_as7341/include/as7341.h" 3 "ESP-IDF Components by K0I05" \" -*- nroff -*-
.ad l
.nh
.SH NAME
components/peripherals/i2c/esp_as7341/include/as7341.h
.SH SYNOPSIS
.br
.PP
\fR#include <stdint\&.h>\fP
.br
\fR#include <stdbool\&.h>\fP
.br
\fR#include <esp_err\&.h>\fP
.br
\fR#include <driver/i2c_master\&.h>\fP
.br
\fR#include <type_utils\&.h>\fP
.br
\fR#include 'as7341_version\&.h'\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBas7341_channels_basic_counts_data_s\fP"
.br
.RI "AS7341 channels basic counts data structure\&. "
.ti -1c
.RI "struct \fBas7341_channels_spectral_data_s\fP"
.br
.RI "AS7341 channels spectral data structure\&. "
.ti -1c
.RI "struct \fBas7341_config_s\fP"
.br
.RI "AS7341 configuration structure\&. "
.ti -1c
.RI "struct \fBas7341_context_t\fP"
.br
.RI "AS7341 context structure\&. "
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBI2C_AS7341_DEV_CLK_SPD\fP   UINT32_C(100000)"
.br
.RI "as7341 I2C default clock frequency (100KHz) "
.ti -1c
.RI "#define \fBI2C_AS7341_DEV_ADDR\fP   UINT8_C(0x39)"
.br
.RI "as7341 I2C address "
.ti -1c
.RI "#define \fBI2C_XFR_TIMEOUT_MS\fP   (500)"
.br
.RI "I2C transaction timeout in milliseconds\&. "
.ti -1c
.RI "#define \fBI2C_AS7341_CONFIG_DEFAULT\fP"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef enum \fBas7341_als_modes_e\fP \fBas7341_als_modes_t\fP"
.br
.RI "AS7341 ambient light sensing mode enumerator\&. "
.ti -1c
.RI "typedef enum \fBas7341_led_drive_strengths_e\fP \fBas7341_led_drive_strengths_t\fP"
.br
.RI "AS7341 led driving strengths enumerator\&. "
.ti -1c
.RI "typedef enum \fBas7341_spectral_gains_e\fP \fBas7341_spectral_gains_t\fP"
.br
.RI "AS7341 allowable gain multipliers enumerator\&. "
.ti -1c
.RI "typedef enum \fBas7341_flicker_detection_gains_e\fP \fBas7341_flicker_detection_gains_t\fP"
.br
.RI "AS7341 allowable flicker detection gain multipliers enumerator\&. "
.ti -1c
.RI "typedef enum \fBas7341_flicker_detection_states_e\fP \fBas7341_flicker_detection_states_t\fP"
.br
.RI "AS7341 flicker detection states enumerator\&. "
.ti -1c
.RI "typedef enum \fBas7341_smux_commands_e\fP \fBas7341_smux_commands_t\fP"
.br
.RI "AS7341 available SMUX commands enumerator\&. "
.ti -1c
.RI "typedef struct \fBas7341_channels_basic_counts_data_s\fP \fBas7341_channels_basic_counts_data_t\fP"
.br
.RI "AS7341 channels basic counts data structure\&. "
.ti -1c
.RI "typedef struct \fBas7341_channels_spectral_data_s\fP \fBas7341_channels_spectral_data_t\fP"
.br
.RI "AS7341 channels spectral data structure\&. "
.ti -1c
.RI "typedef struct \fBas7341_config_s\fP \fBas7341_config_t\fP"
.br
.RI "AS7341 configuration structure\&. "
.ti -1c
.RI "typedef struct as7341_context_t \fBas7341_context_t\fP"
.br
.RI "AS7341 context structure definitions\&. "
.ti -1c
.RI "typedef struct \fBas7341_context_t\fP * \fBas7341_handle_t\fP"
.br
.RI "AS7341 handle structure definition\&. "
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBas7341_als_modes_e\fP { \fBAS7341_ALS_SPM_MODE\fP = (0), \fBAS7341_ALS_SYNS_MODE\fP = (1), \fBAS7341_ALS_RESERVED_MODE\fP = (2), \fBAS7341_ALS_SYND_MODE\fP = (3) }"
.br
.RI "AS7341 ambient light sensing mode enumerator\&. "
.ti -1c
.RI "enum \fBas7341_led_drive_strengths_e\fP { \fBAS7341_LED_DRIVE_STRENGTH_4MA\fP = (0b0000000), \fBAS7341_LED_DRIVE_STRENGTH_6MA\fP = (0b0000001), \fBAS7341_LED_DRIVE_STRENGTH_8MA\fP = (0b0000010), \fBAS7341_LED_DRIVE_STRENGTH_10MA\fP = (0b0000011), \fBAS7341_LED_DRIVE_STRENGTH_12MA\fP = (0b0000100), \fBAS7341_LED_DRIVE_STRENGTH_256MA\fP = (0b1111110), \fBAS7341_LED_DRIVE_STRENGTH_258MA\fP = (0b1111111) }"
.br
.RI "AS7341 led driving strengths enumerator\&. "
.ti -1c
.RI "enum \fBas7341_spectral_gains_e\fP { \fBAS7341_SPECTRAL_GAIN_0_5X\fP = 0, \fBAS7341_SPECTRAL_GAIN_1X\fP, \fBAS7341_SPECTRAL_GAIN_2X\fP, \fBAS7341_SPECTRAL_GAIN_4X\fP, \fBAS7341_SPECTRAL_GAIN_8X\fP, \fBAS7341_SPECTRAL_GAIN_16X\fP, \fBAS7341_SPECTRAL_GAIN_32X\fP, \fBAS7341_SPECTRAL_GAIN_64X\fP, \fBAS7341_SPECTRAL_GAIN_128X\fP, \fBAS7341_SPECTRAL_GAIN_256X\fP, \fBAS7341_SPECTRAL_GAIN_512X\fP }"
.br
.RI "AS7341 allowable gain multipliers enumerator\&. "
.ti -1c
.RI "enum \fBas7341_flicker_detection_gains_e\fP { \fBAS7341_FLICKER_DETECTION_GAIN_0_5X\fP = 0, \fBAS7341_FLICKER_DETECTION_GAIN_1X\fP, \fBAS7341_FLICKER_DETECTION_GAIN_2X\fP, \fBAS7341_FLICKER_DETECTION_GAIN_4X\fP, \fBAS7341_FLICKER_DETECTION_GAIN_8X\fP, \fBAS7341_FLICKER_DETECTION_GAIN_16X\fP, \fBAS7341_FLICKER_DETECTION_GAIN_32X\fP, \fBAS7341_FLICKER_DETECTION_GAIN_64X\fP, \fBAS7341_FLICKER_DETECTION_GAIN_128X\fP, \fBAS7341_FLICKER_DETECTION_GAIN_256X\fP, \fBAS7341_FLICKER_DETECTION_GAIN_512X\fP }"
.br
.RI "AS7341 allowable flicker detection gain multipliers enumerator\&. "
.ti -1c
.RI "enum \fBas7341_flicker_detection_states_e\fP { \fBAS7341_FLICKER_DETECTION_INVALID\fP = 0, \fBAS7341_FLICKER_DETECTION_UNKNOWN\fP, \fBAS7341_FLICKER_DETECTION_SATURATED\fP, \fBAS7341_FLICKER_DETECTION_100HZ\fP, \fBAS7341_FLICKER_DETECTION_120HZ\fP }"
.br
.RI "AS7341 flicker detection states enumerator\&. "
.ti -1c
.RI "enum \fBas7341_smux_commands_e\fP { \fBAS7341_SMUX_CMD_ROM_RESET\fP = 0, \fBAS7341_SMUX_CMD_READ\fP, \fBAS7341_SMUX_CMD_WRITE\fP }"
.br
.RI "AS7341 available SMUX commands enumerator\&. "
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "union \fB__attribute__\fP ((packed)) ahtxx_status_register_u"
.br
.RI "AHTXX status register structure definition\&. "
.ti -1c
.RI "esp_err_t \fBas7341_get_led_register\fP (\fBas7341_handle_t\fP handle, as7341_led_register_t *const reg)"
.br
.RI "Reads LED register (0x74) from AS7341\&. "
.ti -1c
.RI "esp_err_t \fBas7341_set_led_register\fP (\fBas7341_handle_t\fP handle, const as7341_led_register_t reg)"
.br
.RI "Writes LED register (0x74) to AS7341\&. "
.ti -1c
.RI "esp_err_t \fBas7341_get_astatus_register\fP (\fBas7341_handle_t\fP handle, as7341_astatus_register_t *const reg)"
.br
.RI "Reads ASTATUS register (0x94) from AS7341\&. "
.ti -1c
.RI "esp_err_t \fBas7341_get_status2_register\fP (\fBas7341_handle_t\fP handle, as7341_status2_register_t *const reg)"
.br
.RI "Reads status 2 register (0xA3) from AS7341\&. "
.ti -1c
.RI "esp_err_t \fBas7341_disable_enable_register\fP (\fBas7341_handle_t\fP handle)"
.br
.RI "Disables spectral readings, flicker detection, power, etc\&. "
.ti -1c
.RI "esp_err_t \fBas7341_get_enable_register\fP (\fBas7341_handle_t\fP handle, as7341_enable_register_t *const reg)"
.br
.RI "Reads enable register (0x80) from AS7341\&. "
.ti -1c
.RI "esp_err_t \fBas7341_set_enable_register\fP (\fBas7341_handle_t\fP handle, const as7341_enable_register_t reg)"
.br
.RI "Writes enable register (0x80) to AS7341\&. "
.ti -1c
.RI "esp_err_t \fBas7341_get_auxiliary_id_register\fP (\fBas7341_handle_t\fP handle, as7341_auxiliary_id_register_t *const reg)"
.br
.RI "Reads auxiliary id register (0x90) from AS7341\&. "
.ti -1c
.RI "esp_err_t \fBas7341_get_revision_id_register\fP (\fBas7341_handle_t\fP handle, as7341_revision_id_register_t *const reg)"
.br
.RI "Reads revision id register (0x91) from AS7341\&. "
.ti -1c
.RI "esp_err_t \fBas7341_get_part_id_register\fP (\fBas7341_handle_t\fP handle, as7341_part_id_register_t *const reg)"
.br
.RI "Reads part id register (0x92) from AS7341\&. "
.ti -1c
.RI "esp_err_t \fBas7341_get_config_register\fP (\fBas7341_handle_t\fP handle, as7341_config_register_t *const reg)"
.br
.RI "Reads configuration register (0x70) from AS7341\&. "
.ti -1c
.RI "esp_err_t \fBas7341_set_config_register\fP (\fBas7341_handle_t\fP handle, const as7341_config_register_t reg)"
.br
.RI "Writes configuration register (0x70) from AS7341\&. "
.ti -1c
.RI "esp_err_t \fBas7341_get_config0_register\fP (\fBas7341_handle_t\fP handle, as7341_config0_register_t *const reg)"
.br
.RI "Reads configuration 0 register (0xA9) from AS7341\&. "
.ti -1c
.RI "esp_err_t \fBas7341_set_config0_register\fP (\fBas7341_handle_t\fP handle, const as7341_config0_register_t reg)"
.br
.RI "Writes configuration 0 register (0xA9) from AS7341\&. "
.ti -1c
.RI "esp_err_t \fBas7341_get_config1_register\fP (\fBas7341_handle_t\fP handle, as7341_config1_register_t *const reg)"
.br
.RI "Reads configuration 1 (0xAA) register from AS7341\&. This register configures the 6 integrated ADC (CH0 to CH5)\&. "
.ti -1c
.RI "esp_err_t \fBas7341_set_config1_register\fP (\fBas7341_handle_t\fP handle, const as7341_config1_register_t reg)"
.br
.RI "Writes configuration 1 (0xAA) register to AS7341\&. This register configures the 6 integrated ADC (CH0 to CH5)\&. "
.ti -1c
.RI "esp_err_t \fBas7341_get_config6_register\fP (\fBas7341_handle_t\fP handle, as7341_config6_register_t *const reg)"
.br
.RI "Reads configuration 6 register (0xAF) from AS7341\&. "
.ti -1c
.RI "esp_err_t \fBas7341_set_config6_register\fP (\fBas7341_handle_t\fP handle, const as7341_config6_register_t reg)"
.br
.RI "Writes configuration 6 register (0xAF) to AS7341\&. "
.ti -1c
.RI "esp_err_t \fBas7341_get_atime_register\fP (\fBas7341_handle_t\fP handle, uint8_t *const reg)"
.br
.RI "Reads ATIME (0x81) register from AS7341\&. "
.ti -1c
.RI "esp_err_t \fBas7341_set_atime_register\fP (\fBas7341_handle_t\fP handle, const uint8_t reg)"
.br
.RI "Writes ATIME (0x81) register to AS7341\&. "
.ti -1c
.RI "esp_err_t \fBas7341_get_astep_register\fP (\fBas7341_handle_t\fP handle, uint16_t *const reg)"
.br
.RI "Reads ASTEP (0xCA, 0xCB) register from AS7341\&. "
.ti -1c
.RI "esp_err_t \fBas7341_set_astep_register\fP (\fBas7341_handle_t\fP handle, const uint16_t reg)"
.br
.RI "Writes ASTEP (0xCA, 0xCB) register to AS7341\&. "
.ti -1c
.RI "esp_err_t \fBas7341_get_flicker_detection_status_register\fP (\fBas7341_handle_t\fP handle, as7341_flicker_detection_status_register_t *const reg)"
.br
.RI "Reads flicker detection status (0xDB) register from AS7341\&. "
.ti -1c
.RI "esp_err_t \fBas7341_set_flicker_detection_status_register\fP (\fBas7341_handle_t\fP handle, const as7341_flicker_detection_status_register_t reg)"
.br
.RI "Writes flicker detection status (0xDB) register to AS7341\&. "
.ti -1c
.RI "esp_err_t \fBas7341_clear_flicker_detection_status_register\fP (\fBas7341_handle_t\fP handle)"
.br
.RI "Clears flicker detection status (0xDB) register on AS7341\&. "
.ti -1c
.RI "esp_err_t \fBas7341_enable_hi_register_bank\fP (\fBas7341_handle_t\fP handle)"
.br
.RI "Enables access to the AS7341 high register bank (0x80 to 0xFF)\&. "
.ti -1c
.RI "esp_err_t \fBas7341_enable_lo_register_bank\fP (\fBas7341_handle_t\fP handle)"
.br
.RI "Enables access to the AS7341 low register bank (0x60 to 0x74)\&. "
.ti -1c
.RI "esp_err_t \fBas7341_set_smux_command\fP (\fBas7341_handle_t\fP handle, const \fBas7341_smux_commands_t\fP command)"
.br
.RI "Writes SMUX command to AS7341\&. "
.ti -1c
.RI "esp_err_t \fBas7341_init\fP (i2c_master_bus_handle_t master_handle, const \fBas7341_config_t\fP *as7341_config, \fBas7341_handle_t\fP *as7341_handle)"
.br
.RI "Initializes an AS7341 device onto the I2C master bus\&. "
.ti -1c
.RI "esp_err_t \fBas7341_get_spectral_measurements\fP (\fBas7341_handle_t\fP handle, \fBas7341_channels_spectral_data_t\fP *const spectral_data)"
.br
.RI "Reads spectral sensors measurements, F1 to F8, Clear and NIR, from AS7341\&. "
.ti -1c
.RI "esp_err_t \fBas7341_get_basic_counts\fP (\fBas7341_handle_t\fP handle, const \fBas7341_channels_spectral_data_t\fP spectral_data, \fBas7341_channels_basic_counts_data_t\fP *const basic_counts_data)"
.br
.RI "Converts AS7341 spectral sensors measurements to basic counts\&. "
.ti -1c
.RI "esp_err_t \fBas7341_get_flicker_detection_status\fP (\fBas7341_handle_t\fP handle, \fBas7341_flicker_detection_states_t\fP *const state)"
.br
.RI "Reads flicker detection status from AS7341\&. "
.ti -1c
.RI "esp_err_t \fBas7341_get_data_status\fP (\fBas7341_handle_t\fP handle, bool *const ready)"
.br
.RI "Reads data status from AS7341\&. "
.ti -1c
.RI "esp_err_t \fBas7341_get_atime\fP (\fBas7341_handle_t\fP handle, uint8_t *const atime)"
.br
.RI "Reads the number of integration steps for the ADC integration time from AS7341\&. "
.ti -1c
.RI "esp_err_t \fBas7341_set_atime\fP (\fBas7341_handle_t\fP handle, const uint8_t atime)"
.br
.RI "Writes the number of integration steps for the ADC integration time to AS7341\&. "
.ti -1c
.RI "esp_err_t \fBas7341_get_astep\fP (\fBas7341_handle_t\fP handle, uint16_t *const astep)"
.br
.RI "Reads the number of integration time steps for the ADC integration time from AS7341\&. "
.ti -1c
.RI "esp_err_t \fBas7341_set_astep\fP (\fBas7341_handle_t\fP handle, const uint16_t astep)"
.br
.RI "Writes the number of integration time steps for the ADC integration time to AS7341\&. "
.ti -1c
.RI "esp_err_t \fBas7341_get_spectral_gain\fP (\fBas7341_handle_t\fP handle, \fBas7341_spectral_gains_t\fP *const gain)"
.br
.RI "Reads spectral gain setting from AS7341\&. "
.ti -1c
.RI "esp_err_t \fBas7341_set_spectral_gain\fP (\fBas7341_handle_t\fP handle, const \fBas7341_spectral_gains_t\fP gain)"
.br
.RI "Writes spectral gain setting to AS7341\&. "
.ti -1c
.RI "esp_err_t \fBas7341_get_ambient_light_sensing_mode\fP (\fBas7341_handle_t\fP handle, \fBas7341_als_modes_t\fP *const mode)"
.br
.RI "Reads ambient light sensing mode from AS7341\&. SPM mode (spectral measurement), normal mode, is configured by default\&. "
.ti -1c
.RI "esp_err_t \fBas7341_set_ambient_light_sensing_mode\fP (\fBas7341_handle_t\fP handle, const \fBas7341_als_modes_t\fP mode)"
.br
.RI "Writes ambient light sensing mode to AS7341\&. SPM mode (spectral measurement), normal mode, is configured by default\&. "
.ti -1c
.RI "esp_err_t \fBas7341_enable_flicker_detection\fP (\fBas7341_handle_t\fP handle)"
.br
.RI "Enables AS7341 flicker detection\&. "
.ti -1c
.RI "esp_err_t \fBas7341_disable_flicker_detection\fP (\fBas7341_handle_t\fP handle)"
.br
.RI "Disables AS7341 flicker detection\&. "
.ti -1c
.RI "esp_err_t \fBas7341_enable_smux\fP (\fBas7341_handle_t\fP handle)"
.br
.RI "Enables AS7341 supper multiplier (SMUX) special interrupt\&. "
.ti -1c
.RI "esp_err_t \fBas7341_enable_wait_time\fP (\fBas7341_handle_t\fP handle)"
.br
.RI "Enables AS7341 wait time between two consecutive spectral measurements\&. "
.ti -1c
.RI "esp_err_t \fBas7341_disable_wait_time\fP (\fBas7341_handle_t\fP handle)"
.br
.RI "Disables AS7341 wait time between two consecutive spectral measurements\&. "
.ti -1c
.RI "esp_err_t \fBas7341_enable_spectral_measurement\fP (\fBas7341_handle_t\fP handle)"
.br
.RI "Enables AS7341 spectral measurement\&. "
.ti -1c
.RI "esp_err_t \fBas7341_disable_spectral_measurement\fP (\fBas7341_handle_t\fP handle)"
.br
.RI "Disables AS7341 spectral measurement\&. "
.ti -1c
.RI "esp_err_t \fBas7341_enable_power\fP (\fBas7341_handle_t\fP handle)"
.br
.RI "Enables AS7341 power\&. "
.ti -1c
.RI "esp_err_t \fBas7341_disable_power\fP (\fBas7341_handle_t\fP handle)"
.br
.RI "Disables AS7341 power\&. "
.ti -1c
.RI "esp_err_t \fBas7341_enable_led\fP (\fBas7341_handle_t\fP handle)"
.br
.RI "Enables AS7341 onboard LED\&. "
.ti -1c
.RI "esp_err_t \fBas7341_disable_led\fP (\fBas7341_handle_t\fP handle)"
.br
.RI "Disables AS7341 onboard LED\&. "
.ti -1c
.RI "esp_err_t \fBas7341_remove\fP (\fBas7341_handle_t\fP handle)"
.br
.RI "Removes an AS7341 device from master bus\&. "
.ti -1c
.RI "esp_err_t \fBas7341_delete\fP (\fBas7341_handle_t\fP handle)"
.br
.RI "Removes an AS7341 device from master bus and frees handle\&. "
.ti -1c
.RI "const char * \fBas7341_get_fw_version\fP (void)"
.br
.RI "Converts AS7341 firmware version numbers (major, minor, patch, build) into a string\&. "
.ti -1c
.RI "int32_t \fBas7341_get_fw_version_number\fP (void)"
.br
.RI "Converts AS7341 firmware version numbers (major, minor, patch) into an integer value\&. "
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "\fBas7341_enable_register_t\fP"
.br
.ti -1c
.RI "\fBas7341_config_register_t\fP"
.br
.ti -1c
.RI "\fBas7341_flicker_detection_time1_register_t\fP"
.br
.ti -1c
.RI "\fBas7341_flicker_detection_time2_register_t\fP"
.br
.ti -1c
.RI "\fBas7341_gpio1_register_t\fP"
.br
.ti -1c
.RI "\fBas7341_gpio2_register_t\fP"
.br
.ti -1c
.RI "\fBas7341_led_register_t\fP"
.br
.ti -1c
.RI "\fBas7341_interrupt_enable_register_t\fP"
.br
.ti -1c
.RI "\fBas7341_interrupt_status_register_t\fP"
.br
.ti -1c
.RI "\fBas7341_device_status_register_t\fP"
.br
.ti -1c
.RI "\fBas7341_astatus_register_t\fP"
.br
.ti -1c
.RI "\fBas7341_status2_register_t\fP"
.br
.ti -1c
.RI "\fBas7341_status3_register_t\fP"
.br
.ti -1c
.RI "\fBas7341_status5_register_t\fP"
.br
.ti -1c
.RI "\fBas7341_status6_register_t\fP"
.br
.ti -1c
.RI "\fBas7341_flicker_detection_status_register_t\fP"
.br
.ti -1c
.RI "\fBas7341_auxiliary_id_register_t\fP"
.br
.ti -1c
.RI "\fBas7341_revision_id_register_t\fP"
.br
.ti -1c
.RI "\fBas7341_part_id_register_t\fP"
.br
.ti -1c
.RI "\fBas7341_config0_register_t\fP"
.br
.ti -1c
.RI "\fBas7341_config1_register_t\fP"
.br
.ti -1c
.RI "\fBas7341_config6_register_t\fP"
.br
.in -1c
.SH "Author"
.PP 
Generated automatically by Doxygen for ESP-IDF Components by K0I05 from the source code\&.
