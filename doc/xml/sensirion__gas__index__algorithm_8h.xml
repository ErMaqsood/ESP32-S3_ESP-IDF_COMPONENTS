<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="sensirion__gas__index__algorithm_8h" kind="file" language="C++">
    <compoundname>sensirion_gas_index_algorithm.h</compoundname>
    <includes local="no">stdint.h</includes>
    <includedby refid="sensirion__gas__index__algorithm_8c" local="yes">components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.c</includedby>
    <incdepgraph>
      <node id="1">
        <label>components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h</label>
        <link refid="sensirion__gas__index__algorithm_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>stdint.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="struct_gas_index_algorithm_params" prot="public">GasIndexAlgorithmParams</innerclass>
    <sectiondef kind="define">
      <memberdef kind="define" id="sensirion__gas__index__algorithm_8h_1a78b91da60017324e077f3b4c46cc82e6" prot="public" static="no">
        <name>GASINDEXALGORITHM_H_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" line="40" column="9" bodyfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sensirion__gas__index__algorithm_8h_1abb452686968e48b67397da5f97445f5b" prot="public" static="no">
        <name>bool</name>
        <initializer>int</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" line="51" column="9" bodyfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sensirion__gas__index__algorithm_8h_1a41f9c5fb8b08eb5dc3edce4dcb37fee7" prot="public" static="no">
        <name>true</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" line="52" column="9" bodyfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sensirion__gas__index__algorithm_8h_1a65e9886d74aaee76545e83dd09011727" prot="public" static="no">
        <name>false</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" line="53" column="9" bodyfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sensirion__gas__index__algorithm_8h_1ab2ff8fc34fb9262af92d0524fc6ae2a5" prot="public" static="no">
        <name>LIBRARY_VERSION_NAME</name>
        <initializer>&quot;3.2.0&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" line="62" column="9" bodyfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sensirion__gas__index__algorithm_8h_1a65553d56f3f8007d1768c662833ab294" prot="public" static="no">
        <name>GasIndexAlgorithm_ALGORITHM_TYPE_VOC</name>
        <initializer>(0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" line="65" column="9" bodyfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sensirion__gas__index__algorithm_8h_1aefbc8af43c9df3537fe4545b86f3cd9b" prot="public" static="no">
        <name>GasIndexAlgorithm_ALGORITHM_TYPE_NOX</name>
        <initializer>(1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" line="66" column="9" bodyfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sensirion__gas__index__algorithm_8h_1a44a1467d49ab458ee8a5decd8f6640aa" prot="public" static="no">
        <name>GasIndexAlgorithm_DEFAULT_SAMPLING_INTERVAL</name>
        <initializer>(1.f)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" line="67" column="9" bodyfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sensirion__gas__index__algorithm_8h_1a8e0817dfc832435e4df6ad264ee5c047" prot="public" static="no">
        <name>GasIndexAlgorithm_INITIAL_BLACKOUT</name>
        <initializer>(45.f)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" line="68" column="9" bodyfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sensirion__gas__index__algorithm_8h_1aabae1c241e1218fd43942752d12616e8" prot="public" static="no">
        <name>GasIndexAlgorithm_INDEX_GAIN</name>
        <initializer>(230.f)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" line="69" column="9" bodyfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sensirion__gas__index__algorithm_8h_1a52aa63874447b4b9d854a5d36e0d35af" prot="public" static="no">
        <name>GasIndexAlgorithm_SRAW_STD_INITIAL</name>
        <initializer>(50.f)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" line="70" column="9" bodyfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sensirion__gas__index__algorithm_8h_1a23bfd900cb240929e687f6e1ec1eaf4c" prot="public" static="no">
        <name>GasIndexAlgorithm_SRAW_STD_BONUS_VOC</name>
        <initializer>(220.f)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" line="71" column="9" bodyfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sensirion__gas__index__algorithm_8h_1ad815e5e2d8f417a0e0eb71bd47d49b8d" prot="public" static="no">
        <name>GasIndexAlgorithm_SRAW_STD_NOX</name>
        <initializer>(2000.f)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" line="72" column="9" bodyfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sensirion__gas__index__algorithm_8h_1a1b3c2250f40e0bc66b8cb4a70d942f98" prot="public" static="no">
        <name>GasIndexAlgorithm_TAU_MEAN_HOURS</name>
        <initializer>(12.f)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" line="73" column="9" bodyfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sensirion__gas__index__algorithm_8h_1ac8a62c45f8c290cf2e57174b2b537770" prot="public" static="no">
        <name>GasIndexAlgorithm_TAU_VARIANCE_HOURS</name>
        <initializer>(12.f)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" line="74" column="9" bodyfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sensirion__gas__index__algorithm_8h_1aa6470efcc86cd6af48c63040c4323c74" prot="public" static="no">
        <name>GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC</name>
        <initializer>(20.f)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" line="75" column="9" bodyfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sensirion__gas__index__algorithm_8h_1af7aa5d98de4f206ff02ccb9b118f381f" prot="public" static="no">
        <name>GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX</name>
        <initializer>(1200.f)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" line="76" column="9" bodyfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sensirion__gas__index__algorithm_8h_1ae61bc42f510606781ad77b08d6cfac6a" prot="public" static="no">
        <name>GasIndexAlgorithm_INIT_DURATION_MEAN_VOC</name>
        <initializer>((3600.f * 0.75f))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" line="77" column="9" bodyfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sensirion__gas__index__algorithm_8h_1a2719beb4bc5f20df40e1acdc50e039c6" prot="public" static="no">
        <name>GasIndexAlgorithm_INIT_DURATION_MEAN_NOX</name>
        <initializer>((3600.f * 4.75f))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" line="78" column="9" bodyfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sensirion__gas__index__algorithm_8h_1a17b38c74ebbda88ace468bb5854040e1" prot="public" static="no">
        <name>GasIndexAlgorithm_INIT_TRANSITION_MEAN</name>
        <initializer>(0.01f)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" line="79" column="9" bodyfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sensirion__gas__index__algorithm_8h_1a0277496ccdf852da572cb14381ee21de" prot="public" static="no">
        <name>GasIndexAlgorithm_TAU_INITIAL_VARIANCE</name>
        <initializer>(2500.f)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" line="80" column="9" bodyfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sensirion__gas__index__algorithm_8h_1a2afacba1b691d0bd4e01ce0fd9e8a7fb" prot="public" static="no">
        <name>GasIndexAlgorithm_INIT_DURATION_VARIANCE_VOC</name>
        <initializer>((3600.f * 1.45f))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" line="81" column="9" bodyfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sensirion__gas__index__algorithm_8h_1a1fb45129bce7e2e1dd9f2dd72761a1a8" prot="public" static="no">
        <name>GasIndexAlgorithm_INIT_DURATION_VARIANCE_NOX</name>
        <initializer>((3600.f * 5.70f))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" line="82" column="9" bodyfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sensirion__gas__index__algorithm_8h_1a0ed2d688c0930b6a95433696171faf5e" prot="public" static="no">
        <name>GasIndexAlgorithm_INIT_TRANSITION_VARIANCE</name>
        <initializer>(0.01f)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" line="83" column="9" bodyfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sensirion__gas__index__algorithm_8h_1a2134028a7a92032b0936019d3d9a9731" prot="public" static="no">
        <name>GasIndexAlgorithm_GATING_THRESHOLD_VOC</name>
        <initializer>(340.f)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" line="84" column="9" bodyfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sensirion__gas__index__algorithm_8h_1a345328861f5b23f0e57897dfe170867f" prot="public" static="no">
        <name>GasIndexAlgorithm_GATING_THRESHOLD_NOX</name>
        <initializer>(30.f)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" line="85" column="9" bodyfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sensirion__gas__index__algorithm_8h_1a66482d05b71f915ea8730151293c1cbf" prot="public" static="no">
        <name>GasIndexAlgorithm_GATING_THRESHOLD_INITIAL</name>
        <initializer>(510.f)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" line="86" column="9" bodyfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sensirion__gas__index__algorithm_8h_1a5e571bd5d2598eae72fdeabd0b67c996" prot="public" static="no">
        <name>GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION</name>
        <initializer>(0.09f)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" line="87" column="9" bodyfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sensirion__gas__index__algorithm_8h_1a58b77b6443eb5c1f245ab5efb81e99dc" prot="public" static="no">
        <name>GasIndexAlgorithm_GATING_VOC_MAX_DURATION_MINUTES</name>
        <initializer>((60.f * 3.f))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" line="88" column="9" bodyfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sensirion__gas__index__algorithm_8h_1aee6a7d0a00785f22e618ac792ac6f004" prot="public" static="no">
        <name>GasIndexAlgorithm_GATING_NOX_MAX_DURATION_MINUTES</name>
        <initializer>((60.f * 12.f))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" line="89" column="9" bodyfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sensirion__gas__index__algorithm_8h_1a5c9a67ad92ca88a3f9cab5a4c041c72f" prot="public" static="no">
        <name>GasIndexAlgorithm_GATING_MAX_RATIO</name>
        <initializer>(0.3f)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" line="90" column="9" bodyfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sensirion__gas__index__algorithm_8h_1ad1a1f8ee49cdef4f45d795bdf51eca75" prot="public" static="no">
        <name>GasIndexAlgorithm_SIGMOID_L</name>
        <initializer>(500.f)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" line="91" column="9" bodyfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sensirion__gas__index__algorithm_8h_1a237639cca1b7097814d5d59641c6f64f" prot="public" static="no">
        <name>GasIndexAlgorithm_SIGMOID_K_VOC</name>
        <initializer>(-0.0065f)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" line="92" column="9" bodyfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sensirion__gas__index__algorithm_8h_1a3a5abf61617208f230b4d86dc46ddd4e" prot="public" static="no">
        <name>GasIndexAlgorithm_SIGMOID_X0_VOC</name>
        <initializer>(213.f)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" line="93" column="9" bodyfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sensirion__gas__index__algorithm_8h_1a3dddce158535f161ecac1fd65e2dd041" prot="public" static="no">
        <name>GasIndexAlgorithm_SIGMOID_K_NOX</name>
        <initializer>(-0.0101f)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" line="94" column="9" bodyfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sensirion__gas__index__algorithm_8h_1a578ec9b9b07dfdeea678e555727de760" prot="public" static="no">
        <name>GasIndexAlgorithm_SIGMOID_X0_NOX</name>
        <initializer>(614.f)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" line="95" column="9" bodyfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sensirion__gas__index__algorithm_8h_1a298c01bf061e3a0de6bb1c3210070ceb" prot="public" static="no">
        <name>GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT</name>
        <initializer>(100.f)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" line="96" column="9" bodyfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sensirion__gas__index__algorithm_8h_1ad14f5b2d784a0c089a40a0353266d9cf" prot="public" static="no">
        <name>GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT</name>
        <initializer>(1.f)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" line="97" column="9" bodyfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sensirion__gas__index__algorithm_8h_1ab7a67ed8447673477ea6d6f18eb89e5c" prot="public" static="no">
        <name>GasIndexAlgorithm_LP_TAU_FAST</name>
        <initializer>(20.0f)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" line="98" column="9" bodyfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sensirion__gas__index__algorithm_8h_1a8ee41aa49a3d9bd5a7bb6d306c2b67f5" prot="public" static="no">
        <name>GasIndexAlgorithm_LP_TAU_SLOW</name>
        <initializer>(500.0f)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" line="99" column="9" bodyfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sensirion__gas__index__algorithm_8h_1aa5acfc6b763f1f5a70ec02c80b9ea570" prot="public" static="no">
        <name>GasIndexAlgorithm_LP_ALPHA</name>
        <initializer>(-0.2f)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" line="100" column="9" bodyfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sensirion__gas__index__algorithm_8h_1a8a8c79da034acb1c615b11bc1648fa6a" prot="public" static="no">
        <name>GasIndexAlgorithm_VOC_SRAW_MINIMUM</name>
        <initializer>(20000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" line="101" column="9" bodyfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sensirion__gas__index__algorithm_8h_1a431a9bc88341cd080e7354ca27ddbfd9" prot="public" static="no">
        <name>GasIndexAlgorithm_NOX_SRAW_MINIMUM</name>
        <initializer>(10000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" line="102" column="9" bodyfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" bodystart="102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sensirion__gas__index__algorithm_8h_1adc213bf22c5ff669b5a4d1043deb66af" prot="public" static="no">
        <name>GasIndexAlgorithm_PERSISTENCE_UPTIME_GAMMA</name>
        <initializer>((3.f * 3600.f))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" line="103" column="9" bodyfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" bodystart="103" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sensirion__gas__index__algorithm_8h_1a1a37b38d4622f634fff6eb2652ef23b9" prot="public" static="no">
        <name>GasIndexAlgorithm_TUNING_INDEX_OFFSET_MIN</name>
        <initializer>(1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" line="104" column="9" bodyfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sensirion__gas__index__algorithm_8h_1ac3b6d740df353191e3af30ba760da397" prot="public" static="no">
        <name>GasIndexAlgorithm_TUNING_INDEX_OFFSET_MAX</name>
        <initializer>(250)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" line="105" column="9" bodyfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sensirion__gas__index__algorithm_8h_1ab4f6fd73c153344712f485c569df35a3" prot="public" static="no">
        <name>GasIndexAlgorithm_TUNING_LEARNING_TIME_OFFSET_HOURS_MIN</name>
        <initializer>(1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" line="106" column="9" bodyfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sensirion__gas__index__algorithm_8h_1a0109cf4f6c274b37d5d2de46fc291583" prot="public" static="no">
        <name>GasIndexAlgorithm_TUNING_LEARNING_TIME_OFFSET_HOURS_MAX</name>
        <initializer>(1000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" line="107" column="9" bodyfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" bodystart="107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sensirion__gas__index__algorithm_8h_1ada1c26924e93c05330a364bd8dd0b00f" prot="public" static="no">
        <name>GasIndexAlgorithm_TUNING_LEARNING_TIME_GAIN_HOURS_MIN</name>
        <initializer>(1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" line="108" column="9" bodyfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sensirion__gas__index__algorithm_8h_1a421a90ddfbcf61a595e1d78d15674d26" prot="public" static="no">
        <name>GasIndexAlgorithm_TUNING_LEARNING_TIME_GAIN_HOURS_MAX</name>
        <initializer>(1000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" line="109" column="9" bodyfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" bodystart="109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sensirion__gas__index__algorithm_8h_1a3115fe11dd62538441f2e252379ca5f9" prot="public" static="no">
        <name>GasIndexAlgorithm_TUNING_GATING_MAX_DURATION_MINUTES_MIN</name>
        <initializer>(0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" line="110" column="9" bodyfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sensirion__gas__index__algorithm_8h_1aaf01e8c4d5258ab61c328107b58ba6d3" prot="public" static="no">
        <name>GasIndexAlgorithm_TUNING_GATING_MAX_DURATION_MINUTES_MAX</name>
        <initializer>(3000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" line="111" column="9" bodyfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sensirion__gas__index__algorithm_8h_1a0128cd57b0e1949c68b5d2754b5f9062" prot="public" static="no">
        <name>GasIndexAlgorithm_TUNING_STD_INITIAL_MIN</name>
        <initializer>(10)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" line="112" column="9" bodyfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" bodystart="112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sensirion__gas__index__algorithm_8h_1a0d9591d379984fff1e3040933d49a2e2" prot="public" static="no">
        <name>GasIndexAlgorithm_TUNING_STD_INITIAL_MAX</name>
        <initializer>(5000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" line="113" column="9" bodyfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sensirion__gas__index__algorithm_8h_1ab369c8bd560e41f01010d2901feabce4" prot="public" static="no">
        <name>GasIndexAlgorithm_TUNING_GAIN_FACTOR_MIN</name>
        <initializer>(1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" line="114" column="9" bodyfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" bodystart="114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sensirion__gas__index__algorithm_8h_1ac172efa5a9b092b395f8850acd804a72" prot="public" static="no">
        <name>GasIndexAlgorithm_TUNING_GAIN_FACTOR_MAX</name>
        <initializer>(1000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" line="115" column="9" bodyfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" bodystart="115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sensirion__gas__index__algorithm_8h_1ae668ba617dc6dea8b7a94981868930ef" prot="public" static="no">
        <name>GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING</name>
        <initializer>(64.f)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" line="116" column="9" bodyfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" bodystart="116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="sensirion__gas__index__algorithm_8h_1a2c5f1fd825776b93ab125f3a42144f63" prot="public" static="no">
        <name>GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING</name>
        <initializer>    (8.f)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" line="117" column="9" bodyfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" bodystart="117" bodyend="118"/>
      </memberdef>
      <memberdef kind="define" id="sensirion__gas__index__algorithm_8h_1a44325df492b1c248d312e2c33609d898" prot="public" static="no">
        <name>GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX</name>
        <initializer>(32767.f)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" line="119" column="9" bodyfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" bodystart="119" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="sensirion__gas__index__algorithm_8h_1a39e8ff626b9de149244ea53418b97f47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void GasIndexAlgorithm_init</definition>
        <argsstring>(GasIndexAlgorithmParams *params, int32_t algorithm_type)</argsstring>
        <name>GasIndexAlgorithm_init</name>
        <param>
          <type><ref refid="struct_gas_index_algorithm_params" kindref="compound">GasIndexAlgorithmParams</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>algorithm_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialize the gas index algorithm parameters for the specified algorithm type and reset its internal states. Call this once at the beginning. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <ref refid="struct_gas_index_algorithm_params" kindref="compound">GasIndexAlgorithmParams</ref> struct </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>algorithm_type</parametername>
</parameternamelist>
<parameterdescription>
<para>0 (GasIndexAlgorithm_ALGORITHM_TYPE_VOC) for VOC or 1 (GasIndexAlgorithm_ALGORITHM_TYPE_NOX) for NOx </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" line="175" column="6" bodyfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.c" bodystart="105" bodyend="109" declfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" declline="175" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="sensirion__gas__index__algorithm_8h_1aa5031aa985c972e4428bc9c8a73f0f49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void GasIndexAlgorithm_init_with_sampling_interval</definition>
        <argsstring>(GasIndexAlgorithmParams *params, int32_t algorithm_type, float sampling_interval)</argsstring>
        <name>GasIndexAlgorithm_init_with_sampling_interval</name>
        <param>
          <type><ref refid="struct_gas_index_algorithm_params" kindref="compound">GasIndexAlgorithmParams</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>algorithm_type</declname>
        </param>
        <param>
          <type>float</type>
          <declname>sampling_interval</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialize the gas index algorithm parameters for the specified algorithm type and reset its internal states. Call this once at the beginning. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <ref refid="struct_gas_index_algorithm_params" kindref="compound">GasIndexAlgorithmParams</ref> struct </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>algorithm_type</parametername>
</parameternamelist>
<parameterdescription>
<para>0 (GasIndexAlgorithm_ALGORITHM_TYPE_VOC) for VOC or 1 (GasIndexAlgorithm_ALGORITHM_TYPE_NOX) for NOx </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sampling_interval</parametername>
</parameternamelist>
<parameterdescription>
<para>The sampling interval in seconds the algorithm is called. Tested for 1s and 10s. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" line="187" column="6" bodyfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.c" bodystart="74" bodyend="103" declfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" declline="187" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="sensirion__gas__index__algorithm_8h_1a384a6c2521ab3ffea737ca6aca9ba95a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void GasIndexAlgorithm_reset</definition>
        <argsstring>(GasIndexAlgorithmParams *params)</argsstring>
        <name>GasIndexAlgorithm_reset</name>
        <param>
          <type><ref refid="struct_gas_index_algorithm_params" kindref="compound">GasIndexAlgorithmParams</ref> *</type>
          <declname>params</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reset the internal states of the gas index algorithm. Previously set tuning parameters are preserved. Call this when resuming operation after a measurement interruption. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <ref refid="struct_gas_index_algorithm_params" kindref="compound">GasIndexAlgorithmParams</ref> struct </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" line="197" column="6" bodyfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.c" bodystart="111" bodyend="116" declfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" declline="197" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="sensirion__gas__index__algorithm_8h_1ae0454dee5140c70072c0bd59f168f4bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void GasIndexAlgorithm_get_states</definition>
        <argsstring>(const GasIndexAlgorithmParams *params, float *state0, float *state1)</argsstring>
        <name>GasIndexAlgorithm_get_states</name>
        <param>
          <type>const <ref refid="struct_gas_index_algorithm_params" kindref="compound">GasIndexAlgorithmParams</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>state0</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>state1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get current algorithm states. Retrieved values can be used in GasIndexAlgorithm_set_states() to resume operation after a short interruption, skipping initial learning phase. NOTE: This feature can only be used for VOC algorithm type and after at least 3 hours of continuous operation. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <ref refid="struct_gas_index_algorithm_params" kindref="compound">GasIndexAlgorithmParams</ref> struct </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>state0</parametername>
</parameternamelist>
<parameterdescription>
<para>State0 to be stored </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>state1</parametername>
</parameternamelist>
<parameterdescription>
<para>State1 to be stored </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" line="209" column="6" bodyfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.c" bodystart="143" bodyend="149" declfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" declline="209" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="sensirion__gas__index__algorithm_8h_1a96468fc0a7cd6e1a12025a62dffdd0fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void GasIndexAlgorithm_set_states</definition>
        <argsstring>(GasIndexAlgorithmParams *params, float state0, float state1)</argsstring>
        <name>GasIndexAlgorithm_set_states</name>
        <param>
          <type><ref refid="struct_gas_index_algorithm_params" kindref="compound">GasIndexAlgorithmParams</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type>float</type>
          <declname>state0</declname>
        </param>
        <param>
          <type>float</type>
          <declname>state1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set previously retrieved algorithm states to resume operation after a short interruption, skipping initial learning phase. This feature should not be used after interruptions of more than 10 minutes. Call this once after GasIndexAlgorithm_init() or GasIndexAlgorithm_reset() and the optional GasIndexAlgorithm_set_tuning_parameters(), if desired. Otherwise, the algorithm will start with initial learning phase. NOTE: This feature can only be used for VOC algorithm type. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <ref refid="struct_gas_index_algorithm_params" kindref="compound">GasIndexAlgorithmParams</ref> struct </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>state0</parametername>
</parameternamelist>
<parameterdescription>
<para>State0 to be restored </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>state1</parametername>
</parameternamelist>
<parameterdescription>
<para>State1 to be restored </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" line="224" column="6" bodyfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.c" bodystart="151" bodyend="160" declfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" declline="224" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="sensirion__gas__index__algorithm_8h_1a4bef9d1a53546711018b907cea278dac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void GasIndexAlgorithm_set_tuning_parameters</definition>
        <argsstring>(GasIndexAlgorithmParams *params, int32_t index_offset, int32_t learning_time_offset_hours, int32_t learning_time_gain_hours, int32_t gating_max_duration_minutes, int32_t std_initial, int32_t gain_factor)</argsstring>
        <name>GasIndexAlgorithm_set_tuning_parameters</name>
        <param>
          <type><ref refid="struct_gas_index_algorithm_params" kindref="compound">GasIndexAlgorithmParams</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>index_offset</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>learning_time_offset_hours</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>learning_time_gain_hours</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>gating_max_duration_minutes</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>std_initial</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>gain_factor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set parameters to customize the gas index algorithm. Call this once after GasIndexAlgorithm_init() and before optional GasIndexAlgorithm_set_states(), if desired. Otherwise, the default values will be used.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <ref refid="struct_gas_index_algorithm_params" kindref="compound">GasIndexAlgorithmParams</ref> struct </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index_offset</parametername>
</parameternamelist>
<parameterdescription>
<para>Gas index representing typical (average) conditions. Range 1..250, default 100 for VOC and 1 for NOx </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>learning_time_offset_hours</parametername>
</parameternamelist>
<parameterdescription>
<para>Time constant of long-term estimator for offset. Past events will be forgotten after about twice the learning time. Range 1..1000 [hours], default 12 [hours] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>learning_time_gain_hours</parametername>
</parameternamelist>
<parameterdescription>
<para>Time constant of long-term estimator for gain. Past events will be forgotten after about twice the learning time. Range 1..1000 [hours], default 12 [hours] NOTE: This value is not relevant for NOx algorithm type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gating_max_duration_minutes</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum duration of gating (freeze of estimator during high gas index signal). 0 (no gating) or range 1..3000 [minutes], default 180 [minutes] for VOC and 720 [minutes] for NOx </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>std_initial</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial estimate for standard deviation. Lower value boosts events during initial learning period, but may result in larger device-to-device variations. Range 10..5000, default 50 NOTE: This value is not relevant for NOx algorithm type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gain_factor</parametername>
</parameternamelist>
<parameterdescription>
<para>Factor used to scale applied gain value when calculating gas index. Range 1..1000, default 230 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" line="263" column="6" bodyfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.c" bodystart="162" bodyend="176" declfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" declline="263" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="sensirion__gas__index__algorithm_8h_1a409f98c042ef6e200fb8c735e521664c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void GasIndexAlgorithm_get_tuning_parameters</definition>
        <argsstring>(const GasIndexAlgorithmParams *params, int32_t *index_offset, int32_t *learning_time_offset_hours, int32_t *learning_time_gain_hours, int32_t *gating_max_duration_minutes, int32_t *std_initial, int32_t *gain_factor)</argsstring>
        <name>GasIndexAlgorithm_get_tuning_parameters</name>
        <param>
          <type>const <ref refid="struct_gas_index_algorithm_params" kindref="compound">GasIndexAlgorithmParams</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>index_offset</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>learning_time_offset_hours</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>learning_time_gain_hours</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>gating_max_duration_minutes</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>std_initial</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>gain_factor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get current parameters to customize the gas index algorithm. Refer to GasIndexAlgorithm_set_tuning_parameters() for description of the parameters. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" line="274" column="6" bodyfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.c" bodystart="178" bodyend="192" declfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" declline="274" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="sensirion__gas__index__algorithm_8h_1a52bb483ecbb1f70efe8d353219e5ae22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void GasIndexAlgorithm_get_sampling_interval</definition>
        <argsstring>(const GasIndexAlgorithmParams *params, float *sampling_interval)</argsstring>
        <name>GasIndexAlgorithm_get_sampling_interval</name>
        <param>
          <type>const <ref refid="struct_gas_index_algorithm_params" kindref="compound">GasIndexAlgorithmParams</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>sampling_interval</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the sampling interval parameter used by the algorithm. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" line="283" column="6" bodyfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.c" bodystart="138" bodyend="141" declfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" declline="283" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="sensirion__gas__index__algorithm_8h_1a4be92e48685ba183966d2612ce33528c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void GasIndexAlgorithm_process</definition>
        <argsstring>(GasIndexAlgorithmParams *params, int32_t sraw, int32_t *gas_index)</argsstring>
        <name>GasIndexAlgorithm_process</name>
        <param>
          <type><ref refid="struct_gas_index_algorithm_params" kindref="compound">GasIndexAlgorithmParams</ref> *</type>
          <declname>params</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>sraw</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>gas_index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate the gas index value from the raw sensor value.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the <ref refid="struct_gas_index_algorithm_params" kindref="compound">GasIndexAlgorithmParams</ref> struct </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sraw</parametername>
</parameternamelist>
<parameterdescription>
<para>Raw value from the SGP4x sensor </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gas_index</parametername>
</parameternamelist>
<parameterdescription>
<para>Calculated gas index value from the raw sensor value. Zero during initial blackout period and 1..500 afterwards </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" line="294" column="6" bodyfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.c" bodystart="194" bodyend="235" declfile="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h" declline="294" declcolumn="6"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2022,<sp/>Sensirion<sp/>AG</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright<sp/>notice,<sp/>this</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/><sp/><sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright<sp/>notice,</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/><sp/><sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the<sp/>documentation</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/><sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>*<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Sensirion<sp/>AG<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/><sp/><sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/><sp/><sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>HOLDER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>https://github.com/Sensirion/gas-index-algorithm/blob/master/README.md</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*<sp/></highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>GASINDEXALGORITHM_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GASINDEXALGORITHM_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__STDC_VERSION__<sp/>&gt;=<sp/>199901L</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdbool.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>bool<sp/>int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>true<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>false<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>__STDC_VERSION__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/></highlight><highlight class="comment">//<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Should<sp/>be<sp/>set<sp/>by<sp/>the<sp/>building<sp/>toolchain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>LIBRARY_VERSION_NAME</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LIBRARY_VERSION_NAME<sp/>&quot;3.2.0&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GasIndexAlgorithm_ALGORITHM_TYPE_VOC<sp/>(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GasIndexAlgorithm_ALGORITHM_TYPE_NOX<sp/>(1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GasIndexAlgorithm_DEFAULT_SAMPLING_INTERVAL<sp/>(1.f)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GasIndexAlgorithm_INITIAL_BLACKOUT<sp/>(45.f)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GasIndexAlgorithm_INDEX_GAIN<sp/>(230.f)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GasIndexAlgorithm_SRAW_STD_INITIAL<sp/>(50.f)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GasIndexAlgorithm_SRAW_STD_BONUS_VOC<sp/>(220.f)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GasIndexAlgorithm_SRAW_STD_NOX<sp/>(2000.f)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GasIndexAlgorithm_TAU_MEAN_HOURS<sp/>(12.f)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GasIndexAlgorithm_TAU_VARIANCE_HOURS<sp/>(12.f)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC<sp/>(20.f)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX<sp/>(1200.f)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GasIndexAlgorithm_INIT_DURATION_MEAN_VOC<sp/>((3600.f<sp/>*<sp/>0.75f))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GasIndexAlgorithm_INIT_DURATION_MEAN_NOX<sp/>((3600.f<sp/>*<sp/>4.75f))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GasIndexAlgorithm_INIT_TRANSITION_MEAN<sp/>(0.01f)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GasIndexAlgorithm_TAU_INITIAL_VARIANCE<sp/>(2500.f)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GasIndexAlgorithm_INIT_DURATION_VARIANCE_VOC<sp/>((3600.f<sp/>*<sp/>1.45f))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GasIndexAlgorithm_INIT_DURATION_VARIANCE_NOX<sp/>((3600.f<sp/>*<sp/>5.70f))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GasIndexAlgorithm_INIT_TRANSITION_VARIANCE<sp/>(0.01f)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GasIndexAlgorithm_GATING_THRESHOLD_VOC<sp/>(340.f)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GasIndexAlgorithm_GATING_THRESHOLD_NOX<sp/>(30.f)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GasIndexAlgorithm_GATING_THRESHOLD_INITIAL<sp/>(510.f)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION<sp/>(0.09f)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GasIndexAlgorithm_GATING_VOC_MAX_DURATION_MINUTES<sp/>((60.f<sp/>*<sp/>3.f))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GasIndexAlgorithm_GATING_NOX_MAX_DURATION_MINUTES<sp/>((60.f<sp/>*<sp/>12.f))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GasIndexAlgorithm_GATING_MAX_RATIO<sp/>(0.3f)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GasIndexAlgorithm_SIGMOID_L<sp/>(500.f)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GasIndexAlgorithm_SIGMOID_K_VOC<sp/>(-0.0065f)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GasIndexAlgorithm_SIGMOID_X0_VOC<sp/>(213.f)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GasIndexAlgorithm_SIGMOID_K_NOX<sp/>(-0.0101f)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GasIndexAlgorithm_SIGMOID_X0_NOX<sp/>(614.f)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT<sp/>(100.f)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT<sp/>(1.f)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GasIndexAlgorithm_LP_TAU_FAST<sp/>(20.0f)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GasIndexAlgorithm_LP_TAU_SLOW<sp/>(500.0f)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GasIndexAlgorithm_LP_ALPHA<sp/>(-0.2f)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GasIndexAlgorithm_VOC_SRAW_MINIMUM<sp/>(20000)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GasIndexAlgorithm_NOX_SRAW_MINIMUM<sp/>(10000)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GasIndexAlgorithm_PERSISTENCE_UPTIME_GAMMA<sp/>((3.f<sp/>*<sp/>3600.f))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GasIndexAlgorithm_TUNING_INDEX_OFFSET_MIN<sp/>(1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GasIndexAlgorithm_TUNING_INDEX_OFFSET_MAX<sp/>(250)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GasIndexAlgorithm_TUNING_LEARNING_TIME_OFFSET_HOURS_MIN<sp/>(1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GasIndexAlgorithm_TUNING_LEARNING_TIME_OFFSET_HOURS_MAX<sp/>(1000)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GasIndexAlgorithm_TUNING_LEARNING_TIME_GAIN_HOURS_MIN<sp/>(1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GasIndexAlgorithm_TUNING_LEARNING_TIME_GAIN_HOURS_MAX<sp/>(1000)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GasIndexAlgorithm_TUNING_GATING_MAX_DURATION_MINUTES_MIN<sp/>(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GasIndexAlgorithm_TUNING_GATING_MAX_DURATION_MINUTES_MAX<sp/>(3000)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GasIndexAlgorithm_TUNING_STD_INITIAL_MIN<sp/>(10)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GasIndexAlgorithm_TUNING_STD_INITIAL_MAX<sp/>(5000)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GasIndexAlgorithm_TUNING_GAIN_FACTOR_MIN<sp/>(1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GasIndexAlgorithm_TUNING_GAIN_FACTOR_MAX<sp/>(1000)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING<sp/>(64.f)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING<sp/>\</highlight></codeline>
<codeline lineno="118"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(8.f)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX<sp/>(32767.f)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="124" refid="struct_gas_index_algorithm_params" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mAlgorithm_Type;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>mSamplingInterval;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>mIndex_Offset;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>mSraw_Minimum;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>mGating_Max_Duration_Minutes;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>mInit_Duration_Mean;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>mInit_Duration_Variance;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>mGating_Threshold;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>mIndex_Gain;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>mTau_Mean_Hours;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>mTau_Variance_Hours;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>mSraw_Std_Initial;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>mUptime;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>mSraw;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>mGas_Index;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>m_Mean_Variance_Estimator___Initialized;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>m_Mean_Variance_Estimator___Mean;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>m_Mean_Variance_Estimator___Sraw_Offset;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>m_Mean_Variance_Estimator___Std;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>m_Mean_Variance_Estimator___Gamma_Mean;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>m_Mean_Variance_Estimator___Gamma_Variance;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>m_Mean_Variance_Estimator___Gamma_Initial_Mean;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>m_Mean_Variance_Estimator___Gamma_Initial_Variance;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>m_Mean_Variance_Estimator__Gamma_Mean;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>m_Mean_Variance_Estimator__Gamma_Variance;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>m_Mean_Variance_Estimator___Uptime_Gamma;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>m_Mean_Variance_Estimator___Uptime_Gating;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>m_Mean_Variance_Estimator___Gating_Duration_Minutes;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>m_Mean_Variance_Estimator___Sigmoid__K;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>m_Mean_Variance_Estimator___Sigmoid__X0;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>m_Mox_Model__Sraw_Std;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>m_Mox_Model__Sraw_Mean;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>m_Sigmoid_Scaled__K;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>m_Sigmoid_Scaled__X0;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>m_Sigmoid_Scaled__Offset_Default;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>m_Adaptive_Lowpass__A1;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>m_Adaptive_Lowpass__A2;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>m_Adaptive_Lowpass___Initialized;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>m_Adaptive_Lowpass___X1;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>m_Adaptive_Lowpass___X2;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>m_Adaptive_Lowpass___X3;</highlight></codeline>
<codeline lineno="166"><highlight class="normal">}<sp/><ref refid="struct_gas_index_algorithm_params" kindref="compound">GasIndexAlgorithmParams</ref>;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GasIndexAlgorithm_init(<ref refid="struct_gas_index_algorithm_params" kindref="compound">GasIndexAlgorithmParams</ref>*<sp/>params,</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32_t<sp/>algorithm_type);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GasIndexAlgorithm_init_with_sampling_interval(</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_gas_index_algorithm_params" kindref="compound">GasIndexAlgorithmParams</ref>*<sp/>params,<sp/>int32_t<sp/>algorithm_type,</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>sampling_interval);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GasIndexAlgorithm_reset(<ref refid="struct_gas_index_algorithm_params" kindref="compound">GasIndexAlgorithmParams</ref>*<sp/>params);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GasIndexAlgorithm_get_states(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_gas_index_algorithm_params" kindref="compound">GasIndexAlgorithmParams</ref>*<sp/>params,</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>state0,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>state1);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GasIndexAlgorithm_set_states(<ref refid="struct_gas_index_algorithm_params" kindref="compound">GasIndexAlgorithmParams</ref>*<sp/>params,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>state0,</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>state1);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GasIndexAlgorithm_set_tuning_parameters(</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_gas_index_algorithm_params" kindref="compound">GasIndexAlgorithmParams</ref>*<sp/>params,<sp/>int32_t<sp/>index_offset,</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>learning_time_offset_hours,<sp/>int32_t<sp/>learning_time_gain_hours,</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>gating_max_duration_minutes,<sp/>int32_t<sp/>std_initial,</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>gain_factor);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GasIndexAlgorithm_get_tuning_parameters(</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_gas_index_algorithm_params" kindref="compound">GasIndexAlgorithmParams</ref>*<sp/>params,<sp/>int32_t*<sp/>index_offset,</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t*<sp/>learning_time_offset_hours,<sp/>int32_t*<sp/>learning_time_gain_hours,</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t*<sp/>gating_max_duration_minutes,<sp/>int32_t*<sp/>std_initial,</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t*<sp/>gain_factor);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GasIndexAlgorithm_get_sampling_interval(</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_gas_index_algorithm_params" kindref="compound">GasIndexAlgorithmParams</ref>*<sp/>params,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/>sampling_interval);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GasIndexAlgorithm_process(<ref refid="struct_gas_index_algorithm_params" kindref="compound">GasIndexAlgorithmParams</ref>*<sp/>params,<sp/>int32_t<sp/>sraw,</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32_t*<sp/>gas_index);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>GASINDEXALGORITHM_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal">}</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="components/utilities/sensirion_gas_index_algorithm/sensirion_gas_index_algorithm.h"/>
  </compounddef>
</doxygen>
