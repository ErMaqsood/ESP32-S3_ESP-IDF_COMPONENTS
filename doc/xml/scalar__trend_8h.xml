<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="scalar__trend_8h" kind="file" language="C++">
    <compoundname>scalar_trend.h</compoundname>
    <includes local="no">stdio.h</includes>
    <includes local="no">esp_check.h</includes>
    <includedby refid="scalar__trend_8c" local="no">components/utilities/esp_scalar_trend/scalar_trend.c</includedby>
    <incdepgraph>
      <node id="1">
        <label>components/utilities/esp_scalar_trend/scalar_trend.h</label>
        <link refid="scalar__trend_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>esp_check.h</label>
      </node>
      <node id="2">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>components/utilities/esp_scalar_trend/scalar_trend.c</label>
        <link refid="scalar__trend_8c"/>
      </node>
      <node id="1">
        <label>components/utilities/esp_scalar_trend/scalar_trend.h</label>
        <link refid="scalar__trend_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structscalar__trend__t" prot="public">scalar_trend_t</innerclass>
    <sectiondef kind="enum">
      <memberdef kind="enum" id="scalar__trend_8h_1af75d6701beee22d523b10231cd5ccde6" prot="public" static="no" strong="no">
        <type></type>
        <name>scalar_trend_codes_tag</name>
        <enumvalue id="scalar__trend_8h_1af75d6701beee22d523b10231cd5ccde6a7052f4bb2853c43aedeb405a507bcc93" prot="public">
          <name>SCALAR_TREND_CODE_UNKNOWN</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>1-hr Change unknown </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="scalar__trend_8h_1af75d6701beee22d523b10231cd5ccde6a8c869fa1e69a945c3ab0383714e06f5e" prot="public">
          <name>SCALAR_TREND_CODE_RISING</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>rising </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="scalar__trend_8h_1af75d6701beee22d523b10231cd5ccde6ae11a5ca94ee028514840445697e3c4aa" prot="public">
          <name>SCALAR_TREND_CODE_STEADY</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>steady </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="scalar__trend_8h_1af75d6701beee22d523b10231cd5ccde6a21be256704957dd20edca8e0c0334bca" prot="public">
          <name>SCALAR_TREND_CODE_FALLING</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>falling </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Scalar trend codes enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/utilities/esp_scalar_trend/scalar_trend.h" line="54" column="1" bodyfile="components/utilities/esp_scalar_trend/scalar_trend.h" bodystart="54" bodyend="59"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="scalar__trend_8h_1a0314c0963d877723faaf9ea72b22afc1" prot="public" static="no">
        <type>enum <ref refid="scalar__trend_8h_1af75d6701beee22d523b10231cd5ccde6" kindref="member">scalar_trend_codes_tag</ref></type>
        <definition>typedef enum scalar_trend_codes_tag scalar_trend_codes_t</definition>
        <argsstring></argsstring>
        <name>scalar_trend_codes_t</name>
        <briefdescription>
<para>Scalar trend codes enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/utilities/esp_scalar_trend/scalar_trend.h" line="59" column="22"/>
      </memberdef>
      <memberdef kind="typedef" id="scalar__trend_8h_1a6e3822202f5893f93b21eb1c105330a1" prot="public" static="no">
        <type>struct scalar_trend_t</type>
        <definition>typedef struct scalar_trend_t scalar_trend_t</definition>
        <argsstring></argsstring>
        <name>scalar_trend_t</name>
        <briefdescription>
<para>Scalar trend type definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/utilities/esp_scalar_trend/scalar_trend.h" line="74" column="29" bodyfile="components/utilities/esp_scalar_trend/scalar_trend.h" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="scalar__trend_8h_1acf8da9d0063860556f3774b0259b7b5b" prot="public" static="no">
        <type>struct <ref refid="structscalar__trend__t" kindref="compound">scalar_trend_t</ref> *</type>
        <definition>typedef struct scalar_trend_t* scalar_trend_handle_t</definition>
        <argsstring></argsstring>
        <name>scalar_trend_handle_t</name>
        <briefdescription>
<para>Scalar trend handle definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/utilities/esp_scalar_trend/scalar_trend.h" line="79" column="29" bodyfile="components/utilities/esp_scalar_trend/scalar_trend.h" bodystart="79" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="scalar__trend_8h_1a0b324bd1c5a54edd2fc7af10c1afcd4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * scalar_trend_code_to_string</definition>
        <argsstring>(const scalar_trend_codes_t code)</argsstring>
        <name>scalar_trend_code_to_string</name>
        <param>
          <type>const <ref refid="scalar__trend_8h_1a0314c0963d877723faaf9ea72b22afc1" kindref="member">scalar_trend_codes_t</ref></type>
          <declname>code</declname>
        </param>
        <briefdescription>
<para>Converts <computeroutput><ref refid="scalar__trend_8h_1a0314c0963d877723faaf9ea72b22afc1" kindref="member">scalar_trend_codes_t</ref></computeroutput> enumerator trend code to string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>code</parametername>
</parameternamelist>
<parameterdescription>
<para>Scalar trend code to convert to a string. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>const char* String representation of the scalar trend code. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/utilities/esp_scalar_trend/scalar_trend.h" line="87" column="12" bodyfile="components/utilities/esp_scalar_trend/scalar_trend.c" bodystart="140" bodyend="153" declfile="components/utilities/esp_scalar_trend/scalar_trend.h" declline="87" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="scalar__trend_8h_1aa371e0515d1b70d866ce306f1eead839" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t scalar_trend_init</definition>
        <argsstring>(const uint16_t samples_size, scalar_trend_handle_t *scalar_trend_handle)</argsstring>
        <name>scalar_trend_init</name>
        <param>
          <type>const uint16_t</type>
          <declname>samples_size</declname>
        </param>
        <param>
          <type><ref refid="scalar__trend_8h_1acf8da9d0063860556f3774b0259b7b5b" kindref="member">scalar_trend_handle_t</ref> *</type>
          <declname>scalar_trend_handle</declname>
        </param>
        <briefdescription>
<para>Initializes a scalar trend handle by size of the 1-hr samples to analyze. The size of the samples is calculated from the sampling rate. <linebreak/>
 As an example, if the sampling rate is once every minute, the size of the samples buffer should be 60 e.g., one (1) hour. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>samples_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Scalar trend samples buffer size. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scalar_trend_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Scalar trend handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/utilities/esp_scalar_trend/scalar_trend.h" line="99" column="11" bodyfile="components/utilities/esp_scalar_trend/scalar_trend.c" bodystart="155" bodyend="182" declfile="components/utilities/esp_scalar_trend/scalar_trend.h" declline="99" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="scalar__trend_8h_1a7b295a1a8e88e57d5a6ed813e536d97d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t scalar_trend_analysis</definition>
        <argsstring>(scalar_trend_handle_t scalar_trend_handle, const float sample, scalar_trend_codes_t *const code)</argsstring>
        <name>scalar_trend_analysis</name>
        <param>
          <type><ref refid="scalar__trend_8h_1acf8da9d0063860556f3774b0259b7b5b" kindref="member">scalar_trend_handle_t</ref></type>
          <declname>scalar_trend_handle</declname>
        </param>
        <param>
          <type>const float</type>
          <declname>sample</declname>
        </param>
        <param>
          <type><ref refid="scalar__trend_8h_1a0314c0963d877723faaf9ea72b22afc1" kindref="member">scalar_trend_codes_t</ref> *const</type>
          <declname>code</declname>
        </param>
        <briefdescription>
<para>Analyzes historical samples and scalar Trend appears after one (1) hour of operation. The trend codes are a forecast of the 3-hr change based on the previous 1-hour history. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scalar_trend_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Scalar trend handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sample</parametername>
</parameternamelist>
<parameterdescription>
<para>Scalar sample to push onto the samples stack. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>code</parametername>
</parameternamelist>
<parameterdescription>
<para>Scalar trend code of one (1) hour analysis. Scalar trend code <computeroutput>SCALAR_TREND_UNKNOWN</computeroutput> is reported when there is an insufficient number of samples to analyze. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/utilities/esp_scalar_trend/scalar_trend.h" line="112" column="11" bodyfile="components/utilities/esp_scalar_trend/scalar_trend.c" bodystart="184" bodyend="348" declfile="components/utilities/esp_scalar_trend/scalar_trend.h" declline="112" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="scalar__trend_8h_1a341bf47439655e97ec906a8eaef17b60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t scalar_trend_reset</definition>
        <argsstring>(scalar_trend_handle_t scalar_trend_handle)</argsstring>
        <name>scalar_trend_reset</name>
        <param>
          <type><ref refid="scalar__trend_8h_1acf8da9d0063860556f3774b0259b7b5b" kindref="member">scalar_trend_handle_t</ref></type>
          <declname>scalar_trend_handle</declname>
        </param>
        <briefdescription>
<para>Purges scalar trend samples array and resets samples counter. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scalar_trend_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Scalar trend handle </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/utilities/esp_scalar_trend/scalar_trend.h" line="122" column="11" bodyfile="components/utilities/esp_scalar_trend/scalar_trend.c" bodystart="350" bodyend="363" declfile="components/utilities/esp_scalar_trend/scalar_trend.h" declline="122" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="scalar__trend_8h_1ab5db8dcb60daf60e2dd4492a368cff2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t scalar_trend_delete</definition>
        <argsstring>(scalar_trend_handle_t scalar_trend_handle)</argsstring>
        <name>scalar_trend_delete</name>
        <param>
          <type><ref refid="scalar__trend_8h_1acf8da9d0063860556f3774b0259b7b5b" kindref="member">scalar_trend_handle_t</ref></type>
          <declname>scalar_trend_handle</declname>
        </param>
        <briefdescription>
<para>Frees scalar trend handle. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scalar_trend_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Scalar trend handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/utilities/esp_scalar_trend/scalar_trend.h" line="130" column="11" bodyfile="components/utilities/esp_scalar_trend/scalar_trend.c" bodystart="365" bodyend="372" declfile="components/utilities/esp_scalar_trend/scalar_trend.h" declline="130" declcolumn="11"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Scalar trend libary</para>
<para>A scalar Trend appears after one (1) hour of operation. The trend codes are a forecast of the 3-hr change based on the previous 1-hour history.</para>
<para>Original source: <ulink url="https://gist.github.com/Paraphraser/c5609f85cc7ee6ecd03ce179fb7f7edb">https://gist.github.com/Paraphraser/c5609f85cc7ee6ecd03ce179fb7f7edb</ulink></para>
<para>Original source code was modified to support the esp-idf framework and includes the left-tailed inverse of the studen&apos;s t-distribution calculation on handle initialization.</para>
<para>Copyright (c) 2024 Eric Gionet (<ulink url="mailto:gionet.c.eric@gmail.com">gionet.c.eric@gmail.com</ulink>)</para>
<para>MIT Licensed as described in the file LICENSE </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>The<sp/>MIT<sp/>License<sp/>(MIT)</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2024<sp/>Eric<sp/>Gionet<sp/>(gionet.c.eric@gmail.com)</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>Permission<sp/>is<sp/>hereby<sp/>granted,<sp/>free<sp/>of<sp/>charge,<sp/>to<sp/>any<sp/>person<sp/>obtaining<sp/>a<sp/>copy</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>of<sp/>this<sp/>software<sp/>and<sp/>associated<sp/>documentation<sp/>files<sp/>(the<sp/>&quot;Software&quot;),<sp/>to<sp/>deal</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>in<sp/>the<sp/>Software<sp/>without<sp/>restriction,<sp/>including<sp/>without<sp/>limitation<sp/>the<sp/>rights</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>to<sp/>use,<sp/>copy,<sp/>modify,<sp/>merge,<sp/>publish,<sp/>distribute,<sp/>sublicense,<sp/>and/or<sp/>sell</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>copies<sp/>of<sp/>the<sp/>Software,<sp/>and<sp/>to<sp/>permit<sp/>persons<sp/>to<sp/>whom<sp/>the<sp/>Software<sp/>is</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>furnished<sp/>to<sp/>do<sp/>so,<sp/>subject<sp/>to<sp/>the<sp/>following<sp/>conditions:</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>The<sp/>above<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>shall<sp/>be<sp/>included<sp/>in<sp/>all</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>copies<sp/>or<sp/>substantial<sp/>portions<sp/>of<sp/>the<sp/>Software.</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;,<sp/>WITHOUT<sp/>WARRANTY<sp/>OF<sp/>ANY<sp/>KIND,<sp/>EXPRESS<sp/>OR</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>IMPLIED,<sp/>INCLUDING<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO<sp/>THE<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY,</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND<sp/>NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>AUTHORS<sp/>OR<sp/>COPYRIGHT<sp/>HOLDERS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>CLAIM,<sp/>DAMAGES<sp/>OR<sp/>OTHER</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>AN<sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/>FROM,</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>OUT<sp/>OF<sp/>OR<sp/>IN<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER<sp/>DEALINGS<sp/>IN<sp/>THE</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>SOFTWARE.</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__SCALAR_TREND_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__SCALAR_TREND_H__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;esp_check.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="54" refid="scalar__trend_8h_1af75d6701beee22d523b10231cd5ccde6" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="scalar__trend_8h_1af75d6701beee22d523b10231cd5ccde6" kindref="member">scalar_trend_codes_tag</ref><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="55" refid="scalar__trend_8h_1af75d6701beee22d523b10231cd5ccde6a7052f4bb2853c43aedeb405a507bcc93" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="scalar__trend_8h_1af75d6701beee22d523b10231cd5ccde6a7052f4bb2853c43aedeb405a507bcc93" kindref="member">SCALAR_TREND_CODE_UNKNOWN</ref><sp/><sp/><sp/>=<sp/>1,<sp/></highlight></codeline>
<codeline lineno="56" refid="scalar__trend_8h_1af75d6701beee22d523b10231cd5ccde6a8c869fa1e69a945c3ab0383714e06f5e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="scalar__trend_8h_1af75d6701beee22d523b10231cd5ccde6a8c869fa1e69a945c3ab0383714e06f5e" kindref="member">SCALAR_TREND_CODE_RISING</ref><sp/><sp/><sp/><sp/>=<sp/>2,<sp/></highlight></codeline>
<codeline lineno="57" refid="scalar__trend_8h_1af75d6701beee22d523b10231cd5ccde6ae11a5ca94ee028514840445697e3c4aa" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="scalar__trend_8h_1af75d6701beee22d523b10231cd5ccde6ae11a5ca94ee028514840445697e3c4aa" kindref="member">SCALAR_TREND_CODE_STEADY</ref><sp/><sp/><sp/><sp/>=<sp/>3,<sp/></highlight></codeline>
<codeline lineno="58" refid="scalar__trend_8h_1af75d6701beee22d523b10231cd5ccde6a21be256704957dd20edca8e0c0334bca" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="scalar__trend_8h_1af75d6701beee22d523b10231cd5ccde6a21be256704957dd20edca8e0c0334bca" kindref="member">SCALAR_TREND_CODE_FALLING</ref><sp/><sp/><sp/>=<sp/>4<sp/><sp/></highlight></codeline>
<codeline lineno="59" refid="scalar__trend_8h_1a0314c0963d877723faaf9ea72b22afc1" refkind="member"><highlight class="normal">}<sp/><ref refid="scalar__trend_8h_1a0314c0963d877723faaf9ea72b22afc1" kindref="member">scalar_trend_codes_t</ref>;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="64" refid="structscalar__trend__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structscalar__trend__t" kindref="compound">scalar_trend_t</ref><sp/>{</highlight></codeline>
<codeline lineno="65" refid="structscalar__trend__t_1acdf8d68bb16f8752607d6b3069873e51" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structscalar__trend__t_1acdf8d68bb16f8752607d6b3069873e51" kindref="member">critical_t</ref>;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="66" refid="structscalar__trend__t_1a0e025ab0342d54f7a6c806d879b23051" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/><sp/><sp/><sp/><ref refid="structscalar__trend__t_1a0e025ab0342d54f7a6c806d879b23051" kindref="member">samples_count</ref>;<sp/></highlight></codeline>
<codeline lineno="67" refid="structscalar__trend__t_1ae98a41a4f5862e4f0c3afb40d75da0ae" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uint16_t<sp/><sp/><sp/><sp/><ref refid="structscalar__trend__t_1ae98a41a4f5862e4f0c3afb40d75da0ae" kindref="member">samples_size</ref>;<sp/><sp/></highlight></codeline>
<codeline lineno="68" refid="structscalar__trend__t_1a7e88f0a7fee65306124ad95c12916751" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structscalar__trend__t_1a7e88f0a7fee65306124ad95c12916751" kindref="member">samples</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="69"><highlight class="normal">};</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="74" refid="scalar__trend_8h_1a6e3822202f5893f93b21eb1c105330a1" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structscalar__trend__t" kindref="compound">scalar_trend_t</ref><sp/><ref refid="structscalar__trend__t" kindref="compound">scalar_trend_t</ref>;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="79" refid="scalar__trend_8h_1acf8da9d0063860556f3774b0259b7b5b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structscalar__trend__t" kindref="compound">scalar_trend_t</ref><sp/>*<ref refid="scalar__trend_8h_1acf8da9d0063860556f3774b0259b7b5b" kindref="member">scalar_trend_handle_t</ref>;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="scalar__trend_8h_1a0b324bd1c5a54edd2fc7af10c1afcd4e" kindref="member">scalar_trend_code_to_string</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="scalar__trend_8h_1a0314c0963d877723faaf9ea72b22afc1" kindref="member">scalar_trend_codes_t</ref><sp/>code);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal">esp_err_t<sp/><ref refid="scalar__trend_8h_1aa371e0515d1b70d866ce306f1eead839" kindref="member">scalar_trend_init</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/><ref refid="structscalar__trend__t_1ae98a41a4f5862e4f0c3afb40d75da0ae" kindref="member">samples_size</ref>,<sp/><ref refid="scalar__trend_8h_1acf8da9d0063860556f3774b0259b7b5b" kindref="member">scalar_trend_handle_t</ref><sp/>*scalar_trend_handle);</highlight></codeline>
<codeline lineno="112"><highlight class="normal">esp_err_t<sp/><ref refid="scalar__trend_8h_1a7b295a1a8e88e57d5a6ed813e536d97d" kindref="member">scalar_trend_analysis</ref>(<ref refid="scalar__trend_8h_1acf8da9d0063860556f3774b0259b7b5b" kindref="member">scalar_trend_handle_t</ref><sp/>scalar_trend_handle,<sp/></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>sample,<sp/></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="scalar__trend_8h_1a0314c0963d877723faaf9ea72b22afc1" kindref="member">scalar_trend_codes_t</ref><sp/>*</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>code);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal">esp_err_t<sp/><ref refid="scalar__trend_8h_1a341bf47439655e97ec906a8eaef17b60" kindref="member">scalar_trend_reset</ref>(<ref refid="scalar__trend_8h_1acf8da9d0063860556f3774b0259b7b5b" kindref="member">scalar_trend_handle_t</ref><sp/>scalar_trend_handle);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal">esp_err_t<sp/><ref refid="scalar__trend_8h_1ab5db8dcb60daf60e2dd4492a368cff2d" kindref="member">scalar_trend_delete</ref>(<ref refid="scalar__trend_8h_1acf8da9d0063860556f3774b0259b7b5b" kindref="member">scalar_trend_handle_t</ref><sp/>scalar_trend_handle);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal">}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>__SCALAR_TREND_H__</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="components/utilities/esp_scalar_trend/scalar_trend.h"/>
  </compounddef>
</doxygen>
