<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="group___free_r_t_o_s" kind="group">
    <compoundname>FreeRTOS</compoundname>
    <title>task extension</title>
    <innerclass refid="structtime__into__interval__config__tag" prot="public">time_into_interval_config_tag</innerclass>
    <innerclass refid="structtime__into__interval__t" prot="public">time_into_interval_t</innerclass>
    <sectiondef kind="enum">
      <memberdef kind="enum" id="group___free_r_t_o_s_1gada504a9c0f0f4dfe0f199664315cf03e" prot="public" static="no" strong="no">
        <type></type>
        <name>time_into_interval_types_tag</name>
        <enumvalue id="group___free_r_t_o_s_1ggada504a9c0f0f4dfe0f199664315cf03eaebd695763de7ab8ba195c5714c94248b" prot="public">
          <name>TIME_INTO_INTERVAL_SEC</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Time-into-interval in seconds. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___free_r_t_o_s_1ggada504a9c0f0f4dfe0f199664315cf03ea2c749b9f8d47709452ae742faac5b425" prot="public">
          <name>TIME_INTO_INTERVAL_MIN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Time-into-interval in minutes. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___free_r_t_o_s_1ggada504a9c0f0f4dfe0f199664315cf03ea9d879915b4d045c4ada8b90c4001eb04" prot="public">
          <name>TIME_INTO_INTERVAL_HR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Time-into-interval in hours. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Time into interval types enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/schedule/esp_time_into_interval/include/time_into_interval.h" line="57" column="1" bodyfile="components/schedule/esp_time_into_interval/include/time_into_interval.h" bodystart="57" bodyend="61"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group___free_r_t_o_s_1gad0a6a2a318069e1eb5bb480541532a4d" prot="public" static="no">
        <type>enum <ref refid="group___free_r_t_o_s_1gada504a9c0f0f4dfe0f199664315cf03e" kindref="member">time_into_interval_types_tag</ref></type>
        <definition>typedef enum time_into_interval_types_tag time_into_interval_types_t</definition>
        <argsstring></argsstring>
        <name>time_into_interval_types_t</name>
        <briefdescription>
<para>Time into interval types enumerator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/schedule/esp_time_into_interval/include/time_into_interval.h" line="61" column="28"/>
      </memberdef>
      <memberdef kind="typedef" id="group___free_r_t_o_s_1ga6e978e77c6c540b23118c566330e5c98" prot="public" static="no">
        <type>struct <ref refid="structtime__into__interval__config__tag" kindref="compound">time_into_interval_config_tag</ref></type>
        <definition>typedef struct time_into_interval_config_tag time_into_interval_config_t</definition>
        <argsstring></argsstring>
        <name>time_into_interval_config_t</name>
        <briefdescription>
<para>Time-into-interval configuration structure. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/schedule/esp_time_into_interval/include/time_into_interval.h" line="72" column="29"/>
      </memberdef>
      <memberdef kind="typedef" id="group___free_r_t_o_s_1gae4e15ab69f530a7e83dcdf3af9aeba46" prot="public" static="no">
        <type>struct time_into_interval_t</type>
        <definition>typedef struct time_into_interval_t time_into_interval_t</definition>
        <argsstring></argsstring>
        <name>time_into_interval_t</name>
        <briefdescription>
<para>Time-into-interval definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/schedule/esp_time_into_interval/include/time_into_interval.h" line="91" column="35" bodyfile="components/schedule/esp_time_into_interval/include/time_into_interval.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group___free_r_t_o_s_1gaa862ccd8f6519ec10b85b169d3018023" prot="public" static="no">
        <type>struct <ref refid="structtime__into__interval__t" kindref="compound">time_into_interval_t</ref> *</type>
        <definition>typedef struct time_into_interval_t* time_into_interval_handle_t</definition>
        <argsstring></argsstring>
        <name>time_into_interval_handle_t</name>
        <briefdescription>
<para>Time-into-interval handle definition. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/schedule/esp_time_into_interval/include/time_into_interval.h" line="96" column="35" bodyfile="components/schedule/esp_time_into_interval/include/time_into_interval.h" bodystart="96" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="group___free_r_t_o_s_1ga8839638585a6027c6b6004269ce33332" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t time_into_interval_normalize_interval_to_sec</definition>
        <argsstring>(const time_into_interval_types_t interval_type, const uint16_t interval)</argsstring>
        <name>time_into_interval_normalize_interval_to_sec</name>
        <param>
          <type>const <ref refid="group___free_r_t_o_s_1gad0a6a2a318069e1eb5bb480541532a4d" kindref="member">time_into_interval_types_t</ref></type>
          <declname>interval_type</declname>
        </param>
        <param>
          <type>const uint16_t</type>
          <declname>interval</declname>
        </param>
        <briefdescription>
<para>Normalizes time-into-interval period or offset to seconds. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">interval_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Time-into-interval type of interval period or offset. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">interval</parametername>
</parameternamelist>
<parameterdescription>
<para>Time-into-interval period or offset for interval type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>uint64_t Normalized time-into-interval period or offset in seconds. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/schedule/esp_time_into_interval/include/time_into_interval.h" line="107" column="10" bodyfile="components/schedule/esp_time_into_interval/time_into_interval.c" bodystart="133" bodyend="150" declfile="components/schedule/esp_time_into_interval/include/time_into_interval.h" declline="107" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group___free_r_t_o_s_1ga4ea58aff92e03e0999e13b9059db560c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t time_into_interval_normalize_interval_to_msec</definition>
        <argsstring>(const time_into_interval_types_t interval_type, const uint16_t interval)</argsstring>
        <name>time_into_interval_normalize_interval_to_msec</name>
        <param>
          <type>const <ref refid="group___free_r_t_o_s_1gad0a6a2a318069e1eb5bb480541532a4d" kindref="member">time_into_interval_types_t</ref></type>
          <declname>interval_type</declname>
        </param>
        <param>
          <type>const uint16_t</type>
          <declname>interval</declname>
        </param>
        <briefdescription>
<para>Normalizes time-into-interval period or offset to milliseconds. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">interval_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Time-into-interval type of interval period or offset. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">interval</parametername>
</parameternamelist>
<parameterdescription>
<para>Time-into-interval period or offset for interval type. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>uint64_t Normalized time-into-interval period or offset in milli-seconds. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/schedule/esp_time_into_interval/include/time_into_interval.h" line="116" column="10" bodyfile="components/schedule/esp_time_into_interval/time_into_interval.c" bodystart="152" bodyend="169" declfile="components/schedule/esp_time_into_interval/include/time_into_interval.h" declline="116" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group___free_r_t_o_s_1ga982c2457f6151d440ce678d7cfcbc6e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t time_into_interval_get_epoch_timestamp</definition>
        <argsstring>(void)</argsstring>
        <name>time_into_interval_get_epoch_timestamp</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets unix epoch timestamp (UTC) in seconds from system clock. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>uint64_t Unix epoch timestamp (UTC) in seconds or it will return 0-seconds when there is an issue accessing the system clock. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/schedule/esp_time_into_interval/include/time_into_interval.h" line="124" column="10" bodyfile="components/schedule/esp_time_into_interval/time_into_interval.c" bodystart="171" bodyend="181" declfile="components/schedule/esp_time_into_interval/include/time_into_interval.h" declline="124" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group___free_r_t_o_s_1ga19bb96065ad640e8015b423a6ddb5203" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t time_into_interval_get_epoch_timestamp_msec</definition>
        <argsstring>(void)</argsstring>
        <name>time_into_interval_get_epoch_timestamp_msec</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets unix epoch timestamp (UTC) in milliseconds from system clock. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>uint64_t Unix epoch timestamp (UTC) in milliseconds or it will return 0-milli-seconds when there is an issue accessing the system clock. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/schedule/esp_time_into_interval/include/time_into_interval.h" line="132" column="10" bodyfile="components/schedule/esp_time_into_interval/time_into_interval.c" bodystart="183" bodyend="193" declfile="components/schedule/esp_time_into_interval/include/time_into_interval.h" declline="132" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group___free_r_t_o_s_1ga6522ff46a3f8f569a093fbe0c843e733" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t time_into_interval_get_epoch_timestamp_usec</definition>
        <argsstring>(void)</argsstring>
        <name>time_into_interval_get_epoch_timestamp_usec</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets unix epoch timestamp (UTC) in micro-seconds from system clock. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>uint64_t Unix epoch timestamp (UTC) in micro-seconds or it will return 0-micro-seconds when there is an issue accessing the system clock. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/schedule/esp_time_into_interval/include/time_into_interval.h" line="140" column="10" bodyfile="components/schedule/esp_time_into_interval/time_into_interval.c" bodystart="195" bodyend="205" declfile="components/schedule/esp_time_into_interval/include/time_into_interval.h" declline="140" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group___free_r_t_o_s_1ga5a8f66c96d678209be13d05551e03b41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t time_into_interval_set_epoch_timestamp_event</definition>
        <argsstring>(const time_into_interval_types_t interval_type, const uint16_t interval_period, const uint16_t interval_offset, uint64_t *epoch_timestamp)</argsstring>
        <name>time_into_interval_set_epoch_timestamp_event</name>
        <param>
          <type>const <ref refid="group___free_r_t_o_s_1gad0a6a2a318069e1eb5bb480541532a4d" kindref="member">time_into_interval_types_t</ref></type>
          <declname>interval_type</declname>
        </param>
        <param>
          <type>const uint16_t</type>
          <declname>interval_period</declname>
        </param>
        <param>
          <type>const uint16_t</type>
          <declname>interval_offset</declname>
        </param>
        <param>
          <type>uint64_t *</type>
          <declname>epoch_timestamp</declname>
        </param>
        <briefdescription>
<para>Sets the next epoch event timestamp in milli-seconds from system clock based on the time interval type, period, and offset. </para>
        </briefdescription>
        <detaileddescription>
<para>The interval should be divisible by 60 i.e. no remainder if the interval type and period is every 10-seconds, the event will trigger on-time with the system clock i.e. 09:00:00, 09:00:10, 09:00:20, etc.</para>
<para>The interval offset is used to offset the start of the interval period. If the interval type and period is every 5-minutes with a 1-minute offset, the event will trigger on-time with the system clock i.e. 09:01:00, 09:06:00, 09:11:00, etc.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">interval_type</parametername>
</parameternamelist>
<parameterdescription>
<para>Time into interval type (seconds, minutes, hours, etc.). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">interval_period</parametername>
</parameternamelist>
<parameterdescription>
<para>Time into interval period for interval type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">interval_offset</parametername>
</parameternamelist>
<parameterdescription>
<para>Time into interval offset for interval type. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">epoch_timestamp</parametername>
</parameternamelist>
<parameterdescription>
<para>Unix epoch timestamp (UTC) of next event in milli-seconds. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/schedule/esp_time_into_interval/include/time_into_interval.h" line="159" column="11" bodyfile="components/schedule/esp_time_into_interval/time_into_interval.c" bodystart="207" bodyend="283" declfile="components/schedule/esp_time_into_interval/include/time_into_interval.h" declline="159" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group___free_r_t_o_s_1gaea97dc6faeb6a62d513f1770a047e84f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t time_into_interval_init</definition>
        <argsstring>(const time_into_interval_config_t *time_into_interval_config, time_into_interval_handle_t *time_into_interval_handle)</argsstring>
        <name>time_into_interval_init</name>
        <param>
          <type>const <ref refid="group___free_r_t_o_s_1ga6e978e77c6c540b23118c566330e5c98" kindref="member">time_into_interval_config_t</ref> *</type>
          <declname>time_into_interval_config</declname>
        </param>
        <param>
          <type><ref refid="group___free_r_t_o_s_1gaa862ccd8f6519ec10b85b169d3018023" kindref="member">time_into_interval_handle_t</ref> *</type>
          <declname>time_into_interval_handle</declname>
        </param>
        <briefdescription>
<para>Initializes a time-into-interval handle. A time-into-interval is used within a FreeRTOS task subroutine for conditional or task delay based on the configured interval type, period, and offset that is synchronized to the system clock. </para>
        </briefdescription>
        <detaileddescription>
<para>As an example, if a 5-second interval is configured, the <computeroutput>time_into_interval</computeroutput> function will return true every 5-seconds based on the system clock i.e. 12:00:00, 12:00:05, 12:00:10, etc. The <computeroutput>time_into_interval_delay</computeroutput> would delay a task for 5-seconds and behaves like a task scheduler that is synchronized to the system clock.</para>
<para>The interval offset is used to offset the start of the interval period. As an example, if a 5-minute interval with 1-minute offset is configured, the <computeroutput>time_into_interval</computeroutput> function will return true every 5-minutes at 1-minute into the interval based on the system clock i.e. 12:01:00, 12:06:00, 12:11:00, etc.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in"><ref refid="group___free_r_t_o_s_1ga6e978e77c6c540b23118c566330e5c98" kindref="member">time_into_interval_config_t</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>Time-into-interval configuration. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">time_into_interval_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Time-into-interval handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/schedule/esp_time_into_interval/include/time_into_interval.h" line="180" column="11" bodyfile="components/schedule/esp_time_into_interval/time_into_interval.c" bodystart="285" bodyend="328" declfile="components/schedule/esp_time_into_interval/include/time_into_interval.h" declline="180" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group___free_r_t_o_s_1gad8797044bf62fb81d63b0641eb69d0d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool time_into_interval</definition>
        <argsstring>(time_into_interval_handle_t time_into_interval_handle)</argsstring>
        <name>time_into_interval</name>
        <param>
          <type><ref refid="group___free_r_t_o_s_1gaa862ccd8f6519ec10b85b169d3018023" kindref="member">time_into_interval_handle_t</ref></type>
          <declname>time_into_interval_handle</declname>
        </param>
        <briefdescription>
<para>Validates time-into-interval condition based on the configured interval type, period, and offset parameters that is synchronized to the system clock and returns true when the interval has elapsed. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">time_into_interval_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Time-into-interval handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true when time-into-interval condition is valid. </para>
</simplesect>
<simplesect kind="return"><para>false when time-into-interval handle or condition is not valid. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/schedule/esp_time_into_interval/include/time_into_interval.h" line="192" column="6" bodyfile="components/schedule/esp_time_into_interval/time_into_interval.c" bodystart="330" bodyend="363" declfile="components/schedule/esp_time_into_interval/include/time_into_interval.h" declline="192" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group___free_r_t_o_s_1gaff5bdae2635f1eef5f2a5b2b4f15ed70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t time_into_interval_delay</definition>
        <argsstring>(time_into_interval_handle_t time_into_interval_handle)</argsstring>
        <name>time_into_interval_delay</name>
        <param>
          <type><ref refid="group___free_r_t_o_s_1gaa862ccd8f6519ec10b85b169d3018023" kindref="member">time_into_interval_handle_t</ref></type>
          <declname>time_into_interval_handle</declname>
        </param>
        <briefdescription>
<para>Delays the task until the next scheduled task event. This function should be placed after the <computeroutput>for (;;) {</computeroutput> syntax to delay the task based on the configured interval type, period, and offset parameters. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>time_into_interval_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Time-into-interval handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/schedule/esp_time_into_interval/include/time_into_interval.h" line="202" column="11" bodyfile="components/schedule/esp_time_into_interval/time_into_interval.c" bodystart="365" bodyend="412" declfile="components/schedule/esp_time_into_interval/include/time_into_interval.h" declline="202" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group___free_r_t_o_s_1ga67a2453e7554521bf2433e6c7dc97d89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t time_into_interval_get_last_event</definition>
        <argsstring>(time_into_interval_handle_t time_into_interval_handle, uint64_t *epoch_timestamp)</argsstring>
        <name>time_into_interval_get_last_event</name>
        <param>
          <type><ref refid="group___free_r_t_o_s_1gaa862ccd8f6519ec10b85b169d3018023" kindref="member">time_into_interval_handle_t</ref></type>
          <declname>time_into_interval_handle</declname>
        </param>
        <param>
          <type>uint64_t *</type>
          <declname>epoch_timestamp</declname>
        </param>
        <briefdescription>
<para>Gets epoch timestamp (UTC) of the last event in milli-seconds. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>time_into_interval_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Time-into-interval handle. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>epoch_timestamp</parametername>
</parameternamelist>
<parameterdescription>
<para>Unix epoch timestamp (UTC) in milli-seconds of the last event. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/schedule/esp_time_into_interval/include/time_into_interval.h" line="211" column="11" bodyfile="components/schedule/esp_time_into_interval/time_into_interval.c" bodystart="414" bodyend="431" declfile="components/schedule/esp_time_into_interval/include/time_into_interval.h" declline="211" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group___free_r_t_o_s_1gaf78af531a43da234d76d18bd625e2f61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>esp_err_t</type>
        <definition>esp_err_t time_into_interval_delete</definition>
        <argsstring>(time_into_interval_handle_t time_into_interval_handle)</argsstring>
        <name>time_into_interval_delete</name>
        <param>
          <type><ref refid="group___free_r_t_o_s_1gaa862ccd8f6519ec10b85b169d3018023" kindref="member">time_into_interval_handle_t</ref></type>
          <declname>time_into_interval_handle</declname>
        </param>
        <briefdescription>
<para>Deletes the time-into-interval handle and frees up resources. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>time_into_interval_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>Time-into-interval handle. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>esp_err_t ESP_OK on success. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/schedule/esp_time_into_interval/include/time_into_interval.h" line="219" column="11" bodyfile="components/schedule/esp_time_into_interval/time_into_interval.c" bodystart="433" bodyend="440" declfile="components/schedule/esp_time_into_interval/include/time_into_interval.h" declline="219" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group___free_r_t_o_s_1ga2c01efdfcdc21973ae44337092dd43d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * time_into_interval_get_fw_version</definition>
        <argsstring>(void)</argsstring>
        <name>time_into_interval_get_fw_version</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Converts time-into-interval firmware version numbers (major, minor, patch) into a string. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>char* time-into-interval firmware version as a string that is formatted as X.X.X (e.g. 4.0.0). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/schedule/esp_time_into_interval/include/time_into_interval.h" line="227" column="12" bodyfile="components/schedule/esp_time_into_interval/time_into_interval.c" bodystart="442" bodyend="444" declfile="components/schedule/esp_time_into_interval/include/time_into_interval.h" declline="227" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group___free_r_t_o_s_1ga6e7164d22748e5d4e5a486a2679ba124" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t time_into_interval_get_fw_version_number</definition>
        <argsstring>(void)</argsstring>
        <name>time_into_interval_get_fw_version_number</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Converts time-into-interval firmware version numbers (major, minor, patch) into an integer value. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>int32_t time-into-interval firmware version number. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="components/schedule/esp_time_into_interval/include/time_into_interval.h" line="234" column="9" bodyfile="components/schedule/esp_time_into_interval/time_into_interval.c" bodystart="446" bodyend="448" declfile="components/schedule/esp_time_into_interval/include/time_into_interval.h" declline="234" declcolumn="9"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>ESP-IDF FreeRTOS task extension</para>
<para>Copyright (c) 2024 Eric Gionet (<ulink url="mailto:gionet.c.eric@gmail.com">gionet.c.eric@gmail.com</ulink>)</para>
<para>MIT Licensed as described in the file LICENSE </para>
    </detaileddescription>
  </compounddef>
</doxygen>
